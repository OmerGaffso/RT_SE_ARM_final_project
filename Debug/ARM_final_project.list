
ARM_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  0800adb8  0800adb8  0001adb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b01c  0800b01c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b01c  0800b01c  0001b01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b024  0800b024  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b024  0800b024  0001b024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b028  0800b028  0001b028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b02c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011d0  20000070  0800b09c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001240  0800b09c  00021240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183fd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003354  00000000  00000000  0003849d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0003b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  0003cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a34  00000000  00000000  0003dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ca4  00000000  00000000  000666e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee469  00000000  00000000  0007f388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d7f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058a0  00000000  00000000  0016d844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ada0 	.word	0x0800ada0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800ada0 	.word	0x0800ada0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 fb0b 	bl	8001bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f81a 	bl	80005f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init(); 	// DMA init here so it won't turn off when editing settings
 80005c0:	f000 fa34 	bl	8000a2c <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 fab4 	bl	8000b30 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 f9a2 	bl	8000910 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 fa00 	bl	80009d0 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 80005d0:	f000 f96e 	bl	80008b0 <MX_UART4_Init>
  MX_I2C2_Init();
 80005d4:	f000 f8b6 	bl	8000744 <MX_I2C2_Init>
  MX_SPI1_Init();
 80005d8:	f000 f8f4 	bl	80007c4 <MX_SPI1_Init>
  MX_SPI4_Init();
 80005dc:	f000 f930 	bl	8000840 <MX_SPI4_Init>
  MX_DMA_Init();
 80005e0:	f000 fa24 	bl	8000a2c <MX_DMA_Init>
  MX_I2C1_Init();
 80005e4:	f000 f86e 	bl	80006c4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80005e8:	f000 f9c2 	bl	8000970 <MX_USART6_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 80005ec:	f008 fd48 	bl	8009080 <rtg_main>
 80005f0:	e7fc      	b.n	80005ec <main+0x38>
	...

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f009 f87e 	bl	8009704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000618:	f004 fb5c 	bl	8004cd4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	4b27      	ldr	r3, [pc, #156]	; (80006bc <SystemClock_Config+0xc8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a26      	ldr	r2, [pc, #152]	; (80006bc <SystemClock_Config+0xc8>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <SystemClock_Config+0xc8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xcc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <SystemClock_Config+0xcc>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <SystemClock_Config+0xcc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000654:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000668:	2348      	movs	r3, #72	; 0x48
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000670:	2303      	movs	r3, #3
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f004 fb3b 	bl	8004cf4 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 fb9c 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2102      	movs	r1, #2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 fdc9 	bl	800523c <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b0:	f000 fb86 	bl	8000dc0 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_I2C1_Init+0x74>)
 80006ca:	4a1c      	ldr	r2, [pc, #112]	; (800073c <MX_I2C1_Init+0x78>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_I2C1_Init+0x74>)
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <MX_I2C1_Init+0x7c>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 44;
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_I2C1_Init+0x74>)
 80006d6:	222c      	movs	r2, #44	; 0x2c
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_I2C1_Init+0x74>)
 80006dc:	2201      	movs	r2, #1
 80006de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_I2C1_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_I2C1_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C1_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C1_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C1_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fe:	480e      	ldr	r0, [pc, #56]	; (8000738 <MX_I2C1_Init+0x74>)
 8000700:	f002 f9e4 	bl	8002acc <HAL_I2C_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800070a:	f000 fb59 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070e:	2100      	movs	r1, #0
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <MX_I2C1_Init+0x74>)
 8000712:	f004 f8ff 	bl	8004914 <HAL_I2CEx_ConfigAnalogFilter>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800071c:	f000 fb50 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_I2C1_Init+0x74>)
 8000724:	f004 f941 	bl	80049aa <HAL_I2CEx_ConfigDigitalFilter>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800072e:	f000 fb47 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000008c 	.word	0x2000008c
 800073c:	40005400 	.word	0x40005400
 8000740:	00808cd2 	.word	0x00808cd2

08000744 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_I2C2_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_I2C2_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <MX_I2C2_Init+0x7c>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_I2C2_Init+0x74>)
 800075c:	2201      	movs	r2, #1
 800075e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C2_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C2_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000780:	f002 f9a4 	bl	8002acc <HAL_I2C_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800078a:	f000 fb19 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <MX_I2C2_Init+0x74>)
 8000792:	f004 f8bf 	bl	8004914 <HAL_I2CEx_ConfigAnalogFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800079c:	f000 fb10 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_I2C2_Init+0x74>)
 80007a4:	f004 f901 	bl	80049aa <HAL_I2CEx_ConfigDigitalFilter>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 fb07 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000e0 	.word	0x200000e0
 80007bc:	40005800 	.word	0x40005800
 80007c0:	00808cd2 	.word	0x00808cd2

080007c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_SPI1_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_SPI1_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_SPI1_Init+0x74>)
 80007d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_SPI1_Init+0x74>)
 80007de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_SPI1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_SPI1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_SPI1_Init+0x74>)
 80007f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_SPI1_Init+0x74>)
 80007fa:	2228      	movs	r2, #40	; 0x28
 80007fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_SPI1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_SPI1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_SPI1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_SPI1_Init+0x74>)
 8000812:	2207      	movs	r2, #7
 8000814:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_SPI1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_SPI1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_SPI1_Init+0x74>)
 8000824:	f005 fb20 	bl	8005e68 <HAL_SPI_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 fac7 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200002b4 	.word	0x200002b4
 800083c:	40013000 	.word	0x40013000

08000840 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_SPI4_Init+0x68>)
 8000846:	4a19      	ldr	r2, [pc, #100]	; (80008ac <MX_SPI4_Init+0x6c>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_SPI4_Init+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_SPI4_Init+0x68>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_SPI4_Init+0x68>)
 8000858:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800085c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_SPI4_Init+0x68>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_SPI4_Init+0x68>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_SPI4_Init+0x68>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_SPI4_Init+0x68>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_SPI4_Init+0x68>)
 8000878:	2200      	movs	r2, #0
 800087a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_SPI4_Init+0x68>)
 800087e:	2200      	movs	r2, #0
 8000880:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_SPI4_Init+0x68>)
 8000884:	2207      	movs	r2, #7
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_SPI4_Init+0x68>)
 800088a:	2200      	movs	r2, #0
 800088c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_SPI4_Init+0x68>)
 8000890:	2200      	movs	r2, #0
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_SPI4_Init+0x68>)
 8000896:	f005 fae7 	bl	8005e68 <HAL_SPI_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 80008a0:	f000 fa8e 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000318 	.word	0x20000318
 80008ac:	40013400 	.word	0x40013400

080008b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_UART4_Init+0x58>)
 80008b6:	4a15      	ldr	r2, [pc, #84]	; (800090c <MX_UART4_Init+0x5c>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_UART4_Init+0x58>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_UART4_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_UART4_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_UART4_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_UART4_Init+0x58>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <MX_UART4_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_UART4_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <MX_UART4_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_UART4_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_UART4_Init+0x58>)
 80008f4:	f006 fb86 	bl	8007004 <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80008fe:	f000 fa5f 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200004fc 	.word	0x200004fc
 800090c:	40004c00 	.word	0x40004c00

08000910 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <MX_USART3_UART_Init+0x5c>)
 8000918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000954:	f006 fb56 	bl	8007004 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800095e:	f000 fa2f 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000584 	.word	0x20000584
 800096c:	40004800 	.word	0x40004800

08000970 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_USART6_UART_Init+0x58>)
 8000976:	4a15      	ldr	r2, [pc, #84]	; (80009cc <MX_USART6_UART_Init+0x5c>)
 8000978:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_USART6_UART_Init+0x58>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USART6_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_USART6_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART6_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_USART6_UART_Init+0x58>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_USART6_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_USART6_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_USART6_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_USART6_UART_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_USART6_UART_Init+0x58>)
 80009b4:	f006 fb26 	bl	8007004 <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80009be:	f000 f9ff 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000060c 	.word	0x2000060c
 80009cc:	40011400 	.word	0x40011400

080009d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2206      	movs	r2, #6
 80009e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	2202      	movs	r2, #2
 80009e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a14:	f004 f815 	bl	8004a42 <HAL_PCD_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a1e:	f000 f9cf 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000814 	.word	0x20000814

08000a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a32:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <MX_DMA_Init+0x100>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a3d      	ldr	r2, [pc, #244]	; (8000b2c <MX_DMA_Init+0x100>)
 8000a38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <MX_DMA_Init+0x100>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a4a:	4b38      	ldr	r3, [pc, #224]	; (8000b2c <MX_DMA_Init+0x100>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a37      	ldr	r2, [pc, #220]	; (8000b2c <MX_DMA_Init+0x100>)
 8000a50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <MX_DMA_Init+0x100>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	200b      	movs	r0, #11
 8000a68:	f001 fa0f 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a6c:	200b      	movs	r0, #11
 8000a6e:	f001 fa28 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	200d      	movs	r0, #13
 8000a78:	f001 fa07 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a7c:	200d      	movs	r0, #13
 8000a7e:	f001 fa20 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	200e      	movs	r0, #14
 8000a88:	f001 f9ff 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a8c:	200e      	movs	r0, #14
 8000a8e:	f001 fa18 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	200f      	movs	r0, #15
 8000a98:	f001 f9f7 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a9c:	200f      	movs	r0, #15
 8000a9e:	f001 fa10 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2011      	movs	r0, #17
 8000aa8:	f001 f9ef 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000aac:	2011      	movs	r0, #17
 8000aae:	f001 fa08 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	202f      	movs	r0, #47	; 0x2f
 8000ab8:	f001 f9e7 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000abc:	202f      	movs	r0, #47	; 0x2f
 8000abe:	f001 fa00 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2038      	movs	r0, #56	; 0x38
 8000ac8:	f001 f9df 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000acc:	2038      	movs	r0, #56	; 0x38
 8000ace:	f001 f9f8 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2039      	movs	r0, #57	; 0x39
 8000ad8:	f001 f9d7 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000adc:	2039      	movs	r0, #57	; 0x39
 8000ade:	f001 f9f0 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	203a      	movs	r0, #58	; 0x3a
 8000ae8:	f001 f9cf 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000aec:	203a      	movs	r0, #58	; 0x3a
 8000aee:	f001 f9e8 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	203b      	movs	r0, #59	; 0x3b
 8000af8:	f001 f9c7 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000afc:	203b      	movs	r0, #59	; 0x3b
 8000afe:	f001 f9e0 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	203c      	movs	r0, #60	; 0x3c
 8000b08:	f001 f9bf 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000b0c:	203c      	movs	r0, #60	; 0x3c
 8000b0e:	f001 f9d8 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2045      	movs	r0, #69	; 0x45
 8000b18:	f001 f9b7 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b1c:	2045      	movs	r0, #69	; 0x45
 8000b1e:	f001 f9d0 	bl	8001ec2 <HAL_NVIC_EnableIRQ>

}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	; 0x38
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	4b97      	ldr	r3, [pc, #604]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a96      	ldr	r2, [pc, #600]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000b4c:	f043 0304 	orr.w	r3, r3, #4
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b94      	ldr	r3, [pc, #592]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0304 	and.w	r3, r3, #4
 8000b5a:	623b      	str	r3, [r7, #32]
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5e:	4b91      	ldr	r3, [pc, #580]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a90      	ldr	r2, [pc, #576]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b8e      	ldr	r3, [pc, #568]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	61fb      	str	r3, [r7, #28]
 8000b74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	4b8b      	ldr	r3, [pc, #556]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a8a      	ldr	r2, [pc, #552]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b88      	ldr	r3, [pc, #544]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b85      	ldr	r3, [pc, #532]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a84      	ldr	r2, [pc, #528]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b82      	ldr	r3, [pc, #520]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b7f      	ldr	r3, [pc, #508]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a7e      	ldr	r2, [pc, #504]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b7c      	ldr	r3, [pc, #496]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	4b79      	ldr	r3, [pc, #484]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a78      	ldr	r2, [pc, #480]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b76      	ldr	r3, [pc, #472]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	4b73      	ldr	r3, [pc, #460]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a72      	ldr	r2, [pc, #456]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b70      	ldr	r3, [pc, #448]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0308 	and.w	r3, r3, #8
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bee:	4b6d      	ldr	r3, [pc, #436]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a6c      	ldr	r2, [pc, #432]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b6a      	ldr	r3, [pc, #424]	; (8000da4 <MX_GPIO_Init+0x274>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c0c:	4866      	ldr	r0, [pc, #408]	; (8000da8 <MX_GPIO_Init+0x278>)
 8000c0e:	f001 ff43 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2140      	movs	r1, #64	; 0x40
 8000c16:	4865      	ldr	r0, [pc, #404]	; (8000dac <MX_GPIO_Init+0x27c>)
 8000c18:	f001 ff3e 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MASTER_CS_GPIO_Port, MASTER_CS_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c22:	4863      	ldr	r0, [pc, #396]	; (8000db0 <MX_GPIO_Init+0x280>)
 8000c24:	f001 ff38 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	485d      	ldr	r0, [pc, #372]	; (8000db4 <MX_GPIO_Init+0x284>)
 8000c40:	f001 fd7e 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c44:	2332      	movs	r3, #50	; 0x32
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4855      	ldr	r0, [pc, #340]	; (8000db4 <MX_GPIO_Init+0x284>)
 8000c60:	f001 fd6e 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c64:	2386      	movs	r3, #134	; 0x86
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c74:	230b      	movs	r3, #11
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	484c      	ldr	r0, [pc, #304]	; (8000db0 <MX_GPIO_Init+0x280>)
 8000c80:	f001 fd5e 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c84:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4842      	ldr	r0, [pc, #264]	; (8000da8 <MX_GPIO_Init+0x278>)
 8000c9e:	f001 fd4f 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ca2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000cb4:	2308      	movs	r3, #8
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	483e      	ldr	r0, [pc, #248]	; (8000db8 <MX_GPIO_Init+0x288>)
 8000cc0:	f001 fd3e 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd6:	230b      	movs	r3, #11
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4831      	ldr	r0, [pc, #196]	; (8000da8 <MX_GPIO_Init+0x278>)
 8000ce2:	f001 fd2d 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ce6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cec:	2312      	movs	r3, #18
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	482e      	ldr	r0, [pc, #184]	; (8000dbc <MX_GPIO_Init+0x28c>)
 8000d04:	f001 fd1c 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d08:	2340      	movs	r3, #64	; 0x40
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4823      	ldr	r0, [pc, #140]	; (8000dac <MX_GPIO_Init+0x27c>)
 8000d20:	f001 fd0e 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	481d      	ldr	r0, [pc, #116]	; (8000dac <MX_GPIO_Init+0x27c>)
 8000d38:	f001 fd02 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : MASTER_CS_Pin */
  GPIO_InitStruct.Pin = MASTER_CS_Pin;
 8000d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(MASTER_CS_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4816      	ldr	r0, [pc, #88]	; (8000db0 <MX_GPIO_Init+0x280>)
 8000d56:	f001 fcf3 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d5a:	2340      	movs	r3, #64	; 0x40
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4811      	ldr	r0, [pc, #68]	; (8000dbc <MX_GPIO_Init+0x28c>)
 8000d76:	f001 fce3 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d8c:	230b      	movs	r3, #11
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_GPIO_Init+0x27c>)
 8000d98:	f001 fcd2 	bl	8002740 <HAL_GPIO_Init>

}
 8000d9c:	bf00      	nop
 8000d9e:	3738      	adds	r7, #56	; 0x38
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020400 	.word	0x40020400
 8000dac:	40021800 	.word	0x40021800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40020c00 	.word	0x40020c00

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <Error_Handler+0x8>
	...

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_MspInit+0x44>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x44>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x44>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x44>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0ac      	sub	sp, #176	; 0xb0
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	2284      	movs	r2, #132	; 0x84
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f008 fc65 	bl	8009704 <memset>
  if(hi2c->Instance==I2C1)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a57      	ldr	r2, [pc, #348]	; (8000f9c <HAL_I2C_MspInit+0x188>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	f040 80b9 	bne.w	8000fb8 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	4618      	mov	r0, r3
 8000e56:	f004 fc17 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000e60:	f7ff ffae 	bl	8000dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e64:	4b4e      	ldr	r3, [pc, #312]	; (8000fa0 <HAL_I2C_MspInit+0x18c>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	4a4d      	ldr	r2, [pc, #308]	; (8000fa0 <HAL_I2C_MspInit+0x18c>)
 8000e6a:	f043 0302 	orr.w	r3, r3, #2
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e70:	4b4b      	ldr	r3, [pc, #300]	; (8000fa0 <HAL_I2C_MspInit+0x18c>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e84:	2312      	movs	r3, #18
 8000e86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e96:	2304      	movs	r3, #4
 8000e98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4840      	ldr	r0, [pc, #256]	; (8000fa4 <HAL_I2C_MspInit+0x190>)
 8000ea4:	f001 fc4c 	bl	8002740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea8:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <HAL_I2C_MspInit+0x18c>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a3c      	ldr	r2, [pc, #240]	; (8000fa0 <HAL_I2C_MspInit+0x18c>)
 8000eae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb4:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <HAL_I2C_MspInit+0x18c>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000ec2:	4a3a      	ldr	r2, [pc, #232]	; (8000fac <HAL_I2C_MspInit+0x198>)
 8000ec4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ecc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ece:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed4:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eda:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee2:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000eee:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef4:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000efa:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f00:	4829      	ldr	r0, [pc, #164]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000f02:	f000 fff9 	bl	8001ef8 <HAL_DMA_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000f0c:	f7ff ff58 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a25      	ldr	r2, [pc, #148]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000f14:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f16:	4a24      	ldr	r2, [pc, #144]	; (8000fa8 <HAL_I2C_MspInit+0x194>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f1e:	4a25      	ldr	r2, [pc, #148]	; (8000fb4 <HAL_I2C_MspInit+0x1a0>)
 8000f20:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f28:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f2c:	2240      	movs	r2, #64	; 0x40
 8000f2e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f3c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f56:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f5c:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f5e:	f000 ffcb 	bl	8001ef8 <HAL_DMA_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000f68:	f7ff ff2a 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38
 8000f72:	4a0f      	ldr	r2, [pc, #60]	; (8000fb0 <HAL_I2C_MspInit+0x19c>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	201f      	movs	r0, #31
 8000f7e:	f000 ff84 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f82:	201f      	movs	r0, #31
 8000f84:	f000 ff9d 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	2020      	movs	r0, #32
 8000f8e:	f000 ff7c 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000f92:	2020      	movs	r0, #32
 8000f94:	f000 ff95 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f98:	e0bd      	b.n	8001116 <HAL_I2C_MspInit+0x302>
 8000f9a:	bf00      	nop
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	20000134 	.word	0x20000134
 8000fac:	40026010 	.word	0x40026010
 8000fb0:	20000194 	.word	0x20000194
 8000fb4:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a58      	ldr	r2, [pc, #352]	; (8001120 <HAL_I2C_MspInit+0x30c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	f040 80a9 	bne.w	8001116 <HAL_I2C_MspInit+0x302>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 fb57 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000fe0:	f7ff feee 	bl	8000dc0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe4:	4b4f      	ldr	r3, [pc, #316]	; (8001124 <HAL_I2C_MspInit+0x310>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a4e      	ldr	r2, [pc, #312]	; (8001124 <HAL_I2C_MspInit+0x310>)
 8000fea:	f043 0320 	orr.w	r3, r3, #32
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff0:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <HAL_I2C_MspInit+0x310>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	f003 0320 	and.w	r3, r3, #32
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001002:	2312      	movs	r3, #18
 8001004:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001014:	2304      	movs	r3, #4
 8001016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800101a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800101e:	4619      	mov	r1, r3
 8001020:	4841      	ldr	r0, [pc, #260]	; (8001128 <HAL_I2C_MspInit+0x314>)
 8001022:	f001 fb8d 	bl	8002740 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001026:	4b3f      	ldr	r3, [pc, #252]	; (8001124 <HAL_I2C_MspInit+0x310>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a3e      	ldr	r2, [pc, #248]	; (8001124 <HAL_I2C_MspInit+0x310>)
 800102c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b3c      	ldr	r3, [pc, #240]	; (8001124 <HAL_I2C_MspInit+0x310>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 800103e:	4b3b      	ldr	r3, [pc, #236]	; (800112c <HAL_I2C_MspInit+0x318>)
 8001040:	4a3b      	ldr	r2, [pc, #236]	; (8001130 <HAL_I2C_MspInit+0x31c>)
 8001042:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001044:	4b39      	ldr	r3, [pc, #228]	; (800112c <HAL_I2C_MspInit+0x318>)
 8001046:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800104a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800104c:	4b37      	ldr	r3, [pc, #220]	; (800112c <HAL_I2C_MspInit+0x318>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001052:	4b36      	ldr	r3, [pc, #216]	; (800112c <HAL_I2C_MspInit+0x318>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001058:	4b34      	ldr	r3, [pc, #208]	; (800112c <HAL_I2C_MspInit+0x318>)
 800105a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800105e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001060:	4b32      	ldr	r3, [pc, #200]	; (800112c <HAL_I2C_MspInit+0x318>)
 8001062:	2200      	movs	r2, #0
 8001064:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001066:	4b31      	ldr	r3, [pc, #196]	; (800112c <HAL_I2C_MspInit+0x318>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800106c:	4b2f      	ldr	r3, [pc, #188]	; (800112c <HAL_I2C_MspInit+0x318>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_I2C_MspInit+0x318>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001078:	4b2c      	ldr	r3, [pc, #176]	; (800112c <HAL_I2C_MspInit+0x318>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800107e:	482b      	ldr	r0, [pc, #172]	; (800112c <HAL_I2C_MspInit+0x318>)
 8001080:	f000 ff3a 	bl	8001ef8 <HAL_DMA_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_I2C_MspInit+0x27a>
      Error_Handler();
 800108a:	f7ff fe99 	bl	8000dc0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a26      	ldr	r2, [pc, #152]	; (800112c <HAL_I2C_MspInit+0x318>)
 8001092:	63da      	str	r2, [r3, #60]	; 0x3c
 8001094:	4a25      	ldr	r2, [pc, #148]	; (800112c <HAL_I2C_MspInit+0x318>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800109a:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_I2C_MspInit+0x320>)
 800109c:	4a26      	ldr	r2, [pc, #152]	; (8001138 <HAL_I2C_MspInit+0x324>)
 800109e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <HAL_I2C_MspInit+0x320>)
 80010a2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010a6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <HAL_I2C_MspInit+0x320>)
 80010aa:	2240      	movs	r2, #64	; 0x40
 80010ac:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <HAL_I2C_MspInit+0x320>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <HAL_I2C_MspInit+0x320>)
 80010b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ba:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_I2C_MspInit+0x320>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <HAL_I2C_MspInit+0x320>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_I2C_MspInit+0x320>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_I2C_MspInit+0x320>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_I2C_MspInit+0x320>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80010da:	4816      	ldr	r0, [pc, #88]	; (8001134 <HAL_I2C_MspInit+0x320>)
 80010dc:	f000 ff0c 	bl	8001ef8 <HAL_DMA_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_I2C_MspInit+0x2d6>
      Error_Handler();
 80010e6:	f7ff fe6b 	bl	8000dc0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_I2C_MspInit+0x320>)
 80010ee:	639a      	str	r2, [r3, #56]	; 0x38
 80010f0:	4a10      	ldr	r2, [pc, #64]	; (8001134 <HAL_I2C_MspInit+0x320>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2100      	movs	r1, #0
 80010fa:	2021      	movs	r0, #33	; 0x21
 80010fc:	f000 fec5 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001100:	2021      	movs	r0, #33	; 0x21
 8001102:	f000 fede 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2100      	movs	r1, #0
 800110a:	2022      	movs	r0, #34	; 0x22
 800110c:	f000 febd 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001110:	2022      	movs	r0, #34	; 0x22
 8001112:	f000 fed6 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	37b0      	adds	r7, #176	; 0xb0
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40005800 	.word	0x40005800
 8001124:	40023800 	.word	0x40023800
 8001128:	40021400 	.word	0x40021400
 800112c:	200001f4 	.word	0x200001f4
 8001130:	40026058 	.word	0x40026058
 8001134:	20000254 	.word	0x20000254
 8001138:	400260b8 	.word	0x400260b8

0800113c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 031c 	add.w	r3, r7, #28
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a56      	ldr	r2, [pc, #344]	; (80012b4 <HAL_SPI_MspInit+0x178>)
 800115a:	4293      	cmp	r3, r2
 800115c:	f040 80ba 	bne.w	80012d4 <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001160:	4b55      	ldr	r3, [pc, #340]	; (80012b8 <HAL_SPI_MspInit+0x17c>)
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	4a54      	ldr	r2, [pc, #336]	; (80012b8 <HAL_SPI_MspInit+0x17c>)
 8001166:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800116a:	6453      	str	r3, [r2, #68]	; 0x44
 800116c:	4b52      	ldr	r3, [pc, #328]	; (80012b8 <HAL_SPI_MspInit+0x17c>)
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b4f      	ldr	r3, [pc, #316]	; (80012b8 <HAL_SPI_MspInit+0x17c>)
 800117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117c:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <HAL_SPI_MspInit+0x17c>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6313      	str	r3, [r2, #48]	; 0x30
 8001184:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <HAL_SPI_MspInit+0x17c>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <HAL_SPI_MspInit+0x17c>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <HAL_SPI_MspInit+0x17c>)
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <HAL_SPI_MspInit+0x17c>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011a8:	2310      	movs	r3, #16
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b8:	2305      	movs	r3, #5
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	483e      	ldr	r0, [pc, #248]	; (80012bc <HAL_SPI_MspInit+0x180>)
 80011c4:	f001 fabc 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80011c8:	2338      	movs	r3, #56	; 0x38
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011d8:	2305      	movs	r3, #5
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	4837      	ldr	r0, [pc, #220]	; (80012c0 <HAL_SPI_MspInit+0x184>)
 80011e4:	f001 faac 	bl	8002740 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 80011ea:	4a37      	ldr	r2, [pc, #220]	; (80012c8 <HAL_SPI_MspInit+0x18c>)
 80011ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80011ee:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 80011f0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80011f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f6:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fc:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 8001204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001208:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800120a:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001228:	4826      	ldr	r0, [pc, #152]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 800122a:	f000 fe65 	bl	8001ef8 <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001234:	f7ff fdc4 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 800123c:	659a      	str	r2, [r3, #88]	; 0x58
 800123e:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <HAL_SPI_MspInit+0x188>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <HAL_SPI_MspInit+0x190>)
 8001246:	4a22      	ldr	r2, [pc, #136]	; (80012d0 <HAL_SPI_MspInit+0x194>)
 8001248:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <HAL_SPI_MspInit+0x190>)
 800124c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001250:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <HAL_SPI_MspInit+0x190>)
 8001254:	2240      	movs	r2, #64	; 0x40
 8001256:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_SPI_MspInit+0x190>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800125e:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_SPI_MspInit+0x190>)
 8001260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001264:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_SPI_MspInit+0x190>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_SPI_MspInit+0x190>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_SPI_MspInit+0x190>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_SPI_MspInit+0x190>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <HAL_SPI_MspInit+0x190>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001284:	4811      	ldr	r0, [pc, #68]	; (80012cc <HAL_SPI_MspInit+0x190>)
 8001286:	f000 fe37 	bl	8001ef8 <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001290:	f7ff fd96 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <HAL_SPI_MspInit+0x190>)
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
 800129a:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <HAL_SPI_MspInit+0x190>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2023      	movs	r0, #35	; 0x23
 80012a6:	f000 fdf0 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80012aa:	2023      	movs	r0, #35	; 0x23
 80012ac:	f000 fe09 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80012b0:	e0a3      	b.n	80013fa <HAL_SPI_MspInit+0x2be>
 80012b2:	bf00      	nop
 80012b4:	40013000 	.word	0x40013000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	2000037c 	.word	0x2000037c
 80012c8:	40026440 	.word	0x40026440
 80012cc:	200003dc 	.word	0x200003dc
 80012d0:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI4)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a4a      	ldr	r2, [pc, #296]	; (8001404 <HAL_SPI_MspInit+0x2c8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	f040 808d 	bne.w	80013fa <HAL_SPI_MspInit+0x2be>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80012e0:	4b49      	ldr	r3, [pc, #292]	; (8001408 <HAL_SPI_MspInit+0x2cc>)
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	4a48      	ldr	r2, [pc, #288]	; (8001408 <HAL_SPI_MspInit+0x2cc>)
 80012e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012ea:	6453      	str	r3, [r2, #68]	; 0x44
 80012ec:	4b46      	ldr	r3, [pc, #280]	; (8001408 <HAL_SPI_MspInit+0x2cc>)
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f8:	4b43      	ldr	r3, [pc, #268]	; (8001408 <HAL_SPI_MspInit+0x2cc>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a42      	ldr	r2, [pc, #264]	; (8001408 <HAL_SPI_MspInit+0x2cc>)
 80012fe:	f043 0310 	orr.w	r3, r3, #16
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b40      	ldr	r3, [pc, #256]	; (8001408 <HAL_SPI_MspInit+0x2cc>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 0310 	and.w	r3, r3, #16
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001310:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001322:	2305      	movs	r3, #5
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4837      	ldr	r0, [pc, #220]	; (800140c <HAL_SPI_MspInit+0x2d0>)
 800132e:	f001 fa07 	bl	8002740 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 8001334:	4a37      	ldr	r2, [pc, #220]	; (8001414 <HAL_SPI_MspInit+0x2d8>)
 8001336:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001338:	4b35      	ldr	r3, [pc, #212]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 800133a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800133e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001346:	4b32      	ldr	r3, [pc, #200]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 800134e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001352:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001354:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001372:	4827      	ldr	r0, [pc, #156]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 8001374:	f000 fdc0 	bl	8001ef8 <HAL_DMA_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_SPI_MspInit+0x246>
      Error_Handler();
 800137e:	f7ff fd1f 	bl	8000dc0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a22      	ldr	r2, [pc, #136]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 8001386:	659a      	str	r2, [r3, #88]	; 0x58
 8001388:	4a21      	ldr	r2, [pc, #132]	; (8001410 <HAL_SPI_MspInit+0x2d4>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream4;
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 8001390:	4a22      	ldr	r2, [pc, #136]	; (800141c <HAL_SPI_MspInit+0x2e0>)
 8001392:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_5;
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 8001396:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800139a:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 800139e:	2240      	movs	r2, #64	; 0x40
 80013a0:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 80013aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ae:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b0:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80013ce:	4812      	ldr	r0, [pc, #72]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 80013d0:	f000 fd92 	bl	8001ef8 <HAL_DMA_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_SPI_MspInit+0x2a2>
      Error_Handler();
 80013da:	f7ff fcf1 	bl	8000dc0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 80013e2:	655a      	str	r2, [r3, #84]	; 0x54
 80013e4:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <HAL_SPI_MspInit+0x2dc>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2054      	movs	r0, #84	; 0x54
 80013f0:	f000 fd4b 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80013f4:	2054      	movs	r0, #84	; 0x54
 80013f6:	f000 fd64 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	; 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40013400 	.word	0x40013400
 8001408:	40023800 	.word	0x40023800
 800140c:	40021000 	.word	0x40021000
 8001410:	2000043c 	.word	0x2000043c
 8001414:	40026410 	.word	0x40026410
 8001418:	2000049c 	.word	0x2000049c
 800141c:	40026470 	.word	0x40026470

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0ae      	sub	sp, #184	; 0xb8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001438:	f107 0320 	add.w	r3, r7, #32
 800143c:	2284      	movs	r2, #132	; 0x84
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f008 f95f 	bl	8009704 <memset>
  if(huart->Instance==UART4)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a74      	ldr	r2, [pc, #464]	; (800161c <HAL_UART_MspInit+0x1fc>)
 800144c:	4293      	cmp	r3, r2
 800144e:	f040 80a2 	bne.w	8001596 <HAL_UART_MspInit+0x176>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001456:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001458:	2300      	movs	r3, #0
 800145a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	4618      	mov	r0, r3
 8001462:	f004 f911 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800146c:	f7ff fca8 	bl	8000dc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001470:	4b6b      	ldr	r3, [pc, #428]	; (8001620 <HAL_UART_MspInit+0x200>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	4a6a      	ldr	r2, [pc, #424]	; (8001620 <HAL_UART_MspInit+0x200>)
 8001476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800147a:	6413      	str	r3, [r2, #64]	; 0x40
 800147c:	4b68      	ldr	r3, [pc, #416]	; (8001620 <HAL_UART_MspInit+0x200>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001488:	4b65      	ldr	r3, [pc, #404]	; (8001620 <HAL_UART_MspInit+0x200>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	4a64      	ldr	r2, [pc, #400]	; (8001620 <HAL_UART_MspInit+0x200>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6313      	str	r3, [r2, #48]	; 0x30
 8001494:	4b62      	ldr	r3, [pc, #392]	; (8001620 <HAL_UART_MspInit+0x200>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014ba:	2308      	movs	r3, #8
 80014bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4857      	ldr	r0, [pc, #348]	; (8001624 <HAL_UART_MspInit+0x204>)
 80014c8:	f001 f93a 	bl	8002740 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80014cc:	4b56      	ldr	r3, [pc, #344]	; (8001628 <HAL_UART_MspInit+0x208>)
 80014ce:	4a57      	ldr	r2, [pc, #348]	; (800162c <HAL_UART_MspInit+0x20c>)
 80014d0:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80014d2:	4b55      	ldr	r3, [pc, #340]	; (8001628 <HAL_UART_MspInit+0x208>)
 80014d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014d8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014da:	4b53      	ldr	r3, [pc, #332]	; (8001628 <HAL_UART_MspInit+0x208>)
 80014dc:	2240      	movs	r2, #64	; 0x40
 80014de:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e0:	4b51      	ldr	r3, [pc, #324]	; (8001628 <HAL_UART_MspInit+0x208>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014e6:	4b50      	ldr	r3, [pc, #320]	; (8001628 <HAL_UART_MspInit+0x208>)
 80014e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ec:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ee:	4b4e      	ldr	r3, [pc, #312]	; (8001628 <HAL_UART_MspInit+0x208>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f4:	4b4c      	ldr	r3, [pc, #304]	; (8001628 <HAL_UART_MspInit+0x208>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80014fa:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <HAL_UART_MspInit+0x208>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001500:	4b49      	ldr	r3, [pc, #292]	; (8001628 <HAL_UART_MspInit+0x208>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001506:	4b48      	ldr	r3, [pc, #288]	; (8001628 <HAL_UART_MspInit+0x208>)
 8001508:	2200      	movs	r2, #0
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800150c:	4846      	ldr	r0, [pc, #280]	; (8001628 <HAL_UART_MspInit+0x208>)
 800150e:	f000 fcf3 	bl	8001ef8 <HAL_DMA_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8001518:	f7ff fc52 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a42      	ldr	r2, [pc, #264]	; (8001628 <HAL_UART_MspInit+0x208>)
 8001520:	671a      	str	r2, [r3, #112]	; 0x70
 8001522:	4a41      	ldr	r2, [pc, #260]	; (8001628 <HAL_UART_MspInit+0x208>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001528:	4b41      	ldr	r3, [pc, #260]	; (8001630 <HAL_UART_MspInit+0x210>)
 800152a:	4a42      	ldr	r2, [pc, #264]	; (8001634 <HAL_UART_MspInit+0x214>)
 800152c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800152e:	4b40      	ldr	r3, [pc, #256]	; (8001630 <HAL_UART_MspInit+0x210>)
 8001530:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001534:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001536:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <HAL_UART_MspInit+0x210>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153c:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <HAL_UART_MspInit+0x210>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <HAL_UART_MspInit+0x210>)
 8001544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001548:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <HAL_UART_MspInit+0x210>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001550:	4b37      	ldr	r3, [pc, #220]	; (8001630 <HAL_UART_MspInit+0x210>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001556:	4b36      	ldr	r3, [pc, #216]	; (8001630 <HAL_UART_MspInit+0x210>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <HAL_UART_MspInit+0x210>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001562:	4b33      	ldr	r3, [pc, #204]	; (8001630 <HAL_UART_MspInit+0x210>)
 8001564:	2200      	movs	r2, #0
 8001566:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001568:	4831      	ldr	r0, [pc, #196]	; (8001630 <HAL_UART_MspInit+0x210>)
 800156a:	f000 fcc5 	bl	8001ef8 <HAL_DMA_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8001574:	f7ff fc24 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a2d      	ldr	r2, [pc, #180]	; (8001630 <HAL_UART_MspInit+0x210>)
 800157c:	675a      	str	r2, [r3, #116]	; 0x74
 800157e:	4a2c      	ldr	r2, [pc, #176]	; (8001630 <HAL_UART_MspInit+0x210>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	2034      	movs	r0, #52	; 0x34
 800158a:	f000 fc7e 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800158e:	2034      	movs	r0, #52	; 0x34
 8001590:	f000 fc97 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001594:	e0fa      	b.n	800178c <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==USART3)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a27      	ldr	r2, [pc, #156]	; (8001638 <HAL_UART_MspInit+0x218>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d14f      	bne.n	8001640 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015aa:	f107 0320 	add.w	r3, r7, #32
 80015ae:	4618      	mov	r0, r3
 80015b0:	f004 f86a 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_UART_MspInit+0x19e>
      Error_Handler();
 80015ba:	f7ff fc01 	bl	8000dc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_UART_MspInit+0x200>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_UART_MspInit+0x200>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_UART_MspInit+0x200>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_UART_MspInit+0x200>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a11      	ldr	r2, [pc, #68]	; (8001620 <HAL_UART_MspInit+0x200>)
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_UART_MspInit+0x200>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001608:	2307      	movs	r3, #7
 800160a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001612:	4619      	mov	r1, r3
 8001614:	4809      	ldr	r0, [pc, #36]	; (800163c <HAL_UART_MspInit+0x21c>)
 8001616:	f001 f893 	bl	8002740 <HAL_GPIO_Init>
}
 800161a:	e0b7      	b.n	800178c <HAL_UART_MspInit+0x36c>
 800161c:	40004c00 	.word	0x40004c00
 8001620:	40023800 	.word	0x40023800
 8001624:	40020800 	.word	0x40020800
 8001628:	20000694 	.word	0x20000694
 800162c:	40026070 	.word	0x40026070
 8001630:	200006f4 	.word	0x200006f4
 8001634:	40026040 	.word	0x40026040
 8001638:	40004800 	.word	0x40004800
 800163c:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART6)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a53      	ldr	r2, [pc, #332]	; (8001794 <HAL_UART_MspInit+0x374>)
 8001646:	4293      	cmp	r3, r2
 8001648:	f040 80a0 	bne.w	800178c <HAL_UART_MspInit+0x36c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800164c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001650:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001652:	2300      	movs	r3, #0
 8001654:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001656:	f107 0320 	add.w	r3, r7, #32
 800165a:	4618      	mov	r0, r3
 800165c:	f004 f814 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8001666:	f7ff fbab 	bl	8000dc0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800166a:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <HAL_UART_MspInit+0x378>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a4a      	ldr	r2, [pc, #296]	; (8001798 <HAL_UART_MspInit+0x378>)
 8001670:	f043 0320 	orr.w	r3, r3, #32
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b48      	ldr	r3, [pc, #288]	; (8001798 <HAL_UART_MspInit+0x378>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	4b45      	ldr	r3, [pc, #276]	; (8001798 <HAL_UART_MspInit+0x378>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a44      	ldr	r2, [pc, #272]	; (8001798 <HAL_UART_MspInit+0x378>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b42      	ldr	r3, [pc, #264]	; (8001798 <HAL_UART_MspInit+0x378>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800169a:	23c0      	movs	r3, #192	; 0xc0
 800169c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016b2:	2308      	movs	r3, #8
 80016b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016bc:	4619      	mov	r1, r3
 80016be:	4837      	ldr	r0, [pc, #220]	; (800179c <HAL_UART_MspInit+0x37c>)
 80016c0:	f001 f83e 	bl	8002740 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80016c4:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <HAL_UART_MspInit+0x380>)
 80016c6:	4a37      	ldr	r2, [pc, #220]	; (80017a4 <HAL_UART_MspInit+0x384>)
 80016c8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80016ca:	4b35      	ldr	r3, [pc, #212]	; (80017a0 <HAL_UART_MspInit+0x380>)
 80016cc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80016d0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <HAL_UART_MspInit+0x380>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d8:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <HAL_UART_MspInit+0x380>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016de:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_UART_MspInit+0x380>)
 80016e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e6:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <HAL_UART_MspInit+0x380>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <HAL_UART_MspInit+0x380>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80016f2:	4b2b      	ldr	r3, [pc, #172]	; (80017a0 <HAL_UART_MspInit+0x380>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <HAL_UART_MspInit+0x380>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016fe:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <HAL_UART_MspInit+0x380>)
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001704:	4826      	ldr	r0, [pc, #152]	; (80017a0 <HAL_UART_MspInit+0x380>)
 8001706:	f000 fbf7 	bl	8001ef8 <HAL_DMA_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 8001710:	f7ff fb56 	bl	8000dc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <HAL_UART_MspInit+0x380>)
 8001718:	675a      	str	r2, [r3, #116]	; 0x74
 800171a:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <HAL_UART_MspInit+0x380>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <HAL_UART_MspInit+0x388>)
 8001722:	4a22      	ldr	r2, [pc, #136]	; (80017ac <HAL_UART_MspInit+0x38c>)
 8001724:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_UART_MspInit+0x388>)
 8001728:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800172c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_UART_MspInit+0x388>)
 8001730:	2240      	movs	r2, #64	; 0x40
 8001732:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <HAL_UART_MspInit+0x388>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_UART_MspInit+0x388>)
 800173c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001740:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_UART_MspInit+0x388>)
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_UART_MspInit+0x388>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_UART_MspInit+0x388>)
 8001750:	2200      	movs	r2, #0
 8001752:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_UART_MspInit+0x388>)
 8001756:	2200      	movs	r2, #0
 8001758:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <HAL_UART_MspInit+0x388>)
 800175c:	2200      	movs	r2, #0
 800175e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <HAL_UART_MspInit+0x388>)
 8001762:	f000 fbc9 	bl	8001ef8 <HAL_DMA_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_UART_MspInit+0x350>
      Error_Handler();
 800176c:	f7ff fb28 	bl	8000dc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <HAL_UART_MspInit+0x388>)
 8001774:	671a      	str	r2, [r3, #112]	; 0x70
 8001776:	4a0c      	ldr	r2, [pc, #48]	; (80017a8 <HAL_UART_MspInit+0x388>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2047      	movs	r0, #71	; 0x47
 8001782:	f000 fb82 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001786:	2047      	movs	r0, #71	; 0x47
 8001788:	f000 fb9b 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
}
 800178c:	bf00      	nop
 800178e:	37b8      	adds	r7, #184	; 0xb8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40011400 	.word	0x40011400
 8001798:	40023800 	.word	0x40023800
 800179c:	40020800 	.word	0x40020800
 80017a0:	20000754 	.word	0x20000754
 80017a4:	40026428 	.word	0x40026428
 80017a8:	200007b4 	.word	0x200007b4
 80017ac:	400264a0 	.word	0x400264a0

080017b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b0ac      	sub	sp, #176	; 0xb0
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017c8:	f107 0318 	add.w	r3, r7, #24
 80017cc:	2284      	movs	r2, #132	; 0x84
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f007 ff97 	bl	8009704 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017de:	d159      	bne.n	8001894 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 ff49 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80017fc:	f7ff fae0 	bl	8000dc0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_PCD_MspInit+0xec>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	4a25      	ldr	r2, [pc, #148]	; (800189c <HAL_PCD_MspInit+0xec>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6313      	str	r3, [r2, #48]	; 0x30
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_PCD_MspInit+0xec>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001818:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800181c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001832:	230a      	movs	r3, #10
 8001834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800183c:	4619      	mov	r1, r3
 800183e:	4818      	ldr	r0, [pc, #96]	; (80018a0 <HAL_PCD_MspInit+0xf0>)
 8001840:	f000 ff7e 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800185c:	4619      	mov	r1, r3
 800185e:	4810      	ldr	r0, [pc, #64]	; (80018a0 <HAL_PCD_MspInit+0xf0>)
 8001860:	f000 ff6e 	bl	8002740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_PCD_MspInit+0xec>)
 8001866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001868:	4a0c      	ldr	r2, [pc, #48]	; (800189c <HAL_PCD_MspInit+0xec>)
 800186a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186e:	6353      	str	r3, [r2, #52]	; 0x34
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_PCD_MspInit+0xec>)
 8001872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <HAL_PCD_MspInit+0xec>)
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <HAL_PCD_MspInit+0xec>)
 8001882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001886:	6453      	str	r3, [r2, #68]	; 0x44
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <HAL_PCD_MspInit+0xec>)
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001894:	bf00      	nop
 8001896:	37b0      	adds	r7, #176	; 0xb0
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f0:	f000 f9ac 	bl	8001c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <DMA1_Stream0_IRQHandler+0x10>)
 80018fe:	f000 fc9b 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000134 	.word	0x20000134

0800190c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <DMA1_Stream2_IRQHandler+0x10>)
 8001912:	f000 fc91 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200006f4 	.word	0x200006f4

08001920 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <DMA1_Stream3_IRQHandler+0x10>)
 8001926:	f000 fc87 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200001f4 	.word	0x200001f4

08001934 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <DMA1_Stream4_IRQHandler+0x10>)
 800193a:	f000 fc7d 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000694 	.word	0x20000694

08001948 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA1_Stream6_IRQHandler+0x10>)
 800194e:	f000 fc73 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000194 	.word	0x20000194

0800195c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <I2C1_EV_IRQHandler+0x10>)
 8001962:	f001 fc8f 	bl	8003284 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000008c 	.word	0x2000008c

08001970 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <I2C1_ER_IRQHandler+0x10>)
 8001976:	f001 fc9f 	bl	80032b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	2000008c 	.word	0x2000008c

08001984 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001988:	4802      	ldr	r0, [pc, #8]	; (8001994 <I2C2_EV_IRQHandler+0x10>)
 800198a:	f001 fc7b 	bl	8003284 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200000e0 	.word	0x200000e0

08001998 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <I2C2_ER_IRQHandler+0x10>)
 800199e:	f001 fc8b 	bl	80032b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200000e0 	.word	0x200000e0

080019ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <SPI1_IRQHandler+0x10>)
 80019b2:	f004 fea9 	bl	8006708 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200002b4 	.word	0x200002b4

080019c0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <DMA1_Stream7_IRQHandler+0x10>)
 80019c6:	f000 fc37 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000254 	.word	0x20000254

080019d4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <UART4_IRQHandler+0x10>)
 80019da:	f005 fd69 	bl	80074b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200004fc 	.word	0x200004fc

080019e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <DMA2_Stream0_IRQHandler+0x10>)
 80019ee:	f000 fc23 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000043c 	.word	0x2000043c

080019fc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <DMA2_Stream1_IRQHandler+0x10>)
 8001a02:	f000 fc19 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000754 	.word	0x20000754

08001a10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <DMA2_Stream2_IRQHandler+0x10>)
 8001a16:	f000 fc0f 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2000037c 	.word	0x2000037c

08001a24 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <DMA2_Stream3_IRQHandler+0x10>)
 8001a2a:	f000 fc05 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200003dc 	.word	0x200003dc

08001a38 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <DMA2_Stream4_IRQHandler+0x10>)
 8001a3e:	f000 fbfb 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000049c 	.word	0x2000049c

08001a4c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <DMA2_Stream6_IRQHandler+0x10>)
 8001a52:	f000 fbf1 	bl	8002238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200007b4 	.word	0x200007b4

08001a60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <USART6_IRQHandler+0x10>)
 8001a66:	f005 fd23 	bl	80074b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	2000060c 	.word	0x2000060c

08001a74 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <SPI4_IRQHandler+0x10>)
 8001a7a:	f004 fe45 	bl	8006708 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000318 	.word	0x20000318

08001a88 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	return -1;
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ab0:	605a      	str	r2, [r3, #4]
	return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_isatty>:

int _isatty(int file)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	return 1;
 8001ac8:	2301      	movs	r3, #1
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b085      	sub	sp, #20
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
 8001ade:	60b9      	str	r1, [r7, #8]
 8001ae0:	607a      	str	r2, [r7, #4]
	return 0;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f007 fdb8 	bl	8009694 <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20050000 	.word	0x20050000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	20000d1c 	.word	0x20000d1c
 8001b58:	20001240 	.word	0x20001240

08001b5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <SystemInit+0x20>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <SystemInit+0x20>)
 8001b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b84:	480d      	ldr	r0, [pc, #52]	; (8001bbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b86:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b8c:	e002      	b.n	8001b94 <LoopCopyDataInit>

08001b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b92:	3304      	adds	r3, #4

08001b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b98:	d3f9      	bcc.n	8001b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b9c:	4c0b      	ldr	r4, [pc, #44]	; (8001bcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba0:	e001      	b.n	8001ba6 <LoopFillZerobss>

08001ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba4:	3204      	adds	r2, #4

08001ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba8:	d3fb      	bcc.n	8001ba2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001baa:	f7ff ffd7 	bl	8001b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bae:	f007 fd77 	bl	80096a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bb2:	f7fe fcff 	bl	80005b4 <main>
  bx  lr    
 8001bb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bb8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bc4:	0800b02c 	.word	0x0800b02c
  ldr r2, =_sbss
 8001bc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001bcc:	20001240 	.word	0x20001240

08001bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bd0:	e7fe      	b.n	8001bd0 <ADC_IRQHandler>

08001bd2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	f000 f94c 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f000 f805 	bl	8001bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be2:	f7ff f8f3 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x54>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_InitTick+0x58>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f967 	bl	8001ede <HAL_SYSTICK_Config>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00e      	b.n	8001c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b0f      	cmp	r3, #15
 8001c1e:	d80a      	bhi.n	8001c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c20:	2200      	movs	r2, #0
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f000 f92f 	bl	8001e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c2c:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_InitTick+0x5c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000008 	.word	0x20000008
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x20>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x24>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_IncTick+0x24>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	20000d20 	.word	0x20000d20

08001c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_GetTick+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000d20 	.word	0x20000d20

08001c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7ff ffee 	bl	8001c74 <HAL_GetTick>
 8001c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d005      	beq.n	8001cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_Delay+0x44>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4413      	add	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb2:	bf00      	nop
 8001cb4:	f7ff ffde 	bl	8001c74 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d8f7      	bhi.n	8001cb4 <HAL_Delay+0x28>
  {
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000008 	.word	0x20000008

08001cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <__NVIC_SetPriorityGrouping+0x40>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <__NVIC_SetPriorityGrouping+0x40>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00
 8001d18:	05fa0000 	.word	0x05fa0000

08001d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <__NVIC_GetPriorityGrouping+0x18>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	f003 0307 	and.w	r3, r3, #7
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	db0b      	blt.n	8001d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	f003 021f 	and.w	r2, r3, #31
 8001d50:	4907      	ldr	r1, [pc, #28]	; (8001d70 <__NVIC_EnableIRQ+0x38>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	2001      	movs	r0, #1
 8001d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e100 	.word	0xe000e100

08001d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	db0a      	blt.n	8001d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	490c      	ldr	r1, [pc, #48]	; (8001dc0 <__NVIC_SetPriority+0x4c>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	0112      	lsls	r2, r2, #4
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	440b      	add	r3, r1
 8001d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d9c:	e00a      	b.n	8001db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <__NVIC_SetPriority+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3b04      	subs	r3, #4
 8001dac:	0112      	lsls	r2, r2, #4
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	440b      	add	r3, r1
 8001db2:	761a      	strb	r2, [r3, #24]
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f1c3 0307 	rsb	r3, r3, #7
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	bf28      	it	cs
 8001de6:	2304      	movcs	r3, #4
 8001de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d902      	bls.n	8001df8 <NVIC_EncodePriority+0x30>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3b03      	subs	r3, #3
 8001df6:	e000      	b.n	8001dfa <NVIC_EncodePriority+0x32>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1a:	43d9      	mvns	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	4313      	orrs	r3, r2
         );
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e40:	d301      	bcc.n	8001e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e42:	2301      	movs	r3, #1
 8001e44:	e00f      	b.n	8001e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <SysTick_Config+0x40>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4e:	210f      	movs	r1, #15
 8001e50:	f04f 30ff 	mov.w	r0, #4294967295
 8001e54:	f7ff ff8e 	bl	8001d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SysTick_Config+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5e:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <SysTick_Config+0x40>)
 8001e60:	2207      	movs	r2, #7
 8001e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	e000e010 	.word	0xe000e010

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff29 	bl	8001cd4 <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff3e 	bl	8001d1c <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ff8e 	bl	8001dc8 <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff5d 	bl	8001d74 <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff31 	bl	8001d38 <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ffa2 	bl	8001e30 <SysTick_Config>
 8001eec:	4603      	mov	r3, r0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7ff feb6 	bl	8001c74 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e099      	b.n	8002048 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0201 	bic.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f34:	e00f      	b.n	8001f56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f36:	f7ff fe9d 	bl	8001c74 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d908      	bls.n	8001f56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2220      	movs	r2, #32
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e078      	b.n	8002048 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1e8      	bne.n	8001f36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	4b38      	ldr	r3, [pc, #224]	; (8002050 <HAL_DMA_Init+0x158>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d107      	bne.n	8001fc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f023 0307 	bic.w	r3, r3, #7
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d117      	bne.n	800201a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 fb23 	bl	8002648 <DMA_CheckFifoParam>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d008      	beq.n	800201a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2240      	movs	r2, #64	; 0x40
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002016:	2301      	movs	r3, #1
 8002018:	e016      	b.n	8002048 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fada 	bl	80025dc <DMA_CalcBaseAndBitshift>
 8002028:	4603      	mov	r3, r0
 800202a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	223f      	movs	r2, #63	; 0x3f
 8002032:	409a      	lsls	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	f010803f 	.word	0xf010803f

08002054 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_DMA_Start_IT+0x26>
 8002076:	2302      	movs	r3, #2
 8002078:	e048      	b.n	800210c <HAL_DMA_Start_IT+0xb8>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b01      	cmp	r3, #1
 800208c:	d137      	bne.n	80020fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2202      	movs	r2, #2
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fa6c 	bl	8002580 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ac:	223f      	movs	r2, #63	; 0x3f
 80020ae:	409a      	lsls	r2, r3
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0216 	orr.w	r2, r2, #22
 80020c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695a      	ldr	r2, [r3, #20]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020d2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0208 	orr.w	r2, r2, #8
 80020ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e005      	b.n	800210a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800210a:	7dfb      	ldrb	r3, [r7, #23]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002122:	f7ff fda7 	bl	8001c74 <HAL_GetTick>
 8002126:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d008      	beq.n	8002146 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e052      	b.n	80021ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0216 	bic.w	r2, r2, #22
 8002154:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002164:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <HAL_DMA_Abort+0x62>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0208 	bic.w	r2, r2, #8
 8002184:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0201 	bic.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002196:	e013      	b.n	80021c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002198:	f7ff fd6c 	bl	8001c74 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b05      	cmp	r3, #5
 80021a4:	d90c      	bls.n	80021c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2220      	movs	r2, #32
 80021aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2203      	movs	r2, #3
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e015      	b.n	80021ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1e4      	bne.n	8002198 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	223f      	movs	r2, #63	; 0x3f
 80021d4:	409a      	lsls	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d004      	beq.n	8002212 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00c      	b.n	800222c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2205      	movs	r2, #5
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002244:	4b8e      	ldr	r3, [pc, #568]	; (8002480 <HAL_DMA_IRQHandler+0x248>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a8e      	ldr	r2, [pc, #568]	; (8002484 <HAL_DMA_IRQHandler+0x24c>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0a9b      	lsrs	r3, r3, #10
 8002250:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002262:	2208      	movs	r2, #8
 8002264:	409a      	lsls	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01a      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d013      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0204 	bic.w	r2, r2, #4
 800228a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002290:	2208      	movs	r2, #8
 8002292:	409a      	lsls	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	f043 0201 	orr.w	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	2201      	movs	r2, #1
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d012      	beq.n	80022da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	2201      	movs	r2, #1
 80022c8:	409a      	lsls	r2, r3
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d2:	f043 0202 	orr.w	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022de:	2204      	movs	r2, #4
 80022e0:	409a      	lsls	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d012      	beq.n	8002310 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00b      	beq.n	8002310 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	2204      	movs	r2, #4
 80022fe:	409a      	lsls	r2, r3
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002308:	f043 0204 	orr.w	r2, r3, #4
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	2210      	movs	r2, #16
 8002316:	409a      	lsls	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d043      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d03c      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	2210      	movs	r2, #16
 8002334:	409a      	lsls	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d018      	beq.n	800237a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d108      	bne.n	8002368 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d024      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
 8002366:	e01f      	b.n	80023a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01b      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	4798      	blx	r3
 8002378:	e016      	b.n	80023a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d107      	bne.n	8002398 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0208 	bic.w	r2, r2, #8
 8002396:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	2220      	movs	r2, #32
 80023ae:	409a      	lsls	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 808f 	beq.w	80024d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8087 	beq.w	80024d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2220      	movs	r2, #32
 80023d0:	409a      	lsls	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b05      	cmp	r3, #5
 80023e0:	d136      	bne.n	8002450 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0216 	bic.w	r2, r2, #22
 80023f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695a      	ldr	r2, [r3, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002400:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <HAL_DMA_IRQHandler+0x1da>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240e:	2b00      	cmp	r3, #0
 8002410:	d007      	beq.n	8002422 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0208 	bic.w	r2, r2, #8
 8002420:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	223f      	movs	r2, #63	; 0x3f
 8002428:	409a      	lsls	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002442:	2b00      	cmp	r3, #0
 8002444:	d07e      	beq.n	8002544 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
        }
        return;
 800244e:	e079      	b.n	8002544 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01d      	beq.n	800249a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10d      	bne.n	8002488 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	2b00      	cmp	r3, #0
 8002472:	d031      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
 800247c:	e02c      	b.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
 800247e:	bf00      	nop
 8002480:	20000000 	.word	0x20000000
 8002484:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d023      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
 8002498:	e01e      	b.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10f      	bne.n	80024c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0210 	bic.w	r2, r2, #16
 80024b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d032      	beq.n	8002546 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d022      	beq.n	8002532 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2205      	movs	r2, #5
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	3301      	adds	r3, #1
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	429a      	cmp	r2, r3
 800250e:	d307      	bcc.n	8002520 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f2      	bne.n	8002504 <HAL_DMA_IRQHandler+0x2cc>
 800251e:	e000      	b.n	8002522 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002520:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
 8002542:	e000      	b.n	8002546 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002544:	bf00      	nop
    }
  }
}
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800255a:	b2db      	uxtb	r3, r3
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800259c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b40      	cmp	r3, #64	; 0x40
 80025ac:	d108      	bne.n	80025c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025be:	e007      	b.n	80025d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	60da      	str	r2, [r3, #12]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	3b10      	subs	r3, #16
 80025ec:	4a13      	ldr	r2, [pc, #76]	; (800263c <DMA_CalcBaseAndBitshift+0x60>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025f6:	4a12      	ldr	r2, [pc, #72]	; (8002640 <DMA_CalcBaseAndBitshift+0x64>)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d908      	bls.n	800261c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <DMA_CalcBaseAndBitshift+0x68>)
 8002612:	4013      	ands	r3, r2
 8002614:	1d1a      	adds	r2, r3, #4
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	659a      	str	r2, [r3, #88]	; 0x58
 800261a:	e006      	b.n	800262a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <DMA_CalcBaseAndBitshift+0x68>)
 8002624:	4013      	ands	r3, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	aaaaaaab 	.word	0xaaaaaaab
 8002640:	0800ae8c 	.word	0x0800ae8c
 8002644:	fffffc00 	.word	0xfffffc00

08002648 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11f      	bne.n	80026a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d856      	bhi.n	8002716 <DMA_CheckFifoParam+0xce>
 8002668:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <DMA_CheckFifoParam+0x28>)
 800266a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800266e:	bf00      	nop
 8002670:	08002681 	.word	0x08002681
 8002674:	08002693 	.word	0x08002693
 8002678:	08002681 	.word	0x08002681
 800267c:	08002717 	.word	0x08002717
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d046      	beq.n	800271a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002690:	e043      	b.n	800271a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800269a:	d140      	bne.n	800271e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a0:	e03d      	b.n	800271e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026aa:	d121      	bne.n	80026f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d837      	bhi.n	8002722 <DMA_CheckFifoParam+0xda>
 80026b2:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <DMA_CheckFifoParam+0x70>)
 80026b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b8:	080026c9 	.word	0x080026c9
 80026bc:	080026cf 	.word	0x080026cf
 80026c0:	080026c9 	.word	0x080026c9
 80026c4:	080026e1 	.word	0x080026e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      break;
 80026cc:	e030      	b.n	8002730 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d025      	beq.n	8002726 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026de:	e022      	b.n	8002726 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026e8:	d11f      	bne.n	800272a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026ee:	e01c      	b.n	800272a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d903      	bls.n	80026fe <DMA_CheckFifoParam+0xb6>
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d003      	beq.n	8002704 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026fc:	e018      	b.n	8002730 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
      break;
 8002702:	e015      	b.n	8002730 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00e      	beq.n	800272e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
      break;
 8002714:	e00b      	b.n	800272e <DMA_CheckFifoParam+0xe6>
      break;
 8002716:	bf00      	nop
 8002718:	e00a      	b.n	8002730 <DMA_CheckFifoParam+0xe8>
      break;
 800271a:	bf00      	nop
 800271c:	e008      	b.n	8002730 <DMA_CheckFifoParam+0xe8>
      break;
 800271e:	bf00      	nop
 8002720:	e006      	b.n	8002730 <DMA_CheckFifoParam+0xe8>
      break;
 8002722:	bf00      	nop
 8002724:	e004      	b.n	8002730 <DMA_CheckFifoParam+0xe8>
      break;
 8002726:	bf00      	nop
 8002728:	e002      	b.n	8002730 <DMA_CheckFifoParam+0xe8>
      break;   
 800272a:	bf00      	nop
 800272c:	e000      	b.n	8002730 <DMA_CheckFifoParam+0xe8>
      break;
 800272e:	bf00      	nop
    }
  } 
  
  return status; 
 8002730:	7bfb      	ldrb	r3, [r7, #15]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	e175      	b.n	8002a4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002760:	2201      	movs	r2, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	f040 8164 	bne.w	8002a46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d005      	beq.n	8002796 <HAL_GPIO_Init+0x56>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d130      	bne.n	80027f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2203      	movs	r2, #3
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027cc:	2201      	movs	r2, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 0201 	and.w	r2, r3, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b03      	cmp	r3, #3
 8002802:	d017      	beq.n	8002834 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d123      	bne.n	8002888 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	08da      	lsrs	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3208      	adds	r2, #8
 8002848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	220f      	movs	r2, #15
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	08da      	lsrs	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0203 	and.w	r2, r3, #3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80be 	beq.w	8002a46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ca:	4b66      	ldr	r3, [pc, #408]	; (8002a64 <HAL_GPIO_Init+0x324>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	4a65      	ldr	r2, [pc, #404]	; (8002a64 <HAL_GPIO_Init+0x324>)
 80028d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d4:	6453      	str	r3, [r2, #68]	; 0x44
 80028d6:	4b63      	ldr	r3, [pc, #396]	; (8002a64 <HAL_GPIO_Init+0x324>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028e2:	4a61      	ldr	r2, [pc, #388]	; (8002a68 <HAL_GPIO_Init+0x328>)
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3302      	adds	r3, #2
 80028ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a58      	ldr	r2, [pc, #352]	; (8002a6c <HAL_GPIO_Init+0x32c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d037      	beq.n	800297e <HAL_GPIO_Init+0x23e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a57      	ldr	r2, [pc, #348]	; (8002a70 <HAL_GPIO_Init+0x330>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d031      	beq.n	800297a <HAL_GPIO_Init+0x23a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a56      	ldr	r2, [pc, #344]	; (8002a74 <HAL_GPIO_Init+0x334>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d02b      	beq.n	8002976 <HAL_GPIO_Init+0x236>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a55      	ldr	r2, [pc, #340]	; (8002a78 <HAL_GPIO_Init+0x338>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d025      	beq.n	8002972 <HAL_GPIO_Init+0x232>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a54      	ldr	r2, [pc, #336]	; (8002a7c <HAL_GPIO_Init+0x33c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01f      	beq.n	800296e <HAL_GPIO_Init+0x22e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a53      	ldr	r2, [pc, #332]	; (8002a80 <HAL_GPIO_Init+0x340>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x22a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_GPIO_Init+0x344>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x226>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a51      	ldr	r2, [pc, #324]	; (8002a88 <HAL_GPIO_Init+0x348>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x222>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a50      	ldr	r2, [pc, #320]	; (8002a8c <HAL_GPIO_Init+0x34c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x21e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4f      	ldr	r2, [pc, #316]	; (8002a90 <HAL_GPIO_Init+0x350>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x21a>
 8002956:	2309      	movs	r3, #9
 8002958:	e012      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800295a:	230a      	movs	r3, #10
 800295c:	e010      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800295e:	2308      	movs	r3, #8
 8002960:	e00e      	b.n	8002980 <HAL_GPIO_Init+0x240>
 8002962:	2307      	movs	r3, #7
 8002964:	e00c      	b.n	8002980 <HAL_GPIO_Init+0x240>
 8002966:	2306      	movs	r3, #6
 8002968:	e00a      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800296a:	2305      	movs	r3, #5
 800296c:	e008      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800296e:	2304      	movs	r3, #4
 8002970:	e006      	b.n	8002980 <HAL_GPIO_Init+0x240>
 8002972:	2303      	movs	r3, #3
 8002974:	e004      	b.n	8002980 <HAL_GPIO_Init+0x240>
 8002976:	2302      	movs	r3, #2
 8002978:	e002      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_GPIO_Init+0x240>
 800297e:	2300      	movs	r3, #0
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	f002 0203 	and.w	r2, r2, #3
 8002986:	0092      	lsls	r2, r2, #2
 8002988:	4093      	lsls	r3, r2
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002990:	4935      	ldr	r1, [pc, #212]	; (8002a68 <HAL_GPIO_Init+0x328>)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_GPIO_Init+0x354>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029c2:	4a34      	ldr	r2, [pc, #208]	; (8002a94 <HAL_GPIO_Init+0x354>)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029c8:	4b32      	ldr	r3, [pc, #200]	; (8002a94 <HAL_GPIO_Init+0x354>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029ec:	4a29      	ldr	r2, [pc, #164]	; (8002a94 <HAL_GPIO_Init+0x354>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029f2:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <HAL_GPIO_Init+0x354>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a16:	4a1f      	ldr	r2, [pc, #124]	; (8002a94 <HAL_GPIO_Init+0x354>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a1c:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_GPIO_Init+0x354>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a40:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <HAL_GPIO_Init+0x354>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b0f      	cmp	r3, #15
 8002a50:	f67f ae86 	bls.w	8002760 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3724      	adds	r7, #36	; 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40013800 	.word	0x40013800
 8002a6c:	40020000 	.word	0x40020000
 8002a70:	40020400 	.word	0x40020400
 8002a74:	40020800 	.word	0x40020800
 8002a78:	40020c00 	.word	0x40020c00
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40021400 	.word	0x40021400
 8002a84:	40021800 	.word	0x40021800
 8002a88:	40021c00 	.word	0x40021c00
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40022400 	.word	0x40022400
 8002a94:	40013c00 	.word	0x40013c00

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ab4:	e003      	b.n	8002abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	619a      	str	r2, [r3, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e07f      	b.n	8002bde <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe f98e 	bl	8000e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2224      	movs	r2, #36	; 0x24
 8002afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0201 	bic.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d107      	bne.n	8002b46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	e006      	b.n	8002b54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d104      	bne.n	8002b66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_I2C_Init+0x11c>)
 8002b72:	430b      	orrs	r3, r1
 8002b74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69d9      	ldr	r1, [r3, #28]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	02008000 	.word	0x02008000

08002bec <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	817b      	strh	r3, [r7, #10]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	f040 80cd 	bne.w	8002da8 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1c:	d101      	bne.n	8002c22 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e0c3      	b.n	8002daa <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2C_Master_Transmit_DMA+0x44>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0bc      	b.n	8002daa <HAL_I2C_Master_Transmit_DMA+0x1be>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2221      	movs	r2, #33	; 0x21
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2210      	movs	r2, #16
 8002c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	893a      	ldrh	r2, [r7, #8]
 8002c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a55      	ldr	r2, [pc, #340]	; (8002db4 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8002c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a55      	ldr	r2, [pc, #340]	; (8002db8 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8002c64:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2bff      	cmp	r3, #255	; 0xff
 8002c6e:	d906      	bls.n	8002c7e <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	22ff      	movs	r2, #255	; 0xff
 8002c74:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002c76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e007      	b.n	8002c8e <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002c88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c8c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d070      	beq.n	8002d78 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d020      	beq.n	8002ce0 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	4a46      	ldr	r2, [pc, #280]	; (8002dbc <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8002ca4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	4a45      	ldr	r2, [pc, #276]	; (8002dc0 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8002cac:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	2200      	movs	r2, #0
 8002cbc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3328      	adds	r3, #40	; 0x28
 8002cca:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8002cd0:	f7ff f9c0 	bl	8002054 <HAL_DMA_Start_IT>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d138      	bne.n	8002d50 <HAL_I2C_Master_Transmit_DMA+0x164>
 8002cde:	e013      	b.n	8002d08 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e050      	b.n	8002daa <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	8979      	ldrh	r1, [r7, #10]
 8002d10:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f001 fd02 	bl	8004720 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002d36:	2110      	movs	r1, #16
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f001 fd23 	bl	8004784 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e029      	b.n	8002da4 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d64:	f043 0210 	orr.w	r2, r3, #16
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e018      	b.n	8002daa <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	4a13      	ldr	r2, [pc, #76]	; (8002dc8 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8002d7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	8979      	ldrh	r1, [r7, #10]
 8002d86:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f001 fcc6 	bl	8004720 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f001 fcf0 	bl	8004784 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	ffff0000 	.word	0xffff0000
 8002db8:	08003851 	.word	0x08003851
 8002dbc:	080044bf 	.word	0x080044bf
 8002dc0:	08004671 	.word	0x08004671
 8002dc4:	80002000 	.word	0x80002000
 8002dc8:	080033fb 	.word	0x080033fb

08002dcc <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	460b      	mov	r3, r1
 8002dda:	817b      	strh	r3, [r7, #10]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	f040 80cd 	bne.w	8002f88 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfc:	d101      	bne.n	8002e02 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e0c3      	b.n	8002f8a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_I2C_Master_Receive_DMA+0x44>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e0bc      	b.n	8002f8a <HAL_I2C_Master_Receive_DMA+0x1be>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2222      	movs	r2, #34	; 0x22
 8002e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2210      	movs	r2, #16
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	893a      	ldrh	r2, [r7, #8]
 8002e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4a55      	ldr	r2, [pc, #340]	; (8002f94 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8002e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a55      	ldr	r2, [pc, #340]	; (8002f98 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2bff      	cmp	r3, #255	; 0xff
 8002e4e:	d906      	bls.n	8002e5e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	22ff      	movs	r2, #255	; 0xff
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002e56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	e007      	b.n	8002e6e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002e68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e6c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d070      	beq.n	8002f58 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d020      	beq.n	8002ec0 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e82:	4a46      	ldr	r2, [pc, #280]	; (8002f9c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8002e84:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	4a45      	ldr	r2, [pc, #276]	; (8002fa0 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8002e8c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	2200      	movs	r2, #0
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3324      	adds	r3, #36	; 0x24
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8002eb0:	f7ff f8d0 	bl	8002054 <HAL_DMA_Start_IT>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d138      	bne.n	8002f30 <HAL_I2C_Master_Receive_DMA+0x164>
 8002ebe:	e013      	b.n	8002ee8 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e050      	b.n	8002f8a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	8979      	ldrh	r1, [r7, #10]
 8002ef0:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f001 fc12 	bl	8004720 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002f16:	2110      	movs	r1, #16
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f001 fc33 	bl	8004784 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	e029      	b.n	8002f84 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	f043 0210 	orr.w	r2, r3, #16
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e018      	b.n	8002f8a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4a13      	ldr	r2, [pc, #76]	; (8002fa8 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8002f5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	8979      	ldrh	r1, [r7, #10]
 8002f66:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f001 fbd6 	bl	8004720 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f001 fc00 	bl	8004784 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
  }
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	ffff0000 	.word	0xffff0000
 8002f98:	08003851 	.word	0x08003851
 8002f9c:	08004595 	.word	0x08004595
 8002fa0:	08004671 	.word	0x08004671
 8002fa4:	80002400 	.word	0x80002400
 8002fa8:	080033fb 	.word	0x080033fb

08002fac <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	f040 809b 	bne.w	80030fe <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d105      	bne.n	8002fe0 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e08f      	b.n	8003100 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Slave_Transmit_DMA+0x42>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e088      	b.n	8003100 <HAL_I2C_Slave_Transmit_DMA+0x154>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2221      	movs	r2, #33	; 0x21
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4a38      	ldr	r2, [pc, #224]	; (8003108 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a38      	ldr	r2, [pc, #224]	; (800310c <HAL_I2C_Slave_Transmit_DMA+0x160>)
 800302c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	2b00      	cmp	r3, #0
 8003034:	d020      	beq.n	8003078 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	4a35      	ldr	r2, [pc, #212]	; (8003110 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 800303c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003042:	4a34      	ldr	r2, [pc, #208]	; (8003114 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 8003044:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	2200      	movs	r2, #0
 800304c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	2200      	movs	r2, #0
 8003054:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3328      	adds	r3, #40	; 0x28
 8003062:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003068:	f7fe fff4 	bl	8002054 <HAL_DMA_Start_IT>
 800306c:	4603      	mov	r3, r0
 800306e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d12f      	bne.n	80030d6 <HAL_I2C_Slave_Transmit_DMA+0x12a>
 8003076:	e013      	b.n	80030a0 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2228      	movs	r2, #40	; 0x28
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e02f      	b.n	8003100 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ae:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f001 fb61 	bl	8004784 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	e014      	b.n	8003100 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2228      	movs	r2, #40	; 0x28
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f043 0210 	orr.w	r2, r3, #16
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 80030fe:	2302      	movs	r3, #2
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	ffff0000 	.word	0xffff0000
 800310c:	08003a37 	.word	0x08003a37
 8003110:	08004555 	.word	0x08004555
 8003114:	08004671 	.word	0x08004671

08003118 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b20      	cmp	r3, #32
 8003130:	f040 809b 	bne.w	800326a <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_I2C_Slave_Receive_DMA+0x28>
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003146:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e08f      	b.n	800326c <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_I2C_Slave_Receive_DMA+0x42>
 8003156:	2302      	movs	r3, #2
 8003158:	e088      	b.n	800326c <HAL_I2C_Slave_Receive_DMA+0x154>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2222      	movs	r2, #34	; 0x22
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	88fa      	ldrh	r2, [r7, #6]
 8003182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4a38      	ldr	r2, [pc, #224]	; (8003274 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a38      	ldr	r2, [pc, #224]	; (8003278 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8003198:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d020      	beq.n	80031e4 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	4a35      	ldr	r2, [pc, #212]	; (800327c <HAL_I2C_Slave_Receive_DMA+0x164>)
 80031a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	4a34      	ldr	r2, [pc, #208]	; (8003280 <HAL_I2C_Slave_Receive_DMA+0x168>)
 80031b0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	2200      	movs	r2, #0
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	2200      	movs	r2, #0
 80031c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3324      	adds	r3, #36	; 0x24
 80031cc:	4619      	mov	r1, r3
 80031ce:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80031d4:	f7fe ff3e 	bl	8002054 <HAL_DMA_Start_IT>
 80031d8:	4603      	mov	r3, r0
 80031da:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d12f      	bne.n	8003242 <HAL_I2C_Slave_Receive_DMA+0x12a>
 80031e2:	e013      	b.n	800320c <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2228      	movs	r2, #40	; 0x28
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e02f      	b.n	800326c <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800321a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f001 faab 	bl	8004784 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800323c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e014      	b.n	800326c <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2228      	movs	r2, #40	; 0x28
 8003246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f043 0210 	orr.w	r2, r3, #16
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	ffff0000 	.word	0xffff0000
 8003278:	08003a37 	.word	0x08003a37
 800327c:	0800462b 	.word	0x0800462b
 8003280:	08004671 	.word	0x08004671

08003284 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	68f9      	ldr	r1, [r7, #12]
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
  }
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	09db      	lsrs	r3, r3, #7
 80032e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032fc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	0a9b      	lsrs	r3, r3, #10
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d010      	beq.n	800332c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	09db      	lsrs	r3, r3, #7
 800330e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	f043 0208 	orr.w	r2, r3, #8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800332a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	0a5b      	lsrs	r3, r3, #9
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	09db      	lsrs	r3, r3, #7
 800333c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003348:	f043 0202 	orr.w	r2, r3, #2
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003358:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 030b 	and.w	r3, r3, #11
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800336a:	68f9      	ldr	r1, [r7, #12]
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 ff8b 	bl	8004288 <I2C_ITError>
  }
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	70fb      	strb	r3, [r7, #3]
 8003386:	4613      	mov	r3, r2
 8003388:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b088      	sub	sp, #32
 80033fe:	af02      	add	r7, sp, #8
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <I2C_Master_ISR_IT+0x1e>
 8003414:	2302      	movs	r3, #2
 8003416:	e114      	b.n	8003642 <I2C_Master_ISR_IT+0x248>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00d      	beq.n	8003454 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2210      	movs	r2, #16
 800343e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	f043 0204 	orr.w	r2, r3, #4
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f001 f812 	bl	8004476 <I2C_Flush_TXDR>
 8003452:	e0e1      	b.n	8003618 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	089b      	lsrs	r3, r3, #2
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d023      	beq.n	80034a8 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	089b      	lsrs	r3, r3, #2
 8003464:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01d      	beq.n	80034a8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f023 0304 	bic.w	r3, r3, #4
 8003472:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a6:	e0b7      	b.n	8003618 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d01e      	beq.n	80034f2 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d018      	beq.n	80034f2 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034f0:	e092      	b.n	8003618 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	09db      	lsrs	r3, r3, #7
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d05d      	beq.n	80035ba <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	099b      	lsrs	r3, r3, #6
 8003502:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003506:	2b00      	cmp	r3, #0
 8003508:	d057      	beq.n	80035ba <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d040      	beq.n	8003596 <I2C_Master_ISR_IT+0x19c>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d13c      	bne.n	8003596 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	b29b      	uxth	r3, r3
 8003524:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003528:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	2bff      	cmp	r3, #255	; 0xff
 8003532:	d90e      	bls.n	8003552 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	22ff      	movs	r2, #255	; 0xff
 8003538:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353e:	b2da      	uxtb	r2, r3
 8003540:	8a79      	ldrh	r1, [r7, #18]
 8003542:	2300      	movs	r3, #0
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f001 f8e8 	bl	8004720 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003550:	e032      	b.n	80035b8 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003564:	d00b      	beq.n	800357e <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	b2da      	uxtb	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	8a79      	ldrh	r1, [r7, #18]
 8003572:	2000      	movs	r0, #0
 8003574:	9000      	str	r0, [sp, #0]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f001 f8d2 	bl	8004720 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800357c:	e01c      	b.n	80035b8 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003582:	b2da      	uxtb	r2, r3
 8003584:	8a79      	ldrh	r1, [r7, #18]
 8003586:	2300      	movs	r3, #0
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f001 f8c6 	bl	8004720 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003594:	e010      	b.n	80035b8 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035a4:	d003      	beq.n	80035ae <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fba9 	bl	8003cfe <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035ac:	e034      	b.n	8003618 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80035ae:	2140      	movs	r1, #64	; 0x40
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fe69 	bl	8004288 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035b6:	e02f      	b.n	8003618 <I2C_Master_ISR_IT+0x21e>
 80035b8:	e02e      	b.n	8003618 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d028      	beq.n	8003618 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d022      	beq.n	8003618 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d119      	bne.n	8003610 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035ea:	d015      	beq.n	8003618 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035f4:	d108      	bne.n	8003608 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	e007      	b.n	8003618 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fb78 	bl	8003cfe <I2C_ITMasterSeqCplt>
 800360e:	e003      	b.n	8003618 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003610:	2140      	movs	r1, #64	; 0x40
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fe38 	bl	8004288 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d009      	beq.n	8003638 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003630:	6979      	ldr	r1, [r7, #20]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fbfe 	bl	8003e34 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <I2C_Slave_ISR_IT+0x24>
 800366a:	2302      	movs	r3, #2
 800366c:	e0ec      	b.n	8003848 <I2C_Slave_ISR_IT+0x1fe>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800368e:	6939      	ldr	r1, [r7, #16]
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fc99 	bl	8003fc8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d04d      	beq.n	800373e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d047      	beq.n	800373e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d128      	bne.n	800370a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b28      	cmp	r3, #40	; 0x28
 80036c2:	d108      	bne.n	80036d6 <I2C_Slave_ISR_IT+0x8c>
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036ca:	d104      	bne.n	80036d6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80036cc:	6939      	ldr	r1, [r7, #16]
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fd84 	bl	80041dc <I2C_ITListenCplt>
 80036d4:	e032      	b.n	800373c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b29      	cmp	r3, #41	; 0x29
 80036e0:	d10e      	bne.n	8003700 <I2C_Slave_ISR_IT+0xb6>
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036e8:	d00a      	beq.n	8003700 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2210      	movs	r2, #16
 80036f0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 febf 	bl	8004476 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fb3d 	bl	8003d78 <I2C_ITSlaveSeqCplt>
 80036fe:	e01d      	b.n	800373c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2210      	movs	r2, #16
 8003706:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003708:	e096      	b.n	8003838 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2210      	movs	r2, #16
 8003710:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	f043 0204 	orr.w	r2, r3, #4
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <I2C_Slave_ISR_IT+0xe4>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800372a:	f040 8085 	bne.w	8003838 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	4619      	mov	r1, r3
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fda7 	bl	8004288 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800373a:	e07d      	b.n	8003838 <I2C_Slave_ISR_IT+0x1ee>
 800373c:	e07c      	b.n	8003838 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	089b      	lsrs	r3, r3, #2
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d030      	beq.n	80037ac <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003752:	2b00      	cmp	r3, #0
 8003754:	d02a      	beq.n	80037ac <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	d018      	beq.n	8003792 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	3b01      	subs	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d14f      	bne.n	800383c <I2C_Slave_ISR_IT+0x1f2>
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037a2:	d04b      	beq.n	800383c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fae7 	bl	8003d78 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80037aa:	e047      	b.n	800383c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	08db      	lsrs	r3, r3, #3
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	08db      	lsrs	r3, r3, #3
 80037bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80037c4:	6939      	ldr	r1, [r7, #16]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 fa15 	bl	8003bf6 <I2C_ITAddrCplt>
 80037cc:	e037      	b.n	800383e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d031      	beq.n	800383e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d02b      	beq.n	800383e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d018      	beq.n	8003822 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003820:	e00d      	b.n	800383e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003828:	d002      	beq.n	8003830 <I2C_Slave_ISR_IT+0x1e6>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 faa1 	bl	8003d78 <I2C_ITSlaveSeqCplt>
 8003836:	e002      	b.n	800383e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003838:	bf00      	nop
 800383a:	e000      	b.n	800383e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800383c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <I2C_Master_ISR_DMA+0x1a>
 8003866:	2302      	movs	r3, #2
 8003868:	e0e1      	b.n	8003a2e <I2C_Master_ISR_DMA+0x1de>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d017      	beq.n	80038ae <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003886:	2b00      	cmp	r3, #0
 8003888:	d011      	beq.n	80038ae <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2210      	movs	r2, #16
 8003890:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f043 0204 	orr.w	r2, r3, #4
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800389e:	2120      	movs	r1, #32
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 ff6f 	bl	8004784 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fde5 	bl	8004476 <I2C_Flush_TXDR>
 80038ac:	e0ba      	b.n	8003a24 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	09db      	lsrs	r3, r3, #7
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d072      	beq.n	80039a0 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	099b      	lsrs	r3, r3, #6
 80038be:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d06c      	beq.n	80039a0 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d04e      	beq.n	800397e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ec:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2bff      	cmp	r3, #255	; 0xff
 80038f6:	d906      	bls.n	8003906 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	22ff      	movs	r2, #255	; 0xff
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80038fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e010      	b.n	8003928 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003918:	d003      	beq.n	8003922 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	617b      	str	r3, [r7, #20]
 8003920:	e002      	b.n	8003928 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003926:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	b2da      	uxtb	r2, r3
 800392e:	8a79      	ldrh	r1, [r7, #18]
 8003930:	2300      	movs	r3, #0
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fef2 	bl	8004720 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b22      	cmp	r3, #34	; 0x22
 8003958:	d108      	bne.n	800396c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003968:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800396a:	e05b      	b.n	8003a24 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800397a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800397c:	e052      	b.n	8003a24 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800398c:	d003      	beq.n	8003996 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 f9b5 	bl	8003cfe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003994:	e046      	b.n	8003a24 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003996:	2140      	movs	r1, #64	; 0x40
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fc75 	bl	8004288 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800399e:	e041      	b.n	8003a24 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d029      	beq.n	8003a00 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	099b      	lsrs	r3, r3, #6
 80039b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d023      	beq.n	8003a00 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d119      	bne.n	80039f6 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d0:	d027      	beq.n	8003a22 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039da:	d108      	bne.n	80039ee <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039ea:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80039ec:	e019      	b.n	8003a22 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f985 	bl	8003cfe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80039f4:	e015      	b.n	8003a22 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80039f6:	2140      	movs	r1, #64	; 0x40
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fc45 	bl	8004288 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80039fe:	e010      	b.n	8003a22 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00b      	beq.n	8003a24 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fa0a 	bl	8003e34 <I2C_ITMasterCplt>
 8003a20:	e000      	b.n	8003a24 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003a22:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b088      	sub	sp, #32
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <I2C_Slave_ISR_DMA+0x24>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e0c9      	b.n	8003bee <I2C_Slave_ISR_DMA+0x1b8>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 faa3 	bl	8003fc8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 809a 	beq.w	8003bc4 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8093 	beq.w	8003bc4 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	0b9b      	lsrs	r3, r3, #14
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d105      	bne.n	8003ab6 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0bdb      	lsrs	r3, r3, #15
 8003aae:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d07f      	beq.n	8003bb6 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	0bdb      	lsrs	r3, r3, #15
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	0b9b      	lsrs	r3, r3, #14
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003afa:	2301      	movs	r3, #1
 8003afc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d128      	bne.n	8003b56 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b28      	cmp	r3, #40	; 0x28
 8003b0e:	d108      	bne.n	8003b22 <I2C_Slave_ISR_DMA+0xec>
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b16:	d104      	bne.n	8003b22 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fb5e 	bl	80041dc <I2C_ITListenCplt>
 8003b20:	e048      	b.n	8003bb4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b29      	cmp	r3, #41	; 0x29
 8003b2c:	d10e      	bne.n	8003b4c <I2C_Slave_ISR_DMA+0x116>
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b34:	d00a      	beq.n	8003b4c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fc99 	bl	8004476 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f917 	bl	8003d78 <I2C_ITSlaveSeqCplt>
 8003b4a:	e033      	b.n	8003bb4 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2210      	movs	r2, #16
 8003b52:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003b54:	e034      	b.n	8003bc0 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2210      	movs	r2, #16
 8003b5c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f043 0204 	orr.w	r2, r3, #4
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b70:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <I2C_Slave_ISR_DMA+0x14a>
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b7e:	d11f      	bne.n	8003bc0 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b80:	7dfb      	ldrb	r3, [r7, #23]
 8003b82:	2b21      	cmp	r3, #33	; 0x21
 8003b84:	d002      	beq.n	8003b8c <I2C_Slave_ISR_DMA+0x156>
 8003b86:	7dfb      	ldrb	r3, [r7, #23]
 8003b88:	2b29      	cmp	r3, #41	; 0x29
 8003b8a:	d103      	bne.n	8003b94 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2221      	movs	r2, #33	; 0x21
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
 8003b92:	e008      	b.n	8003ba6 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	2b22      	cmp	r3, #34	; 0x22
 8003b98:	d002      	beq.n	8003ba0 <I2C_Slave_ISR_DMA+0x16a>
 8003b9a:	7dfb      	ldrb	r3, [r7, #23]
 8003b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b9e:	d102      	bne.n	8003ba6 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2222      	movs	r2, #34	; 0x22
 8003ba4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	4619      	mov	r1, r3
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fb6b 	bl	8004288 <I2C_ITError>
      if (treatdmanack == 1U)
 8003bb2:	e005      	b.n	8003bc0 <I2C_Slave_ISR_DMA+0x18a>
 8003bb4:	e004      	b.n	8003bc0 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2210      	movs	r2, #16
 8003bbc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003bbe:	e011      	b.n	8003be4 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003bc0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003bc2:	e00f      	b.n	8003be4 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	08db      	lsrs	r3, r3, #3
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	08db      	lsrs	r3, r3, #3
 8003bd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f809 	bl	8003bf6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c0c:	2b28      	cmp	r3, #40	; 0x28
 8003c0e:	d16a      	bne.n	8003ce6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	0c1b      	lsrs	r3, r3, #16
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	0c1b      	lsrs	r3, r3, #16
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003c2e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c3c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003c4a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d138      	bne.n	8003cc6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003c54:	897b      	ldrh	r3, [r7, #10]
 8003c56:	09db      	lsrs	r3, r3, #7
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	89bb      	ldrh	r3, [r7, #12]
 8003c5c:	4053      	eors	r3, r2
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	f003 0306 	and.w	r3, r3, #6
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d11c      	bne.n	8003ca2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003c68:	897b      	ldrh	r3, [r7, #10]
 8003c6a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d13b      	bne.n	8003cf6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2208      	movs	r2, #8
 8003c8a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c94:	89ba      	ldrh	r2, [r7, #12]
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fb6d 	bl	800337a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ca0:	e029      	b.n	8003cf6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003ca2:	893b      	ldrh	r3, [r7, #8]
 8003ca4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ca6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fdd4 	bl	8004858 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003cb8:	89ba      	ldrh	r2, [r7, #12]
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fb5b 	bl	800337a <HAL_I2C_AddrCallback>
}
 8003cc4:	e017      	b.n	8003cf6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003cc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fdc4 	bl	8004858 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003cd8:	89ba      	ldrh	r2, [r7, #12]
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7ff fb4b 	bl	800337a <HAL_I2C_AddrCallback>
}
 8003ce4:	e007      	b.n	8003cf6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2208      	movs	r2, #8
 8003cec:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b21      	cmp	r3, #33	; 0x21
 8003d18:	d115      	bne.n	8003d46 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2211      	movs	r2, #17
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d2e:	2101      	movs	r1, #1
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fd91 	bl	8004858 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f005 f946 	bl	8008fd0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d44:	e014      	b.n	8003d70 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2212      	movs	r2, #18
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fd7b 	bl	8004858 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f005 f946 	bl	8008ffc <HAL_I2C_MasterRxCpltCallback>
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	0b9b      	lsrs	r3, r3, #14
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e00d      	b.n	8003dca <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	0bdb      	lsrs	r3, r3, #15
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dc8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b29      	cmp	r3, #41	; 0x29
 8003dd4:	d112      	bne.n	8003dfc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2228      	movs	r2, #40	; 0x28
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2221      	movs	r2, #33	; 0x21
 8003de2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003de4:	2101      	movs	r1, #1
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 fd36 	bl	8004858 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f005 f917 	bl	8009028 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003dfa:	e017      	b.n	8003e2c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b2a      	cmp	r3, #42	; 0x2a
 8003e06:	d111      	bne.n	8003e2c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2228      	movs	r2, #40	; 0x28
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2222      	movs	r2, #34	; 0x22
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e16:	2102      	movs	r1, #2
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fd1d 	bl	8004858 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f005 f914 	bl	8009054 <HAL_I2C_SlaveRxCpltCallback>
}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2220      	movs	r2, #32
 8003e48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b21      	cmp	r3, #33	; 0x21
 8003e54:	d107      	bne.n	8003e66 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e56:	2101      	movs	r1, #1
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fcfd 	bl	8004858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2211      	movs	r2, #17
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
 8003e64:	e00c      	b.n	8003e80 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b22      	cmp	r3, #34	; 0x22
 8003e70:	d106      	bne.n	8003e80 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e72:	2102      	movs	r1, #2
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fcef 	bl	8004858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2212      	movs	r2, #18
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b4d      	ldr	r3, [pc, #308]	; (8003fc0 <I2C_ITMasterCplt+0x18c>)
 8003e8c:	400b      	ands	r3, r1
 8003e8e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4a      	ldr	r2, [pc, #296]	; (8003fc4 <I2C_ITMasterCplt+0x190>)
 8003e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d009      	beq.n	8003ebc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2210      	movs	r2, #16
 8003eae:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	f043 0204 	orr.w	r2, r3, #4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b60      	cmp	r3, #96	; 0x60
 8003ec6:	d10b      	bne.n	8003ee0 <I2C_ITMasterCplt+0xac>
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003ede:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fac8 	bl	8004476 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b60      	cmp	r3, #96	; 0x60
 8003ef6:	d002      	beq.n	8003efe <I2C_ITMasterCplt+0xca>
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d006      	beq.n	8003f0c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f9bf 	bl	8004288 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f0a:	e054      	b.n	8003fb6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b21      	cmp	r3, #33	; 0x21
 8003f16:	d124      	bne.n	8003f62 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d10b      	bne.n	8003f4a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fa31 	bl	80033aa <HAL_I2C_MemTxCpltCallback>
}
 8003f48:	e035      	b.n	8003fb6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f005 f838 	bl	8008fd0 <HAL_I2C_MasterTxCpltCallback>
}
 8003f60:	e029      	b.n	8003fb6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b22      	cmp	r3, #34	; 0x22
 8003f6c:	d123      	bne.n	8003fb6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b40      	cmp	r3, #64	; 0x40
 8003f86:	d10b      	bne.n	8003fa0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7ff fa10 	bl	80033be <HAL_I2C_MemRxCpltCallback>
}
 8003f9e:	e00a      	b.n	8003fb6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f005 f823 	bl	8008ffc <HAL_I2C_MasterRxCpltCallback>
}
 8003fb6:	bf00      	nop
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	fe00e800 	.word	0xfe00e800
 8003fc4:	ffff0000 	.word	0xffff0000

08003fc8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2220      	movs	r2, #32
 8003fec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
 8003ff0:	2b21      	cmp	r3, #33	; 0x21
 8003ff2:	d002      	beq.n	8003ffa <I2C_ITSlaveCplt+0x32>
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	2b29      	cmp	r3, #41	; 0x29
 8003ff8:	d108      	bne.n	800400c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003ffa:	f248 0101 	movw	r1, #32769	; 0x8001
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fc2a 	bl	8004858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2221      	movs	r2, #33	; 0x21
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
 800400a:	e00d      	b.n	8004028 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b22      	cmp	r3, #34	; 0x22
 8004010:	d002      	beq.n	8004018 <I2C_ITSlaveCplt+0x50>
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b2a      	cmp	r3, #42	; 0x2a
 8004016:	d107      	bne.n	8004028 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004018:	f248 0102 	movw	r1, #32770	; 0x8002
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fc1b 	bl	8004858 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2222      	movs	r2, #34	; 0x22
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004036:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6859      	ldr	r1, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4b64      	ldr	r3, [pc, #400]	; (80041d4 <I2C_ITSlaveCplt+0x20c>)
 8004044:	400b      	ands	r3, r1
 8004046:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fa14 	bl	8004476 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	0b9b      	lsrs	r3, r3, #14
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d013      	beq.n	8004082 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004068:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	2b00      	cmp	r3, #0
 8004070:	d020      	beq.n	80040b4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004080:	e018      	b.n	80040b4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	0bdb      	lsrs	r3, r3, #15
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d012      	beq.n	80040b4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800409c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d006      	beq.n	80040b4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0304 	bic.w	r3, r3, #4
 80040c6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00c      	beq.n	8004102 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	f043 0204 	orr.w	r2, r3, #4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	2b00      	cmp	r3, #0
 800412c:	d010      	beq.n	8004150 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8a7 	bl	8004288 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b28      	cmp	r3, #40	; 0x28
 8004144:	d141      	bne.n	80041ca <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004146:	6979      	ldr	r1, [r7, #20]
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f847 	bl	80041dc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800414e:	e03c      	b.n	80041ca <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004158:	d014      	beq.n	8004184 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff fe0c 	bl	8003d78 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <I2C_ITSlaveCplt+0x210>)
 8004164:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff f90a 	bl	8003396 <HAL_I2C_ListenCpltCallback>
}
 8004182:	e022      	b.n	80041ca <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b22      	cmp	r3, #34	; 0x22
 800418e:	d10e      	bne.n	80041ae <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f004 ff54 	bl	8009054 <HAL_I2C_SlaveRxCpltCallback>
}
 80041ac:	e00d      	b.n	80041ca <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f004 ff2f 	bl	8009028 <HAL_I2C_SlaveTxCpltCallback>
}
 80041ca:	bf00      	nop
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	fe00e800 	.word	0xfe00e800
 80041d8:	ffff0000 	.word	0xffff0000

080041dc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a26      	ldr	r2, [pc, #152]	; (8004284 <I2C_ITListenCplt+0xa8>)
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d022      	beq.n	800425a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004230:	2b00      	cmp	r3, #0
 8004232:	d012      	beq.n	800425a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	f043 0204 	orr.w	r2, r3, #4
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800425a:	f248 0103 	movw	r1, #32771	; 0x8003
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 fafa 	bl	8004858 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2210      	movs	r2, #16
 800426a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff f88e 	bl	8003396 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	ffff0000 	.word	0xffff0000

08004288 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a5d      	ldr	r2, [pc, #372]	; (800441c <I2C_ITError+0x194>)
 80042a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	2b28      	cmp	r3, #40	; 0x28
 80042be:	d005      	beq.n	80042cc <I2C_ITError+0x44>
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b29      	cmp	r3, #41	; 0x29
 80042c4:	d002      	beq.n	80042cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
 80042c8:	2b2a      	cmp	r3, #42	; 0x2a
 80042ca:	d10b      	bne.n	80042e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042cc:	2103      	movs	r1, #3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fac2 	bl	8004858 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2228      	movs	r2, #40	; 0x28
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a50      	ldr	r2, [pc, #320]	; (8004420 <I2C_ITError+0x198>)
 80042e0:	635a      	str	r2, [r3, #52]	; 0x34
 80042e2:	e011      	b.n	8004308 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042e4:	f248 0103 	movw	r1, #32771	; 0x8003
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fab5 	bl	8004858 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b60      	cmp	r3, #96	; 0x60
 80042f8:	d003      	beq.n	8004302 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	2b00      	cmp	r3, #0
 8004314:	d039      	beq.n	800438a <I2C_ITError+0x102>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b11      	cmp	r3, #17
 800431a:	d002      	beq.n	8004322 <I2C_ITError+0x9a>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b21      	cmp	r3, #33	; 0x21
 8004320:	d133      	bne.n	800438a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004330:	d107      	bne.n	8004342 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004340:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe f900 	bl	800254c <HAL_DMA_GetState>
 800434c:	4603      	mov	r3, r0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d017      	beq.n	8004382 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	4a33      	ldr	r2, [pc, #204]	; (8004424 <I2C_ITError+0x19c>)
 8004358:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd ff44 	bl	80021f4 <HAL_DMA_Abort_IT>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d04d      	beq.n	800440e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800437c:	4610      	mov	r0, r2
 800437e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004380:	e045      	b.n	800440e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f850 	bl	8004428 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004388:	e041      	b.n	800440e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d039      	beq.n	8004406 <I2C_ITError+0x17e>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b12      	cmp	r3, #18
 8004396:	d002      	beq.n	800439e <I2C_ITError+0x116>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b22      	cmp	r3, #34	; 0x22
 800439c:	d133      	bne.n	8004406 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ac:	d107      	bne.n	80043be <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043bc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe f8c2 	bl	800254c <HAL_DMA_GetState>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d017      	beq.n	80043fe <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	4a14      	ldr	r2, [pc, #80]	; (8004424 <I2C_ITError+0x19c>)
 80043d4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fd ff06 	bl	80021f4 <HAL_DMA_Abort_IT>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d011      	beq.n	8004412 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043f8:	4610      	mov	r0, r2
 80043fa:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043fc:	e009      	b.n	8004412 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f812 	bl	8004428 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004404:	e005      	b.n	8004412 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f80e 	bl	8004428 <I2C_TreatErrorCallback>
  }
}
 800440c:	e002      	b.n	8004414 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004412:	bf00      	nop
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	ffff0000 	.word	0xffff0000
 8004420:	0800364b 	.word	0x0800364b
 8004424:	080046e5 	.word	0x080046e5

08004428 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b60      	cmp	r3, #96	; 0x60
 800443a:	d10e      	bne.n	800445a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fe ffc7 	bl	80033e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004458:	e009      	b.n	800446e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fe ffb2 	bl	80033d2 <HAL_I2C_ErrorCallback>
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b02      	cmp	r3, #2
 800448a:	d103      	bne.n	8004494 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2200      	movs	r2, #0
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d007      	beq.n	80044b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f042 0201 	orr.w	r2, r2, #1
 80044b0:	619a      	str	r2, [r3, #24]
  }
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b084      	sub	sp, #16
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044da:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d104      	bne.n	80044f0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80044e6:	2120      	movs	r1, #32
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f94b 	bl	8004784 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80044ee:	e02d      	b.n	800454c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80044f8:	441a      	add	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	2bff      	cmp	r3, #255	; 0xff
 8004506:	d903      	bls.n	8004510 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	22ff      	movs	r2, #255	; 0xff
 800450c:	851a      	strh	r2, [r3, #40]	; 0x28
 800450e:	e004      	b.n	800451a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	4619      	mov	r1, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3328      	adds	r3, #40	; 0x28
 800452a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004530:	f7fd fd90 	bl	8002054 <HAL_DMA_Start_IT>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d004      	beq.n	8004544 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800453a:	2110      	movs	r1, #16
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff fea3 	bl	8004288 <I2C_ITError>
}
 8004542:	e003      	b.n	800454c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004544:	2140      	movs	r1, #64	; 0x40
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f91c 	bl	8004784 <I2C_Enable_IRQ>
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004560:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800456e:	d002      	beq.n	8004576 <I2C_DMASlaveTransmitCplt+0x22>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004584:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7ff fbf6 	bl	8003d78 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045b0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80045bc:	2120      	movs	r1, #32
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f8e0 	bl	8004784 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80045c4:	e02d      	b.n	8004622 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80045ce:	441a      	add	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2bff      	cmp	r3, #255	; 0xff
 80045dc:	d903      	bls.n	80045e6 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	22ff      	movs	r2, #255	; 0xff
 80045e2:	851a      	strh	r2, [r3, #40]	; 0x28
 80045e4:	e004      	b.n	80045f0 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3324      	adds	r3, #36	; 0x24
 80045fa:	4619      	mov	r1, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8004606:	f7fd fd25 	bl	8002054 <HAL_DMA_Start_IT>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d004      	beq.n	800461a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8004610:	2110      	movs	r1, #16
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff fe38 	bl	8004288 <I2C_ITError>
}
 8004618:	e003      	b.n	8004622 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800461a:	2140      	movs	r1, #64	; 0x40
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f8b1 	bl	8004784 <I2C_Enable_IRQ>
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10e      	bne.n	8004668 <I2C_DMASlaveReceiveCplt+0x3e>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004650:	d00a      	beq.n	8004668 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004660:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f7ff fb88 	bl	8003d78 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8004668:	bf00      	nop
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8004696:	2301      	movs	r3, #1
 8004698:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d007      	beq.n	80046b2 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80046ae:	2301      	movs	r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fd ff58 	bl	8002568 <HAL_DMA_GetError>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d00e      	beq.n	80046dc <I2C_DMAError+0x6c>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00b      	beq.n	80046dc <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80046d4:	2110      	movs	r1, #16
 80046d6:	68b8      	ldr	r0, [r7, #8]
 80046d8:	f7ff fdd6 	bl	8004288 <I2C_ITError>
  }
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	2200      	movs	r2, #0
 8004700:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470e:	2200      	movs	r2, #0
 8004710:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff fe88 	bl	8004428 <I2C_TreatErrorCallback>
}
 8004718:	bf00      	nop
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	817b      	strh	r3, [r7, #10]
 800472e:	4613      	mov	r3, r2
 8004730:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004732:	897b      	ldrh	r3, [r7, #10]
 8004734:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004738:	7a7b      	ldrb	r3, [r7, #9]
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004740:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	4313      	orrs	r3, r2
 800474a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800474e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	0d5b      	lsrs	r3, r3, #21
 800475a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <I2C_TransferConfig+0x60>)
 8004760:	430b      	orrs	r3, r1
 8004762:	43db      	mvns	r3, r3
 8004764:	ea02 0103 	and.w	r1, r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	03ff63ff 	.word	0x03ff63ff

08004784 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	4a2d      	ldr	r2, [pc, #180]	; (8004850 <I2C_Enable_IRQ+0xcc>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d004      	beq.n	80047a8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80047a2:	4a2c      	ldr	r2, [pc, #176]	; (8004854 <I2C_Enable_IRQ+0xd0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d11d      	bne.n	80047e4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	da03      	bge.n	80047b8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80047b8:	887b      	ldrh	r3, [r7, #2]
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d103      	bne.n	80047c6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80047c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047c6:	887b      	ldrh	r3, [r7, #2]
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d103      	bne.n	80047d4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047d2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80047d4:	887b      	ldrh	r3, [r7, #2]
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d12c      	bne.n	8004834 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80047e2:	e027      	b.n	8004834 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	da03      	bge.n	80047f4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047f2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80047f4:	887b      	ldrh	r3, [r7, #2]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004804:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004806:	887b      	ldrh	r3, [r7, #2]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004816:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004818:	887b      	ldrh	r3, [r7, #2]
 800481a:	2b10      	cmp	r3, #16
 800481c:	d103      	bne.n	8004826 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004824:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004826:	887b      	ldrh	r3, [r7, #2]
 8004828:	2b20      	cmp	r3, #32
 800482a:	d103      	bne.n	8004834 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f043 0320 	orr.w	r3, r3, #32
 8004832:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6819      	ldr	r1, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	08003851 	.word	0x08003851
 8004854:	08003a37 	.word	0x08003a37

08004858 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004868:	887b      	ldrh	r3, [r7, #2]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00f      	beq.n	8004892 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004878:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004880:	b2db      	uxtb	r3, r3
 8004882:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004886:	2b28      	cmp	r3, #40	; 0x28
 8004888:	d003      	beq.n	8004892 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004890:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004892:	887b      	ldrh	r3, [r7, #2]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00f      	beq.n	80048bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80048a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048b0:	2b28      	cmp	r3, #40	; 0x28
 80048b2:	d003      	beq.n	80048bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	da03      	bge.n	80048cc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80048ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80048cc:	887b      	ldrh	r3, [r7, #2]
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d103      	bne.n	80048da <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80048d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80048da:	887b      	ldrh	r3, [r7, #2]
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d103      	bne.n	80048e8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f043 0320 	orr.w	r3, r3, #32
 80048e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80048e8:	887b      	ldrh	r3, [r7, #2]
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	d103      	bne.n	80048f6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048f4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6819      	ldr	r1, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	43da      	mvns	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	400a      	ands	r2, r1
 8004906:	601a      	str	r2, [r3, #0]
}
 8004908:	bf00      	nop
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b20      	cmp	r3, #32
 8004928:	d138      	bne.n	800499c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004934:	2302      	movs	r3, #2
 8004936:	e032      	b.n	800499e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2224      	movs	r2, #36	; 0x24
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004966:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0201 	orr.w	r2, r2, #1
 8004986:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e000      	b.n	800499e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
  }
}
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b085      	sub	sp, #20
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d139      	bne.n	8004a34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e033      	b.n	8004a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2224      	movs	r2, #36	; 0x24
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0201 	bic.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	e000      	b.n	8004a36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a34:	2302      	movs	r3, #2
  }
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a44:	b08f      	sub	sp, #60	; 0x3c
 8004a46:	af0a      	add	r7, sp, #40	; 0x28
 8004a48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e116      	b.n	8004c82 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc fe9e 	bl	80017b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2203      	movs	r2, #3
 8004a78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f003 ff1a 	bl	80088cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	687e      	ldr	r6, [r7, #4]
 8004aa0:	466d      	mov	r5, sp
 8004aa2:	f106 0410 	add.w	r4, r6, #16
 8004aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ab2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ab6:	1d33      	adds	r3, r6, #4
 8004ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aba:	6838      	ldr	r0, [r7, #0]
 8004abc:	f003 feae 	bl	800881c <USB_CoreInit>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0d7      	b.n	8004c82 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f003 ff08 	bl	80088ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]
 8004ae2:	e04a      	b.n	8004b7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ae4:	7bfa      	ldrb	r2, [r7, #15]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	333d      	adds	r3, #61	; 0x3d
 8004af4:	2201      	movs	r2, #1
 8004af6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004af8:	7bfa      	ldrb	r2, [r7, #15]
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	333c      	adds	r3, #60	; 0x3c
 8004b08:	7bfa      	ldrb	r2, [r7, #15]
 8004b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b0c:	7bfa      	ldrb	r2, [r7, #15]
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	b298      	uxth	r0, r3
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	4613      	mov	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	3344      	adds	r3, #68	; 0x44
 8004b20:	4602      	mov	r2, r0
 8004b22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b24:	7bfa      	ldrb	r2, [r7, #15]
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	3340      	adds	r3, #64	; 0x40
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b38:	7bfa      	ldrb	r2, [r7, #15]
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	3348      	adds	r3, #72	; 0x48
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b4c:	7bfa      	ldrb	r2, [r7, #15]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	334c      	adds	r3, #76	; 0x4c
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b60:	7bfa      	ldrb	r2, [r7, #15]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	3354      	adds	r3, #84	; 0x54
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	3301      	adds	r3, #1
 8004b78:	73fb      	strb	r3, [r7, #15]
 8004b7a:	7bfa      	ldrb	r2, [r7, #15]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d3af      	bcc.n	8004ae4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b84:	2300      	movs	r3, #0
 8004b86:	73fb      	strb	r3, [r7, #15]
 8004b88:	e044      	b.n	8004c14 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b8a:	7bfa      	ldrb	r2, [r7, #15]
 8004b8c:	6879      	ldr	r1, [r7, #4]
 8004b8e:	4613      	mov	r3, r2
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	440b      	add	r3, r1
 8004b98:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ba0:	7bfa      	ldrb	r2, [r7, #15]
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004bb2:	7bfa      	ldrb	r2, [r7, #15]
 8004bb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bb6:	7bfa      	ldrb	r2, [r7, #15]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bcc:	7bfa      	ldrb	r2, [r7, #15]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004be2:	7bfa      	ldrb	r2, [r7, #15]
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004bf8:	7bfa      	ldrb	r2, [r7, #15]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	3301      	adds	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
 8004c14:	7bfa      	ldrb	r2, [r7, #15]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d3b5      	bcc.n	8004b8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	687e      	ldr	r6, [r7, #4]
 8004c26:	466d      	mov	r5, sp
 8004c28:	f106 0410 	add.w	r4, r6, #16
 8004c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c38:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c3c:	1d33      	adds	r3, r6, #4
 8004c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c40:	6838      	ldr	r0, [r7, #0]
 8004c42:	f003 fea1 	bl	8008988 <USB_DevInit>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e014      	b.n	8004c82 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d102      	bne.n	8004c76 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f80b 	bl	8004c8c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f004 f85f 	bl	8008d3e <USB_DevDisconnect>

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004c8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cba:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_PCDEx_ActivateLPM+0x44>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	10000003 	.word	0x10000003

08004cd4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd8:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a04      	ldr	r2, [pc, #16]	; (8004cf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce2:	6013      	str	r3, [r2, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40007000 	.word	0x40007000

08004cf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e291      	b.n	800522e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 8087 	beq.w	8004e26 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d18:	4b96      	ldr	r3, [pc, #600]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 030c 	and.w	r3, r3, #12
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d00c      	beq.n	8004d3e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d24:	4b93      	ldr	r3, [pc, #588]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 030c 	and.w	r3, r3, #12
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d112      	bne.n	8004d56 <HAL_RCC_OscConfig+0x62>
 8004d30:	4b90      	ldr	r3, [pc, #576]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3c:	d10b      	bne.n	8004d56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3e:	4b8d      	ldr	r3, [pc, #564]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d06c      	beq.n	8004e24 <HAL_RCC_OscConfig+0x130>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d168      	bne.n	8004e24 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e26b      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5e:	d106      	bne.n	8004d6e <HAL_RCC_OscConfig+0x7a>
 8004d60:	4b84      	ldr	r3, [pc, #528]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a83      	ldr	r2, [pc, #524]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	e02e      	b.n	8004dcc <HAL_RCC_OscConfig+0xd8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCC_OscConfig+0x9c>
 8004d76:	4b7f      	ldr	r3, [pc, #508]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a7e      	ldr	r2, [pc, #504]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	4b7c      	ldr	r3, [pc, #496]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a7b      	ldr	r2, [pc, #492]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004d88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e01d      	b.n	8004dcc <HAL_RCC_OscConfig+0xd8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d98:	d10c      	bne.n	8004db4 <HAL_RCC_OscConfig+0xc0>
 8004d9a:	4b76      	ldr	r3, [pc, #472]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a75      	ldr	r2, [pc, #468]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	4b73      	ldr	r3, [pc, #460]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a72      	ldr	r2, [pc, #456]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db0:	6013      	str	r3, [r2, #0]
 8004db2:	e00b      	b.n	8004dcc <HAL_RCC_OscConfig+0xd8>
 8004db4:	4b6f      	ldr	r3, [pc, #444]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a6e      	ldr	r2, [pc, #440]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	4b6c      	ldr	r3, [pc, #432]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a6b      	ldr	r2, [pc, #428]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d013      	beq.n	8004dfc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fc ff4e 	bl	8001c74 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ddc:	f7fc ff4a 	bl	8001c74 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b64      	cmp	r3, #100	; 0x64
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e21f      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dee:	4b61      	ldr	r3, [pc, #388]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0xe8>
 8004dfa:	e014      	b.n	8004e26 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dfc:	f7fc ff3a 	bl	8001c74 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e04:	f7fc ff36 	bl	8001c74 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b64      	cmp	r3, #100	; 0x64
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e20b      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e16:	4b57      	ldr	r3, [pc, #348]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1f0      	bne.n	8004e04 <HAL_RCC_OscConfig+0x110>
 8004e22:	e000      	b.n	8004e26 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d069      	beq.n	8004f06 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e32:	4b50      	ldr	r3, [pc, #320]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e3e:	4b4d      	ldr	r3, [pc, #308]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d11c      	bne.n	8004e84 <HAL_RCC_OscConfig+0x190>
 8004e4a:	4b4a      	ldr	r3, [pc, #296]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d116      	bne.n	8004e84 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e56:	4b47      	ldr	r3, [pc, #284]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_RCC_OscConfig+0x17a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d001      	beq.n	8004e6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e1df      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6e:	4b41      	ldr	r3, [pc, #260]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	493d      	ldr	r1, [pc, #244]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e82:	e040      	b.n	8004f06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d023      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e8c:	4b39      	ldr	r3, [pc, #228]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a38      	ldr	r2, [pc, #224]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fc feec 	bl	8001c74 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea0:	f7fc fee8 	bl	8001c74 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e1bd      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb2:	4b30      	ldr	r3, [pc, #192]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ebe:	4b2d      	ldr	r3, [pc, #180]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	4929      	ldr	r1, [pc, #164]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]
 8004ed2:	e018      	b.n	8004f06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ed4:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a26      	ldr	r2, [pc, #152]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004eda:	f023 0301 	bic.w	r3, r3, #1
 8004ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fc fec8 	bl	8001c74 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee8:	f7fc fec4 	bl	8001c74 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e199      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004efa:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1f0      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d038      	beq.n	8004f84 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d019      	beq.n	8004f4e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f1a:	4b16      	ldr	r3, [pc, #88]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f1e:	4a15      	ldr	r2, [pc, #84]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f26:	f7fc fea5 	bl	8001c74 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f2e:	f7fc fea1 	bl	8001c74 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e176      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f40:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCC_OscConfig+0x23a>
 8004f4c:	e01a      	b.n	8004f84 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f52:	4a08      	ldr	r2, [pc, #32]	; (8004f74 <HAL_RCC_OscConfig+0x280>)
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5a:	f7fc fe8b 	bl	8001c74 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f60:	e00a      	b.n	8004f78 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f62:	f7fc fe87 	bl	8001c74 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d903      	bls.n	8004f78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e15c      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
 8004f74:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f78:	4b91      	ldr	r3, [pc, #580]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8004f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1ee      	bne.n	8004f62 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f000 80a4 	beq.w	80050da <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f92:	4b8b      	ldr	r3, [pc, #556]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10d      	bne.n	8004fba <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f9e:	4b88      	ldr	r3, [pc, #544]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	4a87      	ldr	r2, [pc, #540]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8004fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8004faa:	4b85      	ldr	r3, [pc, #532]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb2:	60bb      	str	r3, [r7, #8]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fba:	4b82      	ldr	r3, [pc, #520]	; (80051c4 <HAL_RCC_OscConfig+0x4d0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d118      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004fc6:	4b7f      	ldr	r3, [pc, #508]	; (80051c4 <HAL_RCC_OscConfig+0x4d0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a7e      	ldr	r2, [pc, #504]	; (80051c4 <HAL_RCC_OscConfig+0x4d0>)
 8004fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fd2:	f7fc fe4f 	bl	8001c74 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd8:	e008      	b.n	8004fec <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fda:	f7fc fe4b 	bl	8001c74 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b64      	cmp	r3, #100	; 0x64
 8004fe6:	d901      	bls.n	8004fec <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e120      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fec:	4b75      	ldr	r3, [pc, #468]	; (80051c4 <HAL_RCC_OscConfig+0x4d0>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0f0      	beq.n	8004fda <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d106      	bne.n	800500e <HAL_RCC_OscConfig+0x31a>
 8005000:	4b6f      	ldr	r3, [pc, #444]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005004:	4a6e      	ldr	r2, [pc, #440]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	6713      	str	r3, [r2, #112]	; 0x70
 800500c:	e02d      	b.n	800506a <HAL_RCC_OscConfig+0x376>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10c      	bne.n	8005030 <HAL_RCC_OscConfig+0x33c>
 8005016:	4b6a      	ldr	r3, [pc, #424]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	4a69      	ldr	r2, [pc, #420]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 800501c:	f023 0301 	bic.w	r3, r3, #1
 8005020:	6713      	str	r3, [r2, #112]	; 0x70
 8005022:	4b67      	ldr	r3, [pc, #412]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005026:	4a66      	ldr	r2, [pc, #408]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005028:	f023 0304 	bic.w	r3, r3, #4
 800502c:	6713      	str	r3, [r2, #112]	; 0x70
 800502e:	e01c      	b.n	800506a <HAL_RCC_OscConfig+0x376>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b05      	cmp	r3, #5
 8005036:	d10c      	bne.n	8005052 <HAL_RCC_OscConfig+0x35e>
 8005038:	4b61      	ldr	r3, [pc, #388]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 800503a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503c:	4a60      	ldr	r2, [pc, #384]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 800503e:	f043 0304 	orr.w	r3, r3, #4
 8005042:	6713      	str	r3, [r2, #112]	; 0x70
 8005044:	4b5e      	ldr	r3, [pc, #376]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005048:	4a5d      	ldr	r2, [pc, #372]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	6713      	str	r3, [r2, #112]	; 0x70
 8005050:	e00b      	b.n	800506a <HAL_RCC_OscConfig+0x376>
 8005052:	4b5b      	ldr	r3, [pc, #364]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005056:	4a5a      	ldr	r2, [pc, #360]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	6713      	str	r3, [r2, #112]	; 0x70
 800505e:	4b58      	ldr	r3, [pc, #352]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005062:	4a57      	ldr	r2, [pc, #348]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005064:	f023 0304 	bic.w	r3, r3, #4
 8005068:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d015      	beq.n	800509e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005072:	f7fc fdff 	bl	8001c74 <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005078:	e00a      	b.n	8005090 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507a:	f7fc fdfb 	bl	8001c74 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f241 3288 	movw	r2, #5000	; 0x1388
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e0ce      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005090:	4b4b      	ldr	r3, [pc, #300]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ee      	beq.n	800507a <HAL_RCC_OscConfig+0x386>
 800509c:	e014      	b.n	80050c8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509e:	f7fc fde9 	bl	8001c74 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050a4:	e00a      	b.n	80050bc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fc fde5 	bl	8001c74 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0b8      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050bc:	4b40      	ldr	r3, [pc, #256]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ee      	bne.n	80050a6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d105      	bne.n	80050da <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ce:	4b3c      	ldr	r3, [pc, #240]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	4a3b      	ldr	r2, [pc, #236]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 80050d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 80a4 	beq.w	800522c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050e4:	4b36      	ldr	r3, [pc, #216]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 030c 	and.w	r3, r3, #12
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d06b      	beq.n	80051c8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d149      	bne.n	800518c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f8:	4b31      	ldr	r3, [pc, #196]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a30      	ldr	r2, [pc, #192]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 80050fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fc fdb6 	bl	8001c74 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510c:	f7fc fdb2 	bl	8001c74 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e087      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511e:	4b28      	ldr	r3, [pc, #160]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69da      	ldr	r2, [r3, #28]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	019b      	lsls	r3, r3, #6
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	085b      	lsrs	r3, r3, #1
 8005142:	3b01      	subs	r3, #1
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	431a      	orrs	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	061b      	lsls	r3, r3, #24
 800514e:	4313      	orrs	r3, r2
 8005150:	4a1b      	ldr	r2, [pc, #108]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005152:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005156:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005158:	4b19      	ldr	r3, [pc, #100]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a18      	ldr	r2, [pc, #96]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 800515e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fc fd86 	bl	8001c74 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516c:	f7fc fd82 	bl	8001c74 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e057      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800517e:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0x478>
 800518a:	e04f      	b.n	800522c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a0b      	ldr	r2, [pc, #44]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 8005192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fc fd6c 	bl	8001c74 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a0:	f7fc fd68 	bl	8001c74 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e03d      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b2:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <HAL_RCC_OscConfig+0x4cc>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x4ac>
 80051be:	e035      	b.n	800522c <HAL_RCC_OscConfig+0x538>
 80051c0:	40023800 	.word	0x40023800
 80051c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80051c8:	4b1b      	ldr	r3, [pc, #108]	; (8005238 <HAL_RCC_OscConfig+0x544>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d028      	beq.n	8005228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d121      	bne.n	8005228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d11a      	bne.n	8005228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051f8:	4013      	ands	r3, r2
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005200:	4293      	cmp	r3, r2
 8005202:	d111      	bne.n	8005228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	085b      	lsrs	r3, r3, #1
 8005210:	3b01      	subs	r3, #1
 8005212:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005214:	429a      	cmp	r2, r3
 8005216:	d107      	bne.n	8005228 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005224:	429a      	cmp	r2, r3
 8005226:	d001      	beq.n	800522c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e000      	b.n	800522e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800

0800523c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0d0      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005254:	4b6a      	ldr	r3, [pc, #424]	; (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d910      	bls.n	8005284 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005262:	4b67      	ldr	r3, [pc, #412]	; (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f023 020f 	bic.w	r2, r3, #15
 800526a:	4965      	ldr	r1, [pc, #404]	; (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	4313      	orrs	r3, r2
 8005270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005272:	4b63      	ldr	r3, [pc, #396]	; (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d001      	beq.n	8005284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0b8      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d020      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800529c:	4b59      	ldr	r3, [pc, #356]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4a58      	ldr	r2, [pc, #352]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80052a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052b4:	4b53      	ldr	r3, [pc, #332]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4a52      	ldr	r2, [pc, #328]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80052ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c0:	4b50      	ldr	r3, [pc, #320]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	494d      	ldr	r1, [pc, #308]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d040      	beq.n	8005360 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d107      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e6:	4b47      	ldr	r3, [pc, #284]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d115      	bne.n	800531e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e07f      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d107      	bne.n	800530e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fe:	4b41      	ldr	r3, [pc, #260]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e073      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530e:	4b3d      	ldr	r3, [pc, #244]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e06b      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800531e:	4b39      	ldr	r3, [pc, #228]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f023 0203 	bic.w	r2, r3, #3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4936      	ldr	r1, [pc, #216]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 800532c:	4313      	orrs	r3, r2
 800532e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005330:	f7fc fca0 	bl	8001c74 <HAL_GetTick>
 8005334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005336:	e00a      	b.n	800534e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005338:	f7fc fc9c 	bl	8001c74 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	f241 3288 	movw	r2, #5000	; 0x1388
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e053      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534e:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 020c 	and.w	r2, r3, #12
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	429a      	cmp	r2, r3
 800535e:	d1eb      	bne.n	8005338 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005360:	4b27      	ldr	r3, [pc, #156]	; (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d210      	bcs.n	8005390 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536e:	4b24      	ldr	r3, [pc, #144]	; (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f023 020f 	bic.w	r2, r3, #15
 8005376:	4922      	ldr	r1, [pc, #136]	; (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	4b20      	ldr	r3, [pc, #128]	; (8005400 <HAL_RCC_ClockConfig+0x1c4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d001      	beq.n	8005390 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e032      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800539c:	4b19      	ldr	r3, [pc, #100]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4916      	ldr	r1, [pc, #88]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053ba:	4b12      	ldr	r3, [pc, #72]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	490e      	ldr	r1, [pc, #56]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053ce:	f000 f821 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 80053d2:	4602      	mov	r2, r0
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <HAL_RCC_ClockConfig+0x1c8>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	091b      	lsrs	r3, r3, #4
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	490a      	ldr	r1, [pc, #40]	; (8005408 <HAL_RCC_ClockConfig+0x1cc>)
 80053e0:	5ccb      	ldrb	r3, [r1, r3]
 80053e2:	fa22 f303 	lsr.w	r3, r2, r3
 80053e6:	4a09      	ldr	r2, [pc, #36]	; (800540c <HAL_RCC_ClockConfig+0x1d0>)
 80053e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053ea:	4b09      	ldr	r3, [pc, #36]	; (8005410 <HAL_RCC_ClockConfig+0x1d4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fc fbfc 	bl	8001bec <HAL_InitTick>

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40023c00 	.word	0x40023c00
 8005404:	40023800 	.word	0x40023800
 8005408:	0800ae74 	.word	0x0800ae74
 800540c:	20000000 	.word	0x20000000
 8005410:	20000004 	.word	0x20000004

08005414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005418:	b094      	sub	sp, #80	; 0x50
 800541a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800541c:	2300      	movs	r3, #0
 800541e:	647b      	str	r3, [r7, #68]	; 0x44
 8005420:	2300      	movs	r3, #0
 8005422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005424:	2300      	movs	r3, #0
 8005426:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800542c:	4b79      	ldr	r3, [pc, #484]	; (8005614 <HAL_RCC_GetSysClockFreq+0x200>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 030c 	and.w	r3, r3, #12
 8005434:	2b08      	cmp	r3, #8
 8005436:	d00d      	beq.n	8005454 <HAL_RCC_GetSysClockFreq+0x40>
 8005438:	2b08      	cmp	r3, #8
 800543a:	f200 80e1 	bhi.w	8005600 <HAL_RCC_GetSysClockFreq+0x1ec>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_RCC_GetSysClockFreq+0x34>
 8005442:	2b04      	cmp	r3, #4
 8005444:	d003      	beq.n	800544e <HAL_RCC_GetSysClockFreq+0x3a>
 8005446:	e0db      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005448:	4b73      	ldr	r3, [pc, #460]	; (8005618 <HAL_RCC_GetSysClockFreq+0x204>)
 800544a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800544c:	e0db      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800544e:	4b73      	ldr	r3, [pc, #460]	; (800561c <HAL_RCC_GetSysClockFreq+0x208>)
 8005450:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005452:	e0d8      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005454:	4b6f      	ldr	r3, [pc, #444]	; (8005614 <HAL_RCC_GetSysClockFreq+0x200>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800545c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800545e:	4b6d      	ldr	r3, [pc, #436]	; (8005614 <HAL_RCC_GetSysClockFreq+0x200>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d063      	beq.n	8005532 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800546a:	4b6a      	ldr	r3, [pc, #424]	; (8005614 <HAL_RCC_GetSysClockFreq+0x200>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	099b      	lsrs	r3, r3, #6
 8005470:	2200      	movs	r2, #0
 8005472:	63bb      	str	r3, [r7, #56]	; 0x38
 8005474:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547c:	633b      	str	r3, [r7, #48]	; 0x30
 800547e:	2300      	movs	r3, #0
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
 8005482:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005486:	4622      	mov	r2, r4
 8005488:	462b      	mov	r3, r5
 800548a:	f04f 0000 	mov.w	r0, #0
 800548e:	f04f 0100 	mov.w	r1, #0
 8005492:	0159      	lsls	r1, r3, #5
 8005494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005498:	0150      	lsls	r0, r2, #5
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4621      	mov	r1, r4
 80054a0:	1a51      	subs	r1, r2, r1
 80054a2:	6139      	str	r1, [r7, #16]
 80054a4:	4629      	mov	r1, r5
 80054a6:	eb63 0301 	sbc.w	r3, r3, r1
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054b8:	4659      	mov	r1, fp
 80054ba:	018b      	lsls	r3, r1, #6
 80054bc:	4651      	mov	r1, sl
 80054be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054c2:	4651      	mov	r1, sl
 80054c4:	018a      	lsls	r2, r1, #6
 80054c6:	4651      	mov	r1, sl
 80054c8:	ebb2 0801 	subs.w	r8, r2, r1
 80054cc:	4659      	mov	r1, fp
 80054ce:	eb63 0901 	sbc.w	r9, r3, r1
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054e6:	4690      	mov	r8, r2
 80054e8:	4699      	mov	r9, r3
 80054ea:	4623      	mov	r3, r4
 80054ec:	eb18 0303 	adds.w	r3, r8, r3
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	462b      	mov	r3, r5
 80054f4:	eb49 0303 	adc.w	r3, r9, r3
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005506:	4629      	mov	r1, r5
 8005508:	024b      	lsls	r3, r1, #9
 800550a:	4621      	mov	r1, r4
 800550c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005510:	4621      	mov	r1, r4
 8005512:	024a      	lsls	r2, r1, #9
 8005514:	4610      	mov	r0, r2
 8005516:	4619      	mov	r1, r3
 8005518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551a:	2200      	movs	r2, #0
 800551c:	62bb      	str	r3, [r7, #40]	; 0x28
 800551e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005520:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005524:	f7fa fec4 	bl	80002b0 <__aeabi_uldivmod>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4613      	mov	r3, r2
 800552e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005530:	e058      	b.n	80055e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005532:	4b38      	ldr	r3, [pc, #224]	; (8005614 <HAL_RCC_GetSysClockFreq+0x200>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	2200      	movs	r2, #0
 800553a:	4618      	mov	r0, r3
 800553c:	4611      	mov	r1, r2
 800553e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005542:	623b      	str	r3, [r7, #32]
 8005544:	2300      	movs	r3, #0
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
 8005548:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800554c:	4642      	mov	r2, r8
 800554e:	464b      	mov	r3, r9
 8005550:	f04f 0000 	mov.w	r0, #0
 8005554:	f04f 0100 	mov.w	r1, #0
 8005558:	0159      	lsls	r1, r3, #5
 800555a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800555e:	0150      	lsls	r0, r2, #5
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4641      	mov	r1, r8
 8005566:	ebb2 0a01 	subs.w	sl, r2, r1
 800556a:	4649      	mov	r1, r9
 800556c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800557c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005580:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005584:	ebb2 040a 	subs.w	r4, r2, sl
 8005588:	eb63 050b 	sbc.w	r5, r3, fp
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	00eb      	lsls	r3, r5, #3
 8005596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800559a:	00e2      	lsls	r2, r4, #3
 800559c:	4614      	mov	r4, r2
 800559e:	461d      	mov	r5, r3
 80055a0:	4643      	mov	r3, r8
 80055a2:	18e3      	adds	r3, r4, r3
 80055a4:	603b      	str	r3, [r7, #0]
 80055a6:	464b      	mov	r3, r9
 80055a8:	eb45 0303 	adc.w	r3, r5, r3
 80055ac:	607b      	str	r3, [r7, #4]
 80055ae:	f04f 0200 	mov.w	r2, #0
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055ba:	4629      	mov	r1, r5
 80055bc:	028b      	lsls	r3, r1, #10
 80055be:	4621      	mov	r1, r4
 80055c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055c4:	4621      	mov	r1, r4
 80055c6:	028a      	lsls	r2, r1, #10
 80055c8:	4610      	mov	r0, r2
 80055ca:	4619      	mov	r1, r3
 80055cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ce:	2200      	movs	r2, #0
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	61fa      	str	r2, [r7, #28]
 80055d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055d8:	f7fa fe6a 	bl	80002b0 <__aeabi_uldivmod>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4613      	mov	r3, r2
 80055e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	0c1b      	lsrs	r3, r3, #16
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	3301      	adds	r3, #1
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80055f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055fe:	e002      	b.n	8005606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <HAL_RCC_GetSysClockFreq+0x204>)
 8005602:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005608:	4618      	mov	r0, r3
 800560a:	3750      	adds	r7, #80	; 0x50
 800560c:	46bd      	mov	sp, r7
 800560e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005612:	bf00      	nop
 8005614:	40023800 	.word	0x40023800
 8005618:	00f42400 	.word	0x00f42400
 800561c:	007a1200 	.word	0x007a1200

08005620 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005624:	4b03      	ldr	r3, [pc, #12]	; (8005634 <HAL_RCC_GetHCLKFreq+0x14>)
 8005626:	681b      	ldr	r3, [r3, #0]
}
 8005628:	4618      	mov	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20000000 	.word	0x20000000

08005638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800563c:	f7ff fff0 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 8005640:	4602      	mov	r2, r0
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	0a9b      	lsrs	r3, r3, #10
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	4903      	ldr	r1, [pc, #12]	; (800565c <HAL_RCC_GetPCLK1Freq+0x24>)
 800564e:	5ccb      	ldrb	r3, [r1, r3]
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005654:	4618      	mov	r0, r3
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40023800 	.word	0x40023800
 800565c:	0800ae84 	.word	0x0800ae84

08005660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005664:	f7ff ffdc 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 8005668:	4602      	mov	r2, r0
 800566a:	4b05      	ldr	r3, [pc, #20]	; (8005680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	0b5b      	lsrs	r3, r3, #13
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	4903      	ldr	r1, [pc, #12]	; (8005684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005676:	5ccb      	ldrb	r3, [r1, r3]
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800567c:	4618      	mov	r0, r3
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40023800 	.word	0x40023800
 8005684:	0800ae84 	.word	0x0800ae84

08005688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d012      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056b0:	4b69      	ldr	r3, [pc, #420]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4a68      	ldr	r2, [pc, #416]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80056ba:	6093      	str	r3, [r2, #8]
 80056bc:	4b66      	ldr	r3, [pc, #408]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c4:	4964      	ldr	r1, [pc, #400]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80056d2:	2301      	movs	r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d017      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056e2:	4b5d      	ldr	r3, [pc, #372]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f0:	4959      	ldr	r1, [pc, #356]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005700:	d101      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005702:	2301      	movs	r3, #1
 8005704:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800570e:	2301      	movs	r3, #1
 8005710:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d017      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800571e:	4b4e      	ldr	r3, [pc, #312]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005724:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	494a      	ldr	r1, [pc, #296]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800573c:	d101      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800573e:	2301      	movs	r3, #1
 8005740:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800574a:	2301      	movs	r3, #1
 800574c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800575a:	2301      	movs	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 808b 	beq.w	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800576c:	4b3a      	ldr	r3, [pc, #232]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	4a39      	ldr	r2, [pc, #228]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005776:	6413      	str	r3, [r2, #64]	; 0x40
 8005778:	4b37      	ldr	r3, [pc, #220]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005780:	60bb      	str	r3, [r7, #8]
 8005782:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005784:	4b35      	ldr	r3, [pc, #212]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a34      	ldr	r2, [pc, #208]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800578a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800578e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005790:	f7fc fa70 	bl	8001c74 <HAL_GetTick>
 8005794:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005798:	f7fc fa6c 	bl	8001c74 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e357      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80057aa:	4b2c      	ldr	r3, [pc, #176]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057b6:	4b28      	ldr	r3, [pc, #160]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d035      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d02e      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057d4:	4b20      	ldr	r3, [pc, #128]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057de:	4b1e      	ldr	r3, [pc, #120]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057ea:	4b1b      	ldr	r3, [pc, #108]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ee:	4a1a      	ldr	r2, [pc, #104]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80057f6:	4a18      	ldr	r2, [pc, #96]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057fc:	4b16      	ldr	r3, [pc, #88]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d114      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005808:	f7fc fa34 	bl	8001c74 <HAL_GetTick>
 800580c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580e:	e00a      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005810:	f7fc fa30 	bl	8001c74 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e319      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0ee      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800583e:	d111      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800584e:	400b      	ands	r3, r1
 8005850:	4901      	ldr	r1, [pc, #4]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005852:	4313      	orrs	r3, r2
 8005854:	608b      	str	r3, [r1, #8]
 8005856:	e00b      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005858:	40023800 	.word	0x40023800
 800585c:	40007000 	.word	0x40007000
 8005860:	0ffffcff 	.word	0x0ffffcff
 8005864:	4baa      	ldr	r3, [pc, #680]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	4aa9      	ldr	r2, [pc, #676]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800586a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800586e:	6093      	str	r3, [r2, #8]
 8005870:	4ba7      	ldr	r3, [pc, #668]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800587c:	49a4      	ldr	r1, [pc, #656]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800587e:	4313      	orrs	r3, r2
 8005880:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b00      	cmp	r3, #0
 800588c:	d010      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800588e:	4ba0      	ldr	r3, [pc, #640]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005894:	4a9e      	ldr	r2, [pc, #632]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800589a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800589e:	4b9c      	ldr	r3, [pc, #624]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	4999      	ldr	r1, [pc, #612]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058bc:	4b94      	ldr	r3, [pc, #592]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ca:	4991      	ldr	r1, [pc, #580]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058de:	4b8c      	ldr	r3, [pc, #560]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ec:	4988      	ldr	r1, [pc, #544]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005900:	4b83      	ldr	r3, [pc, #524]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800590e:	4980      	ldr	r1, [pc, #512]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005922:	4b7b      	ldr	r3, [pc, #492]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005928:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	4977      	ldr	r1, [pc, #476]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005944:	4b72      	ldr	r3, [pc, #456]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594a:	f023 0203 	bic.w	r2, r3, #3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005952:	496f      	ldr	r1, [pc, #444]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005966:	4b6a      	ldr	r3, [pc, #424]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596c:	f023 020c 	bic.w	r2, r3, #12
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005974:	4966      	ldr	r1, [pc, #408]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005988:	4b61      	ldr	r3, [pc, #388]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	495e      	ldr	r1, [pc, #376]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059aa:	4b59      	ldr	r3, [pc, #356]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b8:	4955      	ldr	r1, [pc, #340]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059cc:	4b50      	ldr	r3, [pc, #320]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059da:	494d      	ldr	r1, [pc, #308]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80059ee:	4b48      	ldr	r3, [pc, #288]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fc:	4944      	ldr	r1, [pc, #272]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005a10:	4b3f      	ldr	r3, [pc, #252]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1e:	493c      	ldr	r1, [pc, #240]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005a32:	4b37      	ldr	r3, [pc, #220]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a40:	4933      	ldr	r1, [pc, #204]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a54:	4b2e      	ldr	r3, [pc, #184]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a62:	492b      	ldr	r1, [pc, #172]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d011      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a76:	4b26      	ldr	r3, [pc, #152]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a84:	4922      	ldr	r1, [pc, #136]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a94:	d101      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005a96:	2301      	movs	r3, #1
 8005a98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ab6:	4b16      	ldr	r3, [pc, #88]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ac4:	4912      	ldr	r1, [pc, #72]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00b      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ad8:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ae8:	4909      	ldr	r1, [pc, #36]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d006      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80d9 	beq.w	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b04:	4b02      	ldr	r3, [pc, #8]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a01      	ldr	r2, [pc, #4]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b0e:	e001      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005b10:	40023800 	.word	0x40023800
 8005b14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b16:	f7fc f8ad 	bl	8001c74 <HAL_GetTick>
 8005b1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b1e:	f7fc f8a9 	bl	8001c74 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b64      	cmp	r3, #100	; 0x64
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e194      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b30:	4b6c      	ldr	r3, [pc, #432]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f0      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d021      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d11d      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b50:	4b64      	ldr	r3, [pc, #400]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b56:	0c1b      	lsrs	r3, r3, #16
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b5e:	4b61      	ldr	r3, [pc, #388]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b64:	0e1b      	lsrs	r3, r3, #24
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	019a      	lsls	r2, r3, #6
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	431a      	orrs	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	061b      	lsls	r3, r3, #24
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	071b      	lsls	r3, r3, #28
 8005b84:	4957      	ldr	r1, [pc, #348]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d02e      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bb6:	d129      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005bb8:	4b4a      	ldr	r3, [pc, #296]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbe:	0c1b      	lsrs	r3, r3, #16
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bc6:	4b47      	ldr	r3, [pc, #284]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bcc:	0f1b      	lsrs	r3, r3, #28
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	019a      	lsls	r2, r3, #6
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	041b      	lsls	r3, r3, #16
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	061b      	lsls	r3, r3, #24
 8005be6:	431a      	orrs	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	071b      	lsls	r3, r3, #28
 8005bec:	493d      	ldr	r1, [pc, #244]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bf4:	4b3b      	ldr	r3, [pc, #236]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bfa:	f023 021f 	bic.w	r2, r3, #31
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	3b01      	subs	r3, #1
 8005c04:	4937      	ldr	r1, [pc, #220]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d01d      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c18:	4b32      	ldr	r3, [pc, #200]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c1e:	0e1b      	lsrs	r3, r3, #24
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c26:	4b2f      	ldr	r3, [pc, #188]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c2c:	0f1b      	lsrs	r3, r3, #28
 8005c2e:	f003 0307 	and.w	r3, r3, #7
 8005c32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	019a      	lsls	r2, r3, #6
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	041b      	lsls	r3, r3, #16
 8005c40:	431a      	orrs	r2, r3
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	061b      	lsls	r3, r3, #24
 8005c46:	431a      	orrs	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	071b      	lsls	r3, r3, #28
 8005c4c:	4925      	ldr	r1, [pc, #148]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d011      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	019a      	lsls	r2, r3, #6
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	041b      	lsls	r3, r3, #16
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	061b      	lsls	r3, r3, #24
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	071b      	lsls	r3, r3, #28
 8005c7c:	4919      	ldr	r1, [pc, #100]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c84:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c90:	f7fb fff0 	bl	8001c74 <HAL_GetTick>
 8005c94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c96:	e008      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c98:	f7fb ffec 	bl	8001c74 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b64      	cmp	r3, #100	; 0x64
 8005ca4:	d901      	bls.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e0d7      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005caa:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	f040 80cd 	bne.w	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cbe:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a08      	ldr	r2, [pc, #32]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cca:	f7fb ffd3 	bl	8001c74 <HAL_GetTick>
 8005cce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cd0:	e00a      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cd2:	f7fb ffcf 	bl	8001c74 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b64      	cmp	r3, #100	; 0x64
 8005cde:	d903      	bls.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e0ba      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005ce4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ce8:	4b5e      	ldr	r3, [pc, #376]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf4:	d0ed      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d02e      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d12a      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d1e:	4b51      	ldr	r3, [pc, #324]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d24:	0c1b      	lsrs	r3, r3, #16
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d2c:	4b4d      	ldr	r3, [pc, #308]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d32:	0f1b      	lsrs	r3, r3, #28
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	019a      	lsls	r2, r3, #6
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	041b      	lsls	r3, r3, #16
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	061b      	lsls	r3, r3, #24
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	071b      	lsls	r3, r3, #28
 8005d52:	4944      	ldr	r1, [pc, #272]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d5a:	4b42      	ldr	r3, [pc, #264]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	493d      	ldr	r1, [pc, #244]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d022      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d88:	d11d      	bne.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d8a:	4b36      	ldr	r3, [pc, #216]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	0e1b      	lsrs	r3, r3, #24
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d98:	4b32      	ldr	r3, [pc, #200]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	0f1b      	lsrs	r3, r3, #28
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	019a      	lsls	r2, r3, #6
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	041b      	lsls	r3, r3, #16
 8005db2:	431a      	orrs	r2, r3
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	061b      	lsls	r3, r3, #24
 8005db8:	431a      	orrs	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	071b      	lsls	r3, r3, #28
 8005dbe:	4929      	ldr	r1, [pc, #164]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d028      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dd2:	4b24      	ldr	r3, [pc, #144]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	0e1b      	lsrs	r3, r3, #24
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005de0:	4b20      	ldr	r3, [pc, #128]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de6:	0c1b      	lsrs	r3, r3, #16
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	019a      	lsls	r2, r3, #6
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	061b      	lsls	r3, r3, #24
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	071b      	lsls	r3, r3, #28
 8005e06:	4917      	ldr	r1, [pc, #92]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e0e:	4b15      	ldr	r3, [pc, #84]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	4911      	ldr	r1, [pc, #68]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e24:	4b0f      	ldr	r3, [pc, #60]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a0e      	ldr	r2, [pc, #56]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e30:	f7fb ff20 	bl	8001c74 <HAL_GetTick>
 8005e34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e36:	e008      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e38:	f7fb ff1c 	bl	8001c74 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b64      	cmp	r3, #100	; 0x64
 8005e44:	d901      	bls.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e007      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e4a:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e56:	d1ef      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	40023800 	.word	0x40023800

08005e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e09d      	b.n	8005fb6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d108      	bne.n	8005e94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8a:	d009      	beq.n	8005ea0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	61da      	str	r2, [r3, #28]
 8005e92:	e005      	b.n	8005ea0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fb f93e 	bl	800113c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ee0:	d902      	bls.n	8005ee8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]
 8005ee6:	e002      	b.n	8005eee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005ef6:	d007      	beq.n	8005f08 <HAL_SPI_Init+0xa0>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f00:	d002      	beq.n	8005f08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	ea42 0103 	orr.w	r1, r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	0c1b      	lsrs	r3, r3, #16
 8005f64:	f003 0204 	and.w	r2, r3, #4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	431a      	orrs	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f76:	f003 0308 	and.w	r3, r3, #8
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f84:	ea42 0103 	orr.w	r1, r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69da      	ldr	r2, [r3, #28]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fa4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d101      	bne.n	8005fe0 <HAL_SPI_Transmit_DMA+0x20>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	e0d8      	b.n	8006192 <HAL_SPI_Transmit_DMA+0x1d2>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d002      	beq.n	8005ffa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ff8:	e0c6      	b.n	8006188 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HAL_SPI_Transmit_DMA+0x46>
 8006000:	88fb      	ldrh	r3, [r7, #6]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d102      	bne.n	800600c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	75fb      	strb	r3, [r7, #23]
    goto error;
 800600a:	e0bd      	b.n	8006188 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2203      	movs	r2, #3
 8006010:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	88fa      	ldrh	r2, [r7, #6]
 8006024:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	88fa      	ldrh	r2, [r7, #6]
 800602a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006056:	d10f      	bne.n	8006078 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006066:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006076:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607c:	4a47      	ldr	r2, [pc, #284]	; (800619c <HAL_SPI_Transmit_DMA+0x1dc>)
 800607e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006084:	4a46      	ldr	r2, [pc, #280]	; (80061a0 <HAL_SPI_Transmit_DMA+0x1e0>)
 8006086:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608c:	4a45      	ldr	r2, [pc, #276]	; (80061a4 <HAL_SPI_Transmit_DMA+0x1e4>)
 800608e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006094:	2200      	movs	r2, #0
 8006096:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060a6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060b0:	d82d      	bhi.n	800610e <HAL_SPI_Transmit_DMA+0x14e>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b6:	699b      	ldr	r3, [r3, #24]
 80060b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060bc:	d127      	bne.n	800610e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10f      	bne.n	80060ec <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060da:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060ea:	e010      	b.n	800610e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060fa:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006100:	b29b      	uxth	r3, r3
 8006102:	085b      	lsrs	r3, r3, #1
 8006104:	b29b      	uxth	r3, r3
 8006106:	3301      	adds	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	4619      	mov	r1, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006124:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006126:	f7fb ff95 	bl	8002054 <HAL_DMA_Start_IT>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00c      	beq.n	800614a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006134:	f043 0210 	orr.w	r2, r3, #16
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006148:	e01e      	b.n	8006188 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b40      	cmp	r3, #64	; 0x40
 8006156:	d007      	beq.n	8006168 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006166:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0220 	orr.w	r2, r2, #32
 8006176:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0202 	orr.w	r2, r2, #2
 8006186:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006190:	7dfb      	ldrb	r3, [r7, #23]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	08006b3d 	.word	0x08006b3d
 80061a0:	08006959 	.word	0x08006959
 80061a4:	08006b91 	.word	0x08006b91

080061a8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	4613      	mov	r3, r2
 80061b4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d110      	bne.n	80061e4 <HAL_SPI_Receive_DMA+0x3c>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ca:	d10b      	bne.n	80061e4 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2204      	movs	r2, #4
 80061d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80061d4:	88fb      	ldrh	r3, [r7, #6]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f908 	bl	80063f0 <HAL_SPI_TransmitReceive_DMA>
 80061e0:	4603      	mov	r3, r0
 80061e2:	e0fb      	b.n	80063dc <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_SPI_Receive_DMA+0x4a>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e0f4      	b.n	80063dc <HAL_SPI_Receive_DMA+0x234>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b01      	cmp	r3, #1
 8006204:	d002      	beq.n	800620c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8006206:	2302      	movs	r3, #2
 8006208:	75fb      	strb	r3, [r7, #23]
    goto error;
 800620a:	e0e2      	b.n	80063d2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <HAL_SPI_Receive_DMA+0x70>
 8006212:	88fb      	ldrh	r3, [r7, #6]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800621c:	e0d9      	b.n	80063d2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2204      	movs	r2, #4
 8006222:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	88fa      	ldrh	r2, [r7, #6]
 8006236:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	88fa      	ldrh	r2, [r7, #6]
 800623e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006262:	d10f      	bne.n	8006284 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006272:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006282:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006292:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800629c:	d908      	bls.n	80062b0 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062ac:	605a      	str	r2, [r3, #4]
 80062ae:	e042      	b.n	8006336 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062be:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ca:	d134      	bne.n	8006336 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062da:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d111      	bne.n	8006310 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062fa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006302:	b29b      	uxth	r3, r3
 8006304:	085b      	lsrs	r3, r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800630e:	e012      	b.n	8006336 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800631e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006326:	b29b      	uxth	r3, r3
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	b29b      	uxth	r3, r3
 800632c:	3301      	adds	r3, #1
 800632e:	b29a      	uxth	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633a:	4a2a      	ldr	r2, [pc, #168]	; (80063e4 <HAL_SPI_Receive_DMA+0x23c>)
 800633c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006342:	4a29      	ldr	r2, [pc, #164]	; (80063e8 <HAL_SPI_Receive_DMA+0x240>)
 8006344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634a:	4a28      	ldr	r2, [pc, #160]	; (80063ec <HAL_SPI_Receive_DMA+0x244>)
 800634c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006352:	2200      	movs	r2, #0
 8006354:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	330c      	adds	r3, #12
 8006360:	4619      	mov	r1, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800636e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006370:	f7fb fe70 	bl	8002054 <HAL_DMA_Start_IT>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00c      	beq.n	8006394 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800637e:	f043 0210 	orr.w	r2, r3, #16
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006392:	e01e      	b.n	80063d2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639e:	2b40      	cmp	r3, #64	; 0x40
 80063a0:	d007      	beq.n	80063b2 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063b0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0220 	orr.w	r2, r2, #32
 80063c0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 0201 	orr.w	r2, r2, #1
 80063d0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80063da:	7dfb      	ldrb	r3, [r7, #23]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	08006b59 	.word	0x08006b59
 80063e8:	08006a01 	.word	0x08006a01
 80063ec:	08006b91 	.word	0x08006b91

080063f0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_SPI_TransmitReceive_DMA+0x20>
 800640c:	2302      	movs	r3, #2
 800640e:	e16c      	b.n	80066ea <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800641e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006426:	7dbb      	ldrb	r3, [r7, #22]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d00d      	beq.n	8006448 <HAL_SPI_TransmitReceive_DMA+0x58>
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006432:	d106      	bne.n	8006442 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d102      	bne.n	8006442 <HAL_SPI_TransmitReceive_DMA+0x52>
 800643c:	7dbb      	ldrb	r3, [r7, #22]
 800643e:	2b04      	cmp	r3, #4
 8006440:	d002      	beq.n	8006448 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006442:	2302      	movs	r3, #2
 8006444:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006446:	e14b      	b.n	80066e0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006454:	887b      	ldrh	r3, [r7, #2]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d102      	bne.n	8006460 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800645e:	e13f      	b.n	80066e0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b04      	cmp	r3, #4
 800646a:	d003      	beq.n	8006474 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2205      	movs	r2, #5
 8006470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	887a      	ldrh	r2, [r7, #2]
 8006484:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	887a      	ldrh	r2, [r7, #2]
 800648a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	887a      	ldrh	r2, [r7, #2]
 8006496:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	887a      	ldrh	r2, [r7, #2]
 800649e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80064bc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064c6:	d908      	bls.n	80064da <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064d6:	605a      	str	r2, [r3, #4]
 80064d8:	e06f      	b.n	80065ba <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80064e8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f4:	d126      	bne.n	8006544 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10f      	bne.n	8006522 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006510:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006516:	b29b      	uxth	r3, r3
 8006518:	085b      	lsrs	r3, r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006520:	e010      	b.n	8006544 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006530:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006536:	b29b      	uxth	r3, r3
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	b29b      	uxth	r3, r3
 800653c:	3301      	adds	r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800654e:	d134      	bne.n	80065ba <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800655e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006566:	b29b      	uxth	r3, r3
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d111      	bne.n	8006594 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800657e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006586:	b29b      	uxth	r3, r3
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006592:	e012      	b.n	80065ba <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065a2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	085b      	lsrs	r3, r3, #1
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3301      	adds	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d108      	bne.n	80065d8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ca:	4a4a      	ldr	r2, [pc, #296]	; (80066f4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80065cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d2:	4a49      	ldr	r2, [pc, #292]	; (80066f8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80065d4:	63da      	str	r2, [r3, #60]	; 0x3c
 80065d6:	e007      	b.n	80065e8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065dc:	4a47      	ldr	r2, [pc, #284]	; (80066fc <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80065de:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e4:	4a46      	ldr	r2, [pc, #280]	; (8006700 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80065e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ec:	4a45      	ldr	r2, [pc, #276]	; (8006704 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80065ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f4:	2200      	movs	r2, #0
 80065f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	330c      	adds	r3, #12
 8006602:	4619      	mov	r1, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006610:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006612:	f7fb fd1f 	bl	8002054 <HAL_DMA_Start_IT>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00c      	beq.n	8006636 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006620:	f043 0210 	orr.w	r2, r3, #16
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006634:	e054      	b.n	80066e0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f042 0201 	orr.w	r2, r2, #1
 8006644:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664a:	2200      	movs	r2, #0
 800664c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006652:	2200      	movs	r2, #0
 8006654:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800665a:	2200      	movs	r2, #0
 800665c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006662:	2200      	movs	r2, #0
 8006664:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666e:	4619      	mov	r1, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800667c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800667e:	f7fb fce9 	bl	8002054 <HAL_DMA_Start_IT>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00c      	beq.n	80066a2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668c:	f043 0210 	orr.w	r2, r3, #16
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80066a0:	e01e      	b.n	80066e0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ac:	2b40      	cmp	r3, #64	; 0x40
 80066ae:	d007      	beq.n	80066c0 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066be:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f042 0220 	orr.w	r2, r2, #32
 80066ce:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0202 	orr.w	r2, r2, #2
 80066de:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	08006b59 	.word	0x08006b59
 80066f8:	08006a01 	.word	0x08006a01
 80066fc:	08006b75 	.word	0x08006b75
 8006700:	08006aab 	.word	0x08006aab
 8006704:	08006b91 	.word	0x08006b91

08006708 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	099b      	lsrs	r3, r3, #6
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10f      	bne.n	800674c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	099b      	lsrs	r3, r3, #6
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	4798      	blx	r3
    return;
 800674a:	e0d7      	b.n	80068fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <HAL_SPI_IRQHandler+0x66>
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	09db      	lsrs	r3, r3, #7
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d004      	beq.n	800676e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4798      	blx	r3
    return;
 800676c:	e0c6      	b.n	80068fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10c      	bne.n	8006794 <HAL_SPI_IRQHandler+0x8c>
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	099b      	lsrs	r3, r3, #6
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	0a1b      	lsrs	r3, r3, #8
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80b4 	beq.w	80068fc <HAL_SPI_IRQHandler+0x1f4>
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 80ad 	beq.w	80068fc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	099b      	lsrs	r3, r3, #6
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d023      	beq.n	80067f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b03      	cmp	r3, #3
 80067b8:	d011      	beq.n	80067de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067be:	f043 0204 	orr.w	r2, r3, #4
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067c6:	2300      	movs	r3, #0
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	e00b      	b.n	80067f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067de:	2300      	movs	r3, #0
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	693b      	ldr	r3, [r7, #16]
        return;
 80067f4:	e082      	b.n	80068fc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d014      	beq.n	800682c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006806:	f043 0201 	orr.w	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	0a1b      	lsrs	r3, r3, #8
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00c      	beq.n	8006852 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683c:	f043 0208 	orr.w	r2, r3, #8
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006844:	2300      	movs	r3, #0
 8006846:	60bb      	str	r3, [r7, #8]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	60bb      	str	r3, [r7, #8]
 8006850:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006856:	2b00      	cmp	r3, #0
 8006858:	d04f      	beq.n	80068fa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006868:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <HAL_SPI_IRQHandler+0x17e>
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d034      	beq.n	80068f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0203 	bic.w	r2, r2, #3
 8006894:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689a:	2b00      	cmp	r3, #0
 800689c:	d011      	beq.n	80068c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a2:	4a18      	ldr	r2, [pc, #96]	; (8006904 <HAL_SPI_IRQHandler+0x1fc>)
 80068a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fb fca2 	bl	80021f4 <HAL_DMA_Abort_IT>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d016      	beq.n	80068f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ce:	4a0d      	ldr	r2, [pc, #52]	; (8006904 <HAL_SPI_IRQHandler+0x1fc>)
 80068d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7fb fc8c 	bl	80021f4 <HAL_DMA_Abort_IT>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80068ee:	e003      	b.n	80068f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f827 	bl	8006944 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80068f6:	e000      	b.n	80068fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80068f8:	bf00      	nop
    return;
 80068fa:	bf00      	nop
  }
}
 80068fc:	3720      	adds	r7, #32
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	08006bd1 	.word	0x08006bd1

08006908 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006966:	f7fb f985 	bl	8001c74 <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697a:	d03b      	beq.n	80069f4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0220 	bic.w	r2, r2, #32
 800698a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0202 	bic.w	r2, r2, #2
 800699a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	2164      	movs	r1, #100	; 0x64
 80069a0:	6978      	ldr	r0, [r7, #20]
 80069a2:	f000 fac5 	bl	8006f30 <SPI_EndRxTxTransaction>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d005      	beq.n	80069b8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b0:	f043 0220 	orr.w	r2, r3, #32
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10a      	bne.n	80069d6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2200      	movs	r2, #0
 80069da:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80069ec:	6978      	ldr	r0, [r7, #20]
 80069ee:	f7ff ffa9 	bl	8006944 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80069f2:	e002      	b.n	80069fa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80069f4:	6978      	ldr	r0, [r7, #20]
 80069f6:	f002 fc77 	bl	80092e8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a0e:	f7fb f931 	bl	8001c74 <HAL_GetTick>
 8006a12:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a22:	d03c      	beq.n	8006a9e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 0220 	bic.w	r2, r2, #32
 8006a32:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10d      	bne.n	8006a58 <SPI_DMAReceiveCplt+0x58>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a44:	d108      	bne.n	8006a58 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0203 	bic.w	r2, r2, #3
 8006a54:	605a      	str	r2, [r3, #4]
 8006a56:	e007      	b.n	8006a68 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0201 	bic.w	r2, r2, #1
 8006a66:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	2164      	movs	r1, #100	; 0x64
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f9e3 	bl	8006e38 <SPI_EndRxTransaction>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f7ff ff54 	bl	8006944 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a9c:	e002      	b.n	8006aa4 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f002 fc3e 	bl	8009320 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ab8:	f7fb f8dc 	bl	8001c74 <HAL_GetTick>
 8006abc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006acc:	d030      	beq.n	8006b30 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0220 	bic.w	r2, r2, #32
 8006adc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	2164      	movs	r1, #100	; 0x64
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 fa24 	bl	8006f30 <SPI_EndRxTxTransaction>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af2:	f043 0220 	orr.w	r2, r3, #32
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0203 	bic.w	r2, r2, #3
 8006b08:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f7ff ff0b 	bl	8006944 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006b2e:	e002      	b.n	8006b36 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f002 fc11 	bl	8009358 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b48:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f7ff fedc 	bl	8006908 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b50:	bf00      	nop
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f7ff fed8 	bl	800691c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7ff fed4 	bl	8006930 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b88:	bf00      	nop
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0203 	bic.w	r2, r2, #3
 8006bac:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb2:	f043 0210 	orr.w	r2, r3, #16
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f7ff febe 	bl	8006944 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff fea9 	bl	8006944 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
	...

08006bfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	603b      	str	r3, [r7, #0]
 8006c08:	4613      	mov	r3, r2
 8006c0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c0c:	f7fb f832 	bl	8001c74 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	1a9b      	subs	r3, r3, r2
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	4413      	add	r3, r2
 8006c1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c1c:	f7fb f82a 	bl	8001c74 <HAL_GetTick>
 8006c20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c22:	4b39      	ldr	r3, [pc, #228]	; (8006d08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	015b      	lsls	r3, r3, #5
 8006c28:	0d1b      	lsrs	r3, r3, #20
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	fb02 f303 	mul.w	r3, r2, r3
 8006c30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c32:	e054      	b.n	8006cde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3a:	d050      	beq.n	8006cde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c3c:	f7fb f81a 	bl	8001c74 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	69fa      	ldr	r2, [r7, #28]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d902      	bls.n	8006c52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d13d      	bne.n	8006cce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c6a:	d111      	bne.n	8006c90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c74:	d004      	beq.n	8006c80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c7e:	d107      	bne.n	8006c90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c98:	d10f      	bne.n	8006cba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e017      	b.n	8006cfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	bf0c      	ite	eq
 8006cee:	2301      	moveq	r3, #1
 8006cf0:	2300      	movne	r3, #0
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	79fb      	ldrb	r3, [r7, #7]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d19b      	bne.n	8006c34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3720      	adds	r7, #32
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000000 	.word	0x20000000

08006d0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08a      	sub	sp, #40	; 0x28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d1e:	f7fa ffa9 	bl	8001c74 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d26:	1a9b      	subs	r3, r3, r2
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006d2e:	f7fa ffa1 	bl	8001c74 <HAL_GetTick>
 8006d32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d3c:	4b3d      	ldr	r3, [pc, #244]	; (8006e34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	00da      	lsls	r2, r3, #3
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	0d1b      	lsrs	r3, r3, #20
 8006d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4e:	fb02 f303 	mul.w	r3, r2, r3
 8006d52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d54:	e060      	b.n	8006e18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d5c:	d107      	bne.n	8006d6e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d74:	d050      	beq.n	8006e18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d76:	f7fa ff7d 	bl	8001c74 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	6a3b      	ldr	r3, [r7, #32]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d902      	bls.n	8006d8c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d13d      	bne.n	8006e08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006da4:	d111      	bne.n	8006dca <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dae:	d004      	beq.n	8006dba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db8:	d107      	bne.n	8006dca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd2:	d10f      	bne.n	8006df4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006df2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e010      	b.n	8006e2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	3b01      	subs	r3, #1
 8006e16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	4013      	ands	r3, r2
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d196      	bne.n	8006d56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3728      	adds	r7, #40	; 0x28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20000000 	.word	0x20000000

08006e38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e4c:	d111      	bne.n	8006e72 <SPI_EndRxTransaction+0x3a>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e56:	d004      	beq.n	8006e62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e60:	d107      	bne.n	8006e72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e70:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e7a:	d112      	bne.n	8006ea2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2200      	movs	r2, #0
 8006e84:	2180      	movs	r1, #128	; 0x80
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f7ff feb8 	bl	8006bfc <SPI_WaitFlagStateUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d021      	beq.n	8006ed6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e96:	f043 0220 	orr.w	r2, r3, #32
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e03d      	b.n	8006f1e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ea2:	4b21      	ldr	r3, [pc, #132]	; (8006f28 <SPI_EndRxTransaction+0xf0>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <SPI_EndRxTransaction+0xf4>)
 8006ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eac:	0d5b      	lsrs	r3, r3, #21
 8006eae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006eb2:	fb02 f303 	mul.w	r3, r2, r3
 8006eb6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ece:	2b80      	cmp	r3, #128	; 0x80
 8006ed0:	d0f2      	beq.n	8006eb8 <SPI_EndRxTransaction+0x80>
 8006ed2:	e000      	b.n	8006ed6 <SPI_EndRxTransaction+0x9e>
        break;
 8006ed4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ede:	d11d      	bne.n	8006f1c <SPI_EndRxTransaction+0xe4>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee8:	d004      	beq.n	8006ef4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef2:	d113      	bne.n	8006f1c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7ff ff03 	bl	8006d0c <SPI_WaitFifoStateUntilTimeout>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f10:	f043 0220 	orr.w	r2, r3, #32
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e000      	b.n	8006f1e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000000 	.word	0x20000000
 8006f2c:	165e9f81 	.word	0x165e9f81

08006f30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f7ff fedf 	bl	8006d0c <SPI_WaitFifoStateUntilTimeout>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f58:	f043 0220 	orr.w	r2, r3, #32
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e046      	b.n	8006ff2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f64:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <SPI_EndRxTxTransaction+0xcc>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a25      	ldr	r2, [pc, #148]	; (8007000 <SPI_EndRxTxTransaction+0xd0>)
 8006f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6e:	0d5b      	lsrs	r3, r3, #21
 8006f70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f74:	fb02 f303 	mul.w	r3, r2, r3
 8006f78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f82:	d112      	bne.n	8006faa <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2180      	movs	r1, #128	; 0x80
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f7ff fe34 	bl	8006bfc <SPI_WaitFlagStateUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d016      	beq.n	8006fc8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9e:	f043 0220 	orr.w	r2, r3, #32
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e023      	b.n	8006ff2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc0:	2b80      	cmp	r3, #128	; 0x80
 8006fc2:	d0f2      	beq.n	8006faa <SPI_EndRxTxTransaction+0x7a>
 8006fc4:	e000      	b.n	8006fc8 <SPI_EndRxTxTransaction+0x98>
        break;
 8006fc6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f7ff fe99 	bl	8006d0c <SPI_WaitFifoStateUntilTimeout>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe4:	f043 0220 	orr.w	r2, r3, #32
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e000      	b.n	8006ff2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000000 	.word	0x20000000
 8007000:	165e9f81 	.word	0x165e9f81

08007004 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e040      	b.n	8007098 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fa f9fa 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2224      	movs	r2, #36	; 0x24
 8007030:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0201 	bic.w	r2, r2, #1
 8007040:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fd30 	bl	8007aa8 <UART_SetConfig>
 8007048:	4603      	mov	r3, r0
 800704a:	2b01      	cmp	r3, #1
 800704c:	d101      	bne.n	8007052 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e022      	b.n	8007098 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 ff88 	bl	8007f70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800706e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800707e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0201 	orr.w	r2, r2, #1
 800708e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 f80f 	bl	80080b4 <UART_CheckIdleState>
 8007096:	4603      	mov	r3, r0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08a      	sub	sp, #40	; 0x28
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	4613      	mov	r3, r2
 80070ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d171      	bne.n	800719c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <HAL_UART_Transmit+0x24>
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e06a      	b.n	800719e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2221      	movs	r2, #33	; 0x21
 80070d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070d6:	f7fa fdcd 	bl	8001c74 <HAL_GetTick>
 80070da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	88fa      	ldrh	r2, [r7, #6]
 80070e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	88fa      	ldrh	r2, [r7, #6]
 80070e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f4:	d108      	bne.n	8007108 <HAL_UART_Transmit+0x68>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d104      	bne.n	8007108 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	61bb      	str	r3, [r7, #24]
 8007106:	e003      	b.n	8007110 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800710c:	2300      	movs	r3, #0
 800710e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007110:	e02c      	b.n	800716c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2200      	movs	r2, #0
 800711a:	2180      	movs	r1, #128	; 0x80
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f001 f800 	bl	8008122 <UART_WaitOnFlagUntilTimeout>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e038      	b.n	800719e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10b      	bne.n	800714a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007140:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	3302      	adds	r3, #2
 8007146:	61bb      	str	r3, [r7, #24]
 8007148:	e007      	b.n	800715a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	781a      	ldrb	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	3301      	adds	r3, #1
 8007158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007160:	b29b      	uxth	r3, r3
 8007162:	3b01      	subs	r3, #1
 8007164:	b29a      	uxth	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007172:	b29b      	uxth	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1cc      	bne.n	8007112 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2200      	movs	r2, #0
 8007180:	2140      	movs	r1, #64	; 0x40
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 ffcd 	bl	8008122 <UART_WaitOnFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e005      	b.n	800719e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2220      	movs	r2, #32
 8007196:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e000      	b.n	800719e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800719c:	2302      	movs	r3, #2
  }
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3720      	adds	r7, #32
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b08a      	sub	sp, #40	; 0x28
 80071aa:	af02      	add	r7, sp, #8
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	4613      	mov	r3, r2
 80071b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071bc:	2b20      	cmp	r3, #32
 80071be:	f040 80b1 	bne.w	8007324 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <HAL_UART_Receive+0x28>
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e0a9      	b.n	8007326 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2222      	movs	r2, #34	; 0x22
 80071de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071e8:	f7fa fd44 	bl	8001c74 <HAL_GetTick>
 80071ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	88fa      	ldrh	r2, [r7, #6]
 80071f2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	88fa      	ldrh	r2, [r7, #6]
 80071fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007206:	d10e      	bne.n	8007226 <HAL_UART_Receive+0x80>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d105      	bne.n	800721c <HAL_UART_Receive+0x76>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007216:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800721a:	e02d      	b.n	8007278 <HAL_UART_Receive+0xd2>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	22ff      	movs	r2, #255	; 0xff
 8007220:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007224:	e028      	b.n	8007278 <HAL_UART_Receive+0xd2>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10d      	bne.n	800724a <HAL_UART_Receive+0xa4>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d104      	bne.n	8007240 <HAL_UART_Receive+0x9a>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	22ff      	movs	r2, #255	; 0xff
 800723a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800723e:	e01b      	b.n	8007278 <HAL_UART_Receive+0xd2>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	227f      	movs	r2, #127	; 0x7f
 8007244:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007248:	e016      	b.n	8007278 <HAL_UART_Receive+0xd2>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007252:	d10d      	bne.n	8007270 <HAL_UART_Receive+0xca>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d104      	bne.n	8007266 <HAL_UART_Receive+0xc0>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	227f      	movs	r2, #127	; 0x7f
 8007260:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007264:	e008      	b.n	8007278 <HAL_UART_Receive+0xd2>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	223f      	movs	r2, #63	; 0x3f
 800726a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800726e:	e003      	b.n	8007278 <HAL_UART_Receive+0xd2>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800727e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007288:	d108      	bne.n	800729c <HAL_UART_Receive+0xf6>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d104      	bne.n	800729c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007292:	2300      	movs	r3, #0
 8007294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	61bb      	str	r3, [r7, #24]
 800729a:	e003      	b.n	80072a4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80072a4:	e032      	b.n	800730c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2200      	movs	r2, #0
 80072ae:	2120      	movs	r1, #32
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 ff36 	bl	8008122 <UART_WaitOnFlagUntilTimeout>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e032      	b.n	8007326 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10c      	bne.n	80072e0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	8a7b      	ldrh	r3, [r7, #18]
 80072d0:	4013      	ands	r3, r2
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	69bb      	ldr	r3, [r7, #24]
 80072d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	3302      	adds	r3, #2
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	e00c      	b.n	80072fa <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	8a7b      	ldrh	r3, [r7, #18]
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	4013      	ands	r3, r2
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	3301      	adds	r3, #1
 80072f8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007300:	b29b      	uxth	r3, r3
 8007302:	3b01      	subs	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007312:	b29b      	uxth	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1c6      	bne.n	80072a6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2220      	movs	r2, #32
 800731c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	e000      	b.n	8007326 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8007324:	2302      	movs	r3, #2
  }
}
 8007326:	4618      	mov	r0, r3
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08a      	sub	sp, #40	; 0x28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007342:	2b20      	cmp	r3, #32
 8007344:	d165      	bne.n	8007412 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <HAL_UART_Transmit_DMA+0x22>
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e05e      	b.n	8007414 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	88fa      	ldrh	r2, [r7, #6]
 8007360:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	88fa      	ldrh	r2, [r7, #6]
 8007368:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2221      	movs	r2, #33	; 0x21
 8007378:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737e:	2b00      	cmp	r3, #0
 8007380:	d027      	beq.n	80073d2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007386:	4a25      	ldr	r2, [pc, #148]	; (800741c <HAL_UART_Transmit_DMA+0xec>)
 8007388:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738e:	4a24      	ldr	r2, [pc, #144]	; (8007420 <HAL_UART_Transmit_DMA+0xf0>)
 8007390:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007396:	4a23      	ldr	r2, [pc, #140]	; (8007424 <HAL_UART_Transmit_DMA+0xf4>)
 8007398:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739e:	2200      	movs	r2, #0
 80073a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073aa:	4619      	mov	r1, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3328      	adds	r3, #40	; 0x28
 80073b2:	461a      	mov	r2, r3
 80073b4:	88fb      	ldrh	r3, [r7, #6]
 80073b6:	f7fa fe4d 	bl	8002054 <HAL_DMA_Start_IT>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d008      	beq.n	80073d2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2210      	movs	r2, #16
 80073c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2220      	movs	r2, #32
 80073cc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e020      	b.n	8007414 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2240      	movs	r2, #64	; 0x40
 80073d8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	613b      	str	r3, [r7, #16]
   return(result);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f0:	627b      	str	r3, [r7, #36]	; 0x24
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3308      	adds	r3, #8
 80073f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fa:	623a      	str	r2, [r7, #32]
 80073fc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	69f9      	ldr	r1, [r7, #28]
 8007400:	6a3a      	ldr	r2, [r7, #32]
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	61bb      	str	r3, [r7, #24]
   return(result);
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e5      	bne.n	80073da <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800740e:	2300      	movs	r3, #0
 8007410:	e000      	b.n	8007414 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007412:	2302      	movs	r3, #2
  }
}
 8007414:	4618      	mov	r0, r3
 8007416:	3728      	adds	r7, #40	; 0x28
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	08008505 	.word	0x08008505
 8007420:	0800859b 	.word	0x0800859b
 8007424:	0800871d 	.word	0x0800871d

08007428 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08a      	sub	sp, #40	; 0x28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	4613      	mov	r3, r2
 8007434:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800743c:	2b20      	cmp	r3, #32
 800743e:	d132      	bne.n	80074a6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <HAL_UART_Receive_DMA+0x24>
 8007446:	88fb      	ldrh	r3, [r7, #6]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e02b      	b.n	80074a8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d018      	beq.n	8007496 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	613b      	str	r3, [r7, #16]
   return(result);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	623b      	str	r3, [r7, #32]
 8007484:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	69f9      	ldr	r1, [r7, #28]
 8007488:	6a3a      	ldr	r2, [r7, #32]
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e6      	bne.n	8007464 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	461a      	mov	r2, r3
 800749a:	68b9      	ldr	r1, [r7, #8]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 ff07 	bl	80082b0 <UART_Start_Receive_DMA>
 80074a2:	4603      	mov	r3, r0
 80074a4:	e000      	b.n	80074a8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80074a6:	2302      	movs	r3, #2
  }
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3728      	adds	r7, #40	; 0x28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b0ba      	sub	sp, #232	; 0xe8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074da:	f640 030f 	movw	r3, #2063	; 0x80f
 80074de:	4013      	ands	r3, r2
 80074e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d115      	bne.n	8007518 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80074ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00f      	beq.n	8007518 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d009      	beq.n	8007518 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 8297 	beq.w	8007a3c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
      }
      return;
 8007516:	e291      	b.n	8007a3c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007518:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 8117 	beq.w	8007750 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007522:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d106      	bne.n	800753c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800752e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007532:	4b85      	ldr	r3, [pc, #532]	; (8007748 <HAL_UART_IRQHandler+0x298>)
 8007534:	4013      	ands	r3, r2
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 810a 	beq.w	8007750 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800753c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d011      	beq.n	800756c <HAL_UART_IRQHandler+0xbc>
 8007548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2201      	movs	r2, #1
 800755a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007562:	f043 0201 	orr.w	r2, r3, #1
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800756c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d011      	beq.n	800759c <HAL_UART_IRQHandler+0xec>
 8007578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00b      	beq.n	800759c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2202      	movs	r2, #2
 800758a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007592:	f043 0204 	orr.w	r2, r3, #4
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800759c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d011      	beq.n	80075cc <HAL_UART_IRQHandler+0x11c>
 80075a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2204      	movs	r2, #4
 80075ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c2:	f043 0202 	orr.w	r2, r3, #2
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075d0:	f003 0308 	and.w	r3, r3, #8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d017      	beq.n	8007608 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80075e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2208      	movs	r2, #8
 80075f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075fe:	f043 0208 	orr.w	r2, r3, #8
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007610:	2b00      	cmp	r3, #0
 8007612:	d012      	beq.n	800763a <HAL_UART_IRQHandler+0x18a>
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007618:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00c      	beq.n	800763a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007628:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007630:	f043 0220 	orr.w	r2, r3, #32
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007640:	2b00      	cmp	r3, #0
 8007642:	f000 81fd 	beq.w	8007a40 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800764a:	f003 0320 	and.w	r3, r3, #32
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00d      	beq.n	800766e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	d007      	beq.n	800766e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d005      	beq.n	8007692 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800768a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800768e:	2b00      	cmp	r3, #0
 8007690:	d04f      	beq.n	8007732 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fed2 	bl	800843c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d141      	bne.n	800772a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076e2:	e841 2300 	strex	r3, r2, [r1]
 80076e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1d9      	bne.n	80076a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d013      	beq.n	8007722 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076fe:	4a13      	ldr	r2, [pc, #76]	; (800774c <HAL_UART_IRQHandler+0x29c>)
 8007700:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007706:	4618      	mov	r0, r3
 8007708:	f7fa fd74 	bl	80021f4 <HAL_DMA_Abort_IT>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d017      	beq.n	8007742 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007720:	e00f      	b.n	8007742 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f9aa 	bl	8007a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007728:	e00b      	b.n	8007742 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f9a6 	bl	8007a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007730:	e007      	b.n	8007742 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9a2 	bl	8007a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007740:	e17e      	b.n	8007a40 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007742:	bf00      	nop
    return;
 8007744:	e17c      	b.n	8007a40 <HAL_UART_IRQHandler+0x590>
 8007746:	bf00      	nop
 8007748:	04000120 	.word	0x04000120
 800774c:	0800879b 	.word	0x0800879b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007754:	2b01      	cmp	r3, #1
 8007756:	f040 814c 	bne.w	80079f2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800775a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775e:	f003 0310 	and.w	r3, r3, #16
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 8145 	beq.w	80079f2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800776c:	f003 0310 	and.w	r3, r3, #16
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 813e 	beq.w	80079f2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2210      	movs	r2, #16
 800777c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007788:	2b40      	cmp	r3, #64	; 0x40
 800778a:	f040 80b6 	bne.w	80078fa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800779a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 8150 	beq.w	8007a44 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ae:	429a      	cmp	r2, r3
 80077b0:	f080 8148 	bcs.w	8007a44 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077c8:	f000 8086 	beq.w	80078d8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007802:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800780e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1da      	bne.n	80077cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3308      	adds	r3, #8
 800781c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007828:	f023 0301 	bic.w	r3, r3, #1
 800782c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3308      	adds	r3, #8
 8007836:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800783a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800783e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007842:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800784c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e1      	bne.n	8007816 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007868:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007876:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007878:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800787c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e3      	bne.n	8007852 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2220      	movs	r2, #32
 800788e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a8:	f023 0310 	bic.w	r3, r3, #16
 80078ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	461a      	mov	r2, r3
 80078b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80078bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1e4      	bne.n	8007898 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fa fc1e 	bl	8002114 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f8cc 	bl	8007a90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078f8:	e0a4      	b.n	8007a44 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007906:	b29b      	uxth	r3, r3
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 8096 	beq.w	8007a48 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800791c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8091 	beq.w	8007a48 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800792e:	e853 3f00 	ldrex	r3, [r3]
 8007932:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007936:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800793a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007948:	647b      	str	r3, [r7, #68]	; 0x44
 800794a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800794e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007950:	e841 2300 	strex	r3, r2, [r1]
 8007954:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1e4      	bne.n	8007926 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3308      	adds	r3, #8
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	e853 3f00 	ldrex	r3, [r3]
 800796a:	623b      	str	r3, [r7, #32]
   return(result);
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	f023 0301 	bic.w	r3, r3, #1
 8007972:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3308      	adds	r3, #8
 800797c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007980:	633a      	str	r2, [r7, #48]	; 0x30
 8007982:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007984:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007988:	e841 2300 	strex	r3, r2, [r1]
 800798c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800798e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e3      	bne.n	800795c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f023 0310 	bic.w	r3, r3, #16
 80079bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	461a      	mov	r2, r3
 80079c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079ca:	61fb      	str	r3, [r7, #28]
 80079cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	69b9      	ldr	r1, [r7, #24]
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	617b      	str	r3, [r7, #20]
   return(result);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e4      	bne.n	80079a8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2202      	movs	r2, #2
 80079e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f850 	bl	8007a90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079f0:	e02a      	b.n	8007a48 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00e      	beq.n	8007a1c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80079fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d008      	beq.n	8007a1c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d01c      	beq.n	8007a4c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
    }
    return;
 8007a1a:	e017      	b.n	8007a4c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d012      	beq.n	8007a4e <HAL_UART_IRQHandler+0x59e>
 8007a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00c      	beq.n	8007a4e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fec6 	bl	80087c6 <UART_EndTransmit_IT>
    return;
 8007a3a:	e008      	b.n	8007a4e <HAL_UART_IRQHandler+0x59e>
      return;
 8007a3c:	bf00      	nop
 8007a3e:	e006      	b.n	8007a4e <HAL_UART_IRQHandler+0x59e>
    return;
 8007a40:	bf00      	nop
 8007a42:	e004      	b.n	8007a4e <HAL_UART_IRQHandler+0x59e>
      return;
 8007a44:	bf00      	nop
 8007a46:	e002      	b.n	8007a4e <HAL_UART_IRQHandler+0x59e>
      return;
 8007a48:	bf00      	nop
 8007a4a:	e000      	b.n	8007a4e <HAL_UART_IRQHandler+0x59e>
    return;
 8007a4c:	bf00      	nop
  }

}
 8007a4e:	37e8      	adds	r7, #232	; 0xe8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	4ba6      	ldr	r3, [pc, #664]	; (8007d6c <UART_SetConfig+0x2c4>)
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	6812      	ldr	r2, [r2, #0]
 8007ada:	6979      	ldr	r1, [r7, #20]
 8007adc:	430b      	orrs	r3, r1
 8007ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a94      	ldr	r2, [pc, #592]	; (8007d70 <UART_SetConfig+0x2c8>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d120      	bne.n	8007b66 <UART_SetConfig+0xbe>
 8007b24:	4b93      	ldr	r3, [pc, #588]	; (8007d74 <UART_SetConfig+0x2cc>)
 8007b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2a:	f003 0303 	and.w	r3, r3, #3
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d816      	bhi.n	8007b60 <UART_SetConfig+0xb8>
 8007b32:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <UART_SetConfig+0x90>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007b49 	.word	0x08007b49
 8007b3c:	08007b55 	.word	0x08007b55
 8007b40:	08007b4f 	.word	0x08007b4f
 8007b44:	08007b5b 	.word	0x08007b5b
 8007b48:	2301      	movs	r3, #1
 8007b4a:	77fb      	strb	r3, [r7, #31]
 8007b4c:	e150      	b.n	8007df0 <UART_SetConfig+0x348>
 8007b4e:	2302      	movs	r3, #2
 8007b50:	77fb      	strb	r3, [r7, #31]
 8007b52:	e14d      	b.n	8007df0 <UART_SetConfig+0x348>
 8007b54:	2304      	movs	r3, #4
 8007b56:	77fb      	strb	r3, [r7, #31]
 8007b58:	e14a      	b.n	8007df0 <UART_SetConfig+0x348>
 8007b5a:	2308      	movs	r3, #8
 8007b5c:	77fb      	strb	r3, [r7, #31]
 8007b5e:	e147      	b.n	8007df0 <UART_SetConfig+0x348>
 8007b60:	2310      	movs	r3, #16
 8007b62:	77fb      	strb	r3, [r7, #31]
 8007b64:	e144      	b.n	8007df0 <UART_SetConfig+0x348>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a83      	ldr	r2, [pc, #524]	; (8007d78 <UART_SetConfig+0x2d0>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d132      	bne.n	8007bd6 <UART_SetConfig+0x12e>
 8007b70:	4b80      	ldr	r3, [pc, #512]	; (8007d74 <UART_SetConfig+0x2cc>)
 8007b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b76:	f003 030c 	and.w	r3, r3, #12
 8007b7a:	2b0c      	cmp	r3, #12
 8007b7c:	d828      	bhi.n	8007bd0 <UART_SetConfig+0x128>
 8007b7e:	a201      	add	r2, pc, #4	; (adr r2, 8007b84 <UART_SetConfig+0xdc>)
 8007b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b84:	08007bb9 	.word	0x08007bb9
 8007b88:	08007bd1 	.word	0x08007bd1
 8007b8c:	08007bd1 	.word	0x08007bd1
 8007b90:	08007bd1 	.word	0x08007bd1
 8007b94:	08007bc5 	.word	0x08007bc5
 8007b98:	08007bd1 	.word	0x08007bd1
 8007b9c:	08007bd1 	.word	0x08007bd1
 8007ba0:	08007bd1 	.word	0x08007bd1
 8007ba4:	08007bbf 	.word	0x08007bbf
 8007ba8:	08007bd1 	.word	0x08007bd1
 8007bac:	08007bd1 	.word	0x08007bd1
 8007bb0:	08007bd1 	.word	0x08007bd1
 8007bb4:	08007bcb 	.word	0x08007bcb
 8007bb8:	2300      	movs	r3, #0
 8007bba:	77fb      	strb	r3, [r7, #31]
 8007bbc:	e118      	b.n	8007df0 <UART_SetConfig+0x348>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	77fb      	strb	r3, [r7, #31]
 8007bc2:	e115      	b.n	8007df0 <UART_SetConfig+0x348>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	77fb      	strb	r3, [r7, #31]
 8007bc8:	e112      	b.n	8007df0 <UART_SetConfig+0x348>
 8007bca:	2308      	movs	r3, #8
 8007bcc:	77fb      	strb	r3, [r7, #31]
 8007bce:	e10f      	b.n	8007df0 <UART_SetConfig+0x348>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	77fb      	strb	r3, [r7, #31]
 8007bd4:	e10c      	b.n	8007df0 <UART_SetConfig+0x348>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a68      	ldr	r2, [pc, #416]	; (8007d7c <UART_SetConfig+0x2d4>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d120      	bne.n	8007c22 <UART_SetConfig+0x17a>
 8007be0:	4b64      	ldr	r3, [pc, #400]	; (8007d74 <UART_SetConfig+0x2cc>)
 8007be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007be6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bea:	2b30      	cmp	r3, #48	; 0x30
 8007bec:	d013      	beq.n	8007c16 <UART_SetConfig+0x16e>
 8007bee:	2b30      	cmp	r3, #48	; 0x30
 8007bf0:	d814      	bhi.n	8007c1c <UART_SetConfig+0x174>
 8007bf2:	2b20      	cmp	r3, #32
 8007bf4:	d009      	beq.n	8007c0a <UART_SetConfig+0x162>
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d810      	bhi.n	8007c1c <UART_SetConfig+0x174>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <UART_SetConfig+0x15c>
 8007bfe:	2b10      	cmp	r3, #16
 8007c00:	d006      	beq.n	8007c10 <UART_SetConfig+0x168>
 8007c02:	e00b      	b.n	8007c1c <UART_SetConfig+0x174>
 8007c04:	2300      	movs	r3, #0
 8007c06:	77fb      	strb	r3, [r7, #31]
 8007c08:	e0f2      	b.n	8007df0 <UART_SetConfig+0x348>
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	77fb      	strb	r3, [r7, #31]
 8007c0e:	e0ef      	b.n	8007df0 <UART_SetConfig+0x348>
 8007c10:	2304      	movs	r3, #4
 8007c12:	77fb      	strb	r3, [r7, #31]
 8007c14:	e0ec      	b.n	8007df0 <UART_SetConfig+0x348>
 8007c16:	2308      	movs	r3, #8
 8007c18:	77fb      	strb	r3, [r7, #31]
 8007c1a:	e0e9      	b.n	8007df0 <UART_SetConfig+0x348>
 8007c1c:	2310      	movs	r3, #16
 8007c1e:	77fb      	strb	r3, [r7, #31]
 8007c20:	e0e6      	b.n	8007df0 <UART_SetConfig+0x348>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a56      	ldr	r2, [pc, #344]	; (8007d80 <UART_SetConfig+0x2d8>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d120      	bne.n	8007c6e <UART_SetConfig+0x1c6>
 8007c2c:	4b51      	ldr	r3, [pc, #324]	; (8007d74 <UART_SetConfig+0x2cc>)
 8007c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c36:	2bc0      	cmp	r3, #192	; 0xc0
 8007c38:	d013      	beq.n	8007c62 <UART_SetConfig+0x1ba>
 8007c3a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c3c:	d814      	bhi.n	8007c68 <UART_SetConfig+0x1c0>
 8007c3e:	2b80      	cmp	r3, #128	; 0x80
 8007c40:	d009      	beq.n	8007c56 <UART_SetConfig+0x1ae>
 8007c42:	2b80      	cmp	r3, #128	; 0x80
 8007c44:	d810      	bhi.n	8007c68 <UART_SetConfig+0x1c0>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <UART_SetConfig+0x1a8>
 8007c4a:	2b40      	cmp	r3, #64	; 0x40
 8007c4c:	d006      	beq.n	8007c5c <UART_SetConfig+0x1b4>
 8007c4e:	e00b      	b.n	8007c68 <UART_SetConfig+0x1c0>
 8007c50:	2300      	movs	r3, #0
 8007c52:	77fb      	strb	r3, [r7, #31]
 8007c54:	e0cc      	b.n	8007df0 <UART_SetConfig+0x348>
 8007c56:	2302      	movs	r3, #2
 8007c58:	77fb      	strb	r3, [r7, #31]
 8007c5a:	e0c9      	b.n	8007df0 <UART_SetConfig+0x348>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	77fb      	strb	r3, [r7, #31]
 8007c60:	e0c6      	b.n	8007df0 <UART_SetConfig+0x348>
 8007c62:	2308      	movs	r3, #8
 8007c64:	77fb      	strb	r3, [r7, #31]
 8007c66:	e0c3      	b.n	8007df0 <UART_SetConfig+0x348>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	77fb      	strb	r3, [r7, #31]
 8007c6c:	e0c0      	b.n	8007df0 <UART_SetConfig+0x348>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a44      	ldr	r2, [pc, #272]	; (8007d84 <UART_SetConfig+0x2dc>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d125      	bne.n	8007cc4 <UART_SetConfig+0x21c>
 8007c78:	4b3e      	ldr	r3, [pc, #248]	; (8007d74 <UART_SetConfig+0x2cc>)
 8007c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c86:	d017      	beq.n	8007cb8 <UART_SetConfig+0x210>
 8007c88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c8c:	d817      	bhi.n	8007cbe <UART_SetConfig+0x216>
 8007c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c92:	d00b      	beq.n	8007cac <UART_SetConfig+0x204>
 8007c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c98:	d811      	bhi.n	8007cbe <UART_SetConfig+0x216>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <UART_SetConfig+0x1fe>
 8007c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ca2:	d006      	beq.n	8007cb2 <UART_SetConfig+0x20a>
 8007ca4:	e00b      	b.n	8007cbe <UART_SetConfig+0x216>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	77fb      	strb	r3, [r7, #31]
 8007caa:	e0a1      	b.n	8007df0 <UART_SetConfig+0x348>
 8007cac:	2302      	movs	r3, #2
 8007cae:	77fb      	strb	r3, [r7, #31]
 8007cb0:	e09e      	b.n	8007df0 <UART_SetConfig+0x348>
 8007cb2:	2304      	movs	r3, #4
 8007cb4:	77fb      	strb	r3, [r7, #31]
 8007cb6:	e09b      	b.n	8007df0 <UART_SetConfig+0x348>
 8007cb8:	2308      	movs	r3, #8
 8007cba:	77fb      	strb	r3, [r7, #31]
 8007cbc:	e098      	b.n	8007df0 <UART_SetConfig+0x348>
 8007cbe:	2310      	movs	r3, #16
 8007cc0:	77fb      	strb	r3, [r7, #31]
 8007cc2:	e095      	b.n	8007df0 <UART_SetConfig+0x348>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a2f      	ldr	r2, [pc, #188]	; (8007d88 <UART_SetConfig+0x2e0>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d125      	bne.n	8007d1a <UART_SetConfig+0x272>
 8007cce:	4b29      	ldr	r3, [pc, #164]	; (8007d74 <UART_SetConfig+0x2cc>)
 8007cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cdc:	d017      	beq.n	8007d0e <UART_SetConfig+0x266>
 8007cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ce2:	d817      	bhi.n	8007d14 <UART_SetConfig+0x26c>
 8007ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ce8:	d00b      	beq.n	8007d02 <UART_SetConfig+0x25a>
 8007cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cee:	d811      	bhi.n	8007d14 <UART_SetConfig+0x26c>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <UART_SetConfig+0x254>
 8007cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cf8:	d006      	beq.n	8007d08 <UART_SetConfig+0x260>
 8007cfa:	e00b      	b.n	8007d14 <UART_SetConfig+0x26c>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	77fb      	strb	r3, [r7, #31]
 8007d00:	e076      	b.n	8007df0 <UART_SetConfig+0x348>
 8007d02:	2302      	movs	r3, #2
 8007d04:	77fb      	strb	r3, [r7, #31]
 8007d06:	e073      	b.n	8007df0 <UART_SetConfig+0x348>
 8007d08:	2304      	movs	r3, #4
 8007d0a:	77fb      	strb	r3, [r7, #31]
 8007d0c:	e070      	b.n	8007df0 <UART_SetConfig+0x348>
 8007d0e:	2308      	movs	r3, #8
 8007d10:	77fb      	strb	r3, [r7, #31]
 8007d12:	e06d      	b.n	8007df0 <UART_SetConfig+0x348>
 8007d14:	2310      	movs	r3, #16
 8007d16:	77fb      	strb	r3, [r7, #31]
 8007d18:	e06a      	b.n	8007df0 <UART_SetConfig+0x348>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a1b      	ldr	r2, [pc, #108]	; (8007d8c <UART_SetConfig+0x2e4>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d138      	bne.n	8007d96 <UART_SetConfig+0x2ee>
 8007d24:	4b13      	ldr	r3, [pc, #76]	; (8007d74 <UART_SetConfig+0x2cc>)
 8007d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d32:	d017      	beq.n	8007d64 <UART_SetConfig+0x2bc>
 8007d34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d38:	d82a      	bhi.n	8007d90 <UART_SetConfig+0x2e8>
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3e:	d00b      	beq.n	8007d58 <UART_SetConfig+0x2b0>
 8007d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d44:	d824      	bhi.n	8007d90 <UART_SetConfig+0x2e8>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <UART_SetConfig+0x2aa>
 8007d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d4e:	d006      	beq.n	8007d5e <UART_SetConfig+0x2b6>
 8007d50:	e01e      	b.n	8007d90 <UART_SetConfig+0x2e8>
 8007d52:	2300      	movs	r3, #0
 8007d54:	77fb      	strb	r3, [r7, #31]
 8007d56:	e04b      	b.n	8007df0 <UART_SetConfig+0x348>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	77fb      	strb	r3, [r7, #31]
 8007d5c:	e048      	b.n	8007df0 <UART_SetConfig+0x348>
 8007d5e:	2304      	movs	r3, #4
 8007d60:	77fb      	strb	r3, [r7, #31]
 8007d62:	e045      	b.n	8007df0 <UART_SetConfig+0x348>
 8007d64:	2308      	movs	r3, #8
 8007d66:	77fb      	strb	r3, [r7, #31]
 8007d68:	e042      	b.n	8007df0 <UART_SetConfig+0x348>
 8007d6a:	bf00      	nop
 8007d6c:	efff69f3 	.word	0xefff69f3
 8007d70:	40011000 	.word	0x40011000
 8007d74:	40023800 	.word	0x40023800
 8007d78:	40004400 	.word	0x40004400
 8007d7c:	40004800 	.word	0x40004800
 8007d80:	40004c00 	.word	0x40004c00
 8007d84:	40005000 	.word	0x40005000
 8007d88:	40011400 	.word	0x40011400
 8007d8c:	40007800 	.word	0x40007800
 8007d90:	2310      	movs	r3, #16
 8007d92:	77fb      	strb	r3, [r7, #31]
 8007d94:	e02c      	b.n	8007df0 <UART_SetConfig+0x348>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a72      	ldr	r2, [pc, #456]	; (8007f64 <UART_SetConfig+0x4bc>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d125      	bne.n	8007dec <UART_SetConfig+0x344>
 8007da0:	4b71      	ldr	r3, [pc, #452]	; (8007f68 <UART_SetConfig+0x4c0>)
 8007da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007daa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007dae:	d017      	beq.n	8007de0 <UART_SetConfig+0x338>
 8007db0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007db4:	d817      	bhi.n	8007de6 <UART_SetConfig+0x33e>
 8007db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dba:	d00b      	beq.n	8007dd4 <UART_SetConfig+0x32c>
 8007dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dc0:	d811      	bhi.n	8007de6 <UART_SetConfig+0x33e>
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <UART_SetConfig+0x326>
 8007dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dca:	d006      	beq.n	8007dda <UART_SetConfig+0x332>
 8007dcc:	e00b      	b.n	8007de6 <UART_SetConfig+0x33e>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	77fb      	strb	r3, [r7, #31]
 8007dd2:	e00d      	b.n	8007df0 <UART_SetConfig+0x348>
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	77fb      	strb	r3, [r7, #31]
 8007dd8:	e00a      	b.n	8007df0 <UART_SetConfig+0x348>
 8007dda:	2304      	movs	r3, #4
 8007ddc:	77fb      	strb	r3, [r7, #31]
 8007dde:	e007      	b.n	8007df0 <UART_SetConfig+0x348>
 8007de0:	2308      	movs	r3, #8
 8007de2:	77fb      	strb	r3, [r7, #31]
 8007de4:	e004      	b.n	8007df0 <UART_SetConfig+0x348>
 8007de6:	2310      	movs	r3, #16
 8007de8:	77fb      	strb	r3, [r7, #31]
 8007dea:	e001      	b.n	8007df0 <UART_SetConfig+0x348>
 8007dec:	2310      	movs	r3, #16
 8007dee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df8:	d15b      	bne.n	8007eb2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007dfa:	7ffb      	ldrb	r3, [r7, #31]
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d828      	bhi.n	8007e52 <UART_SetConfig+0x3aa>
 8007e00:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <UART_SetConfig+0x360>)
 8007e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e06:	bf00      	nop
 8007e08:	08007e2d 	.word	0x08007e2d
 8007e0c:	08007e35 	.word	0x08007e35
 8007e10:	08007e3d 	.word	0x08007e3d
 8007e14:	08007e53 	.word	0x08007e53
 8007e18:	08007e43 	.word	0x08007e43
 8007e1c:	08007e53 	.word	0x08007e53
 8007e20:	08007e53 	.word	0x08007e53
 8007e24:	08007e53 	.word	0x08007e53
 8007e28:	08007e4b 	.word	0x08007e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e2c:	f7fd fc04 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8007e30:	61b8      	str	r0, [r7, #24]
        break;
 8007e32:	e013      	b.n	8007e5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e34:	f7fd fc14 	bl	8005660 <HAL_RCC_GetPCLK2Freq>
 8007e38:	61b8      	str	r0, [r7, #24]
        break;
 8007e3a:	e00f      	b.n	8007e5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e3c:	4b4b      	ldr	r3, [pc, #300]	; (8007f6c <UART_SetConfig+0x4c4>)
 8007e3e:	61bb      	str	r3, [r7, #24]
        break;
 8007e40:	e00c      	b.n	8007e5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e42:	f7fd fae7 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 8007e46:	61b8      	str	r0, [r7, #24]
        break;
 8007e48:	e008      	b.n	8007e5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e4e:	61bb      	str	r3, [r7, #24]
        break;
 8007e50:	e004      	b.n	8007e5c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	77bb      	strb	r3, [r7, #30]
        break;
 8007e5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d074      	beq.n	8007f4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	005a      	lsls	r2, r3, #1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	085b      	lsrs	r3, r3, #1
 8007e6c:	441a      	add	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b0f      	cmp	r3, #15
 8007e7c:	d916      	bls.n	8007eac <UART_SetConfig+0x404>
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e84:	d212      	bcs.n	8007eac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	f023 030f 	bic.w	r3, r3, #15
 8007e8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	085b      	lsrs	r3, r3, #1
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	89fb      	ldrh	r3, [r7, #14]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	89fa      	ldrh	r2, [r7, #14]
 8007ea8:	60da      	str	r2, [r3, #12]
 8007eaa:	e04f      	b.n	8007f4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	77bb      	strb	r3, [r7, #30]
 8007eb0:	e04c      	b.n	8007f4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007eb2:	7ffb      	ldrb	r3, [r7, #31]
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d828      	bhi.n	8007f0a <UART_SetConfig+0x462>
 8007eb8:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <UART_SetConfig+0x418>)
 8007eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ebe:	bf00      	nop
 8007ec0:	08007ee5 	.word	0x08007ee5
 8007ec4:	08007eed 	.word	0x08007eed
 8007ec8:	08007ef5 	.word	0x08007ef5
 8007ecc:	08007f0b 	.word	0x08007f0b
 8007ed0:	08007efb 	.word	0x08007efb
 8007ed4:	08007f0b 	.word	0x08007f0b
 8007ed8:	08007f0b 	.word	0x08007f0b
 8007edc:	08007f0b 	.word	0x08007f0b
 8007ee0:	08007f03 	.word	0x08007f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ee4:	f7fd fba8 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8007ee8:	61b8      	str	r0, [r7, #24]
        break;
 8007eea:	e013      	b.n	8007f14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eec:	f7fd fbb8 	bl	8005660 <HAL_RCC_GetPCLK2Freq>
 8007ef0:	61b8      	str	r0, [r7, #24]
        break;
 8007ef2:	e00f      	b.n	8007f14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ef4:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <UART_SetConfig+0x4c4>)
 8007ef6:	61bb      	str	r3, [r7, #24]
        break;
 8007ef8:	e00c      	b.n	8007f14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007efa:	f7fd fa8b 	bl	8005414 <HAL_RCC_GetSysClockFreq>
 8007efe:	61b8      	str	r0, [r7, #24]
        break;
 8007f00:	e008      	b.n	8007f14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f06:	61bb      	str	r3, [r7, #24]
        break;
 8007f08:	e004      	b.n	8007f14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	77bb      	strb	r3, [r7, #30]
        break;
 8007f12:	bf00      	nop
    }

    if (pclk != 0U)
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d018      	beq.n	8007f4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	085a      	lsrs	r2, r3, #1
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	441a      	add	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2b0f      	cmp	r3, #15
 8007f32:	d909      	bls.n	8007f48 <UART_SetConfig+0x4a0>
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f3a:	d205      	bcs.n	8007f48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60da      	str	r2, [r3, #12]
 8007f46:	e001      	b.n	8007f4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007f58:	7fbb      	ldrb	r3, [r7, #30]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	40007c00 	.word	0x40007c00
 8007f68:	40023800 	.word	0x40023800
 8007f6c:	00f42400 	.word	0x00f42400

08007f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00a      	beq.n	8007f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00a      	beq.n	8007fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	f003 0304 	and.w	r3, r3, #4
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00a      	beq.n	8007fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	f003 0308 	and.w	r3, r3, #8
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	f003 0310 	and.w	r3, r3, #16
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00a      	beq.n	8008022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	430a      	orrs	r2, r1
 8008020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00a      	beq.n	8008044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	d01a      	beq.n	8008086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800806e:	d10a      	bne.n	8008086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00a      	beq.n	80080a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	430a      	orrs	r2, r1
 80080a6:	605a      	str	r2, [r3, #4]
  }
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af02      	add	r7, sp, #8
 80080ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080c4:	f7f9 fdd6 	bl	8001c74 <HAL_GetTick>
 80080c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0308 	and.w	r3, r3, #8
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	d10e      	bne.n	80080f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f81b 	bl	8008122 <UART_WaitOnFlagUntilTimeout>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e011      	b.n	800811a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2220      	movs	r2, #32
 80080fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b09c      	sub	sp, #112	; 0x70
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	603b      	str	r3, [r7, #0]
 800812e:	4613      	mov	r3, r2
 8008130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008132:	e0a7      	b.n	8008284 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800813a:	f000 80a3 	beq.w	8008284 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800813e:	f7f9 fd99 	bl	8001c74 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800814a:	429a      	cmp	r2, r3
 800814c:	d302      	bcc.n	8008154 <UART_WaitOnFlagUntilTimeout+0x32>
 800814e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008150:	2b00      	cmp	r3, #0
 8008152:	d13f      	bne.n	80081d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008168:	667b      	str	r3, [r7, #100]	; 0x64
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008174:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008178:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e6      	bne.n	8008154 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3308      	adds	r3, #8
 800818c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008190:	e853 3f00 	ldrex	r3, [r3]
 8008194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008198:	f023 0301 	bic.w	r3, r3, #1
 800819c:	663b      	str	r3, [r7, #96]	; 0x60
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	3308      	adds	r3, #8
 80081a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80081a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e5      	bne.n	8008186 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2220      	movs	r2, #32
 80081be:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2220      	movs	r2, #32
 80081c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e068      	b.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0304 	and.w	r3, r3, #4
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d050      	beq.n	8008284 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f0:	d148      	bne.n	8008284 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008210:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
 800821c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e6      	bne.n	80081fc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3308      	adds	r3, #8
 8008234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	613b      	str	r3, [r7, #16]
   return(result);
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f023 0301 	bic.w	r3, r3, #1
 8008244:	66bb      	str	r3, [r7, #104]	; 0x68
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800824e:	623a      	str	r2, [r7, #32]
 8008250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	69f9      	ldr	r1, [r7, #28]
 8008254:	6a3a      	ldr	r2, [r7, #32]
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	61bb      	str	r3, [r7, #24]
   return(result);
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e5      	bne.n	800822e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2220      	movs	r2, #32
 8008266:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2220      	movs	r2, #32
 800826c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2220      	movs	r2, #32
 8008274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e010      	b.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	69da      	ldr	r2, [r3, #28]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	4013      	ands	r3, r2
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	429a      	cmp	r2, r3
 8008292:	bf0c      	ite	eq
 8008294:	2301      	moveq	r3, #1
 8008296:	2300      	movne	r3, #0
 8008298:	b2db      	uxtb	r3, r3
 800829a:	461a      	mov	r2, r3
 800829c:	79fb      	ldrb	r3, [r7, #7]
 800829e:	429a      	cmp	r2, r3
 80082a0:	f43f af48 	beq.w	8008134 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3770      	adds	r7, #112	; 0x70
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b096      	sub	sp, #88	; 0x58
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4613      	mov	r3, r2
 80082bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	88fa      	ldrh	r2, [r7, #6]
 80082c8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2222      	movs	r2, #34	; 0x22
 80082d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d028      	beq.n	8008336 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e8:	4a3e      	ldr	r2, [pc, #248]	; (80083e4 <UART_Start_Receive_DMA+0x134>)
 80082ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f0:	4a3d      	ldr	r2, [pc, #244]	; (80083e8 <UART_Start_Receive_DMA+0x138>)
 80082f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f8:	4a3c      	ldr	r2, [pc, #240]	; (80083ec <UART_Start_Receive_DMA+0x13c>)
 80082fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008300:	2200      	movs	r2, #0
 8008302:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3324      	adds	r3, #36	; 0x24
 800830e:	4619      	mov	r1, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008314:	461a      	mov	r2, r3
 8008316:	88fb      	ldrh	r3, [r7, #6]
 8008318:	f7f9 fe9c 	bl	8002054 <HAL_DMA_Start_IT>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d009      	beq.n	8008336 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2210      	movs	r2, #16
 8008326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2220      	movs	r2, #32
 800832e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e051      	b.n	80083da <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d018      	beq.n	8008370 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008352:	657b      	str	r3, [r7, #84]	; 0x54
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	461a      	mov	r2, r3
 800835a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800835c:	64bb      	str	r3, [r7, #72]	; 0x48
 800835e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800836a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e6      	bne.n	800833e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	e853 3f00 	ldrex	r3, [r3]
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	f043 0301 	orr.w	r3, r3, #1
 8008386:	653b      	str	r3, [r7, #80]	; 0x50
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	3308      	adds	r3, #8
 800838e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008390:	637a      	str	r2, [r7, #52]	; 0x34
 8008392:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800839e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e5      	bne.n	8008370 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3308      	adds	r3, #8
 80083aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	e853 3f00 	ldrex	r3, [r3]
 80083b2:	613b      	str	r3, [r7, #16]
   return(result);
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	3308      	adds	r3, #8
 80083c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083c4:	623a      	str	r2, [r7, #32]
 80083c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	69f9      	ldr	r1, [r7, #28]
 80083ca:	6a3a      	ldr	r2, [r7, #32]
 80083cc:	e841 2300 	strex	r3, r2, [r1]
 80083d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e5      	bne.n	80083a4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3758      	adds	r7, #88	; 0x58
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	080085b7 	.word	0x080085b7
 80083e8:	080086df 	.word	0x080086df
 80083ec:	0800871d 	.word	0x0800871d

080083f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b089      	sub	sp, #36	; 0x24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	e853 3f00 	ldrex	r3, [r3]
 8008404:	60bb      	str	r3, [r7, #8]
   return(result);
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800840c:	61fb      	str	r3, [r7, #28]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	61bb      	str	r3, [r7, #24]
 8008418:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841a:	6979      	ldr	r1, [r7, #20]
 800841c:	69ba      	ldr	r2, [r7, #24]
 800841e:	e841 2300 	strex	r3, r2, [r1]
 8008422:	613b      	str	r3, [r7, #16]
   return(result);
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1e6      	bne.n	80083f8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008430:	bf00      	nop
 8008432:	3724      	adds	r7, #36	; 0x24
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800843c:	b480      	push	{r7}
 800843e:	b095      	sub	sp, #84	; 0x54
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844c:	e853 3f00 	ldrex	r3, [r3]
 8008450:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008458:	64fb      	str	r3, [r7, #76]	; 0x4c
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008462:	643b      	str	r3, [r7, #64]	; 0x40
 8008464:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008466:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008468:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800846a:	e841 2300 	strex	r3, r2, [r1]
 800846e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	2b00      	cmp	r3, #0
 8008474:	d1e6      	bne.n	8008444 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3308      	adds	r3, #8
 800847c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	e853 3f00 	ldrex	r3, [r3]
 8008484:	61fb      	str	r3, [r7, #28]
   return(result);
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	f023 0301 	bic.w	r3, r3, #1
 800848c:	64bb      	str	r3, [r7, #72]	; 0x48
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3308      	adds	r3, #8
 8008494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008496:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008498:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800849c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e5      	bne.n	8008476 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d118      	bne.n	80084e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	60bb      	str	r3, [r7, #8]
   return(result);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	f023 0310 	bic.w	r3, r3, #16
 80084c6:	647b      	str	r3, [r7, #68]	; 0x44
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	461a      	mov	r2, r3
 80084ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	6979      	ldr	r1, [r7, #20]
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	613b      	str	r3, [r7, #16]
   return(result);
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e6      	bne.n	80084b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2220      	movs	r2, #32
 80084e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80084f8:	bf00      	nop
 80084fa:	3754      	adds	r7, #84	; 0x54
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b090      	sub	sp, #64	; 0x40
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800851a:	d037      	beq.n	800858c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800851c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851e:	2200      	movs	r2, #0
 8008520:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3308      	adds	r3, #8
 800852a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	623b      	str	r3, [r7, #32]
   return(result);
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800853a:	63bb      	str	r3, [r7, #56]	; 0x38
 800853c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3308      	adds	r3, #8
 8008542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008544:	633a      	str	r2, [r7, #48]	; 0x30
 8008546:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800854a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800854c:	e841 2300 	strex	r3, r2, [r1]
 8008550:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e5      	bne.n	8008524 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	60fb      	str	r3, [r7, #12]
   return(result);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800856c:	637b      	str	r3, [r7, #52]	; 0x34
 800856e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008576:	61fb      	str	r3, [r7, #28]
 8008578:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857a:	69b9      	ldr	r1, [r7, #24]
 800857c:	69fa      	ldr	r2, [r7, #28]
 800857e:	e841 2300 	strex	r3, r2, [r1]
 8008582:	617b      	str	r3, [r7, #20]
   return(result);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1e6      	bne.n	8008558 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800858a:	e002      	b.n	8008592 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800858c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800858e:	f001 f865 	bl	800965c <HAL_UART_TxCpltCallback>
}
 8008592:	bf00      	nop
 8008594:	3740      	adds	r7, #64	; 0x40
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b084      	sub	sp, #16
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff fa53 	bl	8007a54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b09c      	sub	sp, #112	; 0x70
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085cc:	d071      	beq.n	80086b2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80085ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d0:	2200      	movs	r2, #0
 80085d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085de:	e853 3f00 	ldrex	r3, [r3]
 80085e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80085ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80085f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80085fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e6      	bne.n	80085d6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3308      	adds	r3, #8
 800860e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861a:	f023 0301 	bic.w	r3, r3, #1
 800861e:	667b      	str	r3, [r7, #100]	; 0x64
 8008620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3308      	adds	r3, #8
 8008626:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008628:	647a      	str	r2, [r7, #68]	; 0x44
 800862a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800862e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e5      	bne.n	8008608 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3308      	adds	r3, #8
 8008642:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	623b      	str	r3, [r7, #32]
   return(result);
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008652:	663b      	str	r3, [r7, #96]	; 0x60
 8008654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3308      	adds	r3, #8
 800865a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800865c:	633a      	str	r2, [r7, #48]	; 0x30
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e5      	bne.n	800863c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008672:	2220      	movs	r2, #32
 8008674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800867c:	2b01      	cmp	r3, #1
 800867e:	d118      	bne.n	80086b2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	60fb      	str	r3, [r7, #12]
   return(result);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f023 0310 	bic.w	r3, r3, #16
 8008694:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800869e:	61fb      	str	r3, [r7, #28]
 80086a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	69b9      	ldr	r1, [r7, #24]
 80086a4:	69fa      	ldr	r2, [r7, #28]
 80086a6:	e841 2300 	strex	r3, r2, [r1]
 80086aa:	617b      	str	r3, [r7, #20]
   return(result);
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1e6      	bne.n	8008680 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b4:	2200      	movs	r2, #0
 80086b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d107      	bne.n	80086d0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086c6:	4619      	mov	r1, r3
 80086c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086ca:	f7ff f9e1 	bl	8007a90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086ce:	e002      	b.n	80086d6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80086d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086d2:	f000 ffa7 	bl	8009624 <HAL_UART_RxCpltCallback>
}
 80086d6:	bf00      	nop
 80086d8:	3770      	adds	r7, #112	; 0x70
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d109      	bne.n	800870e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008700:	085b      	lsrs	r3, r3, #1
 8008702:	b29b      	uxth	r3, r3
 8008704:	4619      	mov	r1, r3
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7ff f9c2 	bl	8007a90 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800870c:	e002      	b.n	8008714 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff f9aa 	bl	8007a68 <HAL_UART_RxHalfCpltCallback>
}
 8008714:	bf00      	nop
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008728:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800872e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008736:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008742:	2b80      	cmp	r3, #128	; 0x80
 8008744:	d109      	bne.n	800875a <UART_DMAError+0x3e>
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b21      	cmp	r3, #33	; 0x21
 800874a:	d106      	bne.n	800875a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2200      	movs	r2, #0
 8008750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008754:	6978      	ldr	r0, [r7, #20]
 8008756:	f7ff fe4b 	bl	80083f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008764:	2b40      	cmp	r3, #64	; 0x40
 8008766:	d109      	bne.n	800877c <UART_DMAError+0x60>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b22      	cmp	r3, #34	; 0x22
 800876c:	d106      	bne.n	800877c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2200      	movs	r2, #0
 8008772:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008776:	6978      	ldr	r0, [r7, #20]
 8008778:	f7ff fe60 	bl	800843c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008782:	f043 0210 	orr.w	r2, r3, #16
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800878c:	6978      	ldr	r0, [r7, #20]
 800878e:	f7ff f975 	bl	8007a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008792:	bf00      	nop
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff f95f 	bl	8007a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b088      	sub	sp, #32
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	e853 3f00 	ldrex	r3, [r3]
 80087da:	60bb      	str	r3, [r7, #8]
   return(result);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e2:	61fb      	str	r3, [r7, #28]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	461a      	mov	r2, r3
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	6979      	ldr	r1, [r7, #20]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	e841 2300 	strex	r3, r2, [r1]
 80087f8:	613b      	str	r3, [r7, #16]
   return(result);
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e6      	bne.n	80087ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2220      	movs	r2, #32
 8008804:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 ff25 	bl	800965c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008812:	bf00      	nop
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800881c:	b084      	sub	sp, #16
 800881e:	b580      	push	{r7, lr}
 8008820:	b084      	sub	sp, #16
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	f107 001c 	add.w	r0, r7, #28
 800882a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	2b01      	cmp	r3, #1
 8008832:	d120      	bne.n	8008876 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	4b20      	ldr	r3, [pc, #128]	; (80088c8 <USB_CoreInit+0xac>)
 8008846:	4013      	ands	r3, r2
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885a:	2b01      	cmp	r3, #1
 800885c:	d105      	bne.n	800886a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 fa96 	bl	8008d9c <USB_CoreReset>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]
 8008874:	e010      	b.n	8008898 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa8a 	bl	8008d9c <USB_CoreReset>
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008890:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	2b01      	cmp	r3, #1
 800889c:	d10b      	bne.n	80088b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f043 0206 	orr.w	r2, r3, #6
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	f043 0220 	orr.w	r2, r3, #32
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088c2:	b004      	add	sp, #16
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	ffbdffbf 	.word	0xffbdffbf

080088cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f023 0201 	bic.w	r2, r3, #1
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d115      	bne.n	800893c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800891c:	2001      	movs	r0, #1
 800891e:	f7f9 f9b5 	bl	8001c8c <HAL_Delay>
      ms++;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3301      	adds	r3, #1
 8008926:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fa29 	bl	8008d80 <USB_GetMode>
 800892e:	4603      	mov	r3, r0
 8008930:	2b01      	cmp	r3, #1
 8008932:	d01e      	beq.n	8008972 <USB_SetCurrentMode+0x84>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b31      	cmp	r3, #49	; 0x31
 8008938:	d9f0      	bls.n	800891c <USB_SetCurrentMode+0x2e>
 800893a:	e01a      	b.n	8008972 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d115      	bne.n	800896e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800894e:	2001      	movs	r0, #1
 8008950:	f7f9 f99c 	bl	8001c8c <HAL_Delay>
      ms++;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3301      	adds	r3, #1
 8008958:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fa10 	bl	8008d80 <USB_GetMode>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d005      	beq.n	8008972 <USB_SetCurrentMode+0x84>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b31      	cmp	r3, #49	; 0x31
 800896a:	d9f0      	bls.n	800894e <USB_SetCurrentMode+0x60>
 800896c:	e001      	b.n	8008972 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e005      	b.n	800897e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b32      	cmp	r3, #50	; 0x32
 8008976:	d101      	bne.n	800897c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e000      	b.n	800897e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
	...

08008988 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008988:	b084      	sub	sp, #16
 800898a:	b580      	push	{r7, lr}
 800898c:	b086      	sub	sp, #24
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80089a2:	2300      	movs	r3, #0
 80089a4:	613b      	str	r3, [r7, #16]
 80089a6:	e009      	b.n	80089bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	3340      	adds	r3, #64	; 0x40
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	2200      	movs	r2, #0
 80089b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	3301      	adds	r3, #1
 80089ba:	613b      	str	r3, [r7, #16]
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	2b0e      	cmp	r3, #14
 80089c0:	d9f2      	bls.n	80089a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80089c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d11c      	bne.n	8008a02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089d6:	f043 0302 	orr.w	r3, r3, #2
 80089da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	e005      	b.n	8008a0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a14:	461a      	mov	r2, r3
 8008a16:	2300      	movs	r3, #0
 8008a18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a20:	4619      	mov	r1, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a28:	461a      	mov	r2, r3
 8008a2a:	680b      	ldr	r3, [r1, #0]
 8008a2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d10c      	bne.n	8008a4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d104      	bne.n	8008a44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f965 	bl	8008d0c <USB_SetDevSpeed>
 8008a42:	e008      	b.n	8008a56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008a44:	2101      	movs	r1, #1
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f960 	bl	8008d0c <USB_SetDevSpeed>
 8008a4c:	e003      	b.n	8008a56 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a4e:	2103      	movs	r1, #3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f95b 	bl	8008d0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a56:	2110      	movs	r1, #16
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f8f3 	bl	8008c44 <USB_FlushTxFifo>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f91f 	bl	8008cac <USB_FlushRxFifo>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a7e:	461a      	mov	r2, r3
 8008a80:	2300      	movs	r3, #0
 8008a82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a96:	461a      	mov	r2, r3
 8008a98:	2300      	movs	r3, #0
 8008a9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	613b      	str	r3, [r7, #16]
 8008aa0:	e043      	b.n	8008b2a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ab8:	d118      	bne.n	8008aec <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d10a      	bne.n	8008ad6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008acc:	461a      	mov	r2, r3
 8008ace:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	e013      	b.n	8008afe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	e008      	b.n	8008afe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af8:	461a      	mov	r2, r3
 8008afa:	2300      	movs	r3, #0
 8008afc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	3301      	adds	r3, #1
 8008b28:	613b      	str	r3, [r7, #16]
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d3b7      	bcc.n	8008aa2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b32:	2300      	movs	r3, #0
 8008b34:	613b      	str	r3, [r7, #16]
 8008b36:	e043      	b.n	8008bc0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b4e:	d118      	bne.n	8008b82 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	015a      	lsls	r2, r3, #5
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b62:	461a      	mov	r2, r3
 8008b64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	e013      	b.n	8008b94 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b78:	461a      	mov	r2, r3
 8008b7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	e008      	b.n	8008b94 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b8e:	461a      	mov	r2, r3
 8008b90:	2300      	movs	r3, #0
 8008b92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	613b      	str	r3, [r7, #16]
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	693a      	ldr	r2, [r7, #16]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d3b7      	bcc.n	8008b38 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008be8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d105      	bne.n	8008bfc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	f043 0210 	orr.w	r2, r3, #16
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	699a      	ldr	r2, [r3, #24]
 8008c00:	4b0e      	ldr	r3, [pc, #56]	; (8008c3c <USB_DevInit+0x2b4>)
 8008c02:	4313      	orrs	r3, r2
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d005      	beq.n	8008c1a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	f043 0208 	orr.w	r2, r3, #8
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d105      	bne.n	8008c2c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	699a      	ldr	r2, [r3, #24]
 8008c24:	4b06      	ldr	r3, [pc, #24]	; (8008c40 <USB_DevInit+0x2b8>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c38:	b004      	add	sp, #16
 8008c3a:	4770      	bx	lr
 8008c3c:	803c3800 	.word	0x803c3800
 8008c40:	40000004 	.word	0x40000004

08008c44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	3301      	adds	r3, #1
 8008c56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4a13      	ldr	r2, [pc, #76]	; (8008ca8 <USB_FlushTxFifo+0x64>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d901      	bls.n	8008c64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e01b      	b.n	8008c9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	daf2      	bge.n	8008c52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	019b      	lsls	r3, r3, #6
 8008c74:	f043 0220 	orr.w	r2, r3, #32
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4a08      	ldr	r2, [pc, #32]	; (8008ca8 <USB_FlushTxFifo+0x64>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d901      	bls.n	8008c8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e006      	b.n	8008c9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b20      	cmp	r3, #32
 8008c98:	d0f0      	beq.n	8008c7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	00030d40 	.word	0x00030d40

08008cac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	4a11      	ldr	r2, [pc, #68]	; (8008d08 <USB_FlushRxFifo+0x5c>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d901      	bls.n	8008cca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e018      	b.n	8008cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	daf2      	bge.n	8008cb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2210      	movs	r2, #16
 8008cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4a08      	ldr	r2, [pc, #32]	; (8008d08 <USB_FlushRxFifo+0x5c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d901      	bls.n	8008cee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	e006      	b.n	8008cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	f003 0310 	and.w	r3, r3, #16
 8008cf6:	2b10      	cmp	r3, #16
 8008cf8:	d0f0      	beq.n	8008cdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	00030d40 	.word	0x00030d40

08008d0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	68f9      	ldr	r1, [r7, #12]
 8008d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3714      	adds	r7, #20
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b085      	sub	sp, #20
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68fa      	ldr	r2, [r7, #12]
 8008d54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d58:	f023 0303 	bic.w	r3, r3, #3
 8008d5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d6c:	f043 0302 	orr.w	r3, r3, #2
 8008d70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	f003 0301 	and.w	r3, r3, #1
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3301      	adds	r3, #1
 8008dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4a13      	ldr	r2, [pc, #76]	; (8008e00 <USB_CoreReset+0x64>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d901      	bls.n	8008dba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e01b      	b.n	8008df2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	daf2      	bge.n	8008da8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	f043 0201 	orr.w	r2, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4a09      	ldr	r2, [pc, #36]	; (8008e00 <USB_CoreReset+0x64>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d901      	bls.n	8008de4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008de0:	2303      	movs	r3, #3
 8008de2:	e006      	b.n	8008df2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d0f0      	beq.n	8008dd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	00030d40 	.word	0x00030d40

08008e04 <i2c_test>:
 * This is the main function for the I2C testing.
 * The data received from server will be received initially by I2C2, transmit
 * to I2C1, and then transmit back to I2C2 to check if the data is the same.
 */
uint8_t i2c_test(uint8_t iter, uint8_t data_length, uint8_t *data)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008e0a:	af02      	add	r7, sp, #8
 8008e0c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e10:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008e14:	601a      	str	r2, [r3, #0]
 8008e16:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e1a:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8008e1e:	4602      	mov	r2, r0
 8008e20:	701a      	strb	r2, [r3, #0]
 8008e22:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e26:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8008e2a:	460a      	mov	r2, r1
 8008e2c:	701a      	strb	r2, [r3, #0]
	uint8_t i2c2_buff[DATA_SIZE] = { 0 }; // init the buffer to be full '\0'
 8008e2e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	22fb      	movs	r2, #251	; 0xfb
 8008e3e:	2100      	movs	r1, #0
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 fc5f 	bl	8009704 <memset>
	uint8_t i2c4_buff[DATA_SIZE] = { 0 }; // init the buffer to be full '\0'
 8008e46:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008e4e:	2200      	movs	r2, #0
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	3304      	adds	r3, #4
 8008e54:	22fb      	movs	r2, #251	; 0xfb
 8008e56:	2100      	movs	r1, #0
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 fc53 	bl	8009704 <memset>
	uint8_t result = RETURN_SUCCESS;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e

	for(uint8_t i = 0; i < iter ; i++)
 8008e64:	2300      	movs	r3, #0
 8008e66:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008e6a:	e040      	b.n	8008eee <i2c_test+0xea>
	{
		i2c_transmit_to_slave(I2C_MASTER, I2C_SLAVE, data_length, data, i2c4_buff);
 8008e6c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e70:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008e74:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008e78:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 8008e7c:	7811      	ldrb	r1, [r2, #0]
 8008e7e:	f107 020c 	add.w	r2, r7, #12
 8008e82:	9200      	str	r2, [sp, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	460a      	mov	r2, r1
 8008e88:	4921      	ldr	r1, [pc, #132]	; (8008f10 <i2c_test+0x10c>)
 8008e8a:	4822      	ldr	r0, [pc, #136]	; (8008f14 <i2c_test+0x110>)
 8008e8c:	f000 f844 	bl	8008f18 <i2c_transmit_to_slave>
		i2c_delay_till_received();
 8008e90:	f000 f88c 	bl	8008fac <i2c_delay_till_received>
		i2c_transmit_to_master(I2C_SLAVE, I2C_MASTER, data_length, i2c4_buff, i2c2_buff);
 8008e94:	f107 010c 	add.w	r1, r7, #12
 8008e98:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e9c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8008ea0:	781a      	ldrb	r2, [r3, #0]
 8008ea2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	491a      	ldr	r1, [pc, #104]	; (8008f14 <i2c_test+0x110>)
 8008eac:	4818      	ldr	r0, [pc, #96]	; (8008f10 <i2c_test+0x10c>)
 8008eae:	f000 f84f 	bl	8008f50 <i2c_transmit_to_master>
		i2c_delay_till_received();
 8008eb2:	f000 f87b 	bl	8008fac <i2c_delay_till_received>

		if(strncmp((char *)i2c2_buff, (char *)data, data_length) != 0)
 8008eb6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008eba:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8008ebe:	781a      	ldrb	r2, [r3, #0]
 8008ec0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ec4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008ec8:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8008ecc:	6819      	ldr	r1, [r3, #0]
 8008ece:	f000 fcaf 	bl	8009830 <strncmp>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d005      	beq.n	8008ee4 <i2c_test+0xe0>
		{
			result = RETURN_FAILURE;
 8008ed8:	23ff      	movs	r3, #255	; 0xff
 8008eda:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
			return result;
 8008ede:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008ee2:	e00f      	b.n	8008f04 <i2c_test+0x100>
	for(uint8_t i = 0; i < iter ; i++)
 8008ee4:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008ee8:	3301      	adds	r3, #1
 8008eea:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008eee:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ef2:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8008ef6:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d3b5      	bcc.n	8008e6c <i2c_test+0x68>
		}
	}
	return result;
 8008f00:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	2000008c 	.word	0x2000008c
 8008f14:	200000e0 	.word	0x200000e0

08008f18 <i2c_transmit_to_slave>:
void i2c_transmit_to_slave(	I2C_HandleTypeDef *i2c_transmit,
							I2C_HandleTypeDef *i2c_receive,
							uint8_t data_length,
							uint8_t *transmit_buff,
							uint8_t *receive_buff )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	4613      	mov	r3, r2
 8008f26:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Slave_Receive_DMA(i2c_receive, receive_buff, data_length);
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	69b9      	ldr	r1, [r7, #24]
 8008f30:	68b8      	ldr	r0, [r7, #8]
 8008f32:	f7fa f8f1 	bl	8003118 <HAL_I2C_Slave_Receive_DMA>
	HAL_I2C_Master_Transmit_DMA(i2c_transmit, SLAVE_ADDR, transmit_buff, data_length);
 8008f36:	79fb      	ldrb	r3, [r7, #7]
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	212c      	movs	r1, #44	; 0x2c
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f7f9 fe54 	bl	8002bec <HAL_I2C_Master_Transmit_DMA>
	i2c_delay_till_transmited();
 8008f44:	f000 f820 	bl	8008f88 <i2c_delay_till_transmited>
}
 8008f48:	bf00      	nop
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <i2c_transmit_to_master>:
void i2c_transmit_to_master(I2C_HandleTypeDef *i2c_transmit,
							I2C_HandleTypeDef *i2c_receive,
							uint8_t data_length,
							uint8_t *transmit_buff,
							uint8_t *receive_buff )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	603b      	str	r3, [r7, #0]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Receive_DMA(i2c_receive, SLAVE_ADDR, receive_buff, data_length);
 8008f60:	79fb      	ldrb	r3, [r7, #7]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	212c      	movs	r1, #44	; 0x2c
 8008f68:	68b8      	ldr	r0, [r7, #8]
 8008f6a:	f7f9 ff2f 	bl	8002dcc <HAL_I2C_Master_Receive_DMA>
	HAL_I2C_Slave_Transmit_DMA(i2c_transmit, transmit_buff, data_length);
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	461a      	mov	r2, r3
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7fa f818 	bl	8002fac <HAL_I2C_Slave_Transmit_DMA>
	i2c_delay_till_transmited();
 8008f7c:	f000 f804 	bl	8008f88 <i2c_delay_till_transmited>
}
 8008f80:	bf00      	nop
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <i2c_delay_till_transmited>:

/// Delay until enters HAL_I2C_TxCpltCallback changes flag to true
void i2c_delay_till_transmited()
{
 8008f88:	b480      	push	{r7}
 8008f8a:	af00      	add	r7, sp, #0
	while(i2c_tx_done_flag != TRUE);	// TODO: add timeout to loop (for hardware problem cases)
 8008f8c:	bf00      	nop
 8008f8e:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <i2c_delay_till_transmited+0x20>)
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d1fb      	bne.n	8008f8e <i2c_delay_till_transmited+0x6>
	i2c_tx_done_flag = FALSE;
 8008f96:	4b04      	ldr	r3, [pc, #16]	; (8008fa8 <i2c_delay_till_transmited+0x20>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	701a      	strb	r2, [r3, #0]
}
 8008f9c:	bf00      	nop
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	20000d24 	.word	0x20000d24

08008fac <i2c_delay_till_received>:

/// Delay until enters HAL_I2C_Rx_CpltCallback changes flag to true
void i2c_delay_till_received()
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
	while(i2c_rx_done_flag != TRUE);	// TODO: add timeout to loop (for hardware problem cases)
 8008fb0:	bf00      	nop
 8008fb2:	4b06      	ldr	r3, [pc, #24]	; (8008fcc <i2c_delay_till_received+0x20>)
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d1fb      	bne.n	8008fb2 <i2c_delay_till_received+0x6>
	i2c_rx_done_flag = FALSE;
 8008fba:	4b04      	ldr	r3, [pc, #16]	; (8008fcc <i2c_delay_till_received+0x20>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	701a      	strb	r2, [r3, #0]
}
 8008fc0:	bf00      	nop
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	20000d25 	.word	0x20000d25

08008fd0 <HAL_I2C_MasterTxCpltCallback>:

/// Enters here upon completed I2C master transmit
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
	if(hi2c == I2C_MASTER)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a06      	ldr	r2, [pc, #24]	; (8008ff4 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d102      	bne.n	8008fe6 <HAL_I2C_MasterTxCpltCallback+0x16>
		i2c_tx_done_flag = TRUE;
 8008fe0:	4b05      	ldr	r3, [pc, #20]	; (8008ff8 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	701a      	strb	r2, [r3, #0]
}
 8008fe6:	bf00      	nop
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	200000e0 	.word	0x200000e0
 8008ff8:	20000d24 	.word	0x20000d24

08008ffc <HAL_I2C_MasterRxCpltCallback>:

/// Enters here upon completed I2C master receive
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	if (hi2c == I2C_MASTER)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a06      	ldr	r2, [pc, #24]	; (8009020 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d102      	bne.n	8009012 <HAL_I2C_MasterRxCpltCallback+0x16>
		i2c_rx_done_flag = TRUE;
 800900c:	4b05      	ldr	r3, [pc, #20]	; (8009024 <HAL_I2C_MasterRxCpltCallback+0x28>)
 800900e:	2201      	movs	r2, #1
 8009010:	701a      	strb	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	200000e0 	.word	0x200000e0
 8009024:	20000d25 	.word	0x20000d25

08009028 <HAL_I2C_SlaveTxCpltCallback>:

/// Enters here upon completed I2C slave transmit
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
	if (hi2c == I2C_SLAVE)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a06      	ldr	r2, [pc, #24]	; (800904c <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d102      	bne.n	800903e <HAL_I2C_SlaveTxCpltCallback+0x16>
		i2c_tx_done_flag = TRUE;
 8009038:	4b05      	ldr	r3, [pc, #20]	; (8009050 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 800903a:	2201      	movs	r2, #1
 800903c:	701a      	strb	r2, [r3, #0]
}
 800903e:	bf00      	nop
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	2000008c 	.word	0x2000008c
 8009050:	20000d24 	.word	0x20000d24

08009054 <HAL_I2C_SlaveRxCpltCallback>:

/// Enters here upon completed I2C slave receive
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
	if (hi2c == I2C_SLAVE)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a06      	ldr	r2, [pc, #24]	; (8009078 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d102      	bne.n	800906a <HAL_I2C_SlaveRxCpltCallback+0x16>
		i2c_rx_done_flag = TRUE;
 8009064:	4b05      	ldr	r3, [pc, #20]	; (800907c <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8009066:	2201      	movs	r2, #1
 8009068:	701a      	strb	r2, [r3, #0]
}
 800906a:	bf00      	nop
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	2000008c 	.word	0x2000008c
 800907c:	20000d25 	.word	0x20000d25

08009080 <rtg_main>:
#include "UART.h"
#include "I2C.h"
#include "SPI.h"

void rtg_main()
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
	char choice;
	uint8_t result;
	while(TRUE)
	{
		print_separator();
 8009086:	f000 f9f9 	bl	800947c <print_separator>
		printf("Please enter a communication protocol name:(U/I/S)\r\n");
 800908a:	4826      	ldr	r0, [pc, #152]	; (8009124 <rtg_main+0xa4>)
 800908c:	f000 fbb0 	bl	80097f0 <puts>
		scanf("%c", &choice);
 8009090:	1d7b      	adds	r3, r7, #5
 8009092:	4619      	mov	r1, r3
 8009094:	4824      	ldr	r0, [pc, #144]	; (8009128 <rtg_main+0xa8>)
 8009096:	f000 fbb3 	bl	8009800 <iscanf>
		choice = tolower(choice);
 800909a:	797b      	ldrb	r3, [r7, #5]
 800909c:	71bb      	strb	r3, [r7, #6]
 800909e:	79bb      	ldrb	r3, [r7, #6]
 80090a0:	3301      	adds	r3, #1
 80090a2:	4a22      	ldr	r2, [pc, #136]	; (800912c <rtg_main+0xac>)
 80090a4:	4413      	add	r3, r2
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	f003 0303 	and.w	r3, r3, #3
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d102      	bne.n	80090b6 <rtg_main+0x36>
 80090b0:	79bb      	ldrb	r3, [r7, #6]
 80090b2:	3320      	adds	r3, #32
 80090b4:	e000      	b.n	80090b8 <rtg_main+0x38>
 80090b6:	79bb      	ldrb	r3, [r7, #6]
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	717b      	strb	r3, [r7, #5]
		new_line();
 80090bc:	f000 f9d4 	bl	8009468 <new_line>

		switch(choice)
 80090c0:	797b      	ldrb	r3, [r7, #5]
 80090c2:	2b75      	cmp	r3, #117	; 0x75
 80090c4:	d006      	beq.n	80090d4 <rtg_main+0x54>
 80090c6:	2b75      	cmp	r3, #117	; 0x75
 80090c8:	dc1c      	bgt.n	8009104 <rtg_main+0x84>
 80090ca:	2b69      	cmp	r3, #105	; 0x69
 80090cc:	d00a      	beq.n	80090e4 <rtg_main+0x64>
 80090ce:	2b73      	cmp	r3, #115	; 0x73
 80090d0:	d010      	beq.n	80090f4 <rtg_main+0x74>
 80090d2:	e017      	b.n	8009104 <rtg_main+0x84>
		{
		case 'u':
			result = uart_test(5,3,(uint8_t*)"abc");
 80090d4:	4a16      	ldr	r2, [pc, #88]	; (8009130 <rtg_main+0xb0>)
 80090d6:	2103      	movs	r1, #3
 80090d8:	2005      	movs	r0, #5
 80090da:	f000 f9d9 	bl	8009490 <uart_test>
 80090de:	4603      	mov	r3, r0
 80090e0:	71fb      	strb	r3, [r7, #7]
			break;
 80090e2:	e013      	b.n	800910c <rtg_main+0x8c>
		case 'i':
			result = i2c_test(5,3,(uint8_t*)"abc");
 80090e4:	4a12      	ldr	r2, [pc, #72]	; (8009130 <rtg_main+0xb0>)
 80090e6:	2103      	movs	r1, #3
 80090e8:	2005      	movs	r0, #5
 80090ea:	f7ff fe8b 	bl	8008e04 <i2c_test>
 80090ee:	4603      	mov	r3, r0
 80090f0:	71fb      	strb	r3, [r7, #7]
			break;
 80090f2:	e00b      	b.n	800910c <rtg_main+0x8c>
		case 's':
			result = spi_test(5,3,(uint8_t*)"abc");
 80090f4:	4a0e      	ldr	r2, [pc, #56]	; (8009130 <rtg_main+0xb0>)
 80090f6:	2103      	movs	r1, #3
 80090f8:	2005      	movs	r0, #5
 80090fa:	f000 f821 	bl	8009140 <spi_test>
 80090fe:	4603      	mov	r3, r0
 8009100:	71fb      	strb	r3, [r7, #7]
			break;
 8009102:	e003      	b.n	800910c <rtg_main+0x8c>
		default:
			printf("\r\nPlease input a valid option (U/I/S).\r\n");
 8009104:	480b      	ldr	r0, [pc, #44]	; (8009134 <rtg_main+0xb4>)
 8009106:	f000 fb73 	bl	80097f0 <puts>
			continue;
 800910a:	e009      	b.n	8009120 <rtg_main+0xa0>
		}
		if (result == RETURN_SUCCESS)
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d103      	bne.n	800911a <rtg_main+0x9a>
			printf("Test Succeeded!\r\n");
 8009112:	4809      	ldr	r0, [pc, #36]	; (8009138 <rtg_main+0xb8>)
 8009114:	f000 fb6c 	bl	80097f0 <puts>
 8009118:	e7b5      	b.n	8009086 <rtg_main+0x6>
		else
			printf("Test Failed!\r\n");
 800911a:	4808      	ldr	r0, [pc, #32]	; (800913c <rtg_main+0xbc>)
 800911c:	f000 fb68 	bl	80097f0 <puts>
		print_separator();
 8009120:	e7b1      	b.n	8009086 <rtg_main+0x6>
 8009122:	bf00      	nop
 8009124:	0800adb8 	.word	0x0800adb8
 8009128:	0800adec 	.word	0x0800adec
 800912c:	0800ae94 	.word	0x0800ae94
 8009130:	0800adf0 	.word	0x0800adf0
 8009134:	0800adf4 	.word	0x0800adf4
 8009138:	0800ae1c 	.word	0x0800ae1c
 800913c:	0800ae30 	.word	0x0800ae30

08009140 <spi_test>:
 * @param data_length - the length of string to transmit and receive
 * @param data - the string data to transmit and receive
 * @return 0x01 if the tests passed successfully, or 0xff if tests failed.
 */
uint8_t spi_test(uint8_t iter, uint8_t data_length, uint8_t *data)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	603a      	str	r2, [r7, #0]
 800914a:	71fb      	strb	r3, [r7, #7]
 800914c:	460b      	mov	r3, r1
 800914e:	71bb      	strb	r3, [r7, #6]
	uint8_t result = RETURN_SUCCESS;
 8009150:	2301      	movs	r3, #1
 8009152:	73bb      	strb	r3, [r7, #14]
	memcpy(origin_data, data, data_length);
 8009154:	79bb      	ldrb	r3, [r7, #6]
 8009156:	461a      	mov	r2, r3
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	4818      	ldr	r0, [pc, #96]	; (80091bc <spi_test+0x7c>)
 800915c:	f000 fac4 	bl	80096e8 <memcpy>

	for(uint8_t i = 0; i < iter ; i++)
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
 8009164:	e021      	b.n	80091aa <spi_test+0x6a>
	{
		spi_init_receive(data_length);
 8009166:	79bb      	ldrb	r3, [r7, #6]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 f82f 	bl	80091cc <spi_init_receive>

		spi_transmit_to_slave(SPI_MASTER, SPI_SLAVE, data_length);
 800916e:	79bb      	ldrb	r3, [r7, #6]
 8009170:	461a      	mov	r2, r3
 8009172:	4913      	ldr	r1, [pc, #76]	; (80091c0 <spi_test+0x80>)
 8009174:	4813      	ldr	r0, [pc, #76]	; (80091c4 <spi_test+0x84>)
 8009176:	f000 f847 	bl	8009208 <spi_transmit_to_slave>
		spi_delay_till_received(); // delay until receive complete
 800917a:	f000 f8a3 	bl	80092c4 <spi_delay_till_received>

//		spi_init_receive(data_length);

		spi_transmit_to_master(SPI_SLAVE, SPI_MASTER, data_length);
 800917e:	79bb      	ldrb	r3, [r7, #6]
 8009180:	461a      	mov	r2, r3
 8009182:	4910      	ldr	r1, [pc, #64]	; (80091c4 <spi_test+0x84>)
 8009184:	480e      	ldr	r0, [pc, #56]	; (80091c0 <spi_test+0x80>)
 8009186:	f000 f857 	bl	8009238 <spi_transmit_to_master>

		if(strncmp((char *)master_buff, (char *)data, data_length) != 0)
 800918a:	79bb      	ldrb	r3, [r7, #6]
 800918c:	461a      	mov	r2, r3
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	480d      	ldr	r0, [pc, #52]	; (80091c8 <spi_test+0x88>)
 8009192:	f000 fb4d 	bl	8009830 <strncmp>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d003      	beq.n	80091a4 <spi_test+0x64>
		{
			result = RETURN_FAILURE;
 800919c:	23ff      	movs	r3, #255	; 0xff
 800919e:	73bb      	strb	r3, [r7, #14]
			return result;
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	e007      	b.n	80091b4 <spi_test+0x74>
	for(uint8_t i = 0; i < iter ; i++)
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	3301      	adds	r3, #1
 80091a8:	73fb      	strb	r3, [r7, #15]
 80091aa:	7bfa      	ldrb	r2, [r7, #15]
 80091ac:	79fb      	ldrb	r3, [r7, #7]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d3d9      	bcc.n	8009166 <spi_test+0x26>
		}
	}
	return result;
 80091b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	2000102c 	.word	0x2000102c
 80091c0:	20000318 	.word	0x20000318
 80091c4:	200002b4 	.word	0x200002b4
 80091c8:	20000d2c 	.word	0x20000d2c

080091cc <spi_init_receive>:

void spi_init_receive(int data_length) // TODO: accept buff parameters
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive_DMA(SPI_MASTER, master_buff, data_length);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	461a      	mov	r2, r3
 80091da:	4907      	ldr	r1, [pc, #28]	; (80091f8 <spi_init_receive+0x2c>)
 80091dc:	4807      	ldr	r0, [pc, #28]	; (80091fc <spi_init_receive+0x30>)
 80091de:	f7fc ffe3 	bl	80061a8 <HAL_SPI_Receive_DMA>
	HAL_SPI_Receive_DMA(SPI_SLAVE, rx_slave_buff, data_length);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	4905      	ldr	r1, [pc, #20]	; (8009200 <spi_init_receive+0x34>)
 80091ea:	4806      	ldr	r0, [pc, #24]	; (8009204 <spi_init_receive+0x38>)
 80091ec:	f7fc ffdc 	bl	80061a8 <HAL_SPI_Receive_DMA>
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	20000d2c 	.word	0x20000d2c
 80091fc:	200002b4 	.word	0x200002b4
 8009200:	20000e2c 	.word	0x20000e2c
 8009204:	20000318 	.word	0x20000318

08009208 <spi_transmit_to_slave>:
 * This function will send the data from SPI master to SPI slave.
 */
void spi_transmit_to_slave(	SPI_HandleTypeDef *spi_transmit,
							SPI_HandleTypeDef *spi_receive,
							uint8_t data_length)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	4613      	mov	r3, r2
 8009214:	71fb      	strb	r3, [r7, #7]

//	HAL_SPI_Receive_DMA(spi_receive, receive_buff, data_length);
	// transmit the original data to the slave.
	HAL_SPI_Transmit_DMA(SPI_MASTER, origin_data, data_length);
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	b29b      	uxth	r3, r3
 800921a:	461a      	mov	r2, r3
 800921c:	4904      	ldr	r1, [pc, #16]	; (8009230 <spi_transmit_to_slave+0x28>)
 800921e:	4805      	ldr	r0, [pc, #20]	; (8009234 <spi_transmit_to_slave+0x2c>)
 8009220:	f7fc fece 	bl	8005fc0 <HAL_SPI_Transmit_DMA>
//	HAL_SPI_TransmitReceive_DMA(SPI_MASTER, origin_data, rx_slave_buff, data_length);
//	HAL_SPI_TransmitReceive_IT(SPI_SLAVE, tx_slave_buff, master_buff, data_length);
	spi_delay_till_transmited(); // delay until completed the transmit
 8009224:	f000 f83c 	bl	80092a0 <spi_delay_till_transmited>

//	void spi_delay_till_tx_rx();
}
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	2000102c 	.word	0x2000102c
 8009234:	200002b4 	.word	0x200002b4

08009238 <spi_transmit_to_master>:
 * This function will send the data from SPI slave to SPI master.
 */
void spi_transmit_to_master(SPI_HandleTypeDef *spi_transmit,
							SPI_HandleTypeDef *spi_receive,
							uint8_t data_length)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	4613      	mov	r3, r2
 8009244:	71fb      	strb	r3, [r7, #7]
	memcpy(tx_slave_buff, rx_slave_buff, data_length);
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	461a      	mov	r2, r3
 800924a:	490f      	ldr	r1, [pc, #60]	; (8009288 <spi_transmit_to_master+0x50>)
 800924c:	480f      	ldr	r0, [pc, #60]	; (800928c <spi_transmit_to_master+0x54>)
 800924e:	f000 fa4b 	bl	80096e8 <memcpy>

//	HAL_SPI_TransmitReceive_DMA(SPI_MASTER, dummy_buff, rx_slave_buff, DATA_SIZE);
//	HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, tx_slave_buff, master_buff, data_length);
//	spi_delay_till_tx_rx();

	HAL_SPI_Transmit_DMA(SPI_SLAVE, tx_slave_buff, data_length);
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	b29b      	uxth	r3, r3
 8009256:	461a      	mov	r2, r3
 8009258:	490c      	ldr	r1, [pc, #48]	; (800928c <spi_transmit_to_master+0x54>)
 800925a:	480d      	ldr	r0, [pc, #52]	; (8009290 <spi_transmit_to_master+0x58>)
 800925c:	f7fc feb0 	bl	8005fc0 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(SPI_MASTER, master_buff, data_length);
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	b29b      	uxth	r3, r3
 8009264:	461a      	mov	r2, r3
 8009266:	490b      	ldr	r1, [pc, #44]	; (8009294 <spi_transmit_to_master+0x5c>)
 8009268:	480b      	ldr	r0, [pc, #44]	; (8009298 <spi_transmit_to_master+0x60>)
 800926a:	f7fc ff9d 	bl	80061a8 <HAL_SPI_Receive_DMA>
//	HAL_SPI_Receive_DMA(SPI_SLAVE, dummy_buff, data_length);
//	spi_init_receive(data_length);

	HAL_SPI_Transmit_DMA(SPI_MASTER, dummy_buff, data_length);
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	b29b      	uxth	r3, r3
 8009272:	461a      	mov	r2, r3
 8009274:	4909      	ldr	r1, [pc, #36]	; (800929c <spi_transmit_to_master+0x64>)
 8009276:	4808      	ldr	r0, [pc, #32]	; (8009298 <spi_transmit_to_master+0x60>)
 8009278:	f7fc fea2 	bl	8005fc0 <HAL_SPI_Transmit_DMA>
//	HAL_SPI_Transmit_DMA(SPI_MASTER, dummy_buff, data_length);
//	spi_delay_till_transmited(); // delay until completed the transmit
	spi_delay_till_received(); // delay until receive complete
 800927c:	f000 f822 	bl	80092c4 <spi_delay_till_received>
}
 8009280:	bf00      	nop
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20000e2c 	.word	0x20000e2c
 800928c:	20000f2c 	.word	0x20000f2c
 8009290:	20000318 	.word	0x20000318
 8009294:	20000d2c 	.word	0x20000d2c
 8009298:	200002b4 	.word	0x200002b4
 800929c:	2000112c 	.word	0x2000112c

080092a0 <spi_delay_till_transmited>:

/// Delay until enters HAL_SPI_TxCpltCallback changes flag to true
void spi_delay_till_transmited()
{
 80092a0:	b480      	push	{r7}
 80092a2:	af00      	add	r7, sp, #0
	while(spi_tx_done_flag != TRUE);	// TODO: add timeout to loop (for hardware problem cases)
 80092a4:	bf00      	nop
 80092a6:	4b06      	ldr	r3, [pc, #24]	; (80092c0 <spi_delay_till_transmited+0x20>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d1fb      	bne.n	80092a6 <spi_delay_till_transmited+0x6>
	spi_tx_done_flag = FALSE;
 80092ae:	4b04      	ldr	r3, [pc, #16]	; (80092c0 <spi_delay_till_transmited+0x20>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	701a      	strb	r2, [r3, #0]
}
 80092b4:	bf00      	nop
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20000d26 	.word	0x20000d26

080092c4 <spi_delay_till_received>:

/// Delay until enters HAL_SPI_Rx_CpltCallback changes flag to true
void spi_delay_till_received()
{
 80092c4:	b480      	push	{r7}
 80092c6:	af00      	add	r7, sp, #0
	while(spi_rx_done_flag != TRUE);	// TODO: add timeout to loop (for hardware problem cases)
 80092c8:	bf00      	nop
 80092ca:	4b06      	ldr	r3, [pc, #24]	; (80092e4 <spi_delay_till_received+0x20>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d1fb      	bne.n	80092ca <spi_delay_till_received+0x6>
	spi_rx_done_flag = FALSE;
 80092d2:	4b04      	ldr	r3, [pc, #16]	; (80092e4 <spi_delay_till_received+0x20>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	701a      	strb	r2, [r3, #0]
}
 80092d8:	bf00      	nop
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	20000d27 	.word	0x20000d27

080092e8 <HAL_SPI_TxCpltCallback>:
	spi_tx_rx_done_flag = FALSE;
}

/// Enters here upon complete SPI transmit
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
	if (hspi == SPI_MASTER || hspi == SPI_SLAVE)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a08      	ldr	r2, [pc, #32]	; (8009314 <HAL_SPI_TxCpltCallback+0x2c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d003      	beq.n	8009300 <HAL_SPI_TxCpltCallback+0x18>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a07      	ldr	r2, [pc, #28]	; (8009318 <HAL_SPI_TxCpltCallback+0x30>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d102      	bne.n	8009306 <HAL_SPI_TxCpltCallback+0x1e>
		spi_tx_done_flag = TRUE;
 8009300:	4b06      	ldr	r3, [pc, #24]	; (800931c <HAL_SPI_TxCpltCallback+0x34>)
 8009302:	2201      	movs	r2, #1
 8009304:	701a      	strb	r2, [r3, #0]
}
 8009306:	bf00      	nop
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	200002b4 	.word	0x200002b4
 8009318:	20000318 	.word	0x20000318
 800931c:	20000d26 	.word	0x20000d26

08009320 <HAL_SPI_RxCpltCallback>:

/// Enters here upon complete SPI receive
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
	if (hspi == SPI_MASTER || hspi == SPI_SLAVE)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a08      	ldr	r2, [pc, #32]	; (800934c <HAL_SPI_RxCpltCallback+0x2c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d003      	beq.n	8009338 <HAL_SPI_RxCpltCallback+0x18>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a07      	ldr	r2, [pc, #28]	; (8009350 <HAL_SPI_RxCpltCallback+0x30>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d102      	bne.n	800933e <HAL_SPI_RxCpltCallback+0x1e>
			spi_rx_done_flag = TRUE;
 8009338:	4b06      	ldr	r3, [pc, #24]	; (8009354 <HAL_SPI_RxCpltCallback+0x34>)
 800933a:	2201      	movs	r2, #1
 800933c:	701a      	strb	r2, [r3, #0]
}
 800933e:	bf00      	nop
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	200002b4 	.word	0x200002b4
 8009350:	20000318 	.word	0x20000318
 8009354:	20000d27 	.word	0x20000d27

08009358 <HAL_SPI_TxRxCpltCallback>:

/// Enters here upon complete SPI receive
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
	static uint8_t master_done = FALSE;
	static uint8_t slave_done = FALSE;

	if (hspi == SPI_MASTER)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a12      	ldr	r2, [pc, #72]	; (80093ac <HAL_SPI_TxRxCpltCallback+0x54>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d103      	bne.n	8009370 <HAL_SPI_TxRxCpltCallback+0x18>
		master_done = TRUE;
 8009368:	4b11      	ldr	r3, [pc, #68]	; (80093b0 <HAL_SPI_TxRxCpltCallback+0x58>)
 800936a:	2201      	movs	r2, #1
 800936c:	701a      	strb	r2, [r3, #0]
 800936e:	e006      	b.n	800937e <HAL_SPI_TxRxCpltCallback+0x26>
	else if (hspi == SPI_SLAVE)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a10      	ldr	r2, [pc, #64]	; (80093b4 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d102      	bne.n	800937e <HAL_SPI_TxRxCpltCallback+0x26>
		slave_done = TRUE;
 8009378:	4b0f      	ldr	r3, [pc, #60]	; (80093b8 <HAL_SPI_TxRxCpltCallback+0x60>)
 800937a:	2201      	movs	r2, #1
 800937c:	701a      	strb	r2, [r3, #0]

	if (master_done && slave_done)
 800937e:	4b0c      	ldr	r3, [pc, #48]	; (80093b0 <HAL_SPI_TxRxCpltCallback+0x58>)
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00c      	beq.n	80093a0 <HAL_SPI_TxRxCpltCallback+0x48>
 8009386:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <HAL_SPI_TxRxCpltCallback+0x60>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d008      	beq.n	80093a0 <HAL_SPI_TxRxCpltCallback+0x48>
	{
		spi_tx_rx_done_flag = TRUE;
 800938e:	4b0b      	ldr	r3, [pc, #44]	; (80093bc <HAL_SPI_TxRxCpltCallback+0x64>)
 8009390:	2201      	movs	r2, #1
 8009392:	701a      	strb	r2, [r3, #0]
		master_done = FALSE;
 8009394:	4b06      	ldr	r3, [pc, #24]	; (80093b0 <HAL_SPI_TxRxCpltCallback+0x58>)
 8009396:	2200      	movs	r2, #0
 8009398:	701a      	strb	r2, [r3, #0]
		slave_done = FALSE;
 800939a:	4b07      	ldr	r3, [pc, #28]	; (80093b8 <HAL_SPI_TxRxCpltCallback+0x60>)
 800939c:	2200      	movs	r2, #0
 800939e:	701a      	strb	r2, [r3, #0]
	}
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	200002b4 	.word	0x200002b4
 80093b0:	2000122b 	.word	0x2000122b
 80093b4:	20000318 	.word	0x20000318
 80093b8:	2000122c 	.word	0x2000122c
 80093bc:	20000d28 	.word	0x20000d28

080093c0 <_write>:
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, len, 0xFFFF);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093d4:	68b9      	ldr	r1, [r7, #8]
 80093d6:	4804      	ldr	r0, [pc, #16]	; (80093e8 <_write+0x28>)
 80093d8:	f7fd fe62 	bl	80070a0 <HAL_UART_Transmit>
	return len;
 80093dc:	687b      	ldr	r3, [r7, #4]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000584 	.word	0x20000584

080093ec <_read>:

// scanf
int _read(int file, char *ptr, int len)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
	int ch=0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUG, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80093fc:	f107 0114 	add.w	r1, r7, #20
 8009400:	f04f 33ff 	mov.w	r3, #4294967295
 8009404:	2201      	movs	r2, #1
 8009406:	4817      	ldr	r0, [pc, #92]	; (8009464 <_read+0x78>)
 8009408:	f7fd fecd 	bl	80071a6 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 800940c:	f107 0114 	add.w	r1, r7, #20
 8009410:	f04f 33ff 	mov.w	r3, #4294967295
 8009414:	2201      	movs	r2, #1
 8009416:	4813      	ldr	r0, [pc, #76]	; (8009464 <_read+0x78>)
 8009418:	f7fd fe42 	bl	80070a0 <HAL_UART_Transmit>
	if(ch==13)
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2b0d      	cmp	r3, #13
 8009420:	d10a      	bne.n	8009438 <_read+0x4c>
	{
		ch=10;
 8009422:	230a      	movs	r3, #10
 8009424:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8009426:	f107 0114 	add.w	r1, r7, #20
 800942a:	f04f 33ff 	mov.w	r3, #4294967295
 800942e:	2201      	movs	r2, #1
 8009430:	480c      	ldr	r0, [pc, #48]	; (8009464 <_read+0x78>)
 8009432:	f7fd fe35 	bl	80070a0 <HAL_UART_Transmit>
 8009436:	e00c      	b.n	8009452 <_read+0x66>
	}
	else if(ch==8)
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	2b08      	cmp	r3, #8
 800943c:	d109      	bne.n	8009452 <_read+0x66>
	{
		ch=0x30;
 800943e:	2330      	movs	r3, #48	; 0x30
 8009440:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8009442:	f107 0114 	add.w	r1, r7, #20
 8009446:	f04f 33ff 	mov.w	r3, #4294967295
 800944a:	2201      	movs	r2, #1
 800944c:	4805      	ldr	r0, [pc, #20]	; (8009464 <_read+0x78>)
 800944e:	f7fd fe27 	bl	80070a0 <HAL_UART_Transmit>
	}

	*ptr=ch;
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	b2da      	uxtb	r2, r3
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	701a      	strb	r2, [r3, #0]

	return 1;
 800945a:	2301      	movs	r3, #1
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	20000584 	.word	0x20000584

08009468 <new_line>:

void new_line()
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
	printf("\r\n");
 800946c:	4802      	ldr	r0, [pc, #8]	; (8009478 <new_line+0x10>)
 800946e:	f000 f9bf 	bl	80097f0 <puts>
}
 8009472:	bf00      	nop
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	0800ae40 	.word	0x0800ae40

0800947c <print_separator>:

void print_separator()
{
 800947c:	b580      	push	{r7, lr}
 800947e:	af00      	add	r7, sp, #0
	printf("---------------------------------\r\n");
 8009480:	4802      	ldr	r0, [pc, #8]	; (800948c <print_separator+0x10>)
 8009482:	f000 f9b5 	bl	80097f0 <puts>
}
 8009486:	bf00      	nop
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	0800ae44 	.word	0x0800ae44

08009490 <uart_test>:
 * This is the main function for the UART testing.
 * The data received from server will be received initially by UART4, transmit
 * to UART6, and then transmit back to UART4 to check if the data is the same.
 */
uint8_t uart_test(uint8_t iter, uint8_t data_length, uint8_t *data)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8009496:	af02      	add	r7, sp, #8
 8009498:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800949c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80094a0:	601a      	str	r2, [r3, #0]
 80094a2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80094a6:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 80094aa:	4602      	mov	r2, r0
 80094ac:	701a      	strb	r2, [r3, #0]
 80094ae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80094b2:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80094b6:	460a      	mov	r2, r1
 80094b8:	701a      	strb	r2, [r3, #0]
	uint8_t uart_master_buff[DATA_SIZE] = { 0 };		// UART2 Buffer
 80094ba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80094be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	3304      	adds	r3, #4
 80094c8:	22fb      	movs	r2, #251	; 0xfb
 80094ca:	2100      	movs	r1, #0
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 f919 	bl	8009704 <memset>
	uint8_t uart_slave_buff[DATA_SIZE] = { 0 };		// UART4 BUFFER
 80094d2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80094d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80094da:	2200      	movs	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	3304      	adds	r3, #4
 80094e0:	22fb      	movs	r2, #251	; 0xfb
 80094e2:	2100      	movs	r1, #0
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 f90d 	bl	8009704 <memset>
	uint8_t result = RETURN_SUCCESS;
 80094ea:	2301      	movs	r3, #1
 80094ec:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e

	for(uint8_t i = 0; i < iter; i++)
 80094f0:	2300      	movs	r3, #0
 80094f2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80094f6:	e040      	b.n	800957a <uart_test+0xea>
	{
		uart_transmit_receive(UART_SLAVE, UART_MASTER, data_length, data, uart_master_buff);
 80094f8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80094fc:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8009500:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8009504:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 8009508:	7811      	ldrb	r1, [r2, #0]
 800950a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800950e:	9200      	str	r2, [sp, #0]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	460a      	mov	r2, r1
 8009514:	4921      	ldr	r1, [pc, #132]	; (800959c <uart_test+0x10c>)
 8009516:	4822      	ldr	r0, [pc, #136]	; (80095a0 <uart_test+0x110>)
 8009518:	f000 f844 	bl	80095a4 <uart_transmit_receive>
		uart_delay_till_received();
 800951c:	f000 f870 	bl	8009600 <uart_delay_till_received>
		uart_transmit_receive(UART_MASTER, UART_SLAVE, data_length, uart_master_buff, uart_slave_buff);
 8009520:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8009524:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009528:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800952c:	781a      	ldrb	r2, [r3, #0]
 800952e:	f107 030c 	add.w	r3, r7, #12
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	460b      	mov	r3, r1
 8009536:	491a      	ldr	r1, [pc, #104]	; (80095a0 <uart_test+0x110>)
 8009538:	4818      	ldr	r0, [pc, #96]	; (800959c <uart_test+0x10c>)
 800953a:	f000 f833 	bl	80095a4 <uart_transmit_receive>
		uart_delay_till_received();
 800953e:	f000 f85f 	bl	8009600 <uart_delay_till_received>

		if(strncmp((char *)uart_slave_buff, (char *)data, data_length) != 0)
 8009542:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009546:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800954a:	781a      	ldrb	r2, [r3, #0]
 800954c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009550:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8009554:	f107 000c 	add.w	r0, r7, #12
 8009558:	6819      	ldr	r1, [r3, #0]
 800955a:	f000 f969 	bl	8009830 <strncmp>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d005      	beq.n	8009570 <uart_test+0xe0>
		{
			result = RETURN_FAILURE;
 8009564:	23ff      	movs	r3, #255	; 0xff
 8009566:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
			return result;
 800956a:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800956e:	e00f      	b.n	8009590 <uart_test+0x100>
	for(uint8_t i = 0; i < iter; i++)
 8009570:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8009574:	3301      	adds	r3, #1
 8009576:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800957a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800957e:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8009582:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	429a      	cmp	r2, r3
 800958a:	d3b5      	bcc.n	80094f8 <uart_test+0x68>
		}
	}
	return result;
 800958c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
}
 8009590:	4618      	mov	r0, r3
 8009592:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	200004fc 	.word	0x200004fc
 80095a0:	2000060c 	.word	0x2000060c

080095a4 <uart_transmit_receive>:
void uart_transmit_receive(	UART_HandleTypeDef *uart_transmit,
							UART_HandleTypeDef *uart_receive,
							uint8_t data_length,
							uint8_t *transmit_buff,
							uint8_t *receive_buff )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	603b      	str	r3, [r7, #0]
 80095b0:	4613      	mov	r3, r2
 80095b2:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive_DMA(uart_receive, receive_buff, data_length);
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	461a      	mov	r2, r3
 80095ba:	69b9      	ldr	r1, [r7, #24]
 80095bc:	68b8      	ldr	r0, [r7, #8]
 80095be:	f7fd ff33 	bl	8007428 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(uart_transmit, transmit_buff, data_length);
 80095c2:	79fb      	ldrb	r3, [r7, #7]
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	461a      	mov	r2, r3
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f7fd feb0 	bl	8007330 <HAL_UART_Transmit_DMA>
	uart_delay_till_transmited();
 80095d0:	f000 f804 	bl	80095dc <uart_delay_till_transmited>
}
 80095d4:	bf00      	nop
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <uart_delay_till_transmited>:

/// Delay until enters HAL_UART_TxCpltCallback changes flag to true
void uart_delay_till_transmited()
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
	while(uart_tx_done_flag != TRUE);	// TODO: add timeout to loop (for hardware problem cases)
 80095e0:	bf00      	nop
 80095e2:	4b06      	ldr	r3, [pc, #24]	; (80095fc <uart_delay_till_transmited+0x20>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d1fb      	bne.n	80095e2 <uart_delay_till_transmited+0x6>
	uart_tx_done_flag = FALSE;
 80095ea:	4b04      	ldr	r3, [pc, #16]	; (80095fc <uart_delay_till_transmited+0x20>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	701a      	strb	r2, [r3, #0]
}
 80095f0:	bf00      	nop
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	2000122d 	.word	0x2000122d

08009600 <uart_delay_till_received>:

/// Delay until enters HAL_UART_Rx_CpltCallback changes flag to true
void uart_delay_till_received()
{
 8009600:	b480      	push	{r7}
 8009602:	af00      	add	r7, sp, #0
	while(uart_rx_done_flag != TRUE);	// TODO: add timeout to loop (for hardware problem cases)
 8009604:	bf00      	nop
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <uart_delay_till_received+0x20>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d1fb      	bne.n	8009606 <uart_delay_till_received+0x6>
	uart_rx_done_flag = FALSE;
 800960e:	4b04      	ldr	r3, [pc, #16]	; (8009620 <uart_delay_till_received+0x20>)
 8009610:	2200      	movs	r2, #0
 8009612:	701a      	strb	r2, [r3, #0]
}
 8009614:	bf00      	nop
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	2000122e 	.word	0x2000122e

08009624 <HAL_UART_RxCpltCallback>:

/// Enters here upon completed UART receive.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
	if (huart == UART_MASTER || huart == UART_SLAVE)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	4a08      	ldr	r2, [pc, #32]	; (8009650 <HAL_UART_RxCpltCallback+0x2c>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d003      	beq.n	800963c <HAL_UART_RxCpltCallback+0x18>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a07      	ldr	r2, [pc, #28]	; (8009654 <HAL_UART_RxCpltCallback+0x30>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d102      	bne.n	8009642 <HAL_UART_RxCpltCallback+0x1e>
		uart_rx_done_flag = TRUE;
 800963c:	4b06      	ldr	r3, [pc, #24]	; (8009658 <HAL_UART_RxCpltCallback+0x34>)
 800963e:	2201      	movs	r2, #1
 8009640:	701a      	strb	r2, [r3, #0]
}
 8009642:	bf00      	nop
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	200004fc 	.word	0x200004fc
 8009654:	2000060c 	.word	0x2000060c
 8009658:	2000122e 	.word	0x2000122e

0800965c <HAL_UART_TxCpltCallback>:

/// Enters here upon complete UART transmit.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
	if (huart == UART_MASTER || huart == UART_SLAVE)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a08      	ldr	r2, [pc, #32]	; (8009688 <HAL_UART_TxCpltCallback+0x2c>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d003      	beq.n	8009674 <HAL_UART_TxCpltCallback+0x18>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a07      	ldr	r2, [pc, #28]	; (800968c <HAL_UART_TxCpltCallback+0x30>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d102      	bne.n	800967a <HAL_UART_TxCpltCallback+0x1e>
		uart_tx_done_flag = TRUE;
 8009674:	4b06      	ldr	r3, [pc, #24]	; (8009690 <HAL_UART_TxCpltCallback+0x34>)
 8009676:	2201      	movs	r2, #1
 8009678:	701a      	strb	r2, [r3, #0]
}
 800967a:	bf00      	nop
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	200004fc 	.word	0x200004fc
 800968c:	2000060c 	.word	0x2000060c
 8009690:	2000122d 	.word	0x2000122d

08009694 <__errno>:
 8009694:	4b01      	ldr	r3, [pc, #4]	; (800969c <__errno+0x8>)
 8009696:	6818      	ldr	r0, [r3, #0]
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	2000000c 	.word	0x2000000c

080096a0 <__libc_init_array>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	4d0d      	ldr	r5, [pc, #52]	; (80096d8 <__libc_init_array+0x38>)
 80096a4:	4c0d      	ldr	r4, [pc, #52]	; (80096dc <__libc_init_array+0x3c>)
 80096a6:	1b64      	subs	r4, r4, r5
 80096a8:	10a4      	asrs	r4, r4, #2
 80096aa:	2600      	movs	r6, #0
 80096ac:	42a6      	cmp	r6, r4
 80096ae:	d109      	bne.n	80096c4 <__libc_init_array+0x24>
 80096b0:	4d0b      	ldr	r5, [pc, #44]	; (80096e0 <__libc_init_array+0x40>)
 80096b2:	4c0c      	ldr	r4, [pc, #48]	; (80096e4 <__libc_init_array+0x44>)
 80096b4:	f001 fb74 	bl	800ada0 <_init>
 80096b8:	1b64      	subs	r4, r4, r5
 80096ba:	10a4      	asrs	r4, r4, #2
 80096bc:	2600      	movs	r6, #0
 80096be:	42a6      	cmp	r6, r4
 80096c0:	d105      	bne.n	80096ce <__libc_init_array+0x2e>
 80096c2:	bd70      	pop	{r4, r5, r6, pc}
 80096c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c8:	4798      	blx	r3
 80096ca:	3601      	adds	r6, #1
 80096cc:	e7ee      	b.n	80096ac <__libc_init_array+0xc>
 80096ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d2:	4798      	blx	r3
 80096d4:	3601      	adds	r6, #1
 80096d6:	e7f2      	b.n	80096be <__libc_init_array+0x1e>
 80096d8:	0800b024 	.word	0x0800b024
 80096dc:	0800b024 	.word	0x0800b024
 80096e0:	0800b024 	.word	0x0800b024
 80096e4:	0800b028 	.word	0x0800b028

080096e8 <memcpy>:
 80096e8:	440a      	add	r2, r1
 80096ea:	4291      	cmp	r1, r2
 80096ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80096f0:	d100      	bne.n	80096f4 <memcpy+0xc>
 80096f2:	4770      	bx	lr
 80096f4:	b510      	push	{r4, lr}
 80096f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096fe:	4291      	cmp	r1, r2
 8009700:	d1f9      	bne.n	80096f6 <memcpy+0xe>
 8009702:	bd10      	pop	{r4, pc}

08009704 <memset>:
 8009704:	4402      	add	r2, r0
 8009706:	4603      	mov	r3, r0
 8009708:	4293      	cmp	r3, r2
 800970a:	d100      	bne.n	800970e <memset+0xa>
 800970c:	4770      	bx	lr
 800970e:	f803 1b01 	strb.w	r1, [r3], #1
 8009712:	e7f9      	b.n	8009708 <memset+0x4>

08009714 <_puts_r>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	460e      	mov	r6, r1
 8009718:	4605      	mov	r5, r0
 800971a:	b118      	cbz	r0, 8009724 <_puts_r+0x10>
 800971c:	6983      	ldr	r3, [r0, #24]
 800971e:	b90b      	cbnz	r3, 8009724 <_puts_r+0x10>
 8009720:	f000 fa86 	bl	8009c30 <__sinit>
 8009724:	69ab      	ldr	r3, [r5, #24]
 8009726:	68ac      	ldr	r4, [r5, #8]
 8009728:	b913      	cbnz	r3, 8009730 <_puts_r+0x1c>
 800972a:	4628      	mov	r0, r5
 800972c:	f000 fa80 	bl	8009c30 <__sinit>
 8009730:	4b2c      	ldr	r3, [pc, #176]	; (80097e4 <_puts_r+0xd0>)
 8009732:	429c      	cmp	r4, r3
 8009734:	d120      	bne.n	8009778 <_puts_r+0x64>
 8009736:	686c      	ldr	r4, [r5, #4]
 8009738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800973a:	07db      	lsls	r3, r3, #31
 800973c:	d405      	bmi.n	800974a <_puts_r+0x36>
 800973e:	89a3      	ldrh	r3, [r4, #12]
 8009740:	0598      	lsls	r0, r3, #22
 8009742:	d402      	bmi.n	800974a <_puts_r+0x36>
 8009744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009746:	f000 fb2e 	bl	8009da6 <__retarget_lock_acquire_recursive>
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	0719      	lsls	r1, r3, #28
 800974e:	d51d      	bpl.n	800978c <_puts_r+0x78>
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	b1db      	cbz	r3, 800978c <_puts_r+0x78>
 8009754:	3e01      	subs	r6, #1
 8009756:	68a3      	ldr	r3, [r4, #8]
 8009758:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800975c:	3b01      	subs	r3, #1
 800975e:	60a3      	str	r3, [r4, #8]
 8009760:	bb39      	cbnz	r1, 80097b2 <_puts_r+0x9e>
 8009762:	2b00      	cmp	r3, #0
 8009764:	da38      	bge.n	80097d8 <_puts_r+0xc4>
 8009766:	4622      	mov	r2, r4
 8009768:	210a      	movs	r1, #10
 800976a:	4628      	mov	r0, r5
 800976c:	f000 f874 	bl	8009858 <__swbuf_r>
 8009770:	3001      	adds	r0, #1
 8009772:	d011      	beq.n	8009798 <_puts_r+0x84>
 8009774:	250a      	movs	r5, #10
 8009776:	e011      	b.n	800979c <_puts_r+0x88>
 8009778:	4b1b      	ldr	r3, [pc, #108]	; (80097e8 <_puts_r+0xd4>)
 800977a:	429c      	cmp	r4, r3
 800977c:	d101      	bne.n	8009782 <_puts_r+0x6e>
 800977e:	68ac      	ldr	r4, [r5, #8]
 8009780:	e7da      	b.n	8009738 <_puts_r+0x24>
 8009782:	4b1a      	ldr	r3, [pc, #104]	; (80097ec <_puts_r+0xd8>)
 8009784:	429c      	cmp	r4, r3
 8009786:	bf08      	it	eq
 8009788:	68ec      	ldreq	r4, [r5, #12]
 800978a:	e7d5      	b.n	8009738 <_puts_r+0x24>
 800978c:	4621      	mov	r1, r4
 800978e:	4628      	mov	r0, r5
 8009790:	f000 f8b4 	bl	80098fc <__swsetup_r>
 8009794:	2800      	cmp	r0, #0
 8009796:	d0dd      	beq.n	8009754 <_puts_r+0x40>
 8009798:	f04f 35ff 	mov.w	r5, #4294967295
 800979c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800979e:	07da      	lsls	r2, r3, #31
 80097a0:	d405      	bmi.n	80097ae <_puts_r+0x9a>
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	059b      	lsls	r3, r3, #22
 80097a6:	d402      	bmi.n	80097ae <_puts_r+0x9a>
 80097a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097aa:	f000 fafd 	bl	8009da8 <__retarget_lock_release_recursive>
 80097ae:	4628      	mov	r0, r5
 80097b0:	bd70      	pop	{r4, r5, r6, pc}
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	da04      	bge.n	80097c0 <_puts_r+0xac>
 80097b6:	69a2      	ldr	r2, [r4, #24]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	dc06      	bgt.n	80097ca <_puts_r+0xb6>
 80097bc:	290a      	cmp	r1, #10
 80097be:	d004      	beq.n	80097ca <_puts_r+0xb6>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	1c5a      	adds	r2, r3, #1
 80097c4:	6022      	str	r2, [r4, #0]
 80097c6:	7019      	strb	r1, [r3, #0]
 80097c8:	e7c5      	b.n	8009756 <_puts_r+0x42>
 80097ca:	4622      	mov	r2, r4
 80097cc:	4628      	mov	r0, r5
 80097ce:	f000 f843 	bl	8009858 <__swbuf_r>
 80097d2:	3001      	adds	r0, #1
 80097d4:	d1bf      	bne.n	8009756 <_puts_r+0x42>
 80097d6:	e7df      	b.n	8009798 <_puts_r+0x84>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	250a      	movs	r5, #10
 80097dc:	1c5a      	adds	r2, r3, #1
 80097de:	6022      	str	r2, [r4, #0]
 80097e0:	701d      	strb	r5, [r3, #0]
 80097e2:	e7db      	b.n	800979c <_puts_r+0x88>
 80097e4:	0800afbc 	.word	0x0800afbc
 80097e8:	0800afdc 	.word	0x0800afdc
 80097ec:	0800af9c 	.word	0x0800af9c

080097f0 <puts>:
 80097f0:	4b02      	ldr	r3, [pc, #8]	; (80097fc <puts+0xc>)
 80097f2:	4601      	mov	r1, r0
 80097f4:	6818      	ldr	r0, [r3, #0]
 80097f6:	f7ff bf8d 	b.w	8009714 <_puts_r>
 80097fa:	bf00      	nop
 80097fc:	2000000c 	.word	0x2000000c

08009800 <iscanf>:
 8009800:	b40f      	push	{r0, r1, r2, r3}
 8009802:	4b0a      	ldr	r3, [pc, #40]	; (800982c <iscanf+0x2c>)
 8009804:	b513      	push	{r0, r1, r4, lr}
 8009806:	681c      	ldr	r4, [r3, #0]
 8009808:	b124      	cbz	r4, 8009814 <iscanf+0x14>
 800980a:	69a3      	ldr	r3, [r4, #24]
 800980c:	b913      	cbnz	r3, 8009814 <iscanf+0x14>
 800980e:	4620      	mov	r0, r4
 8009810:	f000 fa0e 	bl	8009c30 <__sinit>
 8009814:	ab05      	add	r3, sp, #20
 8009816:	9a04      	ldr	r2, [sp, #16]
 8009818:	6861      	ldr	r1, [r4, #4]
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	4620      	mov	r0, r4
 800981e:	f000 fdaf 	bl	800a380 <_vfiscanf_r>
 8009822:	b002      	add	sp, #8
 8009824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009828:	b004      	add	sp, #16
 800982a:	4770      	bx	lr
 800982c:	2000000c 	.word	0x2000000c

08009830 <strncmp>:
 8009830:	b510      	push	{r4, lr}
 8009832:	b17a      	cbz	r2, 8009854 <strncmp+0x24>
 8009834:	4603      	mov	r3, r0
 8009836:	3901      	subs	r1, #1
 8009838:	1884      	adds	r4, r0, r2
 800983a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800983e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009842:	4290      	cmp	r0, r2
 8009844:	d101      	bne.n	800984a <strncmp+0x1a>
 8009846:	42a3      	cmp	r3, r4
 8009848:	d101      	bne.n	800984e <strncmp+0x1e>
 800984a:	1a80      	subs	r0, r0, r2
 800984c:	bd10      	pop	{r4, pc}
 800984e:	2800      	cmp	r0, #0
 8009850:	d1f3      	bne.n	800983a <strncmp+0xa>
 8009852:	e7fa      	b.n	800984a <strncmp+0x1a>
 8009854:	4610      	mov	r0, r2
 8009856:	e7f9      	b.n	800984c <strncmp+0x1c>

08009858 <__swbuf_r>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	460e      	mov	r6, r1
 800985c:	4614      	mov	r4, r2
 800985e:	4605      	mov	r5, r0
 8009860:	b118      	cbz	r0, 800986a <__swbuf_r+0x12>
 8009862:	6983      	ldr	r3, [r0, #24]
 8009864:	b90b      	cbnz	r3, 800986a <__swbuf_r+0x12>
 8009866:	f000 f9e3 	bl	8009c30 <__sinit>
 800986a:	4b21      	ldr	r3, [pc, #132]	; (80098f0 <__swbuf_r+0x98>)
 800986c:	429c      	cmp	r4, r3
 800986e:	d12b      	bne.n	80098c8 <__swbuf_r+0x70>
 8009870:	686c      	ldr	r4, [r5, #4]
 8009872:	69a3      	ldr	r3, [r4, #24]
 8009874:	60a3      	str	r3, [r4, #8]
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	071a      	lsls	r2, r3, #28
 800987a:	d52f      	bpl.n	80098dc <__swbuf_r+0x84>
 800987c:	6923      	ldr	r3, [r4, #16]
 800987e:	b36b      	cbz	r3, 80098dc <__swbuf_r+0x84>
 8009880:	6923      	ldr	r3, [r4, #16]
 8009882:	6820      	ldr	r0, [r4, #0]
 8009884:	1ac0      	subs	r0, r0, r3
 8009886:	6963      	ldr	r3, [r4, #20]
 8009888:	b2f6      	uxtb	r6, r6
 800988a:	4283      	cmp	r3, r0
 800988c:	4637      	mov	r7, r6
 800988e:	dc04      	bgt.n	800989a <__swbuf_r+0x42>
 8009890:	4621      	mov	r1, r4
 8009892:	4628      	mov	r0, r5
 8009894:	f000 f926 	bl	8009ae4 <_fflush_r>
 8009898:	bb30      	cbnz	r0, 80098e8 <__swbuf_r+0x90>
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	3b01      	subs	r3, #1
 800989e:	60a3      	str	r3, [r4, #8]
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	6022      	str	r2, [r4, #0]
 80098a6:	701e      	strb	r6, [r3, #0]
 80098a8:	6963      	ldr	r3, [r4, #20]
 80098aa:	3001      	adds	r0, #1
 80098ac:	4283      	cmp	r3, r0
 80098ae:	d004      	beq.n	80098ba <__swbuf_r+0x62>
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	07db      	lsls	r3, r3, #31
 80098b4:	d506      	bpl.n	80098c4 <__swbuf_r+0x6c>
 80098b6:	2e0a      	cmp	r6, #10
 80098b8:	d104      	bne.n	80098c4 <__swbuf_r+0x6c>
 80098ba:	4621      	mov	r1, r4
 80098bc:	4628      	mov	r0, r5
 80098be:	f000 f911 	bl	8009ae4 <_fflush_r>
 80098c2:	b988      	cbnz	r0, 80098e8 <__swbuf_r+0x90>
 80098c4:	4638      	mov	r0, r7
 80098c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098c8:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <__swbuf_r+0x9c>)
 80098ca:	429c      	cmp	r4, r3
 80098cc:	d101      	bne.n	80098d2 <__swbuf_r+0x7a>
 80098ce:	68ac      	ldr	r4, [r5, #8]
 80098d0:	e7cf      	b.n	8009872 <__swbuf_r+0x1a>
 80098d2:	4b09      	ldr	r3, [pc, #36]	; (80098f8 <__swbuf_r+0xa0>)
 80098d4:	429c      	cmp	r4, r3
 80098d6:	bf08      	it	eq
 80098d8:	68ec      	ldreq	r4, [r5, #12]
 80098da:	e7ca      	b.n	8009872 <__swbuf_r+0x1a>
 80098dc:	4621      	mov	r1, r4
 80098de:	4628      	mov	r0, r5
 80098e0:	f000 f80c 	bl	80098fc <__swsetup_r>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d0cb      	beq.n	8009880 <__swbuf_r+0x28>
 80098e8:	f04f 37ff 	mov.w	r7, #4294967295
 80098ec:	e7ea      	b.n	80098c4 <__swbuf_r+0x6c>
 80098ee:	bf00      	nop
 80098f0:	0800afbc 	.word	0x0800afbc
 80098f4:	0800afdc 	.word	0x0800afdc
 80098f8:	0800af9c 	.word	0x0800af9c

080098fc <__swsetup_r>:
 80098fc:	4b32      	ldr	r3, [pc, #200]	; (80099c8 <__swsetup_r+0xcc>)
 80098fe:	b570      	push	{r4, r5, r6, lr}
 8009900:	681d      	ldr	r5, [r3, #0]
 8009902:	4606      	mov	r6, r0
 8009904:	460c      	mov	r4, r1
 8009906:	b125      	cbz	r5, 8009912 <__swsetup_r+0x16>
 8009908:	69ab      	ldr	r3, [r5, #24]
 800990a:	b913      	cbnz	r3, 8009912 <__swsetup_r+0x16>
 800990c:	4628      	mov	r0, r5
 800990e:	f000 f98f 	bl	8009c30 <__sinit>
 8009912:	4b2e      	ldr	r3, [pc, #184]	; (80099cc <__swsetup_r+0xd0>)
 8009914:	429c      	cmp	r4, r3
 8009916:	d10f      	bne.n	8009938 <__swsetup_r+0x3c>
 8009918:	686c      	ldr	r4, [r5, #4]
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009920:	0719      	lsls	r1, r3, #28
 8009922:	d42c      	bmi.n	800997e <__swsetup_r+0x82>
 8009924:	06dd      	lsls	r5, r3, #27
 8009926:	d411      	bmi.n	800994c <__swsetup_r+0x50>
 8009928:	2309      	movs	r3, #9
 800992a:	6033      	str	r3, [r6, #0]
 800992c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009930:	81a3      	strh	r3, [r4, #12]
 8009932:	f04f 30ff 	mov.w	r0, #4294967295
 8009936:	e03e      	b.n	80099b6 <__swsetup_r+0xba>
 8009938:	4b25      	ldr	r3, [pc, #148]	; (80099d0 <__swsetup_r+0xd4>)
 800993a:	429c      	cmp	r4, r3
 800993c:	d101      	bne.n	8009942 <__swsetup_r+0x46>
 800993e:	68ac      	ldr	r4, [r5, #8]
 8009940:	e7eb      	b.n	800991a <__swsetup_r+0x1e>
 8009942:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <__swsetup_r+0xd8>)
 8009944:	429c      	cmp	r4, r3
 8009946:	bf08      	it	eq
 8009948:	68ec      	ldreq	r4, [r5, #12]
 800994a:	e7e6      	b.n	800991a <__swsetup_r+0x1e>
 800994c:	0758      	lsls	r0, r3, #29
 800994e:	d512      	bpl.n	8009976 <__swsetup_r+0x7a>
 8009950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009952:	b141      	cbz	r1, 8009966 <__swsetup_r+0x6a>
 8009954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009958:	4299      	cmp	r1, r3
 800995a:	d002      	beq.n	8009962 <__swsetup_r+0x66>
 800995c:	4630      	mov	r0, r6
 800995e:	f000 fa89 	bl	8009e74 <_free_r>
 8009962:	2300      	movs	r3, #0
 8009964:	6363      	str	r3, [r4, #52]	; 0x34
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800996c:	81a3      	strh	r3, [r4, #12]
 800996e:	2300      	movs	r3, #0
 8009970:	6063      	str	r3, [r4, #4]
 8009972:	6923      	ldr	r3, [r4, #16]
 8009974:	6023      	str	r3, [r4, #0]
 8009976:	89a3      	ldrh	r3, [r4, #12]
 8009978:	f043 0308 	orr.w	r3, r3, #8
 800997c:	81a3      	strh	r3, [r4, #12]
 800997e:	6923      	ldr	r3, [r4, #16]
 8009980:	b94b      	cbnz	r3, 8009996 <__swsetup_r+0x9a>
 8009982:	89a3      	ldrh	r3, [r4, #12]
 8009984:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800998c:	d003      	beq.n	8009996 <__swsetup_r+0x9a>
 800998e:	4621      	mov	r1, r4
 8009990:	4630      	mov	r0, r6
 8009992:	f000 fa2f 	bl	8009df4 <__smakebuf_r>
 8009996:	89a0      	ldrh	r0, [r4, #12]
 8009998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800999c:	f010 0301 	ands.w	r3, r0, #1
 80099a0:	d00a      	beq.n	80099b8 <__swsetup_r+0xbc>
 80099a2:	2300      	movs	r3, #0
 80099a4:	60a3      	str	r3, [r4, #8]
 80099a6:	6963      	ldr	r3, [r4, #20]
 80099a8:	425b      	negs	r3, r3
 80099aa:	61a3      	str	r3, [r4, #24]
 80099ac:	6923      	ldr	r3, [r4, #16]
 80099ae:	b943      	cbnz	r3, 80099c2 <__swsetup_r+0xc6>
 80099b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099b4:	d1ba      	bne.n	800992c <__swsetup_r+0x30>
 80099b6:	bd70      	pop	{r4, r5, r6, pc}
 80099b8:	0781      	lsls	r1, r0, #30
 80099ba:	bf58      	it	pl
 80099bc:	6963      	ldrpl	r3, [r4, #20]
 80099be:	60a3      	str	r3, [r4, #8]
 80099c0:	e7f4      	b.n	80099ac <__swsetup_r+0xb0>
 80099c2:	2000      	movs	r0, #0
 80099c4:	e7f7      	b.n	80099b6 <__swsetup_r+0xba>
 80099c6:	bf00      	nop
 80099c8:	2000000c 	.word	0x2000000c
 80099cc:	0800afbc 	.word	0x0800afbc
 80099d0:	0800afdc 	.word	0x0800afdc
 80099d4:	0800af9c 	.word	0x0800af9c

080099d8 <__sflush_r>:
 80099d8:	898a      	ldrh	r2, [r1, #12]
 80099da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099de:	4605      	mov	r5, r0
 80099e0:	0710      	lsls	r0, r2, #28
 80099e2:	460c      	mov	r4, r1
 80099e4:	d458      	bmi.n	8009a98 <__sflush_r+0xc0>
 80099e6:	684b      	ldr	r3, [r1, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	dc05      	bgt.n	80099f8 <__sflush_r+0x20>
 80099ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	dc02      	bgt.n	80099f8 <__sflush_r+0x20>
 80099f2:	2000      	movs	r0, #0
 80099f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099fa:	2e00      	cmp	r6, #0
 80099fc:	d0f9      	beq.n	80099f2 <__sflush_r+0x1a>
 80099fe:	2300      	movs	r3, #0
 8009a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a04:	682f      	ldr	r7, [r5, #0]
 8009a06:	602b      	str	r3, [r5, #0]
 8009a08:	d032      	beq.n	8009a70 <__sflush_r+0x98>
 8009a0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	075a      	lsls	r2, r3, #29
 8009a10:	d505      	bpl.n	8009a1e <__sflush_r+0x46>
 8009a12:	6863      	ldr	r3, [r4, #4]
 8009a14:	1ac0      	subs	r0, r0, r3
 8009a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a18:	b10b      	cbz	r3, 8009a1e <__sflush_r+0x46>
 8009a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a1c:	1ac0      	subs	r0, r0, r3
 8009a1e:	2300      	movs	r3, #0
 8009a20:	4602      	mov	r2, r0
 8009a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a24:	6a21      	ldr	r1, [r4, #32]
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b0      	blx	r6
 8009a2a:	1c43      	adds	r3, r0, #1
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	d106      	bne.n	8009a3e <__sflush_r+0x66>
 8009a30:	6829      	ldr	r1, [r5, #0]
 8009a32:	291d      	cmp	r1, #29
 8009a34:	d82c      	bhi.n	8009a90 <__sflush_r+0xb8>
 8009a36:	4a2a      	ldr	r2, [pc, #168]	; (8009ae0 <__sflush_r+0x108>)
 8009a38:	40ca      	lsrs	r2, r1
 8009a3a:	07d6      	lsls	r6, r2, #31
 8009a3c:	d528      	bpl.n	8009a90 <__sflush_r+0xb8>
 8009a3e:	2200      	movs	r2, #0
 8009a40:	6062      	str	r2, [r4, #4]
 8009a42:	04d9      	lsls	r1, r3, #19
 8009a44:	6922      	ldr	r2, [r4, #16]
 8009a46:	6022      	str	r2, [r4, #0]
 8009a48:	d504      	bpl.n	8009a54 <__sflush_r+0x7c>
 8009a4a:	1c42      	adds	r2, r0, #1
 8009a4c:	d101      	bne.n	8009a52 <__sflush_r+0x7a>
 8009a4e:	682b      	ldr	r3, [r5, #0]
 8009a50:	b903      	cbnz	r3, 8009a54 <__sflush_r+0x7c>
 8009a52:	6560      	str	r0, [r4, #84]	; 0x54
 8009a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a56:	602f      	str	r7, [r5, #0]
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	d0ca      	beq.n	80099f2 <__sflush_r+0x1a>
 8009a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a60:	4299      	cmp	r1, r3
 8009a62:	d002      	beq.n	8009a6a <__sflush_r+0x92>
 8009a64:	4628      	mov	r0, r5
 8009a66:	f000 fa05 	bl	8009e74 <_free_r>
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8009a6e:	e7c1      	b.n	80099f4 <__sflush_r+0x1c>
 8009a70:	6a21      	ldr	r1, [r4, #32]
 8009a72:	2301      	movs	r3, #1
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b0      	blx	r6
 8009a78:	1c41      	adds	r1, r0, #1
 8009a7a:	d1c7      	bne.n	8009a0c <__sflush_r+0x34>
 8009a7c:	682b      	ldr	r3, [r5, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0c4      	beq.n	8009a0c <__sflush_r+0x34>
 8009a82:	2b1d      	cmp	r3, #29
 8009a84:	d001      	beq.n	8009a8a <__sflush_r+0xb2>
 8009a86:	2b16      	cmp	r3, #22
 8009a88:	d101      	bne.n	8009a8e <__sflush_r+0xb6>
 8009a8a:	602f      	str	r7, [r5, #0]
 8009a8c:	e7b1      	b.n	80099f2 <__sflush_r+0x1a>
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	e7ad      	b.n	80099f4 <__sflush_r+0x1c>
 8009a98:	690f      	ldr	r7, [r1, #16]
 8009a9a:	2f00      	cmp	r7, #0
 8009a9c:	d0a9      	beq.n	80099f2 <__sflush_r+0x1a>
 8009a9e:	0793      	lsls	r3, r2, #30
 8009aa0:	680e      	ldr	r6, [r1, #0]
 8009aa2:	bf08      	it	eq
 8009aa4:	694b      	ldreq	r3, [r1, #20]
 8009aa6:	600f      	str	r7, [r1, #0]
 8009aa8:	bf18      	it	ne
 8009aaa:	2300      	movne	r3, #0
 8009aac:	eba6 0807 	sub.w	r8, r6, r7
 8009ab0:	608b      	str	r3, [r1, #8]
 8009ab2:	f1b8 0f00 	cmp.w	r8, #0
 8009ab6:	dd9c      	ble.n	80099f2 <__sflush_r+0x1a>
 8009ab8:	6a21      	ldr	r1, [r4, #32]
 8009aba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009abc:	4643      	mov	r3, r8
 8009abe:	463a      	mov	r2, r7
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	47b0      	blx	r6
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	dc06      	bgt.n	8009ad6 <__sflush_r+0xfe>
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ace:	81a3      	strh	r3, [r4, #12]
 8009ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad4:	e78e      	b.n	80099f4 <__sflush_r+0x1c>
 8009ad6:	4407      	add	r7, r0
 8009ad8:	eba8 0800 	sub.w	r8, r8, r0
 8009adc:	e7e9      	b.n	8009ab2 <__sflush_r+0xda>
 8009ade:	bf00      	nop
 8009ae0:	20400001 	.word	0x20400001

08009ae4 <_fflush_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	690b      	ldr	r3, [r1, #16]
 8009ae8:	4605      	mov	r5, r0
 8009aea:	460c      	mov	r4, r1
 8009aec:	b913      	cbnz	r3, 8009af4 <_fflush_r+0x10>
 8009aee:	2500      	movs	r5, #0
 8009af0:	4628      	mov	r0, r5
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	b118      	cbz	r0, 8009afe <_fflush_r+0x1a>
 8009af6:	6983      	ldr	r3, [r0, #24]
 8009af8:	b90b      	cbnz	r3, 8009afe <_fflush_r+0x1a>
 8009afa:	f000 f899 	bl	8009c30 <__sinit>
 8009afe:	4b14      	ldr	r3, [pc, #80]	; (8009b50 <_fflush_r+0x6c>)
 8009b00:	429c      	cmp	r4, r3
 8009b02:	d11b      	bne.n	8009b3c <_fflush_r+0x58>
 8009b04:	686c      	ldr	r4, [r5, #4]
 8009b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d0ef      	beq.n	8009aee <_fflush_r+0xa>
 8009b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b10:	07d0      	lsls	r0, r2, #31
 8009b12:	d404      	bmi.n	8009b1e <_fflush_r+0x3a>
 8009b14:	0599      	lsls	r1, r3, #22
 8009b16:	d402      	bmi.n	8009b1e <_fflush_r+0x3a>
 8009b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b1a:	f000 f944 	bl	8009da6 <__retarget_lock_acquire_recursive>
 8009b1e:	4628      	mov	r0, r5
 8009b20:	4621      	mov	r1, r4
 8009b22:	f7ff ff59 	bl	80099d8 <__sflush_r>
 8009b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b28:	07da      	lsls	r2, r3, #31
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	d4e0      	bmi.n	8009af0 <_fflush_r+0xc>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	059b      	lsls	r3, r3, #22
 8009b32:	d4dd      	bmi.n	8009af0 <_fflush_r+0xc>
 8009b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b36:	f000 f937 	bl	8009da8 <__retarget_lock_release_recursive>
 8009b3a:	e7d9      	b.n	8009af0 <_fflush_r+0xc>
 8009b3c:	4b05      	ldr	r3, [pc, #20]	; (8009b54 <_fflush_r+0x70>)
 8009b3e:	429c      	cmp	r4, r3
 8009b40:	d101      	bne.n	8009b46 <_fflush_r+0x62>
 8009b42:	68ac      	ldr	r4, [r5, #8]
 8009b44:	e7df      	b.n	8009b06 <_fflush_r+0x22>
 8009b46:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <_fflush_r+0x74>)
 8009b48:	429c      	cmp	r4, r3
 8009b4a:	bf08      	it	eq
 8009b4c:	68ec      	ldreq	r4, [r5, #12]
 8009b4e:	e7da      	b.n	8009b06 <_fflush_r+0x22>
 8009b50:	0800afbc 	.word	0x0800afbc
 8009b54:	0800afdc 	.word	0x0800afdc
 8009b58:	0800af9c 	.word	0x0800af9c

08009b5c <fflush>:
 8009b5c:	4601      	mov	r1, r0
 8009b5e:	b920      	cbnz	r0, 8009b6a <fflush+0xe>
 8009b60:	4b04      	ldr	r3, [pc, #16]	; (8009b74 <fflush+0x18>)
 8009b62:	4905      	ldr	r1, [pc, #20]	; (8009b78 <fflush+0x1c>)
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	f000 b8fe 	b.w	8009d66 <_fwalk_reent>
 8009b6a:	4b04      	ldr	r3, [pc, #16]	; (8009b7c <fflush+0x20>)
 8009b6c:	6818      	ldr	r0, [r3, #0]
 8009b6e:	f7ff bfb9 	b.w	8009ae4 <_fflush_r>
 8009b72:	bf00      	nop
 8009b74:	0800af98 	.word	0x0800af98
 8009b78:	08009ae5 	.word	0x08009ae5
 8009b7c:	2000000c 	.word	0x2000000c

08009b80 <std>:
 8009b80:	2300      	movs	r3, #0
 8009b82:	b510      	push	{r4, lr}
 8009b84:	4604      	mov	r4, r0
 8009b86:	e9c0 3300 	strd	r3, r3, [r0]
 8009b8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b8e:	6083      	str	r3, [r0, #8]
 8009b90:	8181      	strh	r1, [r0, #12]
 8009b92:	6643      	str	r3, [r0, #100]	; 0x64
 8009b94:	81c2      	strh	r2, [r0, #14]
 8009b96:	6183      	str	r3, [r0, #24]
 8009b98:	4619      	mov	r1, r3
 8009b9a:	2208      	movs	r2, #8
 8009b9c:	305c      	adds	r0, #92	; 0x5c
 8009b9e:	f7ff fdb1 	bl	8009704 <memset>
 8009ba2:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <std+0x38>)
 8009ba4:	6263      	str	r3, [r4, #36]	; 0x24
 8009ba6:	4b05      	ldr	r3, [pc, #20]	; (8009bbc <std+0x3c>)
 8009ba8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009baa:	4b05      	ldr	r3, [pc, #20]	; (8009bc0 <std+0x40>)
 8009bac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bae:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <std+0x44>)
 8009bb0:	6224      	str	r4, [r4, #32]
 8009bb2:	6323      	str	r3, [r4, #48]	; 0x30
 8009bb4:	bd10      	pop	{r4, pc}
 8009bb6:	bf00      	nop
 8009bb8:	0800a82d 	.word	0x0800a82d
 8009bbc:	0800a84f 	.word	0x0800a84f
 8009bc0:	0800a887 	.word	0x0800a887
 8009bc4:	0800a8ab 	.word	0x0800a8ab

08009bc8 <_cleanup_r>:
 8009bc8:	4901      	ldr	r1, [pc, #4]	; (8009bd0 <_cleanup_r+0x8>)
 8009bca:	f000 b8cc 	b.w	8009d66 <_fwalk_reent>
 8009bce:	bf00      	nop
 8009bd0:	08009ae5 	.word	0x08009ae5

08009bd4 <__sfmoreglue>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	2268      	movs	r2, #104	; 0x68
 8009bd8:	1e4d      	subs	r5, r1, #1
 8009bda:	4355      	muls	r5, r2
 8009bdc:	460e      	mov	r6, r1
 8009bde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009be2:	f000 f9b3 	bl	8009f4c <_malloc_r>
 8009be6:	4604      	mov	r4, r0
 8009be8:	b140      	cbz	r0, 8009bfc <__sfmoreglue+0x28>
 8009bea:	2100      	movs	r1, #0
 8009bec:	e9c0 1600 	strd	r1, r6, [r0]
 8009bf0:	300c      	adds	r0, #12
 8009bf2:	60a0      	str	r0, [r4, #8]
 8009bf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bf8:	f7ff fd84 	bl	8009704 <memset>
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}

08009c00 <__sfp_lock_acquire>:
 8009c00:	4801      	ldr	r0, [pc, #4]	; (8009c08 <__sfp_lock_acquire+0x8>)
 8009c02:	f000 b8d0 	b.w	8009da6 <__retarget_lock_acquire_recursive>
 8009c06:	bf00      	nop
 8009c08:	20001230 	.word	0x20001230

08009c0c <__sfp_lock_release>:
 8009c0c:	4801      	ldr	r0, [pc, #4]	; (8009c14 <__sfp_lock_release+0x8>)
 8009c0e:	f000 b8cb 	b.w	8009da8 <__retarget_lock_release_recursive>
 8009c12:	bf00      	nop
 8009c14:	20001230 	.word	0x20001230

08009c18 <__sinit_lock_acquire>:
 8009c18:	4801      	ldr	r0, [pc, #4]	; (8009c20 <__sinit_lock_acquire+0x8>)
 8009c1a:	f000 b8c4 	b.w	8009da6 <__retarget_lock_acquire_recursive>
 8009c1e:	bf00      	nop
 8009c20:	20001231 	.word	0x20001231

08009c24 <__sinit_lock_release>:
 8009c24:	4801      	ldr	r0, [pc, #4]	; (8009c2c <__sinit_lock_release+0x8>)
 8009c26:	f000 b8bf 	b.w	8009da8 <__retarget_lock_release_recursive>
 8009c2a:	bf00      	nop
 8009c2c:	20001231 	.word	0x20001231

08009c30 <__sinit>:
 8009c30:	b510      	push	{r4, lr}
 8009c32:	4604      	mov	r4, r0
 8009c34:	f7ff fff0 	bl	8009c18 <__sinit_lock_acquire>
 8009c38:	69a3      	ldr	r3, [r4, #24]
 8009c3a:	b11b      	cbz	r3, 8009c44 <__sinit+0x14>
 8009c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c40:	f7ff bff0 	b.w	8009c24 <__sinit_lock_release>
 8009c44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c48:	6523      	str	r3, [r4, #80]	; 0x50
 8009c4a:	4b13      	ldr	r3, [pc, #76]	; (8009c98 <__sinit+0x68>)
 8009c4c:	4a13      	ldr	r2, [pc, #76]	; (8009c9c <__sinit+0x6c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c52:	42a3      	cmp	r3, r4
 8009c54:	bf04      	itt	eq
 8009c56:	2301      	moveq	r3, #1
 8009c58:	61a3      	streq	r3, [r4, #24]
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 f820 	bl	8009ca0 <__sfp>
 8009c60:	6060      	str	r0, [r4, #4]
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 f81c 	bl	8009ca0 <__sfp>
 8009c68:	60a0      	str	r0, [r4, #8]
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 f818 	bl	8009ca0 <__sfp>
 8009c70:	2200      	movs	r2, #0
 8009c72:	60e0      	str	r0, [r4, #12]
 8009c74:	2104      	movs	r1, #4
 8009c76:	6860      	ldr	r0, [r4, #4]
 8009c78:	f7ff ff82 	bl	8009b80 <std>
 8009c7c:	68a0      	ldr	r0, [r4, #8]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	2109      	movs	r1, #9
 8009c82:	f7ff ff7d 	bl	8009b80 <std>
 8009c86:	68e0      	ldr	r0, [r4, #12]
 8009c88:	2202      	movs	r2, #2
 8009c8a:	2112      	movs	r1, #18
 8009c8c:	f7ff ff78 	bl	8009b80 <std>
 8009c90:	2301      	movs	r3, #1
 8009c92:	61a3      	str	r3, [r4, #24]
 8009c94:	e7d2      	b.n	8009c3c <__sinit+0xc>
 8009c96:	bf00      	nop
 8009c98:	0800af98 	.word	0x0800af98
 8009c9c:	08009bc9 	.word	0x08009bc9

08009ca0 <__sfp>:
 8009ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	f7ff ffac 	bl	8009c00 <__sfp_lock_acquire>
 8009ca8:	4b1e      	ldr	r3, [pc, #120]	; (8009d24 <__sfp+0x84>)
 8009caa:	681e      	ldr	r6, [r3, #0]
 8009cac:	69b3      	ldr	r3, [r6, #24]
 8009cae:	b913      	cbnz	r3, 8009cb6 <__sfp+0x16>
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	f7ff ffbd 	bl	8009c30 <__sinit>
 8009cb6:	3648      	adds	r6, #72	; 0x48
 8009cb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	d503      	bpl.n	8009cc8 <__sfp+0x28>
 8009cc0:	6833      	ldr	r3, [r6, #0]
 8009cc2:	b30b      	cbz	r3, 8009d08 <__sfp+0x68>
 8009cc4:	6836      	ldr	r6, [r6, #0]
 8009cc6:	e7f7      	b.n	8009cb8 <__sfp+0x18>
 8009cc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ccc:	b9d5      	cbnz	r5, 8009d04 <__sfp+0x64>
 8009cce:	4b16      	ldr	r3, [pc, #88]	; (8009d28 <__sfp+0x88>)
 8009cd0:	60e3      	str	r3, [r4, #12]
 8009cd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cd6:	6665      	str	r5, [r4, #100]	; 0x64
 8009cd8:	f000 f864 	bl	8009da4 <__retarget_lock_init_recursive>
 8009cdc:	f7ff ff96 	bl	8009c0c <__sfp_lock_release>
 8009ce0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ce4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ce8:	6025      	str	r5, [r4, #0]
 8009cea:	61a5      	str	r5, [r4, #24]
 8009cec:	2208      	movs	r2, #8
 8009cee:	4629      	mov	r1, r5
 8009cf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cf4:	f7ff fd06 	bl	8009704 <memset>
 8009cf8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d00:	4620      	mov	r0, r4
 8009d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d04:	3468      	adds	r4, #104	; 0x68
 8009d06:	e7d9      	b.n	8009cbc <__sfp+0x1c>
 8009d08:	2104      	movs	r1, #4
 8009d0a:	4638      	mov	r0, r7
 8009d0c:	f7ff ff62 	bl	8009bd4 <__sfmoreglue>
 8009d10:	4604      	mov	r4, r0
 8009d12:	6030      	str	r0, [r6, #0]
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d1d5      	bne.n	8009cc4 <__sfp+0x24>
 8009d18:	f7ff ff78 	bl	8009c0c <__sfp_lock_release>
 8009d1c:	230c      	movs	r3, #12
 8009d1e:	603b      	str	r3, [r7, #0]
 8009d20:	e7ee      	b.n	8009d00 <__sfp+0x60>
 8009d22:	bf00      	nop
 8009d24:	0800af98 	.word	0x0800af98
 8009d28:	ffff0001 	.word	0xffff0001

08009d2c <_fwalk>:
 8009d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d30:	460f      	mov	r7, r1
 8009d32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d36:	2600      	movs	r6, #0
 8009d38:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8009d3c:	f1b8 0801 	subs.w	r8, r8, #1
 8009d40:	d505      	bpl.n	8009d4e <_fwalk+0x22>
 8009d42:	6824      	ldr	r4, [r4, #0]
 8009d44:	2c00      	cmp	r4, #0
 8009d46:	d1f7      	bne.n	8009d38 <_fwalk+0xc>
 8009d48:	4630      	mov	r0, r6
 8009d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d4e:	89ab      	ldrh	r3, [r5, #12]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d906      	bls.n	8009d62 <_fwalk+0x36>
 8009d54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	d002      	beq.n	8009d62 <_fwalk+0x36>
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	47b8      	blx	r7
 8009d60:	4306      	orrs	r6, r0
 8009d62:	3568      	adds	r5, #104	; 0x68
 8009d64:	e7ea      	b.n	8009d3c <_fwalk+0x10>

08009d66 <_fwalk_reent>:
 8009d66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	4688      	mov	r8, r1
 8009d6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d72:	2700      	movs	r7, #0
 8009d74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d78:	f1b9 0901 	subs.w	r9, r9, #1
 8009d7c:	d505      	bpl.n	8009d8a <_fwalk_reent+0x24>
 8009d7e:	6824      	ldr	r4, [r4, #0]
 8009d80:	2c00      	cmp	r4, #0
 8009d82:	d1f7      	bne.n	8009d74 <_fwalk_reent+0xe>
 8009d84:	4638      	mov	r0, r7
 8009d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d8a:	89ab      	ldrh	r3, [r5, #12]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d907      	bls.n	8009da0 <_fwalk_reent+0x3a>
 8009d90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d94:	3301      	adds	r3, #1
 8009d96:	d003      	beq.n	8009da0 <_fwalk_reent+0x3a>
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4630      	mov	r0, r6
 8009d9c:	47c0      	blx	r8
 8009d9e:	4307      	orrs	r7, r0
 8009da0:	3568      	adds	r5, #104	; 0x68
 8009da2:	e7e9      	b.n	8009d78 <_fwalk_reent+0x12>

08009da4 <__retarget_lock_init_recursive>:
 8009da4:	4770      	bx	lr

08009da6 <__retarget_lock_acquire_recursive>:
 8009da6:	4770      	bx	lr

08009da8 <__retarget_lock_release_recursive>:
 8009da8:	4770      	bx	lr

08009daa <__swhatbuf_r>:
 8009daa:	b570      	push	{r4, r5, r6, lr}
 8009dac:	460e      	mov	r6, r1
 8009dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db2:	2900      	cmp	r1, #0
 8009db4:	b096      	sub	sp, #88	; 0x58
 8009db6:	4614      	mov	r4, r2
 8009db8:	461d      	mov	r5, r3
 8009dba:	da08      	bge.n	8009dce <__swhatbuf_r+0x24>
 8009dbc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	602a      	str	r2, [r5, #0]
 8009dc4:	061a      	lsls	r2, r3, #24
 8009dc6:	d410      	bmi.n	8009dea <__swhatbuf_r+0x40>
 8009dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dcc:	e00e      	b.n	8009dec <__swhatbuf_r+0x42>
 8009dce:	466a      	mov	r2, sp
 8009dd0:	f000 ff5c 	bl	800ac8c <_fstat_r>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	dbf1      	blt.n	8009dbc <__swhatbuf_r+0x12>
 8009dd8:	9a01      	ldr	r2, [sp, #4]
 8009dda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009de2:	425a      	negs	r2, r3
 8009de4:	415a      	adcs	r2, r3
 8009de6:	602a      	str	r2, [r5, #0]
 8009de8:	e7ee      	b.n	8009dc8 <__swhatbuf_r+0x1e>
 8009dea:	2340      	movs	r3, #64	; 0x40
 8009dec:	2000      	movs	r0, #0
 8009dee:	6023      	str	r3, [r4, #0]
 8009df0:	b016      	add	sp, #88	; 0x58
 8009df2:	bd70      	pop	{r4, r5, r6, pc}

08009df4 <__smakebuf_r>:
 8009df4:	898b      	ldrh	r3, [r1, #12]
 8009df6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009df8:	079d      	lsls	r5, r3, #30
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	d507      	bpl.n	8009e10 <__smakebuf_r+0x1c>
 8009e00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	6123      	str	r3, [r4, #16]
 8009e08:	2301      	movs	r3, #1
 8009e0a:	6163      	str	r3, [r4, #20]
 8009e0c:	b002      	add	sp, #8
 8009e0e:	bd70      	pop	{r4, r5, r6, pc}
 8009e10:	ab01      	add	r3, sp, #4
 8009e12:	466a      	mov	r2, sp
 8009e14:	f7ff ffc9 	bl	8009daa <__swhatbuf_r>
 8009e18:	9900      	ldr	r1, [sp, #0]
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f000 f895 	bl	8009f4c <_malloc_r>
 8009e22:	b948      	cbnz	r0, 8009e38 <__smakebuf_r+0x44>
 8009e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e28:	059a      	lsls	r2, r3, #22
 8009e2a:	d4ef      	bmi.n	8009e0c <__smakebuf_r+0x18>
 8009e2c:	f023 0303 	bic.w	r3, r3, #3
 8009e30:	f043 0302 	orr.w	r3, r3, #2
 8009e34:	81a3      	strh	r3, [r4, #12]
 8009e36:	e7e3      	b.n	8009e00 <__smakebuf_r+0xc>
 8009e38:	4b0d      	ldr	r3, [pc, #52]	; (8009e70 <__smakebuf_r+0x7c>)
 8009e3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	6020      	str	r0, [r4, #0]
 8009e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e44:	81a3      	strh	r3, [r4, #12]
 8009e46:	9b00      	ldr	r3, [sp, #0]
 8009e48:	6163      	str	r3, [r4, #20]
 8009e4a:	9b01      	ldr	r3, [sp, #4]
 8009e4c:	6120      	str	r0, [r4, #16]
 8009e4e:	b15b      	cbz	r3, 8009e68 <__smakebuf_r+0x74>
 8009e50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e54:	4630      	mov	r0, r6
 8009e56:	f000 ff2b 	bl	800acb0 <_isatty_r>
 8009e5a:	b128      	cbz	r0, 8009e68 <__smakebuf_r+0x74>
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	f023 0303 	bic.w	r3, r3, #3
 8009e62:	f043 0301 	orr.w	r3, r3, #1
 8009e66:	81a3      	strh	r3, [r4, #12]
 8009e68:	89a0      	ldrh	r0, [r4, #12]
 8009e6a:	4305      	orrs	r5, r0
 8009e6c:	81a5      	strh	r5, [r4, #12]
 8009e6e:	e7cd      	b.n	8009e0c <__smakebuf_r+0x18>
 8009e70:	08009bc9 	.word	0x08009bc9

08009e74 <_free_r>:
 8009e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e76:	2900      	cmp	r1, #0
 8009e78:	d044      	beq.n	8009f04 <_free_r+0x90>
 8009e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e7e:	9001      	str	r0, [sp, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f1a1 0404 	sub.w	r4, r1, #4
 8009e86:	bfb8      	it	lt
 8009e88:	18e4      	addlt	r4, r4, r3
 8009e8a:	f000 ff33 	bl	800acf4 <__malloc_lock>
 8009e8e:	4a1e      	ldr	r2, [pc, #120]	; (8009f08 <_free_r+0x94>)
 8009e90:	9801      	ldr	r0, [sp, #4]
 8009e92:	6813      	ldr	r3, [r2, #0]
 8009e94:	b933      	cbnz	r3, 8009ea4 <_free_r+0x30>
 8009e96:	6063      	str	r3, [r4, #4]
 8009e98:	6014      	str	r4, [r2, #0]
 8009e9a:	b003      	add	sp, #12
 8009e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ea0:	f000 bf2e 	b.w	800ad00 <__malloc_unlock>
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	d908      	bls.n	8009eba <_free_r+0x46>
 8009ea8:	6825      	ldr	r5, [r4, #0]
 8009eaa:	1961      	adds	r1, r4, r5
 8009eac:	428b      	cmp	r3, r1
 8009eae:	bf01      	itttt	eq
 8009eb0:	6819      	ldreq	r1, [r3, #0]
 8009eb2:	685b      	ldreq	r3, [r3, #4]
 8009eb4:	1949      	addeq	r1, r1, r5
 8009eb6:	6021      	streq	r1, [r4, #0]
 8009eb8:	e7ed      	b.n	8009e96 <_free_r+0x22>
 8009eba:	461a      	mov	r2, r3
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	b10b      	cbz	r3, 8009ec4 <_free_r+0x50>
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	d9fa      	bls.n	8009eba <_free_r+0x46>
 8009ec4:	6811      	ldr	r1, [r2, #0]
 8009ec6:	1855      	adds	r5, r2, r1
 8009ec8:	42a5      	cmp	r5, r4
 8009eca:	d10b      	bne.n	8009ee4 <_free_r+0x70>
 8009ecc:	6824      	ldr	r4, [r4, #0]
 8009ece:	4421      	add	r1, r4
 8009ed0:	1854      	adds	r4, r2, r1
 8009ed2:	42a3      	cmp	r3, r4
 8009ed4:	6011      	str	r1, [r2, #0]
 8009ed6:	d1e0      	bne.n	8009e9a <_free_r+0x26>
 8009ed8:	681c      	ldr	r4, [r3, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	6053      	str	r3, [r2, #4]
 8009ede:	4421      	add	r1, r4
 8009ee0:	6011      	str	r1, [r2, #0]
 8009ee2:	e7da      	b.n	8009e9a <_free_r+0x26>
 8009ee4:	d902      	bls.n	8009eec <_free_r+0x78>
 8009ee6:	230c      	movs	r3, #12
 8009ee8:	6003      	str	r3, [r0, #0]
 8009eea:	e7d6      	b.n	8009e9a <_free_r+0x26>
 8009eec:	6825      	ldr	r5, [r4, #0]
 8009eee:	1961      	adds	r1, r4, r5
 8009ef0:	428b      	cmp	r3, r1
 8009ef2:	bf04      	itt	eq
 8009ef4:	6819      	ldreq	r1, [r3, #0]
 8009ef6:	685b      	ldreq	r3, [r3, #4]
 8009ef8:	6063      	str	r3, [r4, #4]
 8009efa:	bf04      	itt	eq
 8009efc:	1949      	addeq	r1, r1, r5
 8009efe:	6021      	streq	r1, [r4, #0]
 8009f00:	6054      	str	r4, [r2, #4]
 8009f02:	e7ca      	b.n	8009e9a <_free_r+0x26>
 8009f04:	b003      	add	sp, #12
 8009f06:	bd30      	pop	{r4, r5, pc}
 8009f08:	20001234 	.word	0x20001234

08009f0c <sbrk_aligned>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	4e0e      	ldr	r6, [pc, #56]	; (8009f48 <sbrk_aligned+0x3c>)
 8009f10:	460c      	mov	r4, r1
 8009f12:	6831      	ldr	r1, [r6, #0]
 8009f14:	4605      	mov	r5, r0
 8009f16:	b911      	cbnz	r1, 8009f1e <sbrk_aligned+0x12>
 8009f18:	f000 fc40 	bl	800a79c <_sbrk_r>
 8009f1c:	6030      	str	r0, [r6, #0]
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 fc3b 	bl	800a79c <_sbrk_r>
 8009f26:	1c43      	adds	r3, r0, #1
 8009f28:	d00a      	beq.n	8009f40 <sbrk_aligned+0x34>
 8009f2a:	1cc4      	adds	r4, r0, #3
 8009f2c:	f024 0403 	bic.w	r4, r4, #3
 8009f30:	42a0      	cmp	r0, r4
 8009f32:	d007      	beq.n	8009f44 <sbrk_aligned+0x38>
 8009f34:	1a21      	subs	r1, r4, r0
 8009f36:	4628      	mov	r0, r5
 8009f38:	f000 fc30 	bl	800a79c <_sbrk_r>
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	d101      	bne.n	8009f44 <sbrk_aligned+0x38>
 8009f40:	f04f 34ff 	mov.w	r4, #4294967295
 8009f44:	4620      	mov	r0, r4
 8009f46:	bd70      	pop	{r4, r5, r6, pc}
 8009f48:	20001238 	.word	0x20001238

08009f4c <_malloc_r>:
 8009f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f50:	1ccd      	adds	r5, r1, #3
 8009f52:	f025 0503 	bic.w	r5, r5, #3
 8009f56:	3508      	adds	r5, #8
 8009f58:	2d0c      	cmp	r5, #12
 8009f5a:	bf38      	it	cc
 8009f5c:	250c      	movcc	r5, #12
 8009f5e:	2d00      	cmp	r5, #0
 8009f60:	4607      	mov	r7, r0
 8009f62:	db01      	blt.n	8009f68 <_malloc_r+0x1c>
 8009f64:	42a9      	cmp	r1, r5
 8009f66:	d905      	bls.n	8009f74 <_malloc_r+0x28>
 8009f68:	230c      	movs	r3, #12
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	2600      	movs	r6, #0
 8009f6e:	4630      	mov	r0, r6
 8009f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f74:	4e2e      	ldr	r6, [pc, #184]	; (800a030 <_malloc_r+0xe4>)
 8009f76:	f000 febd 	bl	800acf4 <__malloc_lock>
 8009f7a:	6833      	ldr	r3, [r6, #0]
 8009f7c:	461c      	mov	r4, r3
 8009f7e:	bb34      	cbnz	r4, 8009fce <_malloc_r+0x82>
 8009f80:	4629      	mov	r1, r5
 8009f82:	4638      	mov	r0, r7
 8009f84:	f7ff ffc2 	bl	8009f0c <sbrk_aligned>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	d14d      	bne.n	800a02a <_malloc_r+0xde>
 8009f8e:	6834      	ldr	r4, [r6, #0]
 8009f90:	4626      	mov	r6, r4
 8009f92:	2e00      	cmp	r6, #0
 8009f94:	d140      	bne.n	800a018 <_malloc_r+0xcc>
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	4631      	mov	r1, r6
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	eb04 0803 	add.w	r8, r4, r3
 8009fa0:	f000 fbfc 	bl	800a79c <_sbrk_r>
 8009fa4:	4580      	cmp	r8, r0
 8009fa6:	d13a      	bne.n	800a01e <_malloc_r+0xd2>
 8009fa8:	6821      	ldr	r1, [r4, #0]
 8009faa:	3503      	adds	r5, #3
 8009fac:	1a6d      	subs	r5, r5, r1
 8009fae:	f025 0503 	bic.w	r5, r5, #3
 8009fb2:	3508      	adds	r5, #8
 8009fb4:	2d0c      	cmp	r5, #12
 8009fb6:	bf38      	it	cc
 8009fb8:	250c      	movcc	r5, #12
 8009fba:	4629      	mov	r1, r5
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	f7ff ffa5 	bl	8009f0c <sbrk_aligned>
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	d02b      	beq.n	800a01e <_malloc_r+0xd2>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	442b      	add	r3, r5
 8009fca:	6023      	str	r3, [r4, #0]
 8009fcc:	e00e      	b.n	8009fec <_malloc_r+0xa0>
 8009fce:	6822      	ldr	r2, [r4, #0]
 8009fd0:	1b52      	subs	r2, r2, r5
 8009fd2:	d41e      	bmi.n	800a012 <_malloc_r+0xc6>
 8009fd4:	2a0b      	cmp	r2, #11
 8009fd6:	d916      	bls.n	800a006 <_malloc_r+0xba>
 8009fd8:	1961      	adds	r1, r4, r5
 8009fda:	42a3      	cmp	r3, r4
 8009fdc:	6025      	str	r5, [r4, #0]
 8009fde:	bf18      	it	ne
 8009fe0:	6059      	strne	r1, [r3, #4]
 8009fe2:	6863      	ldr	r3, [r4, #4]
 8009fe4:	bf08      	it	eq
 8009fe6:	6031      	streq	r1, [r6, #0]
 8009fe8:	5162      	str	r2, [r4, r5]
 8009fea:	604b      	str	r3, [r1, #4]
 8009fec:	4638      	mov	r0, r7
 8009fee:	f104 060b 	add.w	r6, r4, #11
 8009ff2:	f000 fe85 	bl	800ad00 <__malloc_unlock>
 8009ff6:	f026 0607 	bic.w	r6, r6, #7
 8009ffa:	1d23      	adds	r3, r4, #4
 8009ffc:	1af2      	subs	r2, r6, r3
 8009ffe:	d0b6      	beq.n	8009f6e <_malloc_r+0x22>
 800a000:	1b9b      	subs	r3, r3, r6
 800a002:	50a3      	str	r3, [r4, r2]
 800a004:	e7b3      	b.n	8009f6e <_malloc_r+0x22>
 800a006:	6862      	ldr	r2, [r4, #4]
 800a008:	42a3      	cmp	r3, r4
 800a00a:	bf0c      	ite	eq
 800a00c:	6032      	streq	r2, [r6, #0]
 800a00e:	605a      	strne	r2, [r3, #4]
 800a010:	e7ec      	b.n	8009fec <_malloc_r+0xa0>
 800a012:	4623      	mov	r3, r4
 800a014:	6864      	ldr	r4, [r4, #4]
 800a016:	e7b2      	b.n	8009f7e <_malloc_r+0x32>
 800a018:	4634      	mov	r4, r6
 800a01a:	6876      	ldr	r6, [r6, #4]
 800a01c:	e7b9      	b.n	8009f92 <_malloc_r+0x46>
 800a01e:	230c      	movs	r3, #12
 800a020:	603b      	str	r3, [r7, #0]
 800a022:	4638      	mov	r0, r7
 800a024:	f000 fe6c 	bl	800ad00 <__malloc_unlock>
 800a028:	e7a1      	b.n	8009f6e <_malloc_r+0x22>
 800a02a:	6025      	str	r5, [r4, #0]
 800a02c:	e7de      	b.n	8009fec <_malloc_r+0xa0>
 800a02e:	bf00      	nop
 800a030:	20001234 	.word	0x20001234

0800a034 <__svfiscanf_r>:
 800a034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a038:	461d      	mov	r5, r3
 800a03a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800a03c:	07df      	lsls	r7, r3, #31
 800a03e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800a042:	4606      	mov	r6, r0
 800a044:	460c      	mov	r4, r1
 800a046:	4692      	mov	sl, r2
 800a048:	d405      	bmi.n	800a056 <__svfiscanf_r+0x22>
 800a04a:	898b      	ldrh	r3, [r1, #12]
 800a04c:	0598      	lsls	r0, r3, #22
 800a04e:	d402      	bmi.n	800a056 <__svfiscanf_r+0x22>
 800a050:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800a052:	f7ff fea8 	bl	8009da6 <__retarget_lock_acquire_recursive>
 800a056:	2300      	movs	r3, #0
 800a058:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800a05c:	4ba6      	ldr	r3, [pc, #664]	; (800a2f8 <__svfiscanf_r+0x2c4>)
 800a05e:	93a0      	str	r3, [sp, #640]	; 0x280
 800a060:	f10d 0804 	add.w	r8, sp, #4
 800a064:	4ba5      	ldr	r3, [pc, #660]	; (800a2fc <__svfiscanf_r+0x2c8>)
 800a066:	4fa6      	ldr	r7, [pc, #664]	; (800a300 <__svfiscanf_r+0x2cc>)
 800a068:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800a304 <__svfiscanf_r+0x2d0>
 800a06c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a070:	93a1      	str	r3, [sp, #644]	; 0x284
 800a072:	9500      	str	r5, [sp, #0]
 800a074:	f89a 3000 	ldrb.w	r3, [sl]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 8173 	beq.w	800a364 <__svfiscanf_r+0x330>
 800a07e:	5dd9      	ldrb	r1, [r3, r7]
 800a080:	f011 0108 	ands.w	r1, r1, #8
 800a084:	f10a 0501 	add.w	r5, sl, #1
 800a088:	d019      	beq.n	800a0be <__svfiscanf_r+0x8a>
 800a08a:	6863      	ldr	r3, [r4, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dd0f      	ble.n	800a0b0 <__svfiscanf_r+0x7c>
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	781a      	ldrb	r2, [r3, #0]
 800a094:	5cba      	ldrb	r2, [r7, r2]
 800a096:	0711      	lsls	r1, r2, #28
 800a098:	d401      	bmi.n	800a09e <__svfiscanf_r+0x6a>
 800a09a:	46aa      	mov	sl, r5
 800a09c:	e7ea      	b.n	800a074 <__svfiscanf_r+0x40>
 800a09e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a0a0:	3201      	adds	r2, #1
 800a0a2:	9245      	str	r2, [sp, #276]	; 0x114
 800a0a4:	6862      	ldr	r2, [r4, #4]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	3a01      	subs	r2, #1
 800a0aa:	6062      	str	r2, [r4, #4]
 800a0ac:	6023      	str	r3, [r4, #0]
 800a0ae:	e7ec      	b.n	800a08a <__svfiscanf_r+0x56>
 800a0b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a0b2:	4621      	mov	r1, r4
 800a0b4:	4630      	mov	r0, r6
 800a0b6:	4798      	blx	r3
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d0e9      	beq.n	800a090 <__svfiscanf_r+0x5c>
 800a0bc:	e7ed      	b.n	800a09a <__svfiscanf_r+0x66>
 800a0be:	2b25      	cmp	r3, #37	; 0x25
 800a0c0:	d012      	beq.n	800a0e8 <__svfiscanf_r+0xb4>
 800a0c2:	469a      	mov	sl, r3
 800a0c4:	6863      	ldr	r3, [r4, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f340 8095 	ble.w	800a1f6 <__svfiscanf_r+0x1c2>
 800a0cc:	6822      	ldr	r2, [r4, #0]
 800a0ce:	7813      	ldrb	r3, [r2, #0]
 800a0d0:	4553      	cmp	r3, sl
 800a0d2:	f040 8147 	bne.w	800a364 <__svfiscanf_r+0x330>
 800a0d6:	6863      	ldr	r3, [r4, #4]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	6063      	str	r3, [r4, #4]
 800a0dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a0de:	3201      	adds	r2, #1
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	6022      	str	r2, [r4, #0]
 800a0e4:	9345      	str	r3, [sp, #276]	; 0x114
 800a0e6:	e7d8      	b.n	800a09a <__svfiscanf_r+0x66>
 800a0e8:	9141      	str	r1, [sp, #260]	; 0x104
 800a0ea:	9143      	str	r1, [sp, #268]	; 0x10c
 800a0ec:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800a0f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0f2:	bf02      	ittt	eq
 800a0f4:	2310      	moveq	r3, #16
 800a0f6:	9341      	streq	r3, [sp, #260]	; 0x104
 800a0f8:	f10a 0502 	addeq.w	r5, sl, #2
 800a0fc:	220a      	movs	r2, #10
 800a0fe:	46aa      	mov	sl, r5
 800a100:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800a104:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a108:	2b09      	cmp	r3, #9
 800a10a:	d91e      	bls.n	800a14a <__svfiscanf_r+0x116>
 800a10c:	487d      	ldr	r0, [pc, #500]	; (800a304 <__svfiscanf_r+0x2d0>)
 800a10e:	2203      	movs	r2, #3
 800a110:	f7f6 f87e 	bl	8000210 <memchr>
 800a114:	b140      	cbz	r0, 800a128 <__svfiscanf_r+0xf4>
 800a116:	2301      	movs	r3, #1
 800a118:	eba0 0009 	sub.w	r0, r0, r9
 800a11c:	fa03 f000 	lsl.w	r0, r3, r0
 800a120:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a122:	4318      	orrs	r0, r3
 800a124:	9041      	str	r0, [sp, #260]	; 0x104
 800a126:	4655      	mov	r5, sl
 800a128:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a12c:	2b78      	cmp	r3, #120	; 0x78
 800a12e:	d807      	bhi.n	800a140 <__svfiscanf_r+0x10c>
 800a130:	2b57      	cmp	r3, #87	; 0x57
 800a132:	d811      	bhi.n	800a158 <__svfiscanf_r+0x124>
 800a134:	2b25      	cmp	r3, #37	; 0x25
 800a136:	d0c4      	beq.n	800a0c2 <__svfiscanf_r+0x8e>
 800a138:	d858      	bhi.n	800a1ec <__svfiscanf_r+0x1b8>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 80c8 	beq.w	800a2d0 <__svfiscanf_r+0x29c>
 800a140:	2303      	movs	r3, #3
 800a142:	9347      	str	r3, [sp, #284]	; 0x11c
 800a144:	230a      	movs	r3, #10
 800a146:	9342      	str	r3, [sp, #264]	; 0x108
 800a148:	e07c      	b.n	800a244 <__svfiscanf_r+0x210>
 800a14a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a14c:	fb02 1103 	mla	r1, r2, r3, r1
 800a150:	3930      	subs	r1, #48	; 0x30
 800a152:	9143      	str	r1, [sp, #268]	; 0x10c
 800a154:	4655      	mov	r5, sl
 800a156:	e7d2      	b.n	800a0fe <__svfiscanf_r+0xca>
 800a158:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a15c:	2a20      	cmp	r2, #32
 800a15e:	d8ef      	bhi.n	800a140 <__svfiscanf_r+0x10c>
 800a160:	a101      	add	r1, pc, #4	; (adr r1, 800a168 <__svfiscanf_r+0x134>)
 800a162:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a166:	bf00      	nop
 800a168:	0800a22f 	.word	0x0800a22f
 800a16c:	0800a141 	.word	0x0800a141
 800a170:	0800a141 	.word	0x0800a141
 800a174:	0800a28d 	.word	0x0800a28d
 800a178:	0800a141 	.word	0x0800a141
 800a17c:	0800a141 	.word	0x0800a141
 800a180:	0800a141 	.word	0x0800a141
 800a184:	0800a141 	.word	0x0800a141
 800a188:	0800a141 	.word	0x0800a141
 800a18c:	0800a141 	.word	0x0800a141
 800a190:	0800a141 	.word	0x0800a141
 800a194:	0800a2a3 	.word	0x0800a2a3
 800a198:	0800a279 	.word	0x0800a279
 800a19c:	0800a1f3 	.word	0x0800a1f3
 800a1a0:	0800a1f3 	.word	0x0800a1f3
 800a1a4:	0800a1f3 	.word	0x0800a1f3
 800a1a8:	0800a141 	.word	0x0800a141
 800a1ac:	0800a27d 	.word	0x0800a27d
 800a1b0:	0800a141 	.word	0x0800a141
 800a1b4:	0800a141 	.word	0x0800a141
 800a1b8:	0800a141 	.word	0x0800a141
 800a1bc:	0800a141 	.word	0x0800a141
 800a1c0:	0800a2b3 	.word	0x0800a2b3
 800a1c4:	0800a285 	.word	0x0800a285
 800a1c8:	0800a227 	.word	0x0800a227
 800a1cc:	0800a141 	.word	0x0800a141
 800a1d0:	0800a141 	.word	0x0800a141
 800a1d4:	0800a2af 	.word	0x0800a2af
 800a1d8:	0800a141 	.word	0x0800a141
 800a1dc:	0800a279 	.word	0x0800a279
 800a1e0:	0800a141 	.word	0x0800a141
 800a1e4:	0800a141 	.word	0x0800a141
 800a1e8:	0800a22f 	.word	0x0800a22f
 800a1ec:	3b45      	subs	r3, #69	; 0x45
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d8a6      	bhi.n	800a140 <__svfiscanf_r+0x10c>
 800a1f2:	2305      	movs	r3, #5
 800a1f4:	e025      	b.n	800a242 <__svfiscanf_r+0x20e>
 800a1f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	4798      	blx	r3
 800a1fe:	2800      	cmp	r0, #0
 800a200:	f43f af64 	beq.w	800a0cc <__svfiscanf_r+0x98>
 800a204:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a206:	07da      	lsls	r2, r3, #31
 800a208:	f140 80a4 	bpl.w	800a354 <__svfiscanf_r+0x320>
 800a20c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a20e:	2800      	cmp	r0, #0
 800a210:	d067      	beq.n	800a2e2 <__svfiscanf_r+0x2ae>
 800a212:	89a3      	ldrh	r3, [r4, #12]
 800a214:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a218:	bf18      	it	ne
 800a21a:	f04f 30ff 	movne.w	r0, #4294967295
 800a21e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800a222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a226:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a228:	f042 0220 	orr.w	r2, r2, #32
 800a22c:	9241      	str	r2, [sp, #260]	; 0x104
 800a22e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a234:	9241      	str	r2, [sp, #260]	; 0x104
 800a236:	2210      	movs	r2, #16
 800a238:	2b6f      	cmp	r3, #111	; 0x6f
 800a23a:	9242      	str	r2, [sp, #264]	; 0x108
 800a23c:	bf34      	ite	cc
 800a23e:	2303      	movcc	r3, #3
 800a240:	2304      	movcs	r3, #4
 800a242:	9347      	str	r3, [sp, #284]	; 0x11c
 800a244:	6863      	ldr	r3, [r4, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	dd4e      	ble.n	800a2e8 <__svfiscanf_r+0x2b4>
 800a24a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a24c:	065b      	lsls	r3, r3, #25
 800a24e:	d404      	bmi.n	800a25a <__svfiscanf_r+0x226>
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	781a      	ldrb	r2, [r3, #0]
 800a254:	5cba      	ldrb	r2, [r7, r2]
 800a256:	0710      	lsls	r0, r2, #28
 800a258:	d456      	bmi.n	800a308 <__svfiscanf_r+0x2d4>
 800a25a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	dc65      	bgt.n	800a32c <__svfiscanf_r+0x2f8>
 800a260:	466b      	mov	r3, sp
 800a262:	4622      	mov	r2, r4
 800a264:	a941      	add	r1, sp, #260	; 0x104
 800a266:	4630      	mov	r0, r6
 800a268:	f000 f8b2 	bl	800a3d0 <_scanf_chars>
 800a26c:	2801      	cmp	r0, #1
 800a26e:	d079      	beq.n	800a364 <__svfiscanf_r+0x330>
 800a270:	2802      	cmp	r0, #2
 800a272:	f47f af12 	bne.w	800a09a <__svfiscanf_r+0x66>
 800a276:	e7c5      	b.n	800a204 <__svfiscanf_r+0x1d0>
 800a278:	220a      	movs	r2, #10
 800a27a:	e7dd      	b.n	800a238 <__svfiscanf_r+0x204>
 800a27c:	2300      	movs	r3, #0
 800a27e:	9342      	str	r3, [sp, #264]	; 0x108
 800a280:	2303      	movs	r3, #3
 800a282:	e7de      	b.n	800a242 <__svfiscanf_r+0x20e>
 800a284:	2308      	movs	r3, #8
 800a286:	9342      	str	r3, [sp, #264]	; 0x108
 800a288:	2304      	movs	r3, #4
 800a28a:	e7da      	b.n	800a242 <__svfiscanf_r+0x20e>
 800a28c:	4629      	mov	r1, r5
 800a28e:	4640      	mov	r0, r8
 800a290:	f000 fa94 	bl	800a7bc <__sccl>
 800a294:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a29a:	9341      	str	r3, [sp, #260]	; 0x104
 800a29c:	4605      	mov	r5, r0
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e7cf      	b.n	800a242 <__svfiscanf_r+0x20e>
 800a2a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a8:	9341      	str	r3, [sp, #260]	; 0x104
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	e7c9      	b.n	800a242 <__svfiscanf_r+0x20e>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	e7c7      	b.n	800a242 <__svfiscanf_r+0x20e>
 800a2b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a2b4:	06c3      	lsls	r3, r0, #27
 800a2b6:	f53f aef0 	bmi.w	800a09a <__svfiscanf_r+0x66>
 800a2ba:	9b00      	ldr	r3, [sp, #0]
 800a2bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a2be:	1d19      	adds	r1, r3, #4
 800a2c0:	9100      	str	r1, [sp, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f010 0f01 	tst.w	r0, #1
 800a2c8:	bf14      	ite	ne
 800a2ca:	801a      	strhne	r2, [r3, #0]
 800a2cc:	601a      	streq	r2, [r3, #0]
 800a2ce:	e6e4      	b.n	800a09a <__svfiscanf_r+0x66>
 800a2d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2d2:	07d8      	lsls	r0, r3, #31
 800a2d4:	d405      	bmi.n	800a2e2 <__svfiscanf_r+0x2ae>
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	0599      	lsls	r1, r3, #22
 800a2da:	d402      	bmi.n	800a2e2 <__svfiscanf_r+0x2ae>
 800a2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2de:	f7ff fd63 	bl	8009da8 <__retarget_lock_release_recursive>
 800a2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e6:	e79a      	b.n	800a21e <__svfiscanf_r+0x1ea>
 800a2e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	4798      	blx	r3
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d0aa      	beq.n	800a24a <__svfiscanf_r+0x216>
 800a2f4:	e786      	b.n	800a204 <__svfiscanf_r+0x1d0>
 800a2f6:	bf00      	nop
 800a2f8:	0800ab19 	.word	0x0800ab19
 800a2fc:	0800a689 	.word	0x0800a689
 800a300:	0800ae95 	.word	0x0800ae95
 800a304:	0800affc 	.word	0x0800affc
 800a308:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a30a:	3201      	adds	r2, #1
 800a30c:	9245      	str	r2, [sp, #276]	; 0x114
 800a30e:	6862      	ldr	r2, [r4, #4]
 800a310:	3a01      	subs	r2, #1
 800a312:	2a00      	cmp	r2, #0
 800a314:	6062      	str	r2, [r4, #4]
 800a316:	dd02      	ble.n	800a31e <__svfiscanf_r+0x2ea>
 800a318:	3301      	adds	r3, #1
 800a31a:	6023      	str	r3, [r4, #0]
 800a31c:	e798      	b.n	800a250 <__svfiscanf_r+0x21c>
 800a31e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a320:	4621      	mov	r1, r4
 800a322:	4630      	mov	r0, r6
 800a324:	4798      	blx	r3
 800a326:	2800      	cmp	r0, #0
 800a328:	d092      	beq.n	800a250 <__svfiscanf_r+0x21c>
 800a32a:	e76b      	b.n	800a204 <__svfiscanf_r+0x1d0>
 800a32c:	2b04      	cmp	r3, #4
 800a32e:	dc06      	bgt.n	800a33e <__svfiscanf_r+0x30a>
 800a330:	466b      	mov	r3, sp
 800a332:	4622      	mov	r2, r4
 800a334:	a941      	add	r1, sp, #260	; 0x104
 800a336:	4630      	mov	r0, r6
 800a338:	f000 f8a4 	bl	800a484 <_scanf_i>
 800a33c:	e796      	b.n	800a26c <__svfiscanf_r+0x238>
 800a33e:	4b0f      	ldr	r3, [pc, #60]	; (800a37c <__svfiscanf_r+0x348>)
 800a340:	2b00      	cmp	r3, #0
 800a342:	f43f aeaa 	beq.w	800a09a <__svfiscanf_r+0x66>
 800a346:	466b      	mov	r3, sp
 800a348:	4622      	mov	r2, r4
 800a34a:	a941      	add	r1, sp, #260	; 0x104
 800a34c:	4630      	mov	r0, r6
 800a34e:	f3af 8000 	nop.w
 800a352:	e78b      	b.n	800a26c <__svfiscanf_r+0x238>
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	0599      	lsls	r1, r3, #22
 800a358:	f53f af58 	bmi.w	800a20c <__svfiscanf_r+0x1d8>
 800a35c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a35e:	f7ff fd23 	bl	8009da8 <__retarget_lock_release_recursive>
 800a362:	e753      	b.n	800a20c <__svfiscanf_r+0x1d8>
 800a364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a366:	07da      	lsls	r2, r3, #31
 800a368:	d405      	bmi.n	800a376 <__svfiscanf_r+0x342>
 800a36a:	89a3      	ldrh	r3, [r4, #12]
 800a36c:	059b      	lsls	r3, r3, #22
 800a36e:	d402      	bmi.n	800a376 <__svfiscanf_r+0x342>
 800a370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a372:	f7ff fd19 	bl	8009da8 <__retarget_lock_release_recursive>
 800a376:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a378:	e751      	b.n	800a21e <__svfiscanf_r+0x1ea>
 800a37a:	bf00      	nop
 800a37c:	00000000 	.word	0x00000000

0800a380 <_vfiscanf_r>:
 800a380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a382:	460c      	mov	r4, r1
 800a384:	4605      	mov	r5, r0
 800a386:	b138      	cbz	r0, 800a398 <_vfiscanf_r+0x18>
 800a388:	6981      	ldr	r1, [r0, #24]
 800a38a:	b929      	cbnz	r1, 800a398 <_vfiscanf_r+0x18>
 800a38c:	e9cd 2300 	strd	r2, r3, [sp]
 800a390:	f7ff fc4e 	bl	8009c30 <__sinit>
 800a394:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a398:	490a      	ldr	r1, [pc, #40]	; (800a3c4 <_vfiscanf_r+0x44>)
 800a39a:	428c      	cmp	r4, r1
 800a39c:	d107      	bne.n	800a3ae <_vfiscanf_r+0x2e>
 800a39e:	686c      	ldr	r4, [r5, #4]
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	b003      	add	sp, #12
 800a3a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3aa:	f7ff be43 	b.w	800a034 <__svfiscanf_r>
 800a3ae:	4906      	ldr	r1, [pc, #24]	; (800a3c8 <_vfiscanf_r+0x48>)
 800a3b0:	428c      	cmp	r4, r1
 800a3b2:	d101      	bne.n	800a3b8 <_vfiscanf_r+0x38>
 800a3b4:	68ac      	ldr	r4, [r5, #8]
 800a3b6:	e7f3      	b.n	800a3a0 <_vfiscanf_r+0x20>
 800a3b8:	4904      	ldr	r1, [pc, #16]	; (800a3cc <_vfiscanf_r+0x4c>)
 800a3ba:	428c      	cmp	r4, r1
 800a3bc:	bf08      	it	eq
 800a3be:	68ec      	ldreq	r4, [r5, #12]
 800a3c0:	e7ee      	b.n	800a3a0 <_vfiscanf_r+0x20>
 800a3c2:	bf00      	nop
 800a3c4:	0800afbc 	.word	0x0800afbc
 800a3c8:	0800afdc 	.word	0x0800afdc
 800a3cc:	0800af9c 	.word	0x0800af9c

0800a3d0 <_scanf_chars>:
 800a3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d4:	4615      	mov	r5, r2
 800a3d6:	688a      	ldr	r2, [r1, #8]
 800a3d8:	4680      	mov	r8, r0
 800a3da:	460c      	mov	r4, r1
 800a3dc:	b932      	cbnz	r2, 800a3ec <_scanf_chars+0x1c>
 800a3de:	698a      	ldr	r2, [r1, #24]
 800a3e0:	2a00      	cmp	r2, #0
 800a3e2:	bf0c      	ite	eq
 800a3e4:	2201      	moveq	r2, #1
 800a3e6:	f04f 32ff 	movne.w	r2, #4294967295
 800a3ea:	608a      	str	r2, [r1, #8]
 800a3ec:	6822      	ldr	r2, [r4, #0]
 800a3ee:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a480 <_scanf_chars+0xb0>
 800a3f2:	06d1      	lsls	r1, r2, #27
 800a3f4:	bf5f      	itttt	pl
 800a3f6:	681a      	ldrpl	r2, [r3, #0]
 800a3f8:	1d11      	addpl	r1, r2, #4
 800a3fa:	6019      	strpl	r1, [r3, #0]
 800a3fc:	6816      	ldrpl	r6, [r2, #0]
 800a3fe:	2700      	movs	r7, #0
 800a400:	69a0      	ldr	r0, [r4, #24]
 800a402:	b188      	cbz	r0, 800a428 <_scanf_chars+0x58>
 800a404:	2801      	cmp	r0, #1
 800a406:	d107      	bne.n	800a418 <_scanf_chars+0x48>
 800a408:	682a      	ldr	r2, [r5, #0]
 800a40a:	7811      	ldrb	r1, [r2, #0]
 800a40c:	6962      	ldr	r2, [r4, #20]
 800a40e:	5c52      	ldrb	r2, [r2, r1]
 800a410:	b952      	cbnz	r2, 800a428 <_scanf_chars+0x58>
 800a412:	2f00      	cmp	r7, #0
 800a414:	d031      	beq.n	800a47a <_scanf_chars+0xaa>
 800a416:	e022      	b.n	800a45e <_scanf_chars+0x8e>
 800a418:	2802      	cmp	r0, #2
 800a41a:	d120      	bne.n	800a45e <_scanf_chars+0x8e>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a424:	071b      	lsls	r3, r3, #28
 800a426:	d41a      	bmi.n	800a45e <_scanf_chars+0x8e>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	06da      	lsls	r2, r3, #27
 800a42c:	bf5e      	ittt	pl
 800a42e:	682b      	ldrpl	r3, [r5, #0]
 800a430:	781b      	ldrbpl	r3, [r3, #0]
 800a432:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a436:	682a      	ldr	r2, [r5, #0]
 800a438:	686b      	ldr	r3, [r5, #4]
 800a43a:	3201      	adds	r2, #1
 800a43c:	602a      	str	r2, [r5, #0]
 800a43e:	68a2      	ldr	r2, [r4, #8]
 800a440:	3b01      	subs	r3, #1
 800a442:	3a01      	subs	r2, #1
 800a444:	606b      	str	r3, [r5, #4]
 800a446:	3701      	adds	r7, #1
 800a448:	60a2      	str	r2, [r4, #8]
 800a44a:	b142      	cbz	r2, 800a45e <_scanf_chars+0x8e>
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	dcd7      	bgt.n	800a400 <_scanf_chars+0x30>
 800a450:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a454:	4629      	mov	r1, r5
 800a456:	4640      	mov	r0, r8
 800a458:	4798      	blx	r3
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d0d0      	beq.n	800a400 <_scanf_chars+0x30>
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	f013 0310 	ands.w	r3, r3, #16
 800a464:	d105      	bne.n	800a472 <_scanf_chars+0xa2>
 800a466:	68e2      	ldr	r2, [r4, #12]
 800a468:	3201      	adds	r2, #1
 800a46a:	60e2      	str	r2, [r4, #12]
 800a46c:	69a2      	ldr	r2, [r4, #24]
 800a46e:	b102      	cbz	r2, 800a472 <_scanf_chars+0xa2>
 800a470:	7033      	strb	r3, [r6, #0]
 800a472:	6923      	ldr	r3, [r4, #16]
 800a474:	443b      	add	r3, r7
 800a476:	6123      	str	r3, [r4, #16]
 800a478:	2000      	movs	r0, #0
 800a47a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a47e:	bf00      	nop
 800a480:	0800ae95 	.word	0x0800ae95

0800a484 <_scanf_i>:
 800a484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a488:	4698      	mov	r8, r3
 800a48a:	4b76      	ldr	r3, [pc, #472]	; (800a664 <_scanf_i+0x1e0>)
 800a48c:	460c      	mov	r4, r1
 800a48e:	4682      	mov	sl, r0
 800a490:	4616      	mov	r6, r2
 800a492:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a496:	b087      	sub	sp, #28
 800a498:	ab03      	add	r3, sp, #12
 800a49a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a49e:	4b72      	ldr	r3, [pc, #456]	; (800a668 <_scanf_i+0x1e4>)
 800a4a0:	69a1      	ldr	r1, [r4, #24]
 800a4a2:	4a72      	ldr	r2, [pc, #456]	; (800a66c <_scanf_i+0x1e8>)
 800a4a4:	2903      	cmp	r1, #3
 800a4a6:	bf18      	it	ne
 800a4a8:	461a      	movne	r2, r3
 800a4aa:	68a3      	ldr	r3, [r4, #8]
 800a4ac:	9201      	str	r2, [sp, #4]
 800a4ae:	1e5a      	subs	r2, r3, #1
 800a4b0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a4b4:	bf88      	it	hi
 800a4b6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a4ba:	4627      	mov	r7, r4
 800a4bc:	bf82      	ittt	hi
 800a4be:	eb03 0905 	addhi.w	r9, r3, r5
 800a4c2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a4c6:	60a3      	strhi	r3, [r4, #8]
 800a4c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a4cc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a4d0:	bf98      	it	ls
 800a4d2:	f04f 0900 	movls.w	r9, #0
 800a4d6:	6023      	str	r3, [r4, #0]
 800a4d8:	463d      	mov	r5, r7
 800a4da:	f04f 0b00 	mov.w	fp, #0
 800a4de:	6831      	ldr	r1, [r6, #0]
 800a4e0:	ab03      	add	r3, sp, #12
 800a4e2:	7809      	ldrb	r1, [r1, #0]
 800a4e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a4e8:	2202      	movs	r2, #2
 800a4ea:	f7f5 fe91 	bl	8000210 <memchr>
 800a4ee:	b328      	cbz	r0, 800a53c <_scanf_i+0xb8>
 800a4f0:	f1bb 0f01 	cmp.w	fp, #1
 800a4f4:	d159      	bne.n	800a5aa <_scanf_i+0x126>
 800a4f6:	6862      	ldr	r2, [r4, #4]
 800a4f8:	b92a      	cbnz	r2, 800a506 <_scanf_i+0x82>
 800a4fa:	6822      	ldr	r2, [r4, #0]
 800a4fc:	2308      	movs	r3, #8
 800a4fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a502:	6063      	str	r3, [r4, #4]
 800a504:	6022      	str	r2, [r4, #0]
 800a506:	6822      	ldr	r2, [r4, #0]
 800a508:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a50c:	6022      	str	r2, [r4, #0]
 800a50e:	68a2      	ldr	r2, [r4, #8]
 800a510:	1e51      	subs	r1, r2, #1
 800a512:	60a1      	str	r1, [r4, #8]
 800a514:	b192      	cbz	r2, 800a53c <_scanf_i+0xb8>
 800a516:	6832      	ldr	r2, [r6, #0]
 800a518:	1c51      	adds	r1, r2, #1
 800a51a:	6031      	str	r1, [r6, #0]
 800a51c:	7812      	ldrb	r2, [r2, #0]
 800a51e:	f805 2b01 	strb.w	r2, [r5], #1
 800a522:	6872      	ldr	r2, [r6, #4]
 800a524:	3a01      	subs	r2, #1
 800a526:	2a00      	cmp	r2, #0
 800a528:	6072      	str	r2, [r6, #4]
 800a52a:	dc07      	bgt.n	800a53c <_scanf_i+0xb8>
 800a52c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a530:	4631      	mov	r1, r6
 800a532:	4650      	mov	r0, sl
 800a534:	4790      	blx	r2
 800a536:	2800      	cmp	r0, #0
 800a538:	f040 8085 	bne.w	800a646 <_scanf_i+0x1c2>
 800a53c:	f10b 0b01 	add.w	fp, fp, #1
 800a540:	f1bb 0f03 	cmp.w	fp, #3
 800a544:	d1cb      	bne.n	800a4de <_scanf_i+0x5a>
 800a546:	6863      	ldr	r3, [r4, #4]
 800a548:	b90b      	cbnz	r3, 800a54e <_scanf_i+0xca>
 800a54a:	230a      	movs	r3, #10
 800a54c:	6063      	str	r3, [r4, #4]
 800a54e:	6863      	ldr	r3, [r4, #4]
 800a550:	4947      	ldr	r1, [pc, #284]	; (800a670 <_scanf_i+0x1ec>)
 800a552:	6960      	ldr	r0, [r4, #20]
 800a554:	1ac9      	subs	r1, r1, r3
 800a556:	f000 f931 	bl	800a7bc <__sccl>
 800a55a:	f04f 0b00 	mov.w	fp, #0
 800a55e:	68a3      	ldr	r3, [r4, #8]
 800a560:	6822      	ldr	r2, [r4, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d03d      	beq.n	800a5e2 <_scanf_i+0x15e>
 800a566:	6831      	ldr	r1, [r6, #0]
 800a568:	6960      	ldr	r0, [r4, #20]
 800a56a:	f891 c000 	ldrb.w	ip, [r1]
 800a56e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a572:	2800      	cmp	r0, #0
 800a574:	d035      	beq.n	800a5e2 <_scanf_i+0x15e>
 800a576:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a57a:	d124      	bne.n	800a5c6 <_scanf_i+0x142>
 800a57c:	0510      	lsls	r0, r2, #20
 800a57e:	d522      	bpl.n	800a5c6 <_scanf_i+0x142>
 800a580:	f10b 0b01 	add.w	fp, fp, #1
 800a584:	f1b9 0f00 	cmp.w	r9, #0
 800a588:	d003      	beq.n	800a592 <_scanf_i+0x10e>
 800a58a:	3301      	adds	r3, #1
 800a58c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a590:	60a3      	str	r3, [r4, #8]
 800a592:	6873      	ldr	r3, [r6, #4]
 800a594:	3b01      	subs	r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	6073      	str	r3, [r6, #4]
 800a59a:	dd1b      	ble.n	800a5d4 <_scanf_i+0x150>
 800a59c:	6833      	ldr	r3, [r6, #0]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	6033      	str	r3, [r6, #0]
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	60a3      	str	r3, [r4, #8]
 800a5a8:	e7d9      	b.n	800a55e <_scanf_i+0xda>
 800a5aa:	f1bb 0f02 	cmp.w	fp, #2
 800a5ae:	d1ae      	bne.n	800a50e <_scanf_i+0x8a>
 800a5b0:	6822      	ldr	r2, [r4, #0]
 800a5b2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a5b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a5ba:	d1bf      	bne.n	800a53c <_scanf_i+0xb8>
 800a5bc:	2310      	movs	r3, #16
 800a5be:	6063      	str	r3, [r4, #4]
 800a5c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5c4:	e7a2      	b.n	800a50c <_scanf_i+0x88>
 800a5c6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a5ca:	6022      	str	r2, [r4, #0]
 800a5cc:	780b      	ldrb	r3, [r1, #0]
 800a5ce:	f805 3b01 	strb.w	r3, [r5], #1
 800a5d2:	e7de      	b.n	800a592 <_scanf_i+0x10e>
 800a5d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5d8:	4631      	mov	r1, r6
 800a5da:	4650      	mov	r0, sl
 800a5dc:	4798      	blx	r3
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	d0df      	beq.n	800a5a2 <_scanf_i+0x11e>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	05db      	lsls	r3, r3, #23
 800a5e6:	d50d      	bpl.n	800a604 <_scanf_i+0x180>
 800a5e8:	42bd      	cmp	r5, r7
 800a5ea:	d909      	bls.n	800a600 <_scanf_i+0x17c>
 800a5ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a5f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5f4:	4632      	mov	r2, r6
 800a5f6:	4650      	mov	r0, sl
 800a5f8:	4798      	blx	r3
 800a5fa:	f105 39ff 	add.w	r9, r5, #4294967295
 800a5fe:	464d      	mov	r5, r9
 800a600:	42bd      	cmp	r5, r7
 800a602:	d02d      	beq.n	800a660 <_scanf_i+0x1dc>
 800a604:	6822      	ldr	r2, [r4, #0]
 800a606:	f012 0210 	ands.w	r2, r2, #16
 800a60a:	d113      	bne.n	800a634 <_scanf_i+0x1b0>
 800a60c:	702a      	strb	r2, [r5, #0]
 800a60e:	6863      	ldr	r3, [r4, #4]
 800a610:	9e01      	ldr	r6, [sp, #4]
 800a612:	4639      	mov	r1, r7
 800a614:	4650      	mov	r0, sl
 800a616:	47b0      	blx	r6
 800a618:	6821      	ldr	r1, [r4, #0]
 800a61a:	f8d8 3000 	ldr.w	r3, [r8]
 800a61e:	f011 0f20 	tst.w	r1, #32
 800a622:	d013      	beq.n	800a64c <_scanf_i+0x1c8>
 800a624:	1d1a      	adds	r2, r3, #4
 800a626:	f8c8 2000 	str.w	r2, [r8]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6018      	str	r0, [r3, #0]
 800a62e:	68e3      	ldr	r3, [r4, #12]
 800a630:	3301      	adds	r3, #1
 800a632:	60e3      	str	r3, [r4, #12]
 800a634:	1bed      	subs	r5, r5, r7
 800a636:	44ab      	add	fp, r5
 800a638:	6925      	ldr	r5, [r4, #16]
 800a63a:	445d      	add	r5, fp
 800a63c:	6125      	str	r5, [r4, #16]
 800a63e:	2000      	movs	r0, #0
 800a640:	b007      	add	sp, #28
 800a642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a646:	f04f 0b00 	mov.w	fp, #0
 800a64a:	e7ca      	b.n	800a5e2 <_scanf_i+0x15e>
 800a64c:	1d1a      	adds	r2, r3, #4
 800a64e:	f8c8 2000 	str.w	r2, [r8]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f011 0f01 	tst.w	r1, #1
 800a658:	bf14      	ite	ne
 800a65a:	8018      	strhne	r0, [r3, #0]
 800a65c:	6018      	streq	r0, [r3, #0]
 800a65e:	e7e6      	b.n	800a62e <_scanf_i+0x1aa>
 800a660:	2001      	movs	r0, #1
 800a662:	e7ed      	b.n	800a640 <_scanf_i+0x1bc>
 800a664:	0800ae68 	.word	0x0800ae68
 800a668:	0800aaa1 	.word	0x0800aaa1
 800a66c:	0800a9b9 	.word	0x0800a9b9
 800a670:	0800b019 	.word	0x0800b019

0800a674 <lflush>:
 800a674:	8983      	ldrh	r3, [r0, #12]
 800a676:	f003 0309 	and.w	r3, r3, #9
 800a67a:	2b09      	cmp	r3, #9
 800a67c:	d101      	bne.n	800a682 <lflush+0xe>
 800a67e:	f7ff ba6d 	b.w	8009b5c <fflush>
 800a682:	2000      	movs	r0, #0
 800a684:	4770      	bx	lr
	...

0800a688 <__srefill_r>:
 800a688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68a:	460c      	mov	r4, r1
 800a68c:	4605      	mov	r5, r0
 800a68e:	b118      	cbz	r0, 800a698 <__srefill_r+0x10>
 800a690:	6983      	ldr	r3, [r0, #24]
 800a692:	b90b      	cbnz	r3, 800a698 <__srefill_r+0x10>
 800a694:	f7ff facc 	bl	8009c30 <__sinit>
 800a698:	4b3b      	ldr	r3, [pc, #236]	; (800a788 <__srefill_r+0x100>)
 800a69a:	429c      	cmp	r4, r3
 800a69c:	d10a      	bne.n	800a6b4 <__srefill_r+0x2c>
 800a69e:	686c      	ldr	r4, [r5, #4]
 800a6a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	6063      	str	r3, [r4, #4]
 800a6a8:	89a3      	ldrh	r3, [r4, #12]
 800a6aa:	069e      	lsls	r6, r3, #26
 800a6ac:	d50c      	bpl.n	800a6c8 <__srefill_r+0x40>
 800a6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b2:	e066      	b.n	800a782 <__srefill_r+0xfa>
 800a6b4:	4b35      	ldr	r3, [pc, #212]	; (800a78c <__srefill_r+0x104>)
 800a6b6:	429c      	cmp	r4, r3
 800a6b8:	d101      	bne.n	800a6be <__srefill_r+0x36>
 800a6ba:	68ac      	ldr	r4, [r5, #8]
 800a6bc:	e7f0      	b.n	800a6a0 <__srefill_r+0x18>
 800a6be:	4b34      	ldr	r3, [pc, #208]	; (800a790 <__srefill_r+0x108>)
 800a6c0:	429c      	cmp	r4, r3
 800a6c2:	bf08      	it	eq
 800a6c4:	68ec      	ldreq	r4, [r5, #12]
 800a6c6:	e7eb      	b.n	800a6a0 <__srefill_r+0x18>
 800a6c8:	0758      	lsls	r0, r3, #29
 800a6ca:	d448      	bmi.n	800a75e <__srefill_r+0xd6>
 800a6cc:	06d9      	lsls	r1, r3, #27
 800a6ce:	d405      	bmi.n	800a6dc <__srefill_r+0x54>
 800a6d0:	2309      	movs	r3, #9
 800a6d2:	602b      	str	r3, [r5, #0]
 800a6d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6d8:	81a3      	strh	r3, [r4, #12]
 800a6da:	e7e8      	b.n	800a6ae <__srefill_r+0x26>
 800a6dc:	071a      	lsls	r2, r3, #28
 800a6de:	d50b      	bpl.n	800a6f8 <__srefill_r+0x70>
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f7ff f9fe 	bl	8009ae4 <_fflush_r>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d1e0      	bne.n	800a6ae <__srefill_r+0x26>
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	60a0      	str	r0, [r4, #8]
 800a6f0:	f023 0308 	bic.w	r3, r3, #8
 800a6f4:	81a3      	strh	r3, [r4, #12]
 800a6f6:	61a0      	str	r0, [r4, #24]
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	f043 0304 	orr.w	r3, r3, #4
 800a6fe:	81a3      	strh	r3, [r4, #12]
 800a700:	6923      	ldr	r3, [r4, #16]
 800a702:	b91b      	cbnz	r3, 800a70c <__srefill_r+0x84>
 800a704:	4621      	mov	r1, r4
 800a706:	4628      	mov	r0, r5
 800a708:	f7ff fb74 	bl	8009df4 <__smakebuf_r>
 800a70c:	89a6      	ldrh	r6, [r4, #12]
 800a70e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800a712:	07b3      	lsls	r3, r6, #30
 800a714:	d00f      	beq.n	800a736 <__srefill_r+0xae>
 800a716:	2301      	movs	r3, #1
 800a718:	81a3      	strh	r3, [r4, #12]
 800a71a:	4b1e      	ldr	r3, [pc, #120]	; (800a794 <__srefill_r+0x10c>)
 800a71c:	491e      	ldr	r1, [pc, #120]	; (800a798 <__srefill_r+0x110>)
 800a71e:	6818      	ldr	r0, [r3, #0]
 800a720:	f006 0609 	and.w	r6, r6, #9
 800a724:	f7ff fb02 	bl	8009d2c <_fwalk>
 800a728:	2e09      	cmp	r6, #9
 800a72a:	81a7      	strh	r7, [r4, #12]
 800a72c:	d103      	bne.n	800a736 <__srefill_r+0xae>
 800a72e:	4621      	mov	r1, r4
 800a730:	4628      	mov	r0, r5
 800a732:	f7ff f951 	bl	80099d8 <__sflush_r>
 800a736:	6922      	ldr	r2, [r4, #16]
 800a738:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a73a:	6963      	ldr	r3, [r4, #20]
 800a73c:	6a21      	ldr	r1, [r4, #32]
 800a73e:	6022      	str	r2, [r4, #0]
 800a740:	4628      	mov	r0, r5
 800a742:	47b0      	blx	r6
 800a744:	2800      	cmp	r0, #0
 800a746:	6060      	str	r0, [r4, #4]
 800a748:	dc1c      	bgt.n	800a784 <__srefill_r+0xfc>
 800a74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a74e:	bf17      	itett	ne
 800a750:	2200      	movne	r2, #0
 800a752:	f043 0320 	orreq.w	r3, r3, #32
 800a756:	6062      	strne	r2, [r4, #4]
 800a758:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800a75c:	e7bc      	b.n	800a6d8 <__srefill_r+0x50>
 800a75e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a760:	2900      	cmp	r1, #0
 800a762:	d0cd      	beq.n	800a700 <__srefill_r+0x78>
 800a764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a768:	4299      	cmp	r1, r3
 800a76a:	d002      	beq.n	800a772 <__srefill_r+0xea>
 800a76c:	4628      	mov	r0, r5
 800a76e:	f7ff fb81 	bl	8009e74 <_free_r>
 800a772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a774:	6063      	str	r3, [r4, #4]
 800a776:	2000      	movs	r0, #0
 800a778:	6360      	str	r0, [r4, #52]	; 0x34
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0c0      	beq.n	800a700 <__srefill_r+0x78>
 800a77e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a784:	2000      	movs	r0, #0
 800a786:	e7fc      	b.n	800a782 <__srefill_r+0xfa>
 800a788:	0800afbc 	.word	0x0800afbc
 800a78c:	0800afdc 	.word	0x0800afdc
 800a790:	0800af9c 	.word	0x0800af9c
 800a794:	0800af98 	.word	0x0800af98
 800a798:	0800a675 	.word	0x0800a675

0800a79c <_sbrk_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d06      	ldr	r5, [pc, #24]	; (800a7b8 <_sbrk_r+0x1c>)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	602b      	str	r3, [r5, #0]
 800a7a8:	f7f7 f9a2 	bl	8001af0 <_sbrk>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_sbrk_r+0x1a>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_sbrk_r+0x1a>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	2000123c 	.word	0x2000123c

0800a7bc <__sccl>:
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	780b      	ldrb	r3, [r1, #0]
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	2b5e      	cmp	r3, #94	; 0x5e
 800a7c4:	bf0b      	itete	eq
 800a7c6:	784b      	ldrbeq	r3, [r1, #1]
 800a7c8:	1c48      	addne	r0, r1, #1
 800a7ca:	1c88      	addeq	r0, r1, #2
 800a7cc:	2200      	movne	r2, #0
 800a7ce:	bf08      	it	eq
 800a7d0:	2201      	moveq	r2, #1
 800a7d2:	1e61      	subs	r1, r4, #1
 800a7d4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a7d8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a7dc:	42a9      	cmp	r1, r5
 800a7de:	d1fb      	bne.n	800a7d8 <__sccl+0x1c>
 800a7e0:	b90b      	cbnz	r3, 800a7e6 <__sccl+0x2a>
 800a7e2:	3801      	subs	r0, #1
 800a7e4:	bd70      	pop	{r4, r5, r6, pc}
 800a7e6:	f082 0201 	eor.w	r2, r2, #1
 800a7ea:	54e2      	strb	r2, [r4, r3]
 800a7ec:	4605      	mov	r5, r0
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a7f4:	292d      	cmp	r1, #45	; 0x2d
 800a7f6:	d006      	beq.n	800a806 <__sccl+0x4a>
 800a7f8:	295d      	cmp	r1, #93	; 0x5d
 800a7fa:	d0f3      	beq.n	800a7e4 <__sccl+0x28>
 800a7fc:	b909      	cbnz	r1, 800a802 <__sccl+0x46>
 800a7fe:	4628      	mov	r0, r5
 800a800:	e7f0      	b.n	800a7e4 <__sccl+0x28>
 800a802:	460b      	mov	r3, r1
 800a804:	e7f1      	b.n	800a7ea <__sccl+0x2e>
 800a806:	786e      	ldrb	r6, [r5, #1]
 800a808:	2e5d      	cmp	r6, #93	; 0x5d
 800a80a:	d0fa      	beq.n	800a802 <__sccl+0x46>
 800a80c:	42b3      	cmp	r3, r6
 800a80e:	dcf8      	bgt.n	800a802 <__sccl+0x46>
 800a810:	3502      	adds	r5, #2
 800a812:	4619      	mov	r1, r3
 800a814:	3101      	adds	r1, #1
 800a816:	428e      	cmp	r6, r1
 800a818:	5462      	strb	r2, [r4, r1]
 800a81a:	dcfb      	bgt.n	800a814 <__sccl+0x58>
 800a81c:	1af1      	subs	r1, r6, r3
 800a81e:	3901      	subs	r1, #1
 800a820:	1c58      	adds	r0, r3, #1
 800a822:	42b3      	cmp	r3, r6
 800a824:	bfa8      	it	ge
 800a826:	2100      	movge	r1, #0
 800a828:	1843      	adds	r3, r0, r1
 800a82a:	e7e0      	b.n	800a7ee <__sccl+0x32>

0800a82c <__sread>:
 800a82c:	b510      	push	{r4, lr}
 800a82e:	460c      	mov	r4, r1
 800a830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a834:	f000 fa9a 	bl	800ad6c <_read_r>
 800a838:	2800      	cmp	r0, #0
 800a83a:	bfab      	itete	ge
 800a83c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a83e:	89a3      	ldrhlt	r3, [r4, #12]
 800a840:	181b      	addge	r3, r3, r0
 800a842:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a846:	bfac      	ite	ge
 800a848:	6563      	strge	r3, [r4, #84]	; 0x54
 800a84a:	81a3      	strhlt	r3, [r4, #12]
 800a84c:	bd10      	pop	{r4, pc}

0800a84e <__swrite>:
 800a84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a852:	461f      	mov	r7, r3
 800a854:	898b      	ldrh	r3, [r1, #12]
 800a856:	05db      	lsls	r3, r3, #23
 800a858:	4605      	mov	r5, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	4616      	mov	r6, r2
 800a85e:	d505      	bpl.n	800a86c <__swrite+0x1e>
 800a860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a864:	2302      	movs	r3, #2
 800a866:	2200      	movs	r2, #0
 800a868:	f000 fa32 	bl	800acd0 <_lseek_r>
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a872:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a876:	81a3      	strh	r3, [r4, #12]
 800a878:	4632      	mov	r2, r6
 800a87a:	463b      	mov	r3, r7
 800a87c:	4628      	mov	r0, r5
 800a87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a882:	f000 b9e1 	b.w	800ac48 <_write_r>

0800a886 <__sseek>:
 800a886:	b510      	push	{r4, lr}
 800a888:	460c      	mov	r4, r1
 800a88a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a88e:	f000 fa1f 	bl	800acd0 <_lseek_r>
 800a892:	1c43      	adds	r3, r0, #1
 800a894:	89a3      	ldrh	r3, [r4, #12]
 800a896:	bf15      	itete	ne
 800a898:	6560      	strne	r0, [r4, #84]	; 0x54
 800a89a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a89e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8a2:	81a3      	strheq	r3, [r4, #12]
 800a8a4:	bf18      	it	ne
 800a8a6:	81a3      	strhne	r3, [r4, #12]
 800a8a8:	bd10      	pop	{r4, pc}

0800a8aa <__sclose>:
 800a8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ae:	f000 b9dd 	b.w	800ac6c <_close_r>
	...

0800a8b4 <_strtol_l.constprop.0>:
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ba:	d001      	beq.n	800a8c0 <_strtol_l.constprop.0+0xc>
 800a8bc:	2b24      	cmp	r3, #36	; 0x24
 800a8be:	d906      	bls.n	800a8ce <_strtol_l.constprop.0+0x1a>
 800a8c0:	f7fe fee8 	bl	8009694 <__errno>
 800a8c4:	2316      	movs	r3, #22
 800a8c6:	6003      	str	r3, [r0, #0]
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a9b4 <_strtol_l.constprop.0+0x100>
 800a8d2:	460d      	mov	r5, r1
 800a8d4:	462e      	mov	r6, r5
 800a8d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8da:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a8de:	f017 0708 	ands.w	r7, r7, #8
 800a8e2:	d1f7      	bne.n	800a8d4 <_strtol_l.constprop.0+0x20>
 800a8e4:	2c2d      	cmp	r4, #45	; 0x2d
 800a8e6:	d132      	bne.n	800a94e <_strtol_l.constprop.0+0x9a>
 800a8e8:	782c      	ldrb	r4, [r5, #0]
 800a8ea:	2701      	movs	r7, #1
 800a8ec:	1cb5      	adds	r5, r6, #2
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d05b      	beq.n	800a9aa <_strtol_l.constprop.0+0xf6>
 800a8f2:	2b10      	cmp	r3, #16
 800a8f4:	d109      	bne.n	800a90a <_strtol_l.constprop.0+0x56>
 800a8f6:	2c30      	cmp	r4, #48	; 0x30
 800a8f8:	d107      	bne.n	800a90a <_strtol_l.constprop.0+0x56>
 800a8fa:	782c      	ldrb	r4, [r5, #0]
 800a8fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a900:	2c58      	cmp	r4, #88	; 0x58
 800a902:	d14d      	bne.n	800a9a0 <_strtol_l.constprop.0+0xec>
 800a904:	786c      	ldrb	r4, [r5, #1]
 800a906:	2310      	movs	r3, #16
 800a908:	3502      	adds	r5, #2
 800a90a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a90e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a912:	f04f 0c00 	mov.w	ip, #0
 800a916:	fbb8 f9f3 	udiv	r9, r8, r3
 800a91a:	4666      	mov	r6, ip
 800a91c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a920:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a924:	f1be 0f09 	cmp.w	lr, #9
 800a928:	d816      	bhi.n	800a958 <_strtol_l.constprop.0+0xa4>
 800a92a:	4674      	mov	r4, lr
 800a92c:	42a3      	cmp	r3, r4
 800a92e:	dd24      	ble.n	800a97a <_strtol_l.constprop.0+0xc6>
 800a930:	f1bc 0f00 	cmp.w	ip, #0
 800a934:	db1e      	blt.n	800a974 <_strtol_l.constprop.0+0xc0>
 800a936:	45b1      	cmp	r9, r6
 800a938:	d31c      	bcc.n	800a974 <_strtol_l.constprop.0+0xc0>
 800a93a:	d101      	bne.n	800a940 <_strtol_l.constprop.0+0x8c>
 800a93c:	45a2      	cmp	sl, r4
 800a93e:	db19      	blt.n	800a974 <_strtol_l.constprop.0+0xc0>
 800a940:	fb06 4603 	mla	r6, r6, r3, r4
 800a944:	f04f 0c01 	mov.w	ip, #1
 800a948:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a94c:	e7e8      	b.n	800a920 <_strtol_l.constprop.0+0x6c>
 800a94e:	2c2b      	cmp	r4, #43	; 0x2b
 800a950:	bf04      	itt	eq
 800a952:	782c      	ldrbeq	r4, [r5, #0]
 800a954:	1cb5      	addeq	r5, r6, #2
 800a956:	e7ca      	b.n	800a8ee <_strtol_l.constprop.0+0x3a>
 800a958:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a95c:	f1be 0f19 	cmp.w	lr, #25
 800a960:	d801      	bhi.n	800a966 <_strtol_l.constprop.0+0xb2>
 800a962:	3c37      	subs	r4, #55	; 0x37
 800a964:	e7e2      	b.n	800a92c <_strtol_l.constprop.0+0x78>
 800a966:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a96a:	f1be 0f19 	cmp.w	lr, #25
 800a96e:	d804      	bhi.n	800a97a <_strtol_l.constprop.0+0xc6>
 800a970:	3c57      	subs	r4, #87	; 0x57
 800a972:	e7db      	b.n	800a92c <_strtol_l.constprop.0+0x78>
 800a974:	f04f 3cff 	mov.w	ip, #4294967295
 800a978:	e7e6      	b.n	800a948 <_strtol_l.constprop.0+0x94>
 800a97a:	f1bc 0f00 	cmp.w	ip, #0
 800a97e:	da05      	bge.n	800a98c <_strtol_l.constprop.0+0xd8>
 800a980:	2322      	movs	r3, #34	; 0x22
 800a982:	6003      	str	r3, [r0, #0]
 800a984:	4646      	mov	r6, r8
 800a986:	b942      	cbnz	r2, 800a99a <_strtol_l.constprop.0+0xe6>
 800a988:	4630      	mov	r0, r6
 800a98a:	e79e      	b.n	800a8ca <_strtol_l.constprop.0+0x16>
 800a98c:	b107      	cbz	r7, 800a990 <_strtol_l.constprop.0+0xdc>
 800a98e:	4276      	negs	r6, r6
 800a990:	2a00      	cmp	r2, #0
 800a992:	d0f9      	beq.n	800a988 <_strtol_l.constprop.0+0xd4>
 800a994:	f1bc 0f00 	cmp.w	ip, #0
 800a998:	d000      	beq.n	800a99c <_strtol_l.constprop.0+0xe8>
 800a99a:	1e69      	subs	r1, r5, #1
 800a99c:	6011      	str	r1, [r2, #0]
 800a99e:	e7f3      	b.n	800a988 <_strtol_l.constprop.0+0xd4>
 800a9a0:	2430      	movs	r4, #48	; 0x30
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1b1      	bne.n	800a90a <_strtol_l.constprop.0+0x56>
 800a9a6:	2308      	movs	r3, #8
 800a9a8:	e7af      	b.n	800a90a <_strtol_l.constprop.0+0x56>
 800a9aa:	2c30      	cmp	r4, #48	; 0x30
 800a9ac:	d0a5      	beq.n	800a8fa <_strtol_l.constprop.0+0x46>
 800a9ae:	230a      	movs	r3, #10
 800a9b0:	e7ab      	b.n	800a90a <_strtol_l.constprop.0+0x56>
 800a9b2:	bf00      	nop
 800a9b4:	0800ae95 	.word	0x0800ae95

0800a9b8 <_strtol_r>:
 800a9b8:	f7ff bf7c 	b.w	800a8b4 <_strtol_l.constprop.0>

0800a9bc <_strtoul_l.constprop.0>:
 800a9bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9c0:	4f36      	ldr	r7, [pc, #216]	; (800aa9c <_strtoul_l.constprop.0+0xe0>)
 800a9c2:	4686      	mov	lr, r0
 800a9c4:	460d      	mov	r5, r1
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9cc:	5de6      	ldrb	r6, [r4, r7]
 800a9ce:	f016 0608 	ands.w	r6, r6, #8
 800a9d2:	d1f8      	bne.n	800a9c6 <_strtoul_l.constprop.0+0xa>
 800a9d4:	2c2d      	cmp	r4, #45	; 0x2d
 800a9d6:	d12f      	bne.n	800aa38 <_strtoul_l.constprop.0+0x7c>
 800a9d8:	782c      	ldrb	r4, [r5, #0]
 800a9da:	2601      	movs	r6, #1
 800a9dc:	1c85      	adds	r5, r0, #2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d057      	beq.n	800aa92 <_strtoul_l.constprop.0+0xd6>
 800a9e2:	2b10      	cmp	r3, #16
 800a9e4:	d109      	bne.n	800a9fa <_strtoul_l.constprop.0+0x3e>
 800a9e6:	2c30      	cmp	r4, #48	; 0x30
 800a9e8:	d107      	bne.n	800a9fa <_strtoul_l.constprop.0+0x3e>
 800a9ea:	7828      	ldrb	r0, [r5, #0]
 800a9ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a9f0:	2858      	cmp	r0, #88	; 0x58
 800a9f2:	d149      	bne.n	800aa88 <_strtoul_l.constprop.0+0xcc>
 800a9f4:	786c      	ldrb	r4, [r5, #1]
 800a9f6:	2310      	movs	r3, #16
 800a9f8:	3502      	adds	r5, #2
 800a9fa:	f04f 38ff 	mov.w	r8, #4294967295
 800a9fe:	2700      	movs	r7, #0
 800aa00:	fbb8 f8f3 	udiv	r8, r8, r3
 800aa04:	fb03 f908 	mul.w	r9, r3, r8
 800aa08:	ea6f 0909 	mvn.w	r9, r9
 800aa0c:	4638      	mov	r0, r7
 800aa0e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aa12:	f1bc 0f09 	cmp.w	ip, #9
 800aa16:	d814      	bhi.n	800aa42 <_strtoul_l.constprop.0+0x86>
 800aa18:	4664      	mov	r4, ip
 800aa1a:	42a3      	cmp	r3, r4
 800aa1c:	dd22      	ble.n	800aa64 <_strtoul_l.constprop.0+0xa8>
 800aa1e:	2f00      	cmp	r7, #0
 800aa20:	db1d      	blt.n	800aa5e <_strtoul_l.constprop.0+0xa2>
 800aa22:	4580      	cmp	r8, r0
 800aa24:	d31b      	bcc.n	800aa5e <_strtoul_l.constprop.0+0xa2>
 800aa26:	d101      	bne.n	800aa2c <_strtoul_l.constprop.0+0x70>
 800aa28:	45a1      	cmp	r9, r4
 800aa2a:	db18      	blt.n	800aa5e <_strtoul_l.constprop.0+0xa2>
 800aa2c:	fb00 4003 	mla	r0, r0, r3, r4
 800aa30:	2701      	movs	r7, #1
 800aa32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa36:	e7ea      	b.n	800aa0e <_strtoul_l.constprop.0+0x52>
 800aa38:	2c2b      	cmp	r4, #43	; 0x2b
 800aa3a:	bf04      	itt	eq
 800aa3c:	782c      	ldrbeq	r4, [r5, #0]
 800aa3e:	1c85      	addeq	r5, r0, #2
 800aa40:	e7cd      	b.n	800a9de <_strtoul_l.constprop.0+0x22>
 800aa42:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800aa46:	f1bc 0f19 	cmp.w	ip, #25
 800aa4a:	d801      	bhi.n	800aa50 <_strtoul_l.constprop.0+0x94>
 800aa4c:	3c37      	subs	r4, #55	; 0x37
 800aa4e:	e7e4      	b.n	800aa1a <_strtoul_l.constprop.0+0x5e>
 800aa50:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800aa54:	f1bc 0f19 	cmp.w	ip, #25
 800aa58:	d804      	bhi.n	800aa64 <_strtoul_l.constprop.0+0xa8>
 800aa5a:	3c57      	subs	r4, #87	; 0x57
 800aa5c:	e7dd      	b.n	800aa1a <_strtoul_l.constprop.0+0x5e>
 800aa5e:	f04f 37ff 	mov.w	r7, #4294967295
 800aa62:	e7e6      	b.n	800aa32 <_strtoul_l.constprop.0+0x76>
 800aa64:	2f00      	cmp	r7, #0
 800aa66:	da07      	bge.n	800aa78 <_strtoul_l.constprop.0+0xbc>
 800aa68:	2322      	movs	r3, #34	; 0x22
 800aa6a:	f8ce 3000 	str.w	r3, [lr]
 800aa6e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa72:	b932      	cbnz	r2, 800aa82 <_strtoul_l.constprop.0+0xc6>
 800aa74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa78:	b106      	cbz	r6, 800aa7c <_strtoul_l.constprop.0+0xc0>
 800aa7a:	4240      	negs	r0, r0
 800aa7c:	2a00      	cmp	r2, #0
 800aa7e:	d0f9      	beq.n	800aa74 <_strtoul_l.constprop.0+0xb8>
 800aa80:	b107      	cbz	r7, 800aa84 <_strtoul_l.constprop.0+0xc8>
 800aa82:	1e69      	subs	r1, r5, #1
 800aa84:	6011      	str	r1, [r2, #0]
 800aa86:	e7f5      	b.n	800aa74 <_strtoul_l.constprop.0+0xb8>
 800aa88:	2430      	movs	r4, #48	; 0x30
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1b5      	bne.n	800a9fa <_strtoul_l.constprop.0+0x3e>
 800aa8e:	2308      	movs	r3, #8
 800aa90:	e7b3      	b.n	800a9fa <_strtoul_l.constprop.0+0x3e>
 800aa92:	2c30      	cmp	r4, #48	; 0x30
 800aa94:	d0a9      	beq.n	800a9ea <_strtoul_l.constprop.0+0x2e>
 800aa96:	230a      	movs	r3, #10
 800aa98:	e7af      	b.n	800a9fa <_strtoul_l.constprop.0+0x3e>
 800aa9a:	bf00      	nop
 800aa9c:	0800ae95 	.word	0x0800ae95

0800aaa0 <_strtoul_r>:
 800aaa0:	f7ff bf8c 	b.w	800a9bc <_strtoul_l.constprop.0>

0800aaa4 <__submore>:
 800aaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800aaac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aab0:	4299      	cmp	r1, r3
 800aab2:	d11d      	bne.n	800aaf0 <__submore+0x4c>
 800aab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800aab8:	f7ff fa48 	bl	8009f4c <_malloc_r>
 800aabc:	b918      	cbnz	r0, 800aac6 <__submore+0x22>
 800aabe:	f04f 30ff 	mov.w	r0, #4294967295
 800aac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaca:	63a3      	str	r3, [r4, #56]	; 0x38
 800aacc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800aad0:	6360      	str	r0, [r4, #52]	; 0x34
 800aad2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800aad6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800aada:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800aade:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aae2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800aae6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aaea:	6020      	str	r0, [r4, #0]
 800aaec:	2000      	movs	r0, #0
 800aaee:	e7e8      	b.n	800aac2 <__submore+0x1e>
 800aaf0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aaf2:	0077      	lsls	r7, r6, #1
 800aaf4:	463a      	mov	r2, r7
 800aaf6:	f000 f909 	bl	800ad0c <_realloc_r>
 800aafa:	4605      	mov	r5, r0
 800aafc:	2800      	cmp	r0, #0
 800aafe:	d0de      	beq.n	800aabe <__submore+0x1a>
 800ab00:	eb00 0806 	add.w	r8, r0, r6
 800ab04:	4601      	mov	r1, r0
 800ab06:	4632      	mov	r2, r6
 800ab08:	4640      	mov	r0, r8
 800ab0a:	f7fe fded 	bl	80096e8 <memcpy>
 800ab0e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ab12:	f8c4 8000 	str.w	r8, [r4]
 800ab16:	e7e9      	b.n	800aaec <__submore+0x48>

0800ab18 <_ungetc_r>:
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	4614      	mov	r4, r2
 800ab1c:	1c4a      	adds	r2, r1, #1
 800ab1e:	4606      	mov	r6, r0
 800ab20:	460d      	mov	r5, r1
 800ab22:	d103      	bne.n	800ab2c <_ungetc_r+0x14>
 800ab24:	f04f 35ff 	mov.w	r5, #4294967295
 800ab28:	4628      	mov	r0, r5
 800ab2a:	bd70      	pop	{r4, r5, r6, pc}
 800ab2c:	b118      	cbz	r0, 800ab36 <_ungetc_r+0x1e>
 800ab2e:	6983      	ldr	r3, [r0, #24]
 800ab30:	b90b      	cbnz	r3, 800ab36 <_ungetc_r+0x1e>
 800ab32:	f7ff f87d 	bl	8009c30 <__sinit>
 800ab36:	4b41      	ldr	r3, [pc, #260]	; (800ac3c <_ungetc_r+0x124>)
 800ab38:	429c      	cmp	r4, r3
 800ab3a:	d11d      	bne.n	800ab78 <_ungetc_r+0x60>
 800ab3c:	6874      	ldr	r4, [r6, #4]
 800ab3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab40:	07db      	lsls	r3, r3, #31
 800ab42:	d405      	bmi.n	800ab50 <_ungetc_r+0x38>
 800ab44:	89a3      	ldrh	r3, [r4, #12]
 800ab46:	0598      	lsls	r0, r3, #22
 800ab48:	d402      	bmi.n	800ab50 <_ungetc_r+0x38>
 800ab4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab4c:	f7ff f92b 	bl	8009da6 <__retarget_lock_acquire_recursive>
 800ab50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab54:	f023 0320 	bic.w	r3, r3, #32
 800ab58:	0759      	lsls	r1, r3, #29
 800ab5a:	81a3      	strh	r3, [r4, #12]
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	d42d      	bmi.n	800abbc <_ungetc_r+0xa4>
 800ab60:	06d3      	lsls	r3, r2, #27
 800ab62:	d413      	bmi.n	800ab8c <_ungetc_r+0x74>
 800ab64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab66:	07dd      	lsls	r5, r3, #31
 800ab68:	d4dc      	bmi.n	800ab24 <_ungetc_r+0xc>
 800ab6a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ab6e:	d1d9      	bne.n	800ab24 <_ungetc_r+0xc>
 800ab70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab72:	f7ff f919 	bl	8009da8 <__retarget_lock_release_recursive>
 800ab76:	e7d5      	b.n	800ab24 <_ungetc_r+0xc>
 800ab78:	4b31      	ldr	r3, [pc, #196]	; (800ac40 <_ungetc_r+0x128>)
 800ab7a:	429c      	cmp	r4, r3
 800ab7c:	d101      	bne.n	800ab82 <_ungetc_r+0x6a>
 800ab7e:	68b4      	ldr	r4, [r6, #8]
 800ab80:	e7dd      	b.n	800ab3e <_ungetc_r+0x26>
 800ab82:	4b30      	ldr	r3, [pc, #192]	; (800ac44 <_ungetc_r+0x12c>)
 800ab84:	429c      	cmp	r4, r3
 800ab86:	bf08      	it	eq
 800ab88:	68f4      	ldreq	r4, [r6, #12]
 800ab8a:	e7d8      	b.n	800ab3e <_ungetc_r+0x26>
 800ab8c:	0710      	lsls	r0, r2, #28
 800ab8e:	d511      	bpl.n	800abb4 <_ungetc_r+0x9c>
 800ab90:	4621      	mov	r1, r4
 800ab92:	4630      	mov	r0, r6
 800ab94:	f7fe ffa6 	bl	8009ae4 <_fflush_r>
 800ab98:	b130      	cbz	r0, 800aba8 <_ungetc_r+0x90>
 800ab9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab9c:	07d9      	lsls	r1, r3, #31
 800ab9e:	d4c1      	bmi.n	800ab24 <_ungetc_r+0xc>
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	f413 7f00 	tst.w	r3, #512	; 0x200
 800aba6:	e7e2      	b.n	800ab6e <_ungetc_r+0x56>
 800aba8:	89a3      	ldrh	r3, [r4, #12]
 800abaa:	60a0      	str	r0, [r4, #8]
 800abac:	f023 0308 	bic.w	r3, r3, #8
 800abb0:	81a3      	strh	r3, [r4, #12]
 800abb2:	61a0      	str	r0, [r4, #24]
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	f043 0304 	orr.w	r3, r3, #4
 800abba:	81a3      	strh	r3, [r4, #12]
 800abbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abbe:	6862      	ldr	r2, [r4, #4]
 800abc0:	b2ed      	uxtb	r5, r5
 800abc2:	b1d3      	cbz	r3, 800abfa <_ungetc_r+0xe2>
 800abc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800abc6:	4293      	cmp	r3, r2
 800abc8:	dc05      	bgt.n	800abd6 <_ungetc_r+0xbe>
 800abca:	4621      	mov	r1, r4
 800abcc:	4630      	mov	r0, r6
 800abce:	f7ff ff69 	bl	800aaa4 <__submore>
 800abd2:	2800      	cmp	r0, #0
 800abd4:	d1e1      	bne.n	800ab9a <_ungetc_r+0x82>
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	1e5a      	subs	r2, r3, #1
 800abda:	6022      	str	r2, [r4, #0]
 800abdc:	f803 5c01 	strb.w	r5, [r3, #-1]
 800abe0:	6863      	ldr	r3, [r4, #4]
 800abe2:	3301      	adds	r3, #1
 800abe4:	6063      	str	r3, [r4, #4]
 800abe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abe8:	07da      	lsls	r2, r3, #31
 800abea:	d49d      	bmi.n	800ab28 <_ungetc_r+0x10>
 800abec:	89a3      	ldrh	r3, [r4, #12]
 800abee:	059b      	lsls	r3, r3, #22
 800abf0:	d49a      	bmi.n	800ab28 <_ungetc_r+0x10>
 800abf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abf4:	f7ff f8d8 	bl	8009da8 <__retarget_lock_release_recursive>
 800abf8:	e796      	b.n	800ab28 <_ungetc_r+0x10>
 800abfa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800abfc:	6920      	ldr	r0, [r4, #16]
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	f001 0101 	and.w	r1, r1, #1
 800ac04:	b160      	cbz	r0, 800ac20 <_ungetc_r+0x108>
 800ac06:	4298      	cmp	r0, r3
 800ac08:	d20a      	bcs.n	800ac20 <_ungetc_r+0x108>
 800ac0a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800ac0e:	42a8      	cmp	r0, r5
 800ac10:	d106      	bne.n	800ac20 <_ungetc_r+0x108>
 800ac12:	3b01      	subs	r3, #1
 800ac14:	3201      	adds	r2, #1
 800ac16:	6023      	str	r3, [r4, #0]
 800ac18:	6062      	str	r2, [r4, #4]
 800ac1a:	2900      	cmp	r1, #0
 800ac1c:	d184      	bne.n	800ab28 <_ungetc_r+0x10>
 800ac1e:	e7e5      	b.n	800abec <_ungetc_r+0xd4>
 800ac20:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ac24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac28:	6363      	str	r3, [r4, #52]	; 0x34
 800ac2a:	2303      	movs	r3, #3
 800ac2c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ac2e:	4623      	mov	r3, r4
 800ac30:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	2301      	movs	r3, #1
 800ac38:	6063      	str	r3, [r4, #4]
 800ac3a:	e7ee      	b.n	800ac1a <_ungetc_r+0x102>
 800ac3c:	0800afbc 	.word	0x0800afbc
 800ac40:	0800afdc 	.word	0x0800afdc
 800ac44:	0800af9c 	.word	0x0800af9c

0800ac48 <_write_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4d07      	ldr	r5, [pc, #28]	; (800ac68 <_write_r+0x20>)
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	4608      	mov	r0, r1
 800ac50:	4611      	mov	r1, r2
 800ac52:	2200      	movs	r2, #0
 800ac54:	602a      	str	r2, [r5, #0]
 800ac56:	461a      	mov	r2, r3
 800ac58:	f7fe fbb2 	bl	80093c0 <_write>
 800ac5c:	1c43      	adds	r3, r0, #1
 800ac5e:	d102      	bne.n	800ac66 <_write_r+0x1e>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	b103      	cbz	r3, 800ac66 <_write_r+0x1e>
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	bd38      	pop	{r3, r4, r5, pc}
 800ac68:	2000123c 	.word	0x2000123c

0800ac6c <_close_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4d06      	ldr	r5, [pc, #24]	; (800ac88 <_close_r+0x1c>)
 800ac70:	2300      	movs	r3, #0
 800ac72:	4604      	mov	r4, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	602b      	str	r3, [r5, #0]
 800ac78:	f7f6 ff06 	bl	8001a88 <_close>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_close_r+0x1a>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_close_r+0x1a>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	2000123c 	.word	0x2000123c

0800ac8c <_fstat_r>:
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	4d07      	ldr	r5, [pc, #28]	; (800acac <_fstat_r+0x20>)
 800ac90:	2300      	movs	r3, #0
 800ac92:	4604      	mov	r4, r0
 800ac94:	4608      	mov	r0, r1
 800ac96:	4611      	mov	r1, r2
 800ac98:	602b      	str	r3, [r5, #0]
 800ac9a:	f7f6 ff01 	bl	8001aa0 <_fstat>
 800ac9e:	1c43      	adds	r3, r0, #1
 800aca0:	d102      	bne.n	800aca8 <_fstat_r+0x1c>
 800aca2:	682b      	ldr	r3, [r5, #0]
 800aca4:	b103      	cbz	r3, 800aca8 <_fstat_r+0x1c>
 800aca6:	6023      	str	r3, [r4, #0]
 800aca8:	bd38      	pop	{r3, r4, r5, pc}
 800acaa:	bf00      	nop
 800acac:	2000123c 	.word	0x2000123c

0800acb0 <_isatty_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4d06      	ldr	r5, [pc, #24]	; (800accc <_isatty_r+0x1c>)
 800acb4:	2300      	movs	r3, #0
 800acb6:	4604      	mov	r4, r0
 800acb8:	4608      	mov	r0, r1
 800acba:	602b      	str	r3, [r5, #0]
 800acbc:	f7f6 ff00 	bl	8001ac0 <_isatty>
 800acc0:	1c43      	adds	r3, r0, #1
 800acc2:	d102      	bne.n	800acca <_isatty_r+0x1a>
 800acc4:	682b      	ldr	r3, [r5, #0]
 800acc6:	b103      	cbz	r3, 800acca <_isatty_r+0x1a>
 800acc8:	6023      	str	r3, [r4, #0]
 800acca:	bd38      	pop	{r3, r4, r5, pc}
 800accc:	2000123c 	.word	0x2000123c

0800acd0 <_lseek_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d07      	ldr	r5, [pc, #28]	; (800acf0 <_lseek_r+0x20>)
 800acd4:	4604      	mov	r4, r0
 800acd6:	4608      	mov	r0, r1
 800acd8:	4611      	mov	r1, r2
 800acda:	2200      	movs	r2, #0
 800acdc:	602a      	str	r2, [r5, #0]
 800acde:	461a      	mov	r2, r3
 800ace0:	f7f6 fef9 	bl	8001ad6 <_lseek>
 800ace4:	1c43      	adds	r3, r0, #1
 800ace6:	d102      	bne.n	800acee <_lseek_r+0x1e>
 800ace8:	682b      	ldr	r3, [r5, #0]
 800acea:	b103      	cbz	r3, 800acee <_lseek_r+0x1e>
 800acec:	6023      	str	r3, [r4, #0]
 800acee:	bd38      	pop	{r3, r4, r5, pc}
 800acf0:	2000123c 	.word	0x2000123c

0800acf4 <__malloc_lock>:
 800acf4:	4801      	ldr	r0, [pc, #4]	; (800acfc <__malloc_lock+0x8>)
 800acf6:	f7ff b856 	b.w	8009da6 <__retarget_lock_acquire_recursive>
 800acfa:	bf00      	nop
 800acfc:	2000122f 	.word	0x2000122f

0800ad00 <__malloc_unlock>:
 800ad00:	4801      	ldr	r0, [pc, #4]	; (800ad08 <__malloc_unlock+0x8>)
 800ad02:	f7ff b851 	b.w	8009da8 <__retarget_lock_release_recursive>
 800ad06:	bf00      	nop
 800ad08:	2000122f 	.word	0x2000122f

0800ad0c <_realloc_r>:
 800ad0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad10:	4680      	mov	r8, r0
 800ad12:	4614      	mov	r4, r2
 800ad14:	460e      	mov	r6, r1
 800ad16:	b921      	cbnz	r1, 800ad22 <_realloc_r+0x16>
 800ad18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	f7ff b915 	b.w	8009f4c <_malloc_r>
 800ad22:	b92a      	cbnz	r2, 800ad30 <_realloc_r+0x24>
 800ad24:	f7ff f8a6 	bl	8009e74 <_free_r>
 800ad28:	4625      	mov	r5, r4
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad30:	f000 f82e 	bl	800ad90 <_malloc_usable_size_r>
 800ad34:	4284      	cmp	r4, r0
 800ad36:	4607      	mov	r7, r0
 800ad38:	d802      	bhi.n	800ad40 <_realloc_r+0x34>
 800ad3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad3e:	d812      	bhi.n	800ad66 <_realloc_r+0x5a>
 800ad40:	4621      	mov	r1, r4
 800ad42:	4640      	mov	r0, r8
 800ad44:	f7ff f902 	bl	8009f4c <_malloc_r>
 800ad48:	4605      	mov	r5, r0
 800ad4a:	2800      	cmp	r0, #0
 800ad4c:	d0ed      	beq.n	800ad2a <_realloc_r+0x1e>
 800ad4e:	42bc      	cmp	r4, r7
 800ad50:	4622      	mov	r2, r4
 800ad52:	4631      	mov	r1, r6
 800ad54:	bf28      	it	cs
 800ad56:	463a      	movcs	r2, r7
 800ad58:	f7fe fcc6 	bl	80096e8 <memcpy>
 800ad5c:	4631      	mov	r1, r6
 800ad5e:	4640      	mov	r0, r8
 800ad60:	f7ff f888 	bl	8009e74 <_free_r>
 800ad64:	e7e1      	b.n	800ad2a <_realloc_r+0x1e>
 800ad66:	4635      	mov	r5, r6
 800ad68:	e7df      	b.n	800ad2a <_realloc_r+0x1e>
	...

0800ad6c <_read_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d07      	ldr	r5, [pc, #28]	; (800ad8c <_read_r+0x20>)
 800ad70:	4604      	mov	r4, r0
 800ad72:	4608      	mov	r0, r1
 800ad74:	4611      	mov	r1, r2
 800ad76:	2200      	movs	r2, #0
 800ad78:	602a      	str	r2, [r5, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f7fe fb36 	bl	80093ec <_read>
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d102      	bne.n	800ad8a <_read_r+0x1e>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	b103      	cbz	r3, 800ad8a <_read_r+0x1e>
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}
 800ad8c:	2000123c 	.word	0x2000123c

0800ad90 <_malloc_usable_size_r>:
 800ad90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad94:	1f18      	subs	r0, r3, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	bfbc      	itt	lt
 800ad9a:	580b      	ldrlt	r3, [r1, r0]
 800ad9c:	18c0      	addlt	r0, r0, r3
 800ad9e:	4770      	bx	lr

0800ada0 <_init>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	bf00      	nop
 800ada4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada6:	bc08      	pop	{r3}
 800ada8:	469e      	mov	lr, r3
 800adaa:	4770      	bx	lr

0800adac <_fini>:
 800adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adae:	bf00      	nop
 800adb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb2:	bc08      	pop	{r3}
 800adb4:	469e      	mov	lr, r3
 800adb6:	4770      	bx	lr

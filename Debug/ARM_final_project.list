
ARM_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017dbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c38  08017f8c  08017f8c  00027f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801abc4  0801abc4  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801abc4  0801abc4  0002abc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801abcc  0801abcc  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801abcc  0801abcc  0002abcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801abd0  0801abd0  0002abd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801abd4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  0801ac64  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  0801ad04  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009170  200001d0  0801ada4  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20009340  0801ada4  00039340  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034807  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007804  00000000  00000000  00064a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000026d8  00000000  00000000  0006c210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002540  00000000  00000000  0006e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037aa1  00000000  00000000  00070e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003dc4a  00000000  00000000  000a88c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00114dc7  00000000  00000000  000e6513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001fb2da  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000ab14  00000000  00000000  001fb32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017f74 	.word	0x08017f74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08017f74 	.word	0x08017f74

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 fdd0 	bl	800215c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f820 	bl	8000600 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init(); 	// DMA init here so it won't turn off when editing settings
 80005c0:	f000 fadc 	bl	8000b7c <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 fb64 	bl	8000c90 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 fa4a 	bl	8000a60 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 faa8 	bl	8000b20 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 80005d0:	f000 fa16 	bl	8000a00 <MX_UART4_Init>
  MX_I2C2_Init();
 80005d4:	f000 f90e 	bl	80007f4 <MX_I2C2_Init>
  MX_SPI1_Init();
 80005d8:	f000 f94c 	bl	8000874 <MX_SPI1_Init>
  MX_SPI4_Init();
 80005dc:	f000 f988 	bl	80008f0 <MX_SPI4_Init>
  MX_DMA_Init();
 80005e0:	f000 facc 	bl	8000b7c <MX_DMA_Init>
  MX_I2C1_Init();
 80005e4:	f000 f8c6 	bl	8000774 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 80005e8:	f000 fa6a 	bl	8000ac0 <MX_USART6_UART_Init>
  MX_ADC2_Init();
 80005ec:	f000 f870 	bl	80006d0 <MX_ADC2_Init>
  MX_TIM3_Init();
 80005f0:	f000 f9b6 	bl	8000960 <MX_TIM3_Init>
  MX_LWIP_Init();
 80005f4:	f00a fffc 	bl	800b5f0 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  /// Begin my code here. In my main there is an endless loop, so won't need it
  /// in the endless loop below.
	  rtg_main();
 80005f8:	f016 f840 	bl	801667c <rtg_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x48>
	...

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f016 fc4c 	bl	8016eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f006 fe18 	bl	8007258 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <SystemClock_Config+0xc8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <SystemClock_Config+0xc8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <SystemClock_Config+0xc8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xcc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <SystemClock_Config+0xcc>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <SystemClock_Config+0xcc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000674:	2348      	movs	r3, #72	; 0x48
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800067c:	2303      	movs	r3, #3
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f006 fdf7 	bl	8007278 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 fbd4 	bl	8000e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f007 f885 	bl	80077c0 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006bc:	f000 fbbe 	bl	8000e3c <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_ADC2_Init+0x98>)
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <MX_ADC2_Init+0x9c>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_ADC2_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_ADC2_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_ADC2_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_ADC2_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_ADC2_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_ADC2_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_ADC2_Init+0x98>)
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <MX_ADC2_Init+0xa0>)
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_ADC2_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_ADC2_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_ADC2_Init+0x98>)
 8000722:	2201      	movs	r2, #1
 8000724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_ADC2_Init+0x98>)
 800072a:	2201      	movs	r2, #1
 800072c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <MX_ADC2_Init+0x98>)
 8000730:	f001 fd96 	bl	8002260 <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 fb7f 	bl	8000e3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000742:	2301      	movs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_ADC2_Init+0x98>)
 8000750:	f002 f8c0 	bl	80028d4 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800075a:	f000 fb6f 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001ec 	.word	0x200001ec
 800076c:	40012100 	.word	0x40012100
 8000770:	0f000001 	.word	0x0f000001

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_I2C1_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <MX_I2C1_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000780:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <MX_I2C1_Init+0x7c>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 14;
 8000784:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000786:	220e      	movs	r2, #14
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_I2C1_Init+0x74>)
 800078c:	2201      	movs	r2, #1
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_I2C1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007b0:	f004 fc4e 	bl	8005050 <HAL_I2C_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ba:	f000 fb3f 	bl	8000e3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007be:	2100      	movs	r1, #0
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007c2:	f006 fb69 	bl	8006e98 <HAL_I2CEx_ConfigAnalogFilter>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007cc:	f000 fb36 	bl	8000e3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_I2C1_Init+0x74>)
 80007d4:	f006 fbab 	bl	8006f2e <HAL_I2CEx_ConfigDigitalFilter>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 fb2d 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000294 	.word	0x20000294
 80007ec:	40005400 	.word	0x40005400
 80007f0:	00808cd2 	.word	0x00808cd2

080007f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_I2C2_Init+0x74>)
 80007fa:	4a1c      	ldr	r2, [pc, #112]	; (800086c <MX_I2C2_Init+0x78>)
 80007fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_I2C2_Init+0x74>)
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <MX_I2C2_Init+0x7c>)
 8000802:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_I2C2_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_I2C2_Init+0x74>)
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_I2C2_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_I2C2_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C2_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C2_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C2_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <MX_I2C2_Init+0x74>)
 8000830:	f004 fc0e 	bl	8005050 <HAL_I2C_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800083a:	f000 faff 	bl	8000e3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800083e:	2100      	movs	r1, #0
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <MX_I2C2_Init+0x74>)
 8000842:	f006 fb29 	bl	8006e98 <HAL_I2CEx_ConfigAnalogFilter>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800084c:	f000 faf6 	bl	8000e3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000850:	2100      	movs	r1, #0
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_I2C2_Init+0x74>)
 8000854:	f006 fb6b 	bl	8006f2e <HAL_I2CEx_ConfigDigitalFilter>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800085e:	f000 faed 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200002e8 	.word	0x200002e8
 800086c:	40005800 	.word	0x40005800
 8000870:	00808cd2 	.word	0x00808cd2

08000874 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MX_SPI1_Init+0x74>)
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_SPI1_Init+0x78>)
 800087c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_SPI1_Init+0x74>)
 8000880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_SPI1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI1_Init+0x74>)
 800088e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000892:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089a:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <MX_SPI1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008aa:	2218      	movs	r2, #24
 80008ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008c2:	2207      	movs	r2, #7
 80008c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008ce:	2208      	movs	r2, #8
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_SPI1_Init+0x74>)
 80008d4:	f007 fd8a 	bl	80083ec <HAL_SPI_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008de:	f000 faad 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200004bc 	.word	0x200004bc
 80008ec:	40013000 	.word	0x40013000

080008f0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_SPI4_Init+0x68>)
 80008f6:	4a19      	ldr	r2, [pc, #100]	; (800095c <MX_SPI4_Init+0x6c>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_SPI4_Init+0x68>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_SPI4_Init+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_SPI4_Init+0x68>)
 8000908:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800090c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_SPI4_Init+0x68>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_SPI4_Init+0x68>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_SPI4_Init+0x68>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <MX_SPI4_Init+0x68>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <MX_SPI4_Init+0x68>)
 8000928:	2200      	movs	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092c:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <MX_SPI4_Init+0x68>)
 800092e:	2200      	movs	r2, #0
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <MX_SPI4_Init+0x68>)
 8000934:	2207      	movs	r2, #7
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <MX_SPI4_Init+0x68>)
 800093a:	2200      	movs	r2, #0
 800093c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <MX_SPI4_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_SPI4_Init+0x68>)
 8000946:	f007 fd51 	bl	80083ec <HAL_SPI_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8000950:	f000 fa74 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000520 	.word	0x20000520
 800095c:	40013400 	.word	0x40013400

08000960 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_TIM3_Init+0x98>)
 8000980:	4a1e      	ldr	r2, [pc, #120]	; (80009fc <MX_TIM3_Init+0x9c>)
 8000982:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200 - 1;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_TIM3_Init+0x98>)
 8000986:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800098a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_TIM3_Init+0x98>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000 - 1;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_TIM3_Init+0x98>)
 8000994:	f242 720f 	movw	r2, #9999	; 0x270f
 8000998:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_TIM3_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_TIM3_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009a6:	4814      	ldr	r0, [pc, #80]	; (80009f8 <MX_TIM3_Init+0x98>)
 80009a8:	f008 fb74 	bl	8009094 <HAL_TIM_Base_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80009b2:	f000 fa43 	bl	8000e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	4619      	mov	r1, r3
 80009c2:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_TIM3_Init+0x98>)
 80009c4:	f008 fd84 	bl	80094d0 <HAL_TIM_ConfigClockSource>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80009ce:	f000 fa35 	bl	8000e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_TIM3_Init+0x98>)
 80009e0:	f008 ffa2 	bl	8009928 <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80009ea:	f000 fa27 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3720      	adds	r7, #32
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000704 	.word	0x20000704
 80009fc:	40000400 	.word	0x40000400

08000a00 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_UART4_Init+0x58>)
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <MX_UART4_Init+0x5c>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_UART4_Init+0x58>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_UART4_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_UART4_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_UART4_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_UART4_Init+0x58>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_UART4_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_UART4_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_UART4_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_UART4_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_UART4_Init+0x58>)
 8000a44:	f009 f81c 	bl	8009a80 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000a4e:	f000 f9f5 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000750 	.word	0x20000750
 8000a5c:	40004c00 	.word	0x40004c00

08000a60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a66:	4a15      	ldr	r2, [pc, #84]	; (8000abc <MX_USART3_UART_Init+0x5c>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART3_UART_Init+0x58>)
 8000aa4:	f008 ffec 	bl	8009a80 <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aae:	f000 f9c5 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200007d8 	.word	0x200007d8
 8000abc:	40004800 	.word	0x40004800

08000ac0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000ac6:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <MX_USART6_UART_Init+0x5c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_USART6_UART_Init+0x58>)
 8000b04:	f008 ffbc 	bl	8009a80 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f000 f995 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000860 	.word	0x20000860
 8000b1c:	40011400 	.word	0x40011400

08000b20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2e:	2206      	movs	r2, #6
 8000b30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b64:	f006 fa2f 	bl	8006fc6 <HAL_PCD_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b6e:	f000 f965 	bl	8000e3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000a68 	.word	0x20000a68

08000b7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <MX_DMA_Init+0x110>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a41      	ldr	r2, [pc, #260]	; (8000c8c <MX_DMA_Init+0x110>)
 8000b88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <MX_DMA_Init+0x110>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b9a:	4b3c      	ldr	r3, [pc, #240]	; (8000c8c <MX_DMA_Init+0x110>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a3b      	ldr	r2, [pc, #236]	; (8000c8c <MX_DMA_Init+0x110>)
 8000ba0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b39      	ldr	r3, [pc, #228]	; (8000c8c <MX_DMA_Init+0x110>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	200b      	movs	r0, #11
 8000bb8:	f002 fa43 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bbc:	200b      	movs	r0, #11
 8000bbe:	f002 fa5c 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	200d      	movs	r0, #13
 8000bc8:	f002 fa3b 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000bcc:	200d      	movs	r0, #13
 8000bce:	f002 fa54 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	200e      	movs	r0, #14
 8000bd8:	f002 fa33 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bdc:	200e      	movs	r0, #14
 8000bde:	f002 fa4c 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	200f      	movs	r0, #15
 8000be8:	f002 fa2b 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000bec:	200f      	movs	r0, #15
 8000bee:	f002 fa44 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2011      	movs	r0, #17
 8000bf8:	f002 fa23 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000bfc:	2011      	movs	r0, #17
 8000bfe:	f002 fa3c 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	202f      	movs	r0, #47	; 0x2f
 8000c08:	f002 fa1b 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c0c:	202f      	movs	r0, #47	; 0x2f
 8000c0e:	f002 fa34 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2038      	movs	r0, #56	; 0x38
 8000c18:	f002 fa13 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c1c:	2038      	movs	r0, #56	; 0x38
 8000c1e:	f002 fa2c 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2039      	movs	r0, #57	; 0x39
 8000c28:	f002 fa0b 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c2c:	2039      	movs	r0, #57	; 0x39
 8000c2e:	f002 fa24 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	203a      	movs	r0, #58	; 0x3a
 8000c38:	f002 fa03 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000c3c:	203a      	movs	r0, #58	; 0x3a
 8000c3e:	f002 fa1c 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2100      	movs	r1, #0
 8000c46:	203b      	movs	r0, #59	; 0x3b
 8000c48:	f002 f9fb 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c4c:	203b      	movs	r0, #59	; 0x3b
 8000c4e:	f002 fa14 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	203c      	movs	r0, #60	; 0x3c
 8000c58:	f002 f9f3 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000c5c:	203c      	movs	r0, #60	; 0x3c
 8000c5e:	f002 fa0c 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2044      	movs	r0, #68	; 0x44
 8000c68:	f002 f9eb 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000c6c:	2044      	movs	r0, #68	; 0x44
 8000c6e:	f002 fa04 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2046      	movs	r0, #70	; 0x46
 8000c78:	f002 f9e3 	bl	8003042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000c7c:	2046      	movs	r0, #70	; 0x46
 8000c7e:	f002 f9fc 	bl	800307a <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	; 0x38
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca6:	4b60      	ldr	r3, [pc, #384]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a5f      	ldr	r2, [pc, #380]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b5d      	ldr	r3, [pc, #372]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b5a      	ldr	r3, [pc, #360]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a59      	ldr	r2, [pc, #356]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b57      	ldr	r3, [pc, #348]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	61fb      	str	r3, [r7, #28]
 8000cd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd6:	4b54      	ldr	r3, [pc, #336]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a53      	ldr	r2, [pc, #332]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000cdc:	f043 0320 	orr.w	r3, r3, #32
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b51      	ldr	r3, [pc, #324]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0320 	and.w	r3, r3, #32
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	4b4e      	ldr	r3, [pc, #312]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a4d      	ldr	r2, [pc, #308]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b4b      	ldr	r3, [pc, #300]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b48      	ldr	r3, [pc, #288]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a47      	ldr	r2, [pc, #284]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b42      	ldr	r3, [pc, #264]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a41      	ldr	r2, [pc, #260]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b3c      	ldr	r3, [pc, #240]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a3b      	ldr	r2, [pc, #236]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b39      	ldr	r3, [pc, #228]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4e:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a35      	ldr	r2, [pc, #212]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <MX_GPIO_Init+0x198>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2140      	movs	r1, #64	; 0x40
 8000d6a:	4830      	ldr	r0, [pc, #192]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000d6c:	f004 f956 	bl	800501c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d70:	2301      	movs	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d74:	2303      	movs	r3, #3
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	482b      	ldr	r0, [pc, #172]	; (8000e30 <MX_GPIO_Init+0x1a0>)
 8000d84:	f003 ff9e 	bl	8004cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000d88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4823      	ldr	r0, [pc, #140]	; (8000e34 <MX_GPIO_Init+0x1a4>)
 8000da6:	f003 ff8d 	bl	8004cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000daa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db0:	2312      	movs	r3, #18
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	481c      	ldr	r0, [pc, #112]	; (8000e38 <MX_GPIO_Init+0x1a8>)
 8000dc8:	f003 ff7c 	bl	8004cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dcc:	2340      	movs	r3, #64	; 0x40
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	4812      	ldr	r0, [pc, #72]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000de4:	f003 ff6e 	bl	8004cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000dfc:	f003 ff62 	bl	8004cc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e00:	2340      	movs	r3, #64	; 0x40
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e10:	2307      	movs	r3, #7
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4807      	ldr	r0, [pc, #28]	; (8000e38 <MX_GPIO_Init+0x1a8>)
 8000e1c:	f003 ff52 	bl	8004cc4 <HAL_GPIO_Init>

}
 8000e20:	bf00      	nop
 8000e22:	3738      	adds	r7, #56	; 0x38
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40021800 	.word	0x40021800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40020c00 	.word	0x40020c00

08000e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e40:	b672      	cpsid	i
}
 8000e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <Error_Handler+0x8>
	...

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <HAL_MspInit+0x44>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <HAL_MspInit+0x44>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_MspInit+0x44>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <HAL_MspInit+0x44>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a08      	ldr	r2, [pc, #32]	; (8000e8c <HAL_MspInit+0x44>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_MspInit+0x44>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800

08000e90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a31      	ldr	r2, [pc, #196]	; (8000f74 <HAL_ADC_MspInit+0xe4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d15c      	bne.n	8000f6c <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000eb2:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <HAL_ADC_MspInit+0xe8>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <HAL_ADC_MspInit+0xe8>)
 8000eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b2e      	ldr	r3, [pc, #184]	; (8000f78 <HAL_ADC_MspInit+0xe8>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <HAL_ADC_MspInit+0xe8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a2a      	ldr	r2, [pc, #168]	; (8000f78 <HAL_ADC_MspInit+0xe8>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <HAL_ADC_MspInit+0xe8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA0/WKUP     ------> ADC2_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4821      	ldr	r0, [pc, #132]	; (8000f7c <HAL_ADC_MspInit+0xec>)
 8000ef6:	f003 fee5 	bl	8004cc4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream3;
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000efc:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <HAL_ADC_MspInit+0xf4>)
 8000efe:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f06:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f1a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f22:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f24:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f2a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f32:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f40:	480f      	ldr	r0, [pc, #60]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f42:	f002 f8b5 	bl	80030b0 <HAL_DMA_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000f4c:	f7ff ff76 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f54:	639a      	str	r2, [r3, #56]	; 0x38
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_ADC_MspInit+0xf0>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2012      	movs	r0, #18
 8000f62:	f002 f86e 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f66:	2012      	movs	r0, #18
 8000f68:	f002 f887 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40012100 	.word	0x40012100
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	20000234 	.word	0x20000234
 8000f84:	40026458 	.word	0x40026458

08000f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0ac      	sub	sp, #176	; 0xb0
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa0:	f107 0318 	add.w	r3, r7, #24
 8000fa4:	2284      	movs	r2, #132	; 0x84
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f015 ff7f 	bl	8016eac <memset>
  if(hi2c->Instance==I2C1)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a57      	ldr	r2, [pc, #348]	; (8001110 <HAL_I2C_MspInit+0x188>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	f040 80b9 	bne.w	800112c <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fbe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc4:	f107 0318 	add.w	r3, r7, #24
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f006 fe1f 	bl	8007c0c <HAL_RCCEx_PeriphCLKConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000fd4:	f7ff ff32 	bl	8000e3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	4b4e      	ldr	r3, [pc, #312]	; (8001114 <HAL_I2C_MspInit+0x18c>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	4a4d      	ldr	r2, [pc, #308]	; (8001114 <HAL_I2C_MspInit+0x18c>)
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe4:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <HAL_I2C_MspInit+0x18c>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ff0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ff4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff8:	2312      	movs	r3, #18
 8000ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800100a:	2304      	movs	r3, #4
 800100c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001014:	4619      	mov	r1, r3
 8001016:	4840      	ldr	r0, [pc, #256]	; (8001118 <HAL_I2C_MspInit+0x190>)
 8001018:	f003 fe54 	bl	8004cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800101c:	4b3d      	ldr	r3, [pc, #244]	; (8001114 <HAL_I2C_MspInit+0x18c>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	4a3c      	ldr	r2, [pc, #240]	; (8001114 <HAL_I2C_MspInit+0x18c>)
 8001022:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001026:	6413      	str	r3, [r2, #64]	; 0x40
 8001028:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <HAL_I2C_MspInit+0x18c>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001034:	4b39      	ldr	r3, [pc, #228]	; (800111c <HAL_I2C_MspInit+0x194>)
 8001036:	4a3a      	ldr	r2, [pc, #232]	; (8001120 <HAL_I2C_MspInit+0x198>)
 8001038:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800103a:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_I2C_MspInit+0x194>)
 800103c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001040:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <HAL_I2C_MspInit+0x194>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001048:	4b34      	ldr	r3, [pc, #208]	; (800111c <HAL_I2C_MspInit+0x194>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800104e:	4b33      	ldr	r3, [pc, #204]	; (800111c <HAL_I2C_MspInit+0x194>)
 8001050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001054:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_I2C_MspInit+0x194>)
 8001058:	2200      	movs	r2, #0
 800105a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <HAL_I2C_MspInit+0x194>)
 800105e:	2200      	movs	r2, #0
 8001060:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_I2C_MspInit+0x194>)
 8001064:	2200      	movs	r2, #0
 8001066:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001068:	4b2c      	ldr	r3, [pc, #176]	; (800111c <HAL_I2C_MspInit+0x194>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <HAL_I2C_MspInit+0x194>)
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001074:	4829      	ldr	r0, [pc, #164]	; (800111c <HAL_I2C_MspInit+0x194>)
 8001076:	f002 f81b 	bl	80030b0 <HAL_DMA_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8001080:	f7ff fedc 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a25      	ldr	r2, [pc, #148]	; (800111c <HAL_I2C_MspInit+0x194>)
 8001088:	63da      	str	r2, [r3, #60]	; 0x3c
 800108a:	4a24      	ldr	r2, [pc, #144]	; (800111c <HAL_I2C_MspInit+0x194>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 8001092:	4a25      	ldr	r2, [pc, #148]	; (8001128 <HAL_I2C_MspInit+0x1a0>)
 8001094:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001096:	4b23      	ldr	r3, [pc, #140]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 8001098:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800109c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 80010a0:	2240      	movs	r2, #64	; 0x40
 80010a2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a4:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 80010ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80010d0:	4814      	ldr	r0, [pc, #80]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 80010d2:	f001 ffed 	bl	80030b0 <HAL_DMA_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 80010dc:	f7ff feae 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
 80010e6:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <HAL_I2C_MspInit+0x19c>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	201f      	movs	r0, #31
 80010f2:	f001 ffa6 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010f6:	201f      	movs	r0, #31
 80010f8:	f001 ffbf 	bl	800307a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2020      	movs	r0, #32
 8001102:	f001 ff9e 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001106:	2020      	movs	r0, #32
 8001108:	f001 ffb7 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800110c:	e0bd      	b.n	800128a <HAL_I2C_MspInit+0x302>
 800110e:	bf00      	nop
 8001110:	40005400 	.word	0x40005400
 8001114:	40023800 	.word	0x40023800
 8001118:	40020400 	.word	0x40020400
 800111c:	2000033c 	.word	0x2000033c
 8001120:	40026010 	.word	0x40026010
 8001124:	2000039c 	.word	0x2000039c
 8001128:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a58      	ldr	r2, [pc, #352]	; (8001294 <HAL_I2C_MspInit+0x30c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	f040 80a9 	bne.w	800128a <HAL_I2C_MspInit+0x302>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800113c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4618      	mov	r0, r3
 800114a:	f006 fd5f 	bl	8007c0c <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8001154:	f7ff fe72 	bl	8000e3c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001158:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <HAL_I2C_MspInit+0x310>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a4e      	ldr	r2, [pc, #312]	; (8001298 <HAL_I2C_MspInit+0x310>)
 800115e:	f043 0320 	orr.w	r3, r3, #32
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b4c      	ldr	r3, [pc, #304]	; (8001298 <HAL_I2C_MspInit+0x310>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001170:	2303      	movs	r3, #3
 8001172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001176:	2312      	movs	r3, #18
 8001178:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117c:	2301      	movs	r3, #1
 800117e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001188:	2304      	movs	r3, #4
 800118a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800118e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001192:	4619      	mov	r1, r3
 8001194:	4841      	ldr	r0, [pc, #260]	; (800129c <HAL_I2C_MspInit+0x314>)
 8001196:	f003 fd95 	bl	8004cc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800119a:	4b3f      	ldr	r3, [pc, #252]	; (8001298 <HAL_I2C_MspInit+0x310>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a3e      	ldr	r2, [pc, #248]	; (8001298 <HAL_I2C_MspInit+0x310>)
 80011a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <HAL_I2C_MspInit+0x310>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 80011b4:	4a3b      	ldr	r2, [pc, #236]	; (80012a4 <HAL_I2C_MspInit+0x31c>)
 80011b6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80011b8:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 80011ba:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011be:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c0:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c6:	4b36      	ldr	r3, [pc, #216]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011cc:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 80011ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d4:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011da:	4b31      	ldr	r3, [pc, #196]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80011e0:	4b2f      	ldr	r3, [pc, #188]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80011f2:	482b      	ldr	r0, [pc, #172]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 80011f4:	f001 ff5c 	bl	80030b0 <HAL_DMA_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_I2C_MspInit+0x27a>
      Error_Handler();
 80011fe:	f7ff fe1d 	bl	8000e3c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 8001206:	63da      	str	r2, [r3, #60]	; 0x3c
 8001208:	4a25      	ldr	r2, [pc, #148]	; (80012a0 <HAL_I2C_MspInit+0x318>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 8001210:	4a26      	ldr	r2, [pc, #152]	; (80012ac <HAL_I2C_MspInit+0x324>)
 8001212:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 8001216:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800121a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800121c:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 800121e:	2240      	movs	r2, #64	; 0x40
 8001220:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001222:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 800122a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800122e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001248:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800124e:	4816      	ldr	r0, [pc, #88]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 8001250:	f001 ff2e 	bl	80030b0 <HAL_DMA_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_I2C_MspInit+0x2d6>
      Error_Handler();
 800125a:	f7ff fdef 	bl	8000e3c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 8001262:	639a      	str	r2, [r3, #56]	; 0x38
 8001264:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_I2C_MspInit+0x320>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2021      	movs	r0, #33	; 0x21
 8001270:	f001 fee7 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001274:	2021      	movs	r0, #33	; 0x21
 8001276:	f001 ff00 	bl	800307a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	2022      	movs	r0, #34	; 0x22
 8001280:	f001 fedf 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001284:	2022      	movs	r0, #34	; 0x22
 8001286:	f001 fef8 	bl	800307a <HAL_NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	37b0      	adds	r7, #176	; 0xb0
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40005800 	.word	0x40005800
 8001298:	40023800 	.word	0x40023800
 800129c:	40021400 	.word	0x40021400
 80012a0:	200003fc 	.word	0x200003fc
 80012a4:	40026058 	.word	0x40026058
 80012a8:	2000045c 	.word	0x2000045c
 80012ac:	400260b8 	.word	0x400260b8

080012b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4aa1      	ldr	r2, [pc, #644]	; (8001554 <HAL_SPI_MspInit+0x2a4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	f040 80a9 	bne.w	8001426 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d4:	4ba0      	ldr	r3, [pc, #640]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	4a9f      	ldr	r2, [pc, #636]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 80012da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012de:	6453      	str	r3, [r2, #68]	; 0x44
 80012e0:	4b9d      	ldr	r3, [pc, #628]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b9a      	ldr	r3, [pc, #616]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a99      	ldr	r2, [pc, #612]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b97      	ldr	r3, [pc, #604]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	4b94      	ldr	r3, [pc, #592]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	4a93      	ldr	r2, [pc, #588]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 800130a:	f043 0302 	orr.w	r3, r3, #2
 800130e:	6313      	str	r3, [r2, #48]	; 0x30
 8001310:	4b91      	ldr	r3, [pc, #580]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800131c:	2310      	movs	r3, #16
 800131e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800132c:	2305      	movs	r3, #5
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4889      	ldr	r0, [pc, #548]	; (800155c <HAL_SPI_MspInit+0x2ac>)
 8001338:	f003 fcc4 	bl	8004cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800133c:	2338      	movs	r3, #56	; 0x38
 800133e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800134c:	2305      	movs	r3, #5
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	4882      	ldr	r0, [pc, #520]	; (8001560 <HAL_SPI_MspInit+0x2b0>)
 8001358:	f003 fcb4 	bl	8004cc4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800135c:	4b81      	ldr	r3, [pc, #516]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 800135e:	4a82      	ldr	r2, [pc, #520]	; (8001568 <HAL_SPI_MspInit+0x2b8>)
 8001360:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001362:	4b80      	ldr	r3, [pc, #512]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 8001364:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001368:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136a:	4b7e      	ldr	r3, [pc, #504]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001370:	4b7c      	ldr	r3, [pc, #496]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001376:	4b7b      	ldr	r3, [pc, #492]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 8001378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800137e:	4b79      	ldr	r3, [pc, #484]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001384:	4b77      	ldr	r3, [pc, #476]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800138a:	4b76      	ldr	r3, [pc, #472]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001390:	4b74      	ldr	r3, [pc, #464]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001396:	4b73      	ldr	r3, [pc, #460]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 8001398:	2200      	movs	r2, #0
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800139c:	4871      	ldr	r0, [pc, #452]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 800139e:	f001 fe87 	bl	80030b0 <HAL_DMA_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 80013a8:	f7ff fd48 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a6d      	ldr	r2, [pc, #436]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 80013b0:	659a      	str	r2, [r3, #88]	; 0x58
 80013b2:	4a6c      	ldr	r2, [pc, #432]	; (8001564 <HAL_SPI_MspInit+0x2b4>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80013b8:	4b6c      	ldr	r3, [pc, #432]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 80013ba:	4a6d      	ldr	r2, [pc, #436]	; (8001570 <HAL_SPI_MspInit+0x2c0>)
 80013bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013be:	4b6b      	ldr	r3, [pc, #428]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 80013c0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80013c4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c6:	4b69      	ldr	r3, [pc, #420]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 80013c8:	2240      	movs	r2, #64	; 0x40
 80013ca:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013cc:	4b67      	ldr	r3, [pc, #412]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013d2:	4b66      	ldr	r3, [pc, #408]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 80013d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013da:	4b64      	ldr	r3, [pc, #400]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e0:	4b62      	ldr	r3, [pc, #392]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013e6:	4b61      	ldr	r3, [pc, #388]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013ec:	4b5f      	ldr	r3, [pc, #380]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f2:	4b5e      	ldr	r3, [pc, #376]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013f8:	485c      	ldr	r0, [pc, #368]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 80013fa:	f001 fe59 	bl	80030b0 <HAL_DMA_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001404:	f7ff fd1a 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a58      	ldr	r2, [pc, #352]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 800140c:	655a      	str	r2, [r3, #84]	; 0x54
 800140e:	4a57      	ldr	r2, [pc, #348]	; (800156c <HAL_SPI_MspInit+0x2bc>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	2023      	movs	r0, #35	; 0x23
 800141a:	f001 fe12 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800141e:	2023      	movs	r0, #35	; 0x23
 8001420:	f001 fe2b 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001424:	e091      	b.n	800154a <HAL_SPI_MspInit+0x29a>
  else if(hspi->Instance==SPI4)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a52      	ldr	r2, [pc, #328]	; (8001574 <HAL_SPI_MspInit+0x2c4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	f040 808c 	bne.w	800154a <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001432:	4b49      	ldr	r3, [pc, #292]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a48      	ldr	r2, [pc, #288]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 8001438:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b46      	ldr	r3, [pc, #280]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	4b43      	ldr	r3, [pc, #268]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a42      	ldr	r2, [pc, #264]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 8001450:	f043 0310 	orr.w	r3, r3, #16
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b40      	ldr	r3, [pc, #256]	; (8001558 <HAL_SPI_MspInit+0x2a8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001462:	2374      	movs	r3, #116	; 0x74
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001472:	2305      	movs	r3, #5
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	483e      	ldr	r0, [pc, #248]	; (8001578 <HAL_SPI_MspInit+0x2c8>)
 800147e:	f003 fc21 	bl	8004cc4 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001482:	4b3e      	ldr	r3, [pc, #248]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 8001484:	4a3e      	ldr	r2, [pc, #248]	; (8001580 <HAL_SPI_MspInit+0x2d0>)
 8001486:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001488:	4b3c      	ldr	r3, [pc, #240]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 800148a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800148e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001490:	4b3a      	ldr	r3, [pc, #232]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001496:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800149c:	4b37      	ldr	r3, [pc, #220]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 800149e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a2:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80014b0:	4b32      	ldr	r3, [pc, #200]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014bc:	4b2f      	ldr	r3, [pc, #188]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80014c2:	482e      	ldr	r0, [pc, #184]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 80014c4:	f001 fdf4 	bl	80030b0 <HAL_DMA_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 80014ce:	f7ff fcb5 	bl	8000e3c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a29      	ldr	r2, [pc, #164]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 80014d6:	659a      	str	r2, [r3, #88]	; 0x58
 80014d8:	4a28      	ldr	r2, [pc, #160]	; (800157c <HAL_SPI_MspInit+0x2cc>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream4;
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 80014e0:	4a29      	ldr	r2, [pc, #164]	; (8001588 <HAL_SPI_MspInit+0x2d8>)
 80014e2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_5;
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 80014e6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80014ea:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 80014ee:	2240      	movs	r2, #64	; 0x40
 80014f0:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014f8:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 80014fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fe:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001506:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800151e:	4819      	ldr	r0, [pc, #100]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 8001520:	f001 fdc6 	bl	80030b0 <HAL_DMA_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 800152a:	f7ff fc87 	bl	8000e3c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a14      	ldr	r2, [pc, #80]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 8001532:	655a      	str	r2, [r3, #84]	; 0x54
 8001534:	4a13      	ldr	r2, [pc, #76]	; (8001584 <HAL_SPI_MspInit+0x2d4>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2054      	movs	r0, #84	; 0x54
 8001540:	f001 fd7f 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001544:	2054      	movs	r0, #84	; 0x54
 8001546:	f001 fd98 	bl	800307a <HAL_NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3730      	adds	r7, #48	; 0x30
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40013000 	.word	0x40013000
 8001558:	40023800 	.word	0x40023800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	20000584 	.word	0x20000584
 8001568:	40026440 	.word	0x40026440
 800156c:	200005e4 	.word	0x200005e4
 8001570:	40026488 	.word	0x40026488
 8001574:	40013400 	.word	0x40013400
 8001578:	40021000 	.word	0x40021000
 800157c:	20000644 	.word	0x20000644
 8001580:	40026410 	.word	0x40026410
 8001584:	200006a4 	.word	0x200006a4
 8001588:	40026470 	.word	0x40026470

0800158c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0d      	ldr	r2, [pc, #52]	; (80015d0 <HAL_TIM_Base_MspInit+0x44>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d113      	bne.n	80015c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_TIM_Base_MspInit+0x48>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <HAL_TIM_Base_MspInit+0x48>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <HAL_TIM_Base_MspInit+0x48>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	201d      	movs	r0, #29
 80015bc:	f001 fd41 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015c0:	201d      	movs	r0, #29
 80015c2:	f001 fd5a 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40000400 	.word	0x40000400
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0ae      	sub	sp, #184	; 0xb8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f0:	f107 0320 	add.w	r3, r7, #32
 80015f4:	2284      	movs	r2, #132	; 0x84
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f015 fc57 	bl	8016eac <memset>
  if(huart->Instance==UART4)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a74      	ldr	r2, [pc, #464]	; (80017d4 <HAL_UART_MspInit+0x1fc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	f040 80a2 	bne.w	800174e <HAL_UART_MspInit+0x176>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800160a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001610:	2300      	movs	r3, #0
 8001612:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	4618      	mov	r0, r3
 800161a:	f006 faf7 	bl	8007c0c <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001624:	f7ff fc0a 	bl	8000e3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001628:	4b6b      	ldr	r3, [pc, #428]	; (80017d8 <HAL_UART_MspInit+0x200>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4a6a      	ldr	r2, [pc, #424]	; (80017d8 <HAL_UART_MspInit+0x200>)
 800162e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001632:	6413      	str	r3, [r2, #64]	; 0x40
 8001634:	4b68      	ldr	r3, [pc, #416]	; (80017d8 <HAL_UART_MspInit+0x200>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001640:	4b65      	ldr	r3, [pc, #404]	; (80017d8 <HAL_UART_MspInit+0x200>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	4a64      	ldr	r2, [pc, #400]	; (80017d8 <HAL_UART_MspInit+0x200>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
 800164c:	4b62      	ldr	r3, [pc, #392]	; (80017d8 <HAL_UART_MspInit+0x200>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001658:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800165c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001672:	2308      	movs	r3, #8
 8001674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001678:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800167c:	4619      	mov	r1, r3
 800167e:	4857      	ldr	r0, [pc, #348]	; (80017dc <HAL_UART_MspInit+0x204>)
 8001680:	f003 fb20 	bl	8004cc4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001684:	4b56      	ldr	r3, [pc, #344]	; (80017e0 <HAL_UART_MspInit+0x208>)
 8001686:	4a57      	ldr	r2, [pc, #348]	; (80017e4 <HAL_UART_MspInit+0x20c>)
 8001688:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800168a:	4b55      	ldr	r3, [pc, #340]	; (80017e0 <HAL_UART_MspInit+0x208>)
 800168c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001690:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001692:	4b53      	ldr	r3, [pc, #332]	; (80017e0 <HAL_UART_MspInit+0x208>)
 8001694:	2240      	movs	r2, #64	; 0x40
 8001696:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001698:	4b51      	ldr	r3, [pc, #324]	; (80017e0 <HAL_UART_MspInit+0x208>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800169e:	4b50      	ldr	r3, [pc, #320]	; (80017e0 <HAL_UART_MspInit+0x208>)
 80016a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a6:	4b4e      	ldr	r3, [pc, #312]	; (80017e0 <HAL_UART_MspInit+0x208>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ac:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <HAL_UART_MspInit+0x208>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80016b2:	4b4b      	ldr	r3, [pc, #300]	; (80017e0 <HAL_UART_MspInit+0x208>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016b8:	4b49      	ldr	r3, [pc, #292]	; (80017e0 <HAL_UART_MspInit+0x208>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016be:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <HAL_UART_MspInit+0x208>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80016c4:	4846      	ldr	r0, [pc, #280]	; (80017e0 <HAL_UART_MspInit+0x208>)
 80016c6:	f001 fcf3 	bl	80030b0 <HAL_DMA_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 80016d0:	f7ff fbb4 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a42      	ldr	r2, [pc, #264]	; (80017e0 <HAL_UART_MspInit+0x208>)
 80016d8:	671a      	str	r2, [r3, #112]	; 0x70
 80016da:	4a41      	ldr	r2, [pc, #260]	; (80017e0 <HAL_UART_MspInit+0x208>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80016e0:	4b41      	ldr	r3, [pc, #260]	; (80017e8 <HAL_UART_MspInit+0x210>)
 80016e2:	4a42      	ldr	r2, [pc, #264]	; (80017ec <HAL_UART_MspInit+0x214>)
 80016e4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80016e6:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <HAL_UART_MspInit+0x210>)
 80016e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ec:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ee:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <HAL_UART_MspInit+0x210>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f4:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <HAL_UART_MspInit+0x210>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016fa:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <HAL_UART_MspInit+0x210>)
 80016fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001700:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001702:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <HAL_UART_MspInit+0x210>)
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001708:	4b37      	ldr	r3, [pc, #220]	; (80017e8 <HAL_UART_MspInit+0x210>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800170e:	4b36      	ldr	r3, [pc, #216]	; (80017e8 <HAL_UART_MspInit+0x210>)
 8001710:	2200      	movs	r2, #0
 8001712:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001714:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_UART_MspInit+0x210>)
 8001716:	2200      	movs	r2, #0
 8001718:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800171a:	4b33      	ldr	r3, [pc, #204]	; (80017e8 <HAL_UART_MspInit+0x210>)
 800171c:	2200      	movs	r2, #0
 800171e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001720:	4831      	ldr	r0, [pc, #196]	; (80017e8 <HAL_UART_MspInit+0x210>)
 8001722:	f001 fcc5 	bl	80030b0 <HAL_DMA_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 800172c:	f7ff fb86 	bl	8000e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4a2d      	ldr	r2, [pc, #180]	; (80017e8 <HAL_UART_MspInit+0x210>)
 8001734:	675a      	str	r2, [r3, #116]	; 0x74
 8001736:	4a2c      	ldr	r2, [pc, #176]	; (80017e8 <HAL_UART_MspInit+0x210>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	2034      	movs	r0, #52	; 0x34
 8001742:	f001 fc7e 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001746:	2034      	movs	r0, #52	; 0x34
 8001748:	f001 fc97 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800174c:	e0fa      	b.n	8001944 <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==USART3)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <HAL_UART_MspInit+0x218>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d14f      	bne.n	80017f8 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800175e:	2300      	movs	r3, #0
 8001760:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001762:	f107 0320 	add.w	r3, r7, #32
 8001766:	4618      	mov	r0, r3
 8001768:	f006 fa50 	bl	8007c0c <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001772:	f7ff fb63 	bl	8000e3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_UART_MspInit+0x200>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_UART_MspInit+0x200>)
 800177c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_UART_MspInit+0x200>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_UART_MspInit+0x200>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <HAL_UART_MspInit+0x200>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_UART_MspInit+0x200>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017c0:	2307      	movs	r3, #7
 80017c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4809      	ldr	r0, [pc, #36]	; (80017f4 <HAL_UART_MspInit+0x21c>)
 80017ce:	f003 fa79 	bl	8004cc4 <HAL_GPIO_Init>
}
 80017d2:	e0b7      	b.n	8001944 <HAL_UART_MspInit+0x36c>
 80017d4:	40004c00 	.word	0x40004c00
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020800 	.word	0x40020800
 80017e0:	200008e8 	.word	0x200008e8
 80017e4:	40026070 	.word	0x40026070
 80017e8:	20000948 	.word	0x20000948
 80017ec:	40026040 	.word	0x40026040
 80017f0:	40004800 	.word	0x40004800
 80017f4:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART6)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a53      	ldr	r2, [pc, #332]	; (800194c <HAL_UART_MspInit+0x374>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	f040 80a0 	bne.w	8001944 <HAL_UART_MspInit+0x36c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001804:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001808:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800180a:	2300      	movs	r3, #0
 800180c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	4618      	mov	r0, r3
 8001814:	f006 f9fa 	bl	8007c0c <HAL_RCCEx_PeriphCLKConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 800181e:	f7ff fb0d 	bl	8000e3c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001822:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <HAL_UART_MspInit+0x378>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	4a4a      	ldr	r2, [pc, #296]	; (8001950 <HAL_UART_MspInit+0x378>)
 8001828:	f043 0320 	orr.w	r3, r3, #32
 800182c:	6453      	str	r3, [r2, #68]	; 0x44
 800182e:	4b48      	ldr	r3, [pc, #288]	; (8001950 <HAL_UART_MspInit+0x378>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800183a:	4b45      	ldr	r3, [pc, #276]	; (8001950 <HAL_UART_MspInit+0x378>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a44      	ldr	r2, [pc, #272]	; (8001950 <HAL_UART_MspInit+0x378>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <HAL_UART_MspInit+0x378>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001852:	23c0      	movs	r3, #192	; 0xc0
 8001854:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800186a:	2308      	movs	r3, #8
 800186c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001870:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001874:	4619      	mov	r1, r3
 8001876:	4837      	ldr	r0, [pc, #220]	; (8001954 <HAL_UART_MspInit+0x37c>)
 8001878:	f003 fa24 	bl	8004cc4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800187c:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_UART_MspInit+0x380>)
 800187e:	4a37      	ldr	r2, [pc, #220]	; (800195c <HAL_UART_MspInit+0x384>)
 8001880:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001882:	4b35      	ldr	r3, [pc, #212]	; (8001958 <HAL_UART_MspInit+0x380>)
 8001884:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001888:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <HAL_UART_MspInit+0x380>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001890:	4b31      	ldr	r3, [pc, #196]	; (8001958 <HAL_UART_MspInit+0x380>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001896:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_UART_MspInit+0x380>)
 8001898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800189c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800189e:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <HAL_UART_MspInit+0x380>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a4:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <HAL_UART_MspInit+0x380>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80018aa:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_UART_MspInit+0x380>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018b0:	4b29      	ldr	r3, [pc, #164]	; (8001958 <HAL_UART_MspInit+0x380>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_UART_MspInit+0x380>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80018bc:	4826      	ldr	r0, [pc, #152]	; (8001958 <HAL_UART_MspInit+0x380>)
 80018be:	f001 fbf7 	bl	80030b0 <HAL_DMA_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 80018c8:	f7ff fab8 	bl	8000e3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a22      	ldr	r2, [pc, #136]	; (8001958 <HAL_UART_MspInit+0x380>)
 80018d0:	675a      	str	r2, [r3, #116]	; 0x74
 80018d2:	4a21      	ldr	r2, [pc, #132]	; (8001958 <HAL_UART_MspInit+0x380>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream7;
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_UART_MspInit+0x388>)
 80018da:	4a22      	ldr	r2, [pc, #136]	; (8001964 <HAL_UART_MspInit+0x38c>)
 80018dc:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_UART_MspInit+0x388>)
 80018e0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80018e4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <HAL_UART_MspInit+0x388>)
 80018e8:	2240      	movs	r2, #64	; 0x40
 80018ea:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_UART_MspInit+0x388>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_UART_MspInit+0x388>)
 80018f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_UART_MspInit+0x388>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_UART_MspInit+0x388>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_UART_MspInit+0x388>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_UART_MspInit+0x388>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <HAL_UART_MspInit+0x388>)
 8001914:	2200      	movs	r2, #0
 8001916:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001918:	4811      	ldr	r0, [pc, #68]	; (8001960 <HAL_UART_MspInit+0x388>)
 800191a:	f001 fbc9 	bl	80030b0 <HAL_DMA_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_UART_MspInit+0x350>
      Error_Handler();
 8001924:	f7ff fa8a 	bl	8000e3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <HAL_UART_MspInit+0x388>)
 800192c:	671a      	str	r2, [r3, #112]	; 0x70
 800192e:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <HAL_UART_MspInit+0x388>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2047      	movs	r0, #71	; 0x47
 800193a:	f001 fb82 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800193e:	2047      	movs	r0, #71	; 0x47
 8001940:	f001 fb9b 	bl	800307a <HAL_NVIC_EnableIRQ>
}
 8001944:	bf00      	nop
 8001946:	37b8      	adds	r7, #184	; 0xb8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40011400 	.word	0x40011400
 8001950:	40023800 	.word	0x40023800
 8001954:	40020800 	.word	0x40020800
 8001958:	200009a8 	.word	0x200009a8
 800195c:	40026428 	.word	0x40026428
 8001960:	20000a08 	.word	0x20000a08
 8001964:	400264b8 	.word	0x400264b8

08001968 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0ac      	sub	sp, #176	; 0xb0
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001980:	f107 0318 	add.w	r3, r7, #24
 8001984:	2284      	movs	r2, #132	; 0x84
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f015 fa8f 	bl	8016eac <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001996:	d159      	bne.n	8001a4c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001998:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800199c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800199e:	2300      	movs	r3, #0
 80019a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a4:	f107 0318 	add.w	r3, r7, #24
 80019a8:	4618      	mov	r0, r3
 80019aa:	f006 f92f 	bl	8007c0c <HAL_RCCEx_PeriphCLKConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80019b4:	f7ff fa42 	bl	8000e3c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_PCD_MspInit+0xec>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	4a25      	ldr	r2, [pc, #148]	; (8001a54 <HAL_PCD_MspInit+0xec>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6313      	str	r3, [r2, #48]	; 0x30
 80019c4:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <HAL_PCD_MspInit+0xec>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019d0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019ea:	230a      	movs	r3, #10
 80019ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019f4:	4619      	mov	r1, r3
 80019f6:	4818      	ldr	r0, [pc, #96]	; (8001a58 <HAL_PCD_MspInit+0xf0>)
 80019f8:	f003 f964 	bl	8004cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a14:	4619      	mov	r1, r3
 8001a16:	4810      	ldr	r0, [pc, #64]	; (8001a58 <HAL_PCD_MspInit+0xf0>)
 8001a18:	f003 f954 	bl	8004cc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_PCD_MspInit+0xec>)
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a20:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <HAL_PCD_MspInit+0xec>)
 8001a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a26:	6353      	str	r3, [r2, #52]	; 0x34
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <HAL_PCD_MspInit+0xec>)
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_PCD_MspInit+0xec>)
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_PCD_MspInit+0xec>)
 8001a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <HAL_PCD_MspInit+0xec>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a4c:	bf00      	nop
 8001a4e:	37b0      	adds	r7, #176	; 0xb0
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <NMI_Handler+0x4>

08001a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <MemManage_Handler+0x4>

08001a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa8:	f000 fb96 	bl	80021d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA1_Stream0_IRQHandler+0x10>)
 8001ab6:	f001 fc9b 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	2000033c 	.word	0x2000033c

08001ac4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA1_Stream2_IRQHandler+0x10>)
 8001aca:	f001 fc91 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000948 	.word	0x20000948

08001ad8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <DMA1_Stream3_IRQHandler+0x10>)
 8001ade:	f001 fc87 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200003fc 	.word	0x200003fc

08001aec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <DMA1_Stream4_IRQHandler+0x10>)
 8001af2:	f001 fc7d 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200008e8 	.word	0x200008e8

08001b00 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <DMA1_Stream6_IRQHandler+0x10>)
 8001b06:	f001 fc73 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000039c 	.word	0x2000039c

08001b14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <ADC_IRQHandler+0x10>)
 8001b1a:	f000 fcb3 	bl	8002484 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200001ec 	.word	0x200001ec

08001b28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <TIM3_IRQHandler+0x10>)
 8001b2e:	f007 fbb0 	bl	8009292 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000704 	.word	0x20000704

08001b3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <I2C1_EV_IRQHandler+0x10>)
 8001b42:	f003 fe61 	bl	8005808 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000294 	.word	0x20000294

08001b50 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <I2C1_ER_IRQHandler+0x10>)
 8001b56:	f003 fe71 	bl	800583c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000294 	.word	0x20000294

08001b64 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <I2C2_EV_IRQHandler+0x10>)
 8001b6a:	f003 fe4d 	bl	8005808 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200002e8 	.word	0x200002e8

08001b78 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <I2C2_ER_IRQHandler+0x10>)
 8001b7e:	f003 fe5d 	bl	800583c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200002e8 	.word	0x200002e8

08001b8c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <SPI1_IRQHandler+0x10>)
 8001b92:	f006 fe63 	bl	800885c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200004bc 	.word	0x200004bc

08001ba0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <DMA1_Stream7_IRQHandler+0x10>)
 8001ba6:	f001 fc23 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000045c 	.word	0x2000045c

08001bb4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <UART4_IRQHandler+0x10>)
 8001bba:	f008 f86f 	bl	8009c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000750 	.word	0x20000750

08001bc8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <DMA2_Stream0_IRQHandler+0x10>)
 8001bce:	f001 fc0f 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000644 	.word	0x20000644

08001bdc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <DMA2_Stream1_IRQHandler+0x10>)
 8001be2:	f001 fc05 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200009a8 	.word	0x200009a8

08001bf0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <DMA2_Stream2_IRQHandler+0x10>)
 8001bf6:	f001 fbfb 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000584 	.word	0x20000584

08001c04 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA2_Stream3_IRQHandler+0x10>)
 8001c0a:	f001 fbf1 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000234 	.word	0x20000234

08001c18 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <DMA2_Stream4_IRQHandler+0x10>)
 8001c1e:	f001 fbe7 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	200006a4 	.word	0x200006a4

08001c2c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <ETH_IRQHandler+0x10>)
 8001c32:	f002 f961 	bl	8003ef8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20005950 	.word	0x20005950

08001c40 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <DMA2_Stream5_IRQHandler+0x10>)
 8001c46:	f001 fbd3 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200005e4 	.word	0x200005e4

08001c54 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001c58:	4802      	ldr	r0, [pc, #8]	; (8001c64 <DMA2_Stream7_IRQHandler+0x10>)
 8001c5a:	f001 fbc9 	bl	80033f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000a08 	.word	0x20000a08

08001c68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c6c:	4802      	ldr	r0, [pc, #8]	; (8001c78 <USART6_IRQHandler+0x10>)
 8001c6e:	f008 f815 	bl	8009c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000860 	.word	0x20000860

08001c7c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <SPI4_IRQHandler+0x10>)
 8001c82:	f006 fdeb 	bl	800885c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000520 	.word	0x20000520

08001c90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
	return 1;
 8001c94:	2301      	movs	r3, #1
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_kill>:

int _kill(int pid, int sig)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <_kill+0x20>)
 8001cac:	2216      	movs	r2, #22
 8001cae:	601a      	str	r2, [r3, #0]
	return -1;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	20009338 	.word	0x20009338

08001cc4 <_exit>:

void _exit (int status)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ffe5 	bl	8001ca0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cd6:	e7fe      	b.n	8001cd6 <_exit+0x12>

08001cd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	e00a      	b.n	8001d00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cea:	f3af 8000 	nop.w
 8001cee:	4601      	mov	r1, r0
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	60ba      	str	r2, [r7, #8]
 8001cf6:	b2ca      	uxtb	r2, r1
 8001cf8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	dbf0      	blt.n	8001cea <_read+0x12>
	}

return len;
 8001d08:	687b      	ldr	r3, [r7, #4]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e009      	b.n	8001d38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60ba      	str	r2, [r7, #8]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dbf1      	blt.n	8001d24 <_write+0x12>
	}
	return len;
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_close>:

int _close(int file)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
	return -1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d72:	605a      	str	r2, [r3, #4]
	return 0;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_isatty>:

int _isatty(int file)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
	return 1;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
	return 0;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dbc:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <_sbrk+0x5c>)
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <_sbrk+0x60>)
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d102      	bne.n	8001dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <_sbrk+0x64>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <_sbrk+0x68>)
 8001dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <_sbrk+0x64>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d205      	bcs.n	8001df0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <_sbrk+0x6c>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
 8001dee:	e009      	b.n	8001e04 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <_sbrk+0x64>)
 8001e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e02:	68fb      	ldr	r3, [r7, #12]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	20050000 	.word	0x20050000
 8001e14:	00000400 	.word	0x00000400
 8001e18:	20000f70 	.word	0x20000f70
 8001e1c:	20009340 	.word	0x20009340
 8001e20:	20009338 	.word	0x20009338

08001e24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <SystemInit+0x20>)
 8001e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <SystemInit+0x20>)
 8001e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e4e:	490e      	ldr	r1, [pc, #56]	; (8001e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e64:	4c0b      	ldr	r4, [pc, #44]	; (8001e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e72:	f7ff ffd7 	bl	8001e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e76:	f014 ffc7 	bl	8016e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e7a:	f7fe fb9b 	bl	80005b4 <main>
  bx  lr    
 8001e7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e80:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001e8c:	0801abd4 	.word	0x0801abd4
  ldr r2, =_sbss
 8001e90:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001e94:	20009340 	.word	0x20009340

08001e98 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <CAN1_RX0_IRQHandler>

08001e9a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <LAN8742_RegisterBusIO+0x28>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d007      	beq.n	8001ec2 <LAN8742_RegisterBusIO+0x28>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <LAN8742_RegisterBusIO+0x28>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e014      	b.n	8001ef2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d17c      	bne.n	8002018 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2220      	movs	r2, #32
 8001f30:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e01c      	b.n	8001f72 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	f107 0208 	add.w	r2, r7, #8
 8001f40:	2112      	movs	r1, #18
 8001f42:	6978      	ldr	r0, [r7, #20]
 8001f44:	4798      	blx	r3
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da03      	bge.n	8001f54 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001f4c:	f06f 0304 	mvn.w	r3, #4
 8001f50:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001f52:	e00b      	b.n	8001f6c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	f003 031f 	and.w	r3, r3, #31
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d105      	bne.n	8001f6c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
         break;
 8001f6a:	e005      	b.n	8001f78 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b1f      	cmp	r3, #31
 8001f76:	d9df      	bls.n	8001f38 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2b1f      	cmp	r3, #31
 8001f7e:	d902      	bls.n	8001f86 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001f80:	f06f 0302 	mvn.w	r3, #2
 8001f84:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d145      	bne.n	8002018 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6810      	ldr	r0, [r2, #0]
 8001f94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4798      	blx	r3
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db37      	blt.n	8002012 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6810      	ldr	r0, [r2, #0]
 8001faa:	f107 0208 	add.w	r2, r7, #8
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4798      	blx	r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db28      	blt.n	800200a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4798      	blx	r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001fc2:	e01c      	b.n	8001ffe <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4798      	blx	r3
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fd6:	d80e      	bhi.n	8001ff6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6810      	ldr	r0, [r2, #0]
 8001fe0:	f107 0208 	add.w	r2, r7, #8
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4798      	blx	r3
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da07      	bge.n	8001ffe <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001fee:	f06f 0304 	mvn.w	r3, #4
 8001ff2:	613b      	str	r3, [r7, #16]
                 break;
 8001ff4:	e010      	b.n	8002018 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001ff6:	f06f 0301 	mvn.w	r3, #1
 8001ffa:	613b      	str	r3, [r7, #16]
               break;
 8001ffc:	e00c      	b.n	8002018 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1dd      	bne.n	8001fc4 <LAN8742_Init+0xc6>
 8002008:	e006      	b.n	8002018 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800200a:	f06f 0304 	mvn.w	r3, #4
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	e002      	b.n	8002018 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002012:	f06f 0303 	mvn.w	r3, #3
 8002016:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d112      	bne.n	8002044 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	4798      	blx	r3
 8002024:	4603      	mov	r3, r0
 8002026:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002028:	bf00      	nop
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	4798      	blx	r3
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800203c:	d9f5      	bls.n	800202a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002044:	693b      	ldr	r3, [r7, #16]
 }
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6810      	ldr	r0, [r2, #0]
 8002062:	f107 020c 	add.w	r2, r7, #12
 8002066:	2101      	movs	r1, #1
 8002068:	4798      	blx	r3
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	da02      	bge.n	8002076 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002070:	f06f 0304 	mvn.w	r3, #4
 8002074:	e06e      	b.n	8002154 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6810      	ldr	r0, [r2, #0]
 800207e:	f107 020c 	add.w	r2, r7, #12
 8002082:	2101      	movs	r1, #1
 8002084:	4798      	blx	r3
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	da02      	bge.n	8002092 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800208c:	f06f 0304 	mvn.w	r3, #4
 8002090:	e060      	b.n	8002154 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800209c:	2301      	movs	r3, #1
 800209e:	e059      	b.n	8002154 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6810      	ldr	r0, [r2, #0]
 80020a8:	f107 020c 	add.w	r2, r7, #12
 80020ac:	2100      	movs	r1, #0
 80020ae:	4798      	blx	r3
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da02      	bge.n	80020bc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80020b6:	f06f 0304 	mvn.w	r3, #4
 80020ba:	e04b      	b.n	8002154 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d11b      	bne.n	80020fe <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <LAN8742_GetLinkState+0x90>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80020da:	2302      	movs	r3, #2
 80020dc:	e03a      	b.n	8002154 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e033      	b.n	8002154 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80020f6:	2304      	movs	r3, #4
 80020f8:	e02c      	b.n	8002154 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80020fa:	2305      	movs	r3, #5
 80020fc:	e02a      	b.n	8002154 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6810      	ldr	r0, [r2, #0]
 8002106:	f107 020c 	add.w	r2, r7, #12
 800210a:	211f      	movs	r1, #31
 800210c:	4798      	blx	r3
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	da02      	bge.n	800211a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002114:	f06f 0304 	mvn.w	r3, #4
 8002118:	e01c      	b.n	8002154 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002124:	2306      	movs	r3, #6
 8002126:	e015      	b.n	8002154 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 031c 	and.w	r3, r3, #28
 800212e:	2b18      	cmp	r3, #24
 8002130:	d101      	bne.n	8002136 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002132:	2302      	movs	r3, #2
 8002134:	e00e      	b.n	8002154 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 031c 	and.w	r3, r3, #28
 800213c:	2b08      	cmp	r3, #8
 800213e:	d101      	bne.n	8002144 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002140:	2303      	movs	r3, #3
 8002142:	e007      	b.n	8002154 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 031c 	and.w	r3, r3, #28
 800214a:	2b14      	cmp	r3, #20
 800214c:	d101      	bne.n	8002152 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800214e:	2304      	movs	r3, #4
 8002150:	e000      	b.n	8002154 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002152:	2305      	movs	r3, #5
    }				
  }
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002160:	2003      	movs	r0, #3
 8002162:	f000 ff63 	bl	800302c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002166:	2000      	movs	r0, #0
 8002168:	f000 f806 	bl	8002178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800216c:	f7fe fe6c 	bl	8000e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_InitTick+0x54>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_InitTick+0x58>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f000 ff7d 	bl	8003096 <HAL_SYSTICK_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00e      	b.n	80021c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b0f      	cmp	r3, #15
 80021aa:	d80a      	bhi.n	80021c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ac:	2200      	movs	r2, #0
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f000 ff45 	bl	8003042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <HAL_InitTick+0x5c>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000008 	.word	0x20000008
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_IncTick+0x20>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_IncTick+0x24>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_IncTick+0x24>)
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000008 	.word	0x20000008
 80021fc:	20000f74 	.word	0x20000f74

08002200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return uwTick;
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_GetTick+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000f74 	.word	0x20000f74

08002218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff ffee 	bl	8002200 <HAL_GetTick>
 8002224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d005      	beq.n	800223e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_Delay+0x44>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800223e:	bf00      	nop
 8002240:	f7ff ffde 	bl	8002200 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	429a      	cmp	r2, r3
 800224e:	d8f7      	bhi.n	8002240 <HAL_Delay+0x28>
  {
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000008 	.word	0x20000008

08002260 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e031      	b.n	80022da <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fe06 	bl	8000e90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d116      	bne.n	80022cc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_ADC_Init+0x84>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	f043 0202 	orr.w	r2, r3, #2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fc66 	bl	8002b80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f023 0303 	bic.w	r3, r3, #3
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
 80022ca:	e001      	b.n	80022d0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	ffffeefd 	.word	0xffffeefd

080022e8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_ADC_Start+0x1a>
 80022fe:	2302      	movs	r3, #2
 8002300:	e0ad      	b.n	800245e <HAL_ADC_Start+0x176>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	d018      	beq.n	800234a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <HAL_ADC_Start+0x184>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a50      	ldr	r2, [pc, #320]	; (8002470 <HAL_ADC_Start+0x188>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0c9a      	lsrs	r2, r3, #18
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800233c:	e002      	b.n	8002344 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3b01      	subs	r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f9      	bne.n	800233e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d175      	bne.n	8002444 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235c:	4b45      	ldr	r3, [pc, #276]	; (8002474 <HAL_ADC_Start+0x18c>)
 800235e:	4013      	ands	r3, r2
 8002360:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800237e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800238e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002392:	d106      	bne.n	80023a2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	f023 0206 	bic.w	r2, r3, #6
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
 80023a0:	e002      	b.n	80023a8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023b8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_ADC_Start+0x190>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 031f 	and.w	r3, r3, #31
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10f      	bne.n	80023e6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d143      	bne.n	800245c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	e03a      	b.n	800245c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a24      	ldr	r2, [pc, #144]	; (800247c <HAL_ADC_Start+0x194>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d10e      	bne.n	800240e <HAL_ADC_Start+0x126>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d107      	bne.n	800240e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800240c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_ADC_Start+0x190>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	2b00      	cmp	r3, #0
 8002418:	d120      	bne.n	800245c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a18      	ldr	r2, [pc, #96]	; (8002480 <HAL_ADC_Start+0x198>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d11b      	bne.n	800245c <HAL_ADC_Start+0x174>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d114      	bne.n	800245c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	e00b      	b.n	800245c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f043 0210 	orr.w	r2, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000000 	.word	0x20000000
 8002470:	431bde83 	.word	0x431bde83
 8002474:	fffff8fe 	.word	0xfffff8fe
 8002478:	40012300 	.word	0x40012300
 800247c:	40012000 	.word	0x40012000
 8002480:	40012200 	.word	0x40012200

08002484 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0320 	and.w	r3, r3, #32
 80024b2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d049      	beq.n	800254e <HAL_ADC_IRQHandler+0xca>
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d046      	beq.n	800254e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d105      	bne.n	80024d8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d12b      	bne.n	800253e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d127      	bne.n	800253e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002506:	2b00      	cmp	r3, #0
 8002508:	d119      	bne.n	800253e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0220 	bic.w	r2, r2, #32
 8002518:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f043 0201 	orr.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f013 ff16 	bl	8016370 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0212 	mvn.w	r2, #18
 800254c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d057      	beq.n	8002614 <HAL_ADC_IRQHandler+0x190>
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d054      	beq.n	8002614 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b00      	cmp	r3, #0
 8002574:	d105      	bne.n	8002582 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d139      	bne.n	8002604 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d12b      	bne.n	8002604 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d124      	bne.n	8002604 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d11d      	bne.n	8002604 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d119      	bne.n	8002604 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fc37 	bl	8002e78 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f06f 020c 	mvn.w	r2, #12
 8002612:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d017      	beq.n	800265a <HAL_ADC_IRQHandler+0x1d6>
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d014      	beq.n	800265a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d10d      	bne.n	800265a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f92e 	bl	80028ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0201 	mvn.w	r2, #1
 8002658:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002668:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d015      	beq.n	800269c <HAL_ADC_IRQHandler+0x218>
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d012      	beq.n	800269c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f043 0202 	orr.w	r2, r3, #2
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f06f 0220 	mvn.w	r2, #32
 800268a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f917 	bl	80028c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f06f 0220 	mvn.w	r2, #32
 800269a:	601a      	str	r2, [r3, #0]
  }
}
 800269c:	bf00      	nop
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_ADC_Start_DMA+0x1e>
 80026be:	2302      	movs	r3, #2
 80026c0:	e0d4      	b.n	800286c <HAL_ADC_Start_DMA+0x1c8>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d018      	beq.n	800270a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80026e8:	4b62      	ldr	r3, [pc, #392]	; (8002874 <HAL_ADC_Start_DMA+0x1d0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a62      	ldr	r2, [pc, #392]	; (8002878 <HAL_ADC_Start_DMA+0x1d4>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0c9a      	lsrs	r2, r3, #18
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80026fc:	e002      	b.n	8002704 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3b01      	subs	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1f9      	bne.n	80026fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	f040 809c 	bne.w	8002852 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800271e:	4b57      	ldr	r3, [pc, #348]	; (800287c <HAL_ADC_Start_DMA+0x1d8>)
 8002720:	4013      	ands	r3, r2
 8002722:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002740:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002754:	d106      	bne.n	8002764 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f023 0206 	bic.w	r2, r3, #6
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
 8002762:	e002      	b.n	800276a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	4a42      	ldr	r2, [pc, #264]	; (8002880 <HAL_ADC_Start_DMA+0x1dc>)
 8002778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277e:	4a41      	ldr	r2, [pc, #260]	; (8002884 <HAL_ADC_Start_DMA+0x1e0>)
 8002780:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	4a40      	ldr	r2, [pc, #256]	; (8002888 <HAL_ADC_Start_DMA+0x1e4>)
 8002788:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002792:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80027a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	334c      	adds	r3, #76	; 0x4c
 80027be:	4619      	mov	r1, r3
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f000 fd22 	bl	800320c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80027c8:	4b30      	ldr	r3, [pc, #192]	; (800288c <HAL_ADC_Start_DMA+0x1e8>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10f      	bne.n	80027f4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d143      	bne.n	800286a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	e03a      	b.n	800286a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a25      	ldr	r2, [pc, #148]	; (8002890 <HAL_ADC_Start_DMA+0x1ec>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10e      	bne.n	800281c <HAL_ADC_Start_DMA+0x178>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800281a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_ADC_Start_DMA+0x1e8>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b00      	cmp	r3, #0
 8002826:	d120      	bne.n	800286a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <HAL_ADC_Start_DMA+0x1f0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d11b      	bne.n	800286a <HAL_ADC_Start_DMA+0x1c6>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d114      	bne.n	800286a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	e00b      	b.n	800286a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f043 0210 	orr.w	r2, r3, #16
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000000 	.word	0x20000000
 8002878:	431bde83 	.word	0x431bde83
 800287c:	fffff8fe 	.word	0xfffff8fe
 8002880:	08002d75 	.word	0x08002d75
 8002884:	08002e2f 	.word	0x08002e2f
 8002888:	08002e4b 	.word	0x08002e4b
 800288c:	40012300 	.word	0x40012300
 8002890:	40012000 	.word	0x40012000
 8002894:	40012200 	.word	0x40012200

08002898 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x1c>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e136      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x28a>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b09      	cmp	r3, #9
 80028fe:	d93a      	bls.n	8002976 <HAL_ADC_ConfigChannel+0xa2>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002908:	d035      	beq.n	8002976 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68d9      	ldr	r1, [r3, #12]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	3b1e      	subs	r3, #30
 8002920:	2207      	movs	r2, #7
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43da      	mvns	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	400a      	ands	r2, r1
 800292e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a8d      	ldr	r2, [pc, #564]	; (8002b6c <HAL_ADC_ConfigChannel+0x298>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d10a      	bne.n	8002950 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68d9      	ldr	r1, [r3, #12]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	061a      	lsls	r2, r3, #24
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800294e:	e035      	b.n	80029bc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68d9      	ldr	r1, [r3, #12]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	4603      	mov	r3, r0
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4403      	add	r3, r0
 8002968:	3b1e      	subs	r3, #30
 800296a:	409a      	lsls	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002974:	e022      	b.n	80029bc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6919      	ldr	r1, [r3, #16]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	b29b      	uxth	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	2207      	movs	r2, #7
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43da      	mvns	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	400a      	ands	r2, r1
 8002998:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6919      	ldr	r1, [r3, #16]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	4618      	mov	r0, r3
 80029ac:	4603      	mov	r3, r0
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4403      	add	r3, r0
 80029b2:	409a      	lsls	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d824      	bhi.n	8002a0e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	3b05      	subs	r3, #5
 80029d6:	221f      	movs	r2, #31
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43da      	mvns	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	400a      	ands	r2, r1
 80029e4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	3b05      	subs	r3, #5
 8002a00:	fa00 f203 	lsl.w	r2, r0, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	635a      	str	r2, [r3, #52]	; 0x34
 8002a0c:	e04c      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d824      	bhi.n	8002a60 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	3b23      	subs	r3, #35	; 0x23
 8002a28:	221f      	movs	r2, #31
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	400a      	ands	r2, r1
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	4618      	mov	r0, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	3b23      	subs	r3, #35	; 0x23
 8002a52:	fa00 f203 	lsl.w	r2, r0, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5e:	e023      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b41      	subs	r3, #65	; 0x41
 8002a72:	221f      	movs	r2, #31
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	400a      	ands	r2, r1
 8002a80:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	4618      	mov	r0, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	3b41      	subs	r3, #65	; 0x41
 8002a9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a30      	ldr	r2, [pc, #192]	; (8002b70 <HAL_ADC_ConfigChannel+0x29c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002abc:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a2c      	ldr	r2, [pc, #176]	; (8002b74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ac2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002ac6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a28      	ldr	r2, [pc, #160]	; (8002b70 <HAL_ADC_ConfigChannel+0x29c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d10f      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x21e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b12      	cmp	r3, #18
 8002ad8:	d10b      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002ada:	4b26      	ldr	r3, [pc, #152]	; (8002b74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ae0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ae4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002ae6:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4a22      	ldr	r2, [pc, #136]	; (8002b74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002af0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <HAL_ADC_ConfigChannel+0x29c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d12b      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x280>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1a      	ldr	r2, [pc, #104]	; (8002b6c <HAL_ADC_ConfigChannel+0x298>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d003      	beq.n	8002b0e <HAL_ADC_ConfigChannel+0x23a>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b11      	cmp	r3, #17
 8002b0c:	d122      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002b0e:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b18:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b1a:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <HAL_ADC_ConfigChannel+0x2a0>)
 8002b20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b24:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a10      	ldr	r2, [pc, #64]	; (8002b6c <HAL_ADC_ConfigChannel+0x298>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d111      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_ADC_ConfigChannel+0x2a4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <HAL_ADC_ConfigChannel+0x2a8>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0c9a      	lsrs	r2, r3, #18
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b46:	e002      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f9      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	10000012 	.word	0x10000012
 8002b70:	40012000 	.word	0x40012000
 8002b74:	40012300 	.word	0x40012300
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	431bde83 	.word	0x431bde83

08002b80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b88:	4b78      	ldr	r3, [pc, #480]	; (8002d6c <ADC_Init+0x1ec>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a77      	ldr	r2, [pc, #476]	; (8002d6c <ADC_Init+0x1ec>)
 8002b8e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002b92:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b94:	4b75      	ldr	r3, [pc, #468]	; (8002d6c <ADC_Init+0x1ec>)
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4973      	ldr	r1, [pc, #460]	; (8002d6c <ADC_Init+0x1ec>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6859      	ldr	r1, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	021a      	lsls	r2, r3, #8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6899      	ldr	r1, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	4a58      	ldr	r2, [pc, #352]	; (8002d70 <ADC_Init+0x1f0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6899      	ldr	r1, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6899      	ldr	r1, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	e00f      	b.n	8002c7a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0202 	bic.w	r2, r2, #2
 8002c88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6899      	ldr	r1, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	005a      	lsls	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01b      	beq.n	8002ce0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6859      	ldr	r1, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	035a      	lsls	r2, r3, #13
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	e007      	b.n	8002cf0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	051a      	lsls	r2, r3, #20
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d32:	025a      	lsls	r2, r3, #9
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6899      	ldr	r1, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	029a      	lsls	r2, r3, #10
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	609a      	str	r2, [r3, #8]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	40012300 	.word	0x40012300
 8002d70:	0f000001 	.word	0x0f000001

08002d74 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d13c      	bne.n	8002e08 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d12b      	bne.n	8002e00 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d127      	bne.n	8002e00 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d119      	bne.n	8002e00 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0220 	bic.w	r2, r2, #32
 8002dda:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d105      	bne.n	8002e00 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f013 fab5 	bl	8016370 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e06:	e00e      	b.n	8002e26 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f7ff fd53 	bl	80028c0 <HAL_ADC_ErrorCallback>
}
 8002e1a:	e004      	b.n	8002e26 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
}
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7ff fd2b 	bl	8002898 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e56:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	f043 0204 	orr.w	r2, r3, #4
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff fd28 	bl	80028c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <__NVIC_SetPriorityGrouping+0x40>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eba:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <__NVIC_SetPriorityGrouping+0x40>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	60d3      	str	r3, [r2, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00
 8002ed0:	05fa0000 	.word	0x05fa0000

08002ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <__NVIC_GetPriorityGrouping+0x18>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 0307 	and.w	r3, r3, #7
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db0b      	blt.n	8002f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	f003 021f 	and.w	r2, r3, #31
 8002f08:	4907      	ldr	r1, [pc, #28]	; (8002f28 <__NVIC_EnableIRQ+0x38>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2001      	movs	r0, #1
 8002f12:	fa00 f202 	lsl.w	r2, r0, r2
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000e100 	.word	0xe000e100

08002f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db0a      	blt.n	8002f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	490c      	ldr	r1, [pc, #48]	; (8002f78 <__NVIC_SetPriority+0x4c>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f54:	e00a      	b.n	8002f6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4908      	ldr	r1, [pc, #32]	; (8002f7c <__NVIC_SetPriority+0x50>)
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3b04      	subs	r3, #4
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	440b      	add	r3, r1
 8002f6a:	761a      	strb	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f1c3 0307 	rsb	r3, r3, #7
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	bf28      	it	cs
 8002f9e:	2304      	movcs	r3, #4
 8002fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d902      	bls.n	8002fb0 <NVIC_EncodePriority+0x30>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3b03      	subs	r3, #3
 8002fae:	e000      	b.n	8002fb2 <NVIC_EncodePriority+0x32>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43d9      	mvns	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	4313      	orrs	r3, r2
         );
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff8:	d301      	bcc.n	8002ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00f      	b.n	800301e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <SysTick_Config+0x40>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003006:	210f      	movs	r1, #15
 8003008:	f04f 30ff 	mov.w	r0, #4294967295
 800300c:	f7ff ff8e 	bl	8002f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <SysTick_Config+0x40>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <SysTick_Config+0x40>)
 8003018:	2207      	movs	r2, #7
 800301a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff29 	bl	8002e8c <__NVIC_SetPriorityGrouping>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003054:	f7ff ff3e 	bl	8002ed4 <__NVIC_GetPriorityGrouping>
 8003058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f7ff ff8e 	bl	8002f80 <NVIC_EncodePriority>
 8003064:	4602      	mov	r2, r0
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff5d 	bl	8002f2c <__NVIC_SetPriority>
}
 8003072:	bf00      	nop
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff31 	bl	8002ef0 <__NVIC_EnableIRQ>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ffa2 	bl	8002fe8 <SysTick_Config>
 80030a4:	4603      	mov	r3, r0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030bc:	f7ff f8a0 	bl	8002200 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e099      	b.n	8003200 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0201 	bic.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ec:	e00f      	b.n	800310e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ee:	f7ff f887 	bl	8002200 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	d908      	bls.n	800310e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2203      	movs	r2, #3
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e078      	b.n	8003200 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e8      	bne.n	80030ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4b38      	ldr	r3, [pc, #224]	; (8003208 <HAL_DMA_Init+0x158>)
 8003128:	4013      	ands	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800313a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2b04      	cmp	r3, #4
 8003166:	d107      	bne.n	8003178 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003170:	4313      	orrs	r3, r2
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f023 0307 	bic.w	r3, r3, #7
 800318e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d117      	bne.n	80031d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00e      	beq.n	80031d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fb23 	bl	8003800 <DMA_CheckFifoParam>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2240      	movs	r2, #64	; 0x40
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031ce:	2301      	movs	r3, #1
 80031d0:	e016      	b.n	8003200 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fada 	bl	8003794 <DMA_CalcBaseAndBitshift>
 80031e0:	4603      	mov	r3, r0
 80031e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	223f      	movs	r2, #63	; 0x3f
 80031ea:	409a      	lsls	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	f010803f 	.word	0xf010803f

0800320c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_DMA_Start_IT+0x26>
 800322e:	2302      	movs	r3, #2
 8003230:	e048      	b.n	80032c4 <HAL_DMA_Start_IT+0xb8>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d137      	bne.n	80032b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fa6c 	bl	8003738 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003264:	223f      	movs	r2, #63	; 0x3f
 8003266:	409a      	lsls	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0216 	orr.w	r2, r2, #22
 800327a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800328a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0208 	orr.w	r2, r2, #8
 80032a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0201 	orr.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	e005      	b.n	80032c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032be:	2302      	movs	r3, #2
 80032c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032da:	f7fe ff91 	bl	8002200 <HAL_GetTick>
 80032de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d008      	beq.n	80032fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2280      	movs	r2, #128	; 0x80
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e052      	b.n	80033a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0216 	bic.w	r2, r2, #22
 800330c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800331c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_DMA_Abort+0x62>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0208 	bic.w	r2, r2, #8
 800333c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800334e:	e013      	b.n	8003378 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003350:	f7fe ff56 	bl	8002200 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b05      	cmp	r3, #5
 800335c:	d90c      	bls.n	8003378 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2203      	movs	r2, #3
 8003368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e015      	b.n	80033a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e4      	bne.n	8003350 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	223f      	movs	r2, #63	; 0x3f
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d004      	beq.n	80033ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2280      	movs	r2, #128	; 0x80
 80033c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00c      	b.n	80033e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2205      	movs	r2, #5
 80033ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0201 	bic.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80033fc:	4b8e      	ldr	r3, [pc, #568]	; (8003638 <HAL_DMA_IRQHandler+0x248>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a8e      	ldr	r2, [pc, #568]	; (800363c <HAL_DMA_IRQHandler+0x24c>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0a9b      	lsrs	r3, r3, #10
 8003408:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	2208      	movs	r2, #8
 800341c:	409a      	lsls	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01a      	beq.n	800345c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0204 	bic.w	r2, r2, #4
 8003442:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	2208      	movs	r2, #8
 800344a:	409a      	lsls	r2, r3
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	f043 0201 	orr.w	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	2201      	movs	r2, #1
 8003462:	409a      	lsls	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347e:	2201      	movs	r2, #1
 8003480:	409a      	lsls	r2, r3
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f043 0202 	orr.w	r2, r3, #2
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003496:	2204      	movs	r2, #4
 8003498:	409a      	lsls	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d012      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b4:	2204      	movs	r2, #4
 80034b6:	409a      	lsls	r2, r3
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	f043 0204 	orr.w	r2, r3, #4
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	2210      	movs	r2, #16
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d043      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d03c      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	2210      	movs	r2, #16
 80034ec:	409a      	lsls	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d018      	beq.n	8003532 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d108      	bne.n	8003520 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d024      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	4798      	blx	r3
 800351e:	e01f      	b.n	8003560 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01b      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
 8003530:	e016      	b.n	8003560 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d107      	bne.n	8003550 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0208 	bic.w	r2, r2, #8
 800354e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	2220      	movs	r2, #32
 8003566:	409a      	lsls	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 808f 	beq.w	8003690 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8087 	beq.w	8003690 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003586:	2220      	movs	r2, #32
 8003588:	409a      	lsls	r2, r3
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b05      	cmp	r3, #5
 8003598:	d136      	bne.n	8003608 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0216 	bic.w	r2, r2, #22
 80035a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695a      	ldr	r2, [r3, #20]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d103      	bne.n	80035ca <HAL_DMA_IRQHandler+0x1da>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d007      	beq.n	80035da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0208 	bic.w	r2, r2, #8
 80035d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	223f      	movs	r2, #63	; 0x3f
 80035e0:	409a      	lsls	r2, r3
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d07e      	beq.n	80036fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	4798      	blx	r3
        }
        return;
 8003606:	e079      	b.n	80036fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01d      	beq.n	8003652 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10d      	bne.n	8003640 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	2b00      	cmp	r3, #0
 800362a:	d031      	beq.n	8003690 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
 8003634:	e02c      	b.n	8003690 <HAL_DMA_IRQHandler+0x2a0>
 8003636:	bf00      	nop
 8003638:	20000000 	.word	0x20000000
 800363c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d023      	beq.n	8003690 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
 8003650:	e01e      	b.n	8003690 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10f      	bne.n	8003680 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0210 	bic.w	r2, r2, #16
 800366e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	2b00      	cmp	r3, #0
 8003696:	d032      	beq.n	80036fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d022      	beq.n	80036ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2205      	movs	r2, #5
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	3301      	adds	r3, #1
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d307      	bcc.n	80036d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f2      	bne.n	80036bc <HAL_DMA_IRQHandler+0x2cc>
 80036d6:	e000      	b.n	80036da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
 80036fa:	e000      	b.n	80036fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80036fc:	bf00      	nop
    }
  }
}
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003712:	b2db      	uxtb	r3, r3
}
 8003714:	4618      	mov	r0, r3
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003754:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b40      	cmp	r3, #64	; 0x40
 8003764:	d108      	bne.n	8003778 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003776:	e007      	b.n	8003788 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	60da      	str	r2, [r3, #12]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	3b10      	subs	r3, #16
 80037a4:	4a13      	ldr	r2, [pc, #76]	; (80037f4 <DMA_CalcBaseAndBitshift+0x60>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037ae:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <DMA_CalcBaseAndBitshift+0x64>)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d908      	bls.n	80037d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <DMA_CalcBaseAndBitshift+0x68>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	1d1a      	adds	r2, r3, #4
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	659a      	str	r2, [r3, #88]	; 0x58
 80037d2:	e006      	b.n	80037e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	4b08      	ldr	r3, [pc, #32]	; (80037fc <DMA_CalcBaseAndBitshift+0x68>)
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	aaaaaaab 	.word	0xaaaaaaab
 80037f8:	0801a984 	.word	0x0801a984
 80037fc:	fffffc00 	.word	0xfffffc00

08003800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11f      	bne.n	800385a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b03      	cmp	r3, #3
 800381e:	d856      	bhi.n	80038ce <DMA_CheckFifoParam+0xce>
 8003820:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <DMA_CheckFifoParam+0x28>)
 8003822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003826:	bf00      	nop
 8003828:	08003839 	.word	0x08003839
 800382c:	0800384b 	.word	0x0800384b
 8003830:	08003839 	.word	0x08003839
 8003834:	080038cf 	.word	0x080038cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d046      	beq.n	80038d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003848:	e043      	b.n	80038d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003852:	d140      	bne.n	80038d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003858:	e03d      	b.n	80038d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003862:	d121      	bne.n	80038a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d837      	bhi.n	80038da <DMA_CheckFifoParam+0xda>
 800386a:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <DMA_CheckFifoParam+0x70>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	08003881 	.word	0x08003881
 8003874:	08003887 	.word	0x08003887
 8003878:	08003881 	.word	0x08003881
 800387c:	08003899 	.word	0x08003899
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      break;
 8003884:	e030      	b.n	80038e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d025      	beq.n	80038de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003896:	e022      	b.n	80038de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038a0:	d11f      	bne.n	80038e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038a6:	e01c      	b.n	80038e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d903      	bls.n	80038b6 <DMA_CheckFifoParam+0xb6>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b03      	cmp	r3, #3
 80038b2:	d003      	beq.n	80038bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038b4:	e018      	b.n	80038e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
      break;
 80038ba:	e015      	b.n	80038e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00e      	beq.n	80038e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      break;
 80038cc:	e00b      	b.n	80038e6 <DMA_CheckFifoParam+0xe6>
      break;
 80038ce:	bf00      	nop
 80038d0:	e00a      	b.n	80038e8 <DMA_CheckFifoParam+0xe8>
      break;
 80038d2:	bf00      	nop
 80038d4:	e008      	b.n	80038e8 <DMA_CheckFifoParam+0xe8>
      break;
 80038d6:	bf00      	nop
 80038d8:	e006      	b.n	80038e8 <DMA_CheckFifoParam+0xe8>
      break;
 80038da:	bf00      	nop
 80038dc:	e004      	b.n	80038e8 <DMA_CheckFifoParam+0xe8>
      break;
 80038de:	bf00      	nop
 80038e0:	e002      	b.n	80038e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80038e2:	bf00      	nop
 80038e4:	e000      	b.n	80038e8 <DMA_CheckFifoParam+0xe8>
      break;
 80038e6:	bf00      	nop
    }
  } 
  
  return status; 
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop

080038f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e06a      	b.n	80039e0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003910:	2b00      	cmp	r3, #0
 8003912:	d106      	bne.n	8003922 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2223      	movs	r2, #35	; 0x23
 8003918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f008 f973 	bl	800bc08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003922:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <HAL_ETH_Init+0xf0>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	4a30      	ldr	r2, [pc, #192]	; (80039e8 <HAL_ETH_Init+0xf0>)
 8003928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800392c:	6453      	str	r3, [r2, #68]	; 0x44
 800392e:	4b2e      	ldr	r3, [pc, #184]	; (80039e8 <HAL_ETH_Init+0xf0>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800393a:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_ETH_Init+0xf4>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4a2b      	ldr	r2, [pc, #172]	; (80039ec <HAL_ETH_Init+0xf4>)
 8003940:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003944:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003946:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_ETH_Init+0xf4>)
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	4927      	ldr	r1, [pc, #156]	; (80039ec <HAL_ETH_Init+0xf4>)
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003954:	4b25      	ldr	r3, [pc, #148]	; (80039ec <HAL_ETH_Init+0xf4>)
 8003956:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800396e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003970:	f7fe fc46 	bl	8002200 <HAL_GetTick>
 8003974:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003976:	e011      	b.n	800399c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003978:	f7fe fc42 	bl	8002200 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003986:	d909      	bls.n	800399c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2204      	movs	r2, #4
 800398c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	22e0      	movs	r2, #224	; 0xe0
 8003994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e021      	b.n	80039e0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1e4      	bne.n	8003978 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fee4 	bl	800477c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 ff8b 	bl	80048d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 ffe1 	bl	8004982 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	461a      	mov	r2, r3
 80039c6:	2100      	movs	r1, #0
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 ff49 	bl	8004860 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2210      	movs	r2, #16
 80039da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40013800 	.word	0x40013800

080039f0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d150      	bne.n	8003aa4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2223      	movs	r2, #35	; 0x23
 8003a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f9fd 	bl	8003e10 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0208 	orr.w	r2, r2, #8
 8003a24:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a2e:	2001      	movs	r0, #1
 8003a30:	f7fe fbf2 	bl	8002218 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0204 	orr.w	r2, r2, #4
 8003a4a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a54:	2001      	movs	r0, #1
 8003a56:	f7fe fbdf 	bl	8002218 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fd2a 	bl	80044bc <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6812      	ldr	r2, [r2, #0]
 8003a76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a7e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	f043 0302 	orr.w	r3, r3, #2
 8003a92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a96:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2223      	movs	r2, #35	; 0x23
 8003a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003abc:	2b23      	cmp	r3, #35	; 0x23
 8003abe:	d14a      	bne.n	8003b56 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2223      	movs	r2, #35	; 0x23
 8003ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ada:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ade:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	f023 0302 	bic.w	r3, r3, #2
 8003af2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003af6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0204 	bic.w	r2, r2, #4
 8003b06:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b10:	2001      	movs	r0, #1
 8003b12:	f7fe fb81 	bl	8002218 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fccc 	bl	80044bc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0208 	bic.w	r2, r2, #8
 8003b32:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f7fe fb6b 	bl	8002218 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2210      	movs	r2, #16
 8003b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b78:	f043 0201 	orr.w	r2, r3, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e07c      	b.n	8003c80 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8c:	2b23      	cmp	r3, #35	; 0x23
 8003b8e:	d176      	bne.n	8003c7e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003b90:	2200      	movs	r2, #0
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 ff61 	bl	8004a5c <ETH_Prepare_Tx_Descriptors>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f043 0202 	orr.w	r2, r3, #2
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e065      	b.n	8003c80 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003bb4:	f3bf 8f4f 	dsb	sy
}
 8003bb8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	3206      	adds	r2, #6
 8003bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	629a      	str	r2, [r3, #40]	; 0x28
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d904      	bls.n	8003be4 <HAL_ETH_Transmit+0x84>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	1f1a      	subs	r2, r3, #4
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3106      	adds	r1, #6
 8003bf0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003bf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bf8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003bfa:	f7fe fb01 	bl	8002200 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003c00:	e037      	b.n	8003c72 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d011      	beq.n	8003c38 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f043 0208 	orr.w	r2, r3, #8
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e023      	b.n	8003c80 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3e:	d018      	beq.n	8003c72 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c40:	f7fe fade 	bl	8002200 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d302      	bcc.n	8003c56 <HAL_ETH_Transmit+0xf6>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10d      	bne.n	8003c72 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	f043 0204 	orr.w	r2, r3, #4
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003c6c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e006      	b.n	8003c80 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	dbc3      	blt.n	8003c02 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
  }
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0a8      	b.n	8003e06 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cba:	2b23      	cmp	r3, #35	; 0x23
 8003cbc:	d001      	beq.n	8003cc2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0a1      	b.n	8003e06 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	3212      	adds	r2, #18
 8003cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd8:	f1c3 0304 	rsb	r3, r3, #4
 8003cdc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003cde:	e06a      	b.n	8003db6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d103      	bne.n	8003d10 <HAL_ETH_ReadData+0x88>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d040      	beq.n	8003d92 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	0c1b      	lsrs	r3, r3, #16
 8003d40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003d44:	3b04      	subs	r3, #4
 8003d46:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f008 f913 	bl	800bf9c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	441a      	add	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3301      	adds	r3, #1
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d902      	bls.n	8003da4 <HAL_ETH_ReadData+0x11c>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3b04      	subs	r3, #4
 8003da2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	3212      	adds	r2, #18
 8003daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dae:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	3301      	adds	r3, #1
 8003db4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	db06      	blt.n	8003dcc <HAL_ETH_ReadData+0x144>
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d202      	bcs.n	8003dcc <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d089      	beq.n	8003ce0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	441a      	add	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f815 	bl	8003e10 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d108      	bne.n	8003e04 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e000      	b.n	8003e06 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3720      	adds	r7, #32
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b088      	sub	sp, #32
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e24:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	3212      	adds	r2, #18
 8003e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e30:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e36:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003e38:	e040      	b.n	8003ebc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d112      	bne.n	8003e68 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8003e42:	f107 030c 	add.w	r3, r7, #12
 8003e46:	4618      	mov	r0, r3
 8003e48:	f008 f878 	bl	800bf3c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	74fb      	strb	r3, [r7, #19]
 8003e56:	e007      	b.n	8003e68 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	461a      	mov	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d026      	beq.n	8003ebc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <ETH_UpdateDescriptor+0xe4>)
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	e003      	b.n	8003e86 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003e84:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003e86:	f3bf 8f5f 	dmb	sy
}
 8003e8a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d902      	bls.n	8003eaa <ETH_UpdateDescriptor+0x9a>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3b04      	subs	r3, #4
 8003ea8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	3212      	adds	r2, #18
 8003eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb4:	617b      	str	r3, [r7, #20]
      desccount--;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <ETH_UpdateDescriptor+0xb8>
 8003ec2:	7cfb      	ldrb	r3, [r7, #19]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1b8      	bne.n	8003e3a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d00c      	beq.n	8003eec <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eda:	461a      	mov	r2, r3
 8003edc:	2300      	movs	r3, #0
 8003ede:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69fa      	ldr	r2, [r7, #28]
 8003ee4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003eec:	bf00      	nop
 8003eee:	3720      	adds	r7, #32
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	800045f8 	.word	0x800045f8

08003ef8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0e:	2b40      	cmp	r3, #64	; 0x40
 8003f10:	d112      	bne.n	8003f38 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b40      	cmp	r3, #64	; 0x40
 8003f22:	d109      	bne.n	8003f38 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b50      	ldr	r3, [pc, #320]	; (8004070 <HAL_ETH_IRQHandler+0x178>)
 8003f30:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8ac 	bl	8004090 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d113      	bne.n	8003f72 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d10a      	bne.n	8003f72 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f64:	461a      	mov	r2, r3
 8003f66:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003f6a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f885 	bl	800407c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f84:	d14c      	bne.n	8004020 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f98:	d142      	bne.n	8004020 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa0:	f043 0208 	orr.w	r2, r3, #8
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbc:	d11a      	bne.n	8003ff4 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <HAL_ETH_IRQHandler+0x17c>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6812      	ldr	r2, [r2, #0]
 8003fe0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8003fe4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fe8:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	22e0      	movs	r2, #224	; 0xe0
 8003fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8003ff2:	e012      	b.n	800401a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	f248 6380 	movw	r3, #34432	; 0x8680
 8004002:	4013      	ands	r3, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004012:	461a      	mov	r2, r3
 8004014:	f248 6380 	movw	r3, #34432	; 0x8680
 8004018:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f842 	bl	80040a4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b08      	cmp	r3, #8
 800402c:	d10e      	bne.n	800404c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f83a 	bl	80040b8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800404c:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <HAL_ETH_IRQHandler+0x180>)
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d006      	beq.n	8004066 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004058:	4b07      	ldr	r3, [pc, #28]	; (8004078 <HAL_ETH_IRQHandler+0x180>)
 800405a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800405e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 f833 	bl	80040cc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	00010040 	.word	0x00010040
 8004074:	007e2000 	.word	0x007e2000
 8004078:	40013c00 	.word	0x40013c00

0800407c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f003 031c 	and.w	r3, r3, #28
 80040fc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	02db      	lsls	r3, r3, #11
 8004102:	b29b      	uxth	r3, r3
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	019b      	lsls	r3, r3, #6
 800410e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0302 	bic.w	r3, r3, #2
 800411e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004130:	f7fe f866 	bl	8002200 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004136:	e00d      	b.n	8004154 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004138:	f7fe f862 	bl	8002200 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004146:	d301      	bcc.n	800414c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e010      	b.n	800416e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ec      	bne.n	8004138 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	b29b      	uxth	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b086      	sub	sp, #24
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
 8004182:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 031c 	and.w	r3, r3, #28
 8004192:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	02db      	lsls	r3, r3, #11
 8004198:	b29b      	uxth	r3, r3
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	019b      	lsls	r3, r3, #6
 80041a4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f043 0302 	orr.w	r3, r3, #2
 80041b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041d0:	f7fe f816 	bl	8002200 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041d6:	e00d      	b.n	80041f4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80041d8:	f7fe f812 	bl	8002200 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e6:	d301      	bcc.n	80041ec <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e009      	b.n	8004200 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1ec      	bne.n	80041d8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0d9      	b.n	80043d0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf14      	ite	ne
 800422a:	2301      	movne	r3, #1
 800422c:	2300      	moveq	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	461a      	mov	r2, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bf14      	ite	ne
 80042a4:	2301      	movne	r3, #1
 80042a6:	2300      	moveq	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	bf0c      	ite	eq
 80042da:	2301      	moveq	r3, #1
 80042dc:	2300      	movne	r3, #0
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf14      	ite	ne
 8004336:	2301      	movne	r3, #1
 8004338:	2300      	moveq	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	b29a      	uxth	r2, r3
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bf14      	ite	ne
 80043a4:	2301      	movne	r3, #1
 80043a6:	2300      	moveq	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e00b      	b.n	8004408 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d105      	bne.n	8004406 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80043fa:	6839      	ldr	r1, [r7, #0]
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f883 	bl	8004508 <ETH_SetMACConfig>

    return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e000      	b.n	8004408 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
  }
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 031c 	bic.w	r3, r3, #28
 8004426:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004428:	f003 fbbc 	bl	8007ba4 <HAL_RCC_GetHCLKFreq>
 800442c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d908      	bls.n	8004448 <HAL_ETH_SetMDIOClockRange+0x38>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d804      	bhi.n	8004448 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f043 0308 	orr.w	r3, r3, #8
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e027      	b.n	8004498 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4a18      	ldr	r2, [pc, #96]	; (80044ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d908      	bls.n	8004462 <HAL_ETH_SetMDIOClockRange+0x52>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d204      	bcs.n	8004462 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f043 030c 	orr.w	r3, r3, #12
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	e01a      	b.n	8004498 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d303      	bcc.n	8004472 <HAL_ETH_SetMDIOClockRange+0x62>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4a11      	ldr	r2, [pc, #68]	; (80044b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d911      	bls.n	8004496 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4a0f      	ldr	r2, [pc, #60]	; (80044b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d908      	bls.n	800448c <HAL_ETH_SetMDIOClockRange+0x7c>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4a0e      	ldr	r2, [pc, #56]	; (80044b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d804      	bhi.n	800448c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f043 0304 	orr.w	r3, r3, #4
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	e005      	b.n	8004498 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f043 0310 	orr.w	r3, r3, #16
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e000      	b.n	8004498 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004496:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	611a      	str	r2, [r3, #16]
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	01312cff 	.word	0x01312cff
 80044ac:	02160ebf 	.word	0x02160ebf
 80044b0:	03938700 	.word	0x03938700
 80044b4:	05f5e0ff 	.word	0x05f5e0ff
 80044b8:	08f0d17f 	.word	0x08f0d17f

080044bc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044de:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80044ec:	2001      	movs	r0, #1
 80044ee:	f7fd fe93 	bl	8002218 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044fc:	6193      	str	r3, [r2, #24]
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4b51      	ldr	r3, [pc, #324]	; (8004664 <ETH_SetMACConfig+0x15c>)
 800451e:	4013      	ands	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	7c1b      	ldrb	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <ETH_SetMACConfig+0x28>
 800452a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800452e:	e000      	b.n	8004532 <ETH_SetMACConfig+0x2a>
 8004530:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	7c5b      	ldrb	r3, [r3, #17]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <ETH_SetMACConfig+0x38>
 800453a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800453e:	e000      	b.n	8004542 <ETH_SetMACConfig+0x3a>
 8004540:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004542:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004548:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	7fdb      	ldrb	r3, [r3, #31]
 800454e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004550:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004556:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	7f92      	ldrb	r2, [r2, #30]
 800455c:	2a00      	cmp	r2, #0
 800455e:	d102      	bne.n	8004566 <ETH_SetMACConfig+0x5e>
 8004560:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004564:	e000      	b.n	8004568 <ETH_SetMACConfig+0x60>
 8004566:	2200      	movs	r2, #0
                        macconf->Speed |
 8004568:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	7f1b      	ldrb	r3, [r3, #28]
 800456e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004570:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004576:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	791b      	ldrb	r3, [r3, #4]
 800457c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800457e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004586:	2a00      	cmp	r2, #0
 8004588:	d102      	bne.n	8004590 <ETH_SetMACConfig+0x88>
 800458a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800458e:	e000      	b.n	8004592 <ETH_SetMACConfig+0x8a>
 8004590:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004592:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	7bdb      	ldrb	r3, [r3, #15]
 8004598:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800459a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80045a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80045aa:	4313      	orrs	r3, r2
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045c2:	2001      	movs	r0, #1
 80045c4:	f7fd fe28 	bl	8002218 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	f64f 7341 	movw	r3, #65345	; 0xff41
 80045de:	4013      	ands	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80045ee:	2a00      	cmp	r2, #0
 80045f0:	d101      	bne.n	80045f6 <ETH_SetMACConfig+0xee>
 80045f2:	2280      	movs	r2, #128	; 0x80
 80045f4:	e000      	b.n	80045f8 <ETH_SetMACConfig+0xf0>
 80045f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80045f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80045fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004606:	2a01      	cmp	r2, #1
 8004608:	d101      	bne.n	800460e <ETH_SetMACConfig+0x106>
 800460a:	2208      	movs	r2, #8
 800460c:	e000      	b.n	8004610 <ETH_SetMACConfig+0x108>
 800460e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004610:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004618:	2a01      	cmp	r2, #1
 800461a:	d101      	bne.n	8004620 <ETH_SetMACConfig+0x118>
 800461c:	2204      	movs	r2, #4
 800461e:	e000      	b.n	8004622 <ETH_SetMACConfig+0x11a>
 8004620:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004622:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800462a:	2a01      	cmp	r2, #1
 800462c:	d101      	bne.n	8004632 <ETH_SetMACConfig+0x12a>
 800462e:	2202      	movs	r2, #2
 8004630:	e000      	b.n	8004634 <ETH_SetMACConfig+0x12c>
 8004632:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004634:	4313      	orrs	r3, r2
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800464c:	2001      	movs	r0, #1
 800464e:	f7fd fde3 	bl	8002218 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	619a      	str	r2, [r3, #24]
}
 800465a:	bf00      	nop
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	ff20810f 	.word	0xff20810f

08004668 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4b3d      	ldr	r3, [pc, #244]	; (8004778 <ETH_SetDMAConfig+0x110>)
 8004682:	4013      	ands	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	7b1b      	ldrb	r3, [r3, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <ETH_SetDMAConfig+0x2c>
 800468e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004692:	e000      	b.n	8004696 <ETH_SetDMAConfig+0x2e>
 8004694:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	7b5b      	ldrb	r3, [r3, #13]
 800469a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800469c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	7f52      	ldrb	r2, [r2, #29]
 80046a2:	2a00      	cmp	r2, #0
 80046a4:	d102      	bne.n	80046ac <ETH_SetDMAConfig+0x44>
 80046a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046aa:	e000      	b.n	80046ae <ETH_SetDMAConfig+0x46>
 80046ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80046ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	7b9b      	ldrb	r3, [r3, #14]
 80046b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80046b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80046bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	7f1b      	ldrb	r3, [r3, #28]
 80046c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80046c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	7f9b      	ldrb	r3, [r3, #30]
 80046ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80046cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80046d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80046dc:	4313      	orrs	r3, r2
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ec:	461a      	mov	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80046fe:	2001      	movs	r0, #1
 8004700:	f7fd fd8a 	bl	8002218 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470c:	461a      	mov	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	791b      	ldrb	r3, [r3, #4]
 8004716:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800471c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004722:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004728:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004730:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004732:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800473a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004740:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800474a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800474e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800475c:	2001      	movs	r0, #1
 800475e:	f7fd fd5b 	bl	8002218 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6013      	str	r3, [r2, #0]
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	f8de3f23 	.word	0xf8de3f23

0800477c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b0a6      	sub	sp, #152	; 0x98
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004790:	2300      	movs	r3, #0
 8004792:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80047b8:	2300      	movs	r3, #0
 80047ba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80047bc:	2300      	movs	r3, #0
 80047be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80047cc:	2300      	movs	r3, #0
 80047ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80047d8:	2300      	movs	r3, #0
 80047da:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80047de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047e2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80047e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80047f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff fe86 	bl	8004508 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004800:	2301      	movs	r3, #1
 8004802:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800480a:	2301      	movs	r3, #1
 800480c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800480e:	2300      	movs	r3, #0
 8004810:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004812:	2300      	movs	r3, #0
 8004814:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004818:	2300      	movs	r3, #0
 800481a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800481e:	2300      	movs	r3, #0
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004828:	2301      	movs	r3, #1
 800482a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800482c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004830:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004832:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004836:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800483c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004844:	2300      	movs	r3, #0
 8004846:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004848:	2300      	movs	r3, #0
 800484a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800484c:	f107 0308 	add.w	r3, r7, #8
 8004850:	4619      	mov	r1, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff ff08 	bl	8004668 <ETH_SetDMAConfig>
}
 8004858:	bf00      	nop
 800485a:	3798      	adds	r7, #152	; 0x98
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3305      	adds	r3, #5
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	021b      	lsls	r3, r3, #8
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	3204      	adds	r2, #4
 8004878:	7812      	ldrb	r2, [r2, #0]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <ETH_MACAddressConfig+0x68>)
 8004882:	4413      	add	r3, r2
 8004884:	461a      	mov	r2, r3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3303      	adds	r3, #3
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	061a      	lsls	r2, r3, #24
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3302      	adds	r3, #2
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3301      	adds	r3, #1
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	4313      	orrs	r3, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	7812      	ldrb	r2, [r2, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <ETH_MACAddressConfig+0x6c>)
 80048b2:	4413      	add	r3, r2
 80048b4:	461a      	mov	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	6013      	str	r3, [r2, #0]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40028040 	.word	0x40028040
 80048cc:	40028044 	.word	0x40028044

080048d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	e03e      	b.n	800495c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68d9      	ldr	r1, [r3, #12]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	440b      	add	r3, r1
 80048ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2200      	movs	r2, #0
 80048fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2200      	movs	r2, #0
 8004906:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	3206      	adds	r2, #6
 8004910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d80c      	bhi.n	8004940 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68d9      	ldr	r1, [r3, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	1c5a      	adds	r2, r3, #1
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	440b      	add	r3, r1
 8004938:	461a      	mov	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	e004      	b.n	800494a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	461a      	mov	r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3301      	adds	r3, #1
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d9bd      	bls.n	80048de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004974:	611a      	str	r2, [r3, #16]
}
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e046      	b.n	8004a1e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6919      	ldr	r1, [r3, #16]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	440b      	add	r3, r1
 80049a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2200      	movs	r2, #0
 80049ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2200      	movs	r2, #0
 80049b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2200      	movs	r2, #0
 80049b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2200      	movs	r2, #0
 80049be:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2200      	movs	r2, #0
 80049c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80049cc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80049d4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	3212      	adds	r2, #18
 80049ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d80c      	bhi.n	8004a0e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6919      	ldr	r1, [r3, #16]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	440b      	add	r3, r1
 8004a06:	461a      	mov	r2, r3
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	60da      	str	r2, [r3, #12]
 8004a0c:	e004      	b.n	8004a18 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	461a      	mov	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d9b5      	bls.n	8004990 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691a      	ldr	r2, [r3, #16]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a4e:	60da      	str	r2, [r3, #12]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b08d      	sub	sp, #52	; 0x34
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	3318      	adds	r3, #24
 8004a6c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a86:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a9e:	d007      	beq.n	8004ab0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e0ff      	b.n	8004cb4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	4b7d      	ldr	r3, [pc, #500]	; (8004cc0 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	6852      	ldr	r2, [r2, #4]
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d008      	beq.n	8004af4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004b36:	f3bf 8f5f 	dmb	sy
}
 8004b3a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004b48:	e082      	b.n	8004c50 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d006      	beq.n	8004b6a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	e005      	b.n	8004b76 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	3301      	adds	r3, #1
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b7e:	2b03      	cmp	r3, #3
 8004b80:	d902      	bls.n	8004b88 <ETH_Prepare_Tx_Descriptors+0x12c>
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	3b04      	subs	r3, #4
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b90:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004baa:	d007      	beq.n	8004bbc <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d029      	beq.n	8004c10 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bce:	e019      	b.n	8004c04 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004bd0:	f3bf 8f5f 	dmb	sy
}
 8004bd4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be4:	3301      	adds	r3, #1
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d902      	bls.n	8004bf4 <ETH_Prepare_Tx_Descriptors+0x198>
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	3b04      	subs	r3, #4
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bfc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	3301      	adds	r3, #1
 8004c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3e1      	bcc.n	8004bd0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e051      	b.n	8004cb4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	3301      	adds	r3, #1
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	4b25      	ldr	r3, [pc, #148]	; (8004cc0 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	6852      	ldr	r2, [r2, #4]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004c3e:	f3bf 8f5f 	dmb	sy
}
 8004c42:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f47f af78 	bne.w	8004b4a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d006      	beq.n	8004c6e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	e005      	b.n	8004c7a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c8a:	6979      	ldr	r1, [r7, #20]
 8004c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8e:	3304      	adds	r3, #4
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c9a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c9c:	b672      	cpsid	i
}
 8004c9e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004cae:	b662      	cpsie	i
}
 8004cb0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3734      	adds	r7, #52	; 0x34
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	ffffe000 	.word	0xffffe000

08004cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b089      	sub	sp, #36	; 0x24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	e175      	b.n	8004fd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	f040 8164 	bne.w	8004fca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d005      	beq.n	8004d1a <HAL_GPIO_Init+0x56>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d130      	bne.n	8004d7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	2203      	movs	r2, #3
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d50:	2201      	movs	r2, #1
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	f003 0201 	and.w	r2, r3, #1
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d017      	beq.n	8004db8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	2203      	movs	r2, #3
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d123      	bne.n	8004e0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	08da      	lsrs	r2, r3, #3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3208      	adds	r2, #8
 8004dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	220f      	movs	r2, #15
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	08da      	lsrs	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3208      	adds	r2, #8
 8004e06:	69b9      	ldr	r1, [r7, #24]
 8004e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	2203      	movs	r2, #3
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 0203 	and.w	r2, r3, #3
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 80be 	beq.w	8004fca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e4e:	4b66      	ldr	r3, [pc, #408]	; (8004fe8 <HAL_GPIO_Init+0x324>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	4a65      	ldr	r2, [pc, #404]	; (8004fe8 <HAL_GPIO_Init+0x324>)
 8004e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e58:	6453      	str	r3, [r2, #68]	; 0x44
 8004e5a:	4b63      	ldr	r3, [pc, #396]	; (8004fe8 <HAL_GPIO_Init+0x324>)
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e66:	4a61      	ldr	r2, [pc, #388]	; (8004fec <HAL_GPIO_Init+0x328>)
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	220f      	movs	r2, #15
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a58      	ldr	r2, [pc, #352]	; (8004ff0 <HAL_GPIO_Init+0x32c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d037      	beq.n	8004f02 <HAL_GPIO_Init+0x23e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a57      	ldr	r2, [pc, #348]	; (8004ff4 <HAL_GPIO_Init+0x330>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d031      	beq.n	8004efe <HAL_GPIO_Init+0x23a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a56      	ldr	r2, [pc, #344]	; (8004ff8 <HAL_GPIO_Init+0x334>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02b      	beq.n	8004efa <HAL_GPIO_Init+0x236>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a55      	ldr	r2, [pc, #340]	; (8004ffc <HAL_GPIO_Init+0x338>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d025      	beq.n	8004ef6 <HAL_GPIO_Init+0x232>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a54      	ldr	r2, [pc, #336]	; (8005000 <HAL_GPIO_Init+0x33c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d01f      	beq.n	8004ef2 <HAL_GPIO_Init+0x22e>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a53      	ldr	r2, [pc, #332]	; (8005004 <HAL_GPIO_Init+0x340>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d019      	beq.n	8004eee <HAL_GPIO_Init+0x22a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a52      	ldr	r2, [pc, #328]	; (8005008 <HAL_GPIO_Init+0x344>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <HAL_GPIO_Init+0x226>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a51      	ldr	r2, [pc, #324]	; (800500c <HAL_GPIO_Init+0x348>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00d      	beq.n	8004ee6 <HAL_GPIO_Init+0x222>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a50      	ldr	r2, [pc, #320]	; (8005010 <HAL_GPIO_Init+0x34c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d007      	beq.n	8004ee2 <HAL_GPIO_Init+0x21e>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a4f      	ldr	r2, [pc, #316]	; (8005014 <HAL_GPIO_Init+0x350>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d101      	bne.n	8004ede <HAL_GPIO_Init+0x21a>
 8004eda:	2309      	movs	r3, #9
 8004edc:	e012      	b.n	8004f04 <HAL_GPIO_Init+0x240>
 8004ede:	230a      	movs	r3, #10
 8004ee0:	e010      	b.n	8004f04 <HAL_GPIO_Init+0x240>
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	e00e      	b.n	8004f04 <HAL_GPIO_Init+0x240>
 8004ee6:	2307      	movs	r3, #7
 8004ee8:	e00c      	b.n	8004f04 <HAL_GPIO_Init+0x240>
 8004eea:	2306      	movs	r3, #6
 8004eec:	e00a      	b.n	8004f04 <HAL_GPIO_Init+0x240>
 8004eee:	2305      	movs	r3, #5
 8004ef0:	e008      	b.n	8004f04 <HAL_GPIO_Init+0x240>
 8004ef2:	2304      	movs	r3, #4
 8004ef4:	e006      	b.n	8004f04 <HAL_GPIO_Init+0x240>
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e004      	b.n	8004f04 <HAL_GPIO_Init+0x240>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e002      	b.n	8004f04 <HAL_GPIO_Init+0x240>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <HAL_GPIO_Init+0x240>
 8004f02:	2300      	movs	r3, #0
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	f002 0203 	and.w	r2, r2, #3
 8004f0a:	0092      	lsls	r2, r2, #2
 8004f0c:	4093      	lsls	r3, r2
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f14:	4935      	ldr	r1, [pc, #212]	; (8004fec <HAL_GPIO_Init+0x328>)
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f22:	4b3d      	ldr	r3, [pc, #244]	; (8005018 <HAL_GPIO_Init+0x354>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f46:	4a34      	ldr	r2, [pc, #208]	; (8005018 <HAL_GPIO_Init+0x354>)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f4c:	4b32      	ldr	r3, [pc, #200]	; (8005018 <HAL_GPIO_Init+0x354>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	43db      	mvns	r3, r3
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f70:	4a29      	ldr	r2, [pc, #164]	; (8005018 <HAL_GPIO_Init+0x354>)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f76:	4b28      	ldr	r3, [pc, #160]	; (8005018 <HAL_GPIO_Init+0x354>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4013      	ands	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <HAL_GPIO_Init+0x354>)
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <HAL_GPIO_Init+0x354>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4013      	ands	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fc4:	4a14      	ldr	r2, [pc, #80]	; (8005018 <HAL_GPIO_Init+0x354>)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	f67f ae86 	bls.w	8004ce4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	3724      	adds	r7, #36	; 0x24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40013800 	.word	0x40013800
 8004ff0:	40020000 	.word	0x40020000
 8004ff4:	40020400 	.word	0x40020400
 8004ff8:	40020800 	.word	0x40020800
 8004ffc:	40020c00 	.word	0x40020c00
 8005000:	40021000 	.word	0x40021000
 8005004:	40021400 	.word	0x40021400
 8005008:	40021800 	.word	0x40021800
 800500c:	40021c00 	.word	0x40021c00
 8005010:	40022000 	.word	0x40022000
 8005014:	40022400 	.word	0x40022400
 8005018:	40013c00 	.word	0x40013c00

0800501c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	807b      	strh	r3, [r7, #2]
 8005028:	4613      	mov	r3, r2
 800502a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800502c:	787b      	ldrb	r3, [r7, #1]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005038:	e003      	b.n	8005042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800503a:	887b      	ldrh	r3, [r7, #2]
 800503c:	041a      	lsls	r2, r3, #16
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	619a      	str	r2, [r3, #24]
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e07f      	b.n	8005162 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fb ff86 	bl	8000f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2224      	movs	r2, #36	; 0x24
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0201 	bic.w	r2, r2, #1
 8005092:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d107      	bne.n	80050ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	e006      	b.n	80050d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80050d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d104      	bne.n	80050ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6859      	ldr	r1, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4b1d      	ldr	r3, [pc, #116]	; (800516c <HAL_I2C_Init+0x11c>)
 80050f6:	430b      	orrs	r3, r1
 80050f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005108:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69d9      	ldr	r1, [r3, #28]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1a      	ldr	r2, [r3, #32]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	02008000 	.word	0x02008000

08005170 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af02      	add	r7, sp, #8
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	607a      	str	r2, [r7, #4]
 800517a:	461a      	mov	r2, r3
 800517c:	460b      	mov	r3, r1
 800517e:	817b      	strh	r3, [r7, #10]
 8005180:	4613      	mov	r3, r2
 8005182:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b20      	cmp	r3, #32
 800518e:	f040 80cd 	bne.w	800532c <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800519c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a0:	d101      	bne.n	80051a6 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 80051a2:	2302      	movs	r3, #2
 80051a4:	e0c3      	b.n	800532e <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_I2C_Master_Transmit_DMA+0x44>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e0bc      	b.n	800532e <HAL_I2C_Master_Transmit_DMA+0x1be>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2221      	movs	r2, #33	; 0x21
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2210      	movs	r2, #16
 80051c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	893a      	ldrh	r2, [r7, #8]
 80051dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a55      	ldr	r2, [pc, #340]	; (8005338 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 80051e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4a55      	ldr	r2, [pc, #340]	; (800533c <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 80051e8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2bff      	cmp	r3, #255	; 0xff
 80051f2:	d906      	bls.n	8005202 <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	22ff      	movs	r2, #255	; 0xff
 80051f8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80051fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	e007      	b.n	8005212 <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800520c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005210:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005216:	2b00      	cmp	r3, #0
 8005218:	d070      	beq.n	80052fc <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	2b00      	cmp	r3, #0
 8005220:	d020      	beq.n	8005264 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	4a46      	ldr	r2, [pc, #280]	; (8005340 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8005228:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	4a45      	ldr	r2, [pc, #276]	; (8005344 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8005230:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	2200      	movs	r2, #0
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	2200      	movs	r2, #0
 8005240:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3328      	adds	r3, #40	; 0x28
 800524e:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005254:	f7fd ffda 	bl	800320c <HAL_DMA_Start_IT>
 8005258:	4603      	mov	r3, r0
 800525a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800525c:	7cfb      	ldrb	r3, [r7, #19]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d138      	bne.n	80052d4 <HAL_I2C_Master_Transmit_DMA+0x164>
 8005262:	e013      	b.n	800528c <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005278:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e050      	b.n	800532e <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	b2da      	uxtb	r2, r3
 8005292:	8979      	ldrh	r1, [r7, #10]
 8005294:	4b2c      	ldr	r3, [pc, #176]	; (8005348 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f001 fd02 	bl	8006ca4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80052ba:	2110      	movs	r1, #16
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f001 fd23 	bl	8006d08 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e029      	b.n	8005328 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e8:	f043 0210 	orr.w	r2, r3, #16
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e018      	b.n	800532e <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a13      	ldr	r2, [pc, #76]	; (800534c <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8005300:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005306:	b2da      	uxtb	r2, r3
 8005308:	8979      	ldrh	r1, [r7, #10]
 800530a:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f001 fcc6 	bl	8006ca4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005320:	2101      	movs	r1, #1
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f001 fcf0 	bl	8006d08 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	e000      	b.n	800532e <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800532c:	2302      	movs	r3, #2
  }
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	ffff0000 	.word	0xffff0000
 800533c:	08005dd5 	.word	0x08005dd5
 8005340:	08006a43 	.word	0x08006a43
 8005344:	08006bf5 	.word	0x08006bf5
 8005348:	80002000 	.word	0x80002000
 800534c:	0800597f 	.word	0x0800597f

08005350 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af02      	add	r7, sp, #8
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	607a      	str	r2, [r7, #4]
 800535a:	461a      	mov	r2, r3
 800535c:	460b      	mov	r3, r1
 800535e:	817b      	strh	r3, [r7, #10]
 8005360:	4613      	mov	r3, r2
 8005362:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b20      	cmp	r3, #32
 800536e:	f040 80cd 	bne.w	800550c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800537c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005380:	d101      	bne.n	8005386 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8005382:	2302      	movs	r3, #2
 8005384:	e0c3      	b.n	800550e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_I2C_Master_Receive_DMA+0x44>
 8005390:	2302      	movs	r3, #2
 8005392:	e0bc      	b.n	800550e <HAL_I2C_Master_Receive_DMA+0x1be>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2222      	movs	r2, #34	; 0x22
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2210      	movs	r2, #16
 80053a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	893a      	ldrh	r2, [r7, #8]
 80053bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4a55      	ldr	r2, [pc, #340]	; (8005518 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80053c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4a55      	ldr	r2, [pc, #340]	; (800551c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80053c8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2bff      	cmp	r3, #255	; 0xff
 80053d2:	d906      	bls.n	80053e2 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	22ff      	movs	r2, #255	; 0xff
 80053d8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80053da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	e007      	b.n	80053f2 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80053ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053f0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d070      	beq.n	80054dc <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d020      	beq.n	8005444 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005406:	4a46      	ldr	r2, [pc, #280]	; (8005520 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005408:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	4a45      	ldr	r2, [pc, #276]	; (8005524 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005410:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005416:	2200      	movs	r2, #0
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541e:	2200      	movs	r2, #0
 8005420:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3324      	adds	r3, #36	; 0x24
 800542c:	4619      	mov	r1, r3
 800542e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005434:	f7fd feea 	bl	800320c <HAL_DMA_Start_IT>
 8005438:	4603      	mov	r3, r0
 800543a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d138      	bne.n	80054b4 <HAL_I2C_Master_Receive_DMA+0x164>
 8005442:	e013      	b.n	800546c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005458:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e050      	b.n	800550e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005470:	b2da      	uxtb	r2, r3
 8005472:	8979      	ldrh	r1, [r7, #10]
 8005474:	4b2c      	ldr	r3, [pc, #176]	; (8005528 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f001 fc12 	bl	8006ca4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800549a:	2110      	movs	r1, #16
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f001 fc33 	bl	8006d08 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e029      	b.n	8005508 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c8:	f043 0210 	orr.w	r2, r3, #16
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e018      	b.n	800550e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4a13      	ldr	r2, [pc, #76]	; (800552c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80054e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	8979      	ldrh	r1, [r7, #10]
 80054ea:	4b0f      	ldr	r3, [pc, #60]	; (8005528 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f001 fbd6 	bl	8006ca4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005500:	2101      	movs	r1, #1
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f001 fc00 	bl	8006d08 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	e000      	b.n	800550e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800550c:	2302      	movs	r3, #2
  }
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	ffff0000 	.word	0xffff0000
 800551c:	08005dd5 	.word	0x08005dd5
 8005520:	08006b19 	.word	0x08006b19
 8005524:	08006bf5 	.word	0x08006bf5
 8005528:	80002400 	.word	0x80002400
 800552c:	0800597f 	.word	0x0800597f

08005530 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b20      	cmp	r3, #32
 8005548:	f040 809b 	bne.w	8005682 <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d105      	bne.n	8005564 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e08f      	b.n	8005684 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_I2C_Slave_Transmit_DMA+0x42>
 800556e:	2302      	movs	r3, #2
 8005570:	e088      	b.n	8005684 <HAL_I2C_Slave_Transmit_DMA+0x154>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2221      	movs	r2, #33	; 0x21
 800557e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a38      	ldr	r2, [pc, #224]	; (800568c <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 80055aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a38      	ldr	r2, [pc, #224]	; (8005690 <HAL_I2C_Slave_Transmit_DMA+0x160>)
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d020      	beq.n	80055fc <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	4a35      	ldr	r2, [pc, #212]	; (8005694 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 80055c0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	4a34      	ldr	r2, [pc, #208]	; (8005698 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 80055c8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	2200      	movs	r2, #0
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	2200      	movs	r2, #0
 80055d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3328      	adds	r3, #40	; 0x28
 80055e6:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80055ec:	f7fd fe0e 	bl	800320c <HAL_DMA_Start_IT>
 80055f0:	4603      	mov	r3, r0
 80055f2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d12f      	bne.n	800565a <HAL_I2C_Slave_Transmit_DMA+0x12a>
 80055fa:	e013      	b.n	8005624 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2228      	movs	r2, #40	; 0x28
 8005600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005610:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e02f      	b.n	8005684 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005632:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800563c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f001 fb61 	bl	8006d08 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005654:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	e014      	b.n	8005684 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2228      	movs	r2, #40	; 0x28
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	f043 0210 	orr.w	r2, r3, #16
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005682:	2302      	movs	r3, #2
  }
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	ffff0000 	.word	0xffff0000
 8005690:	08005fbb 	.word	0x08005fbb
 8005694:	08006ad9 	.word	0x08006ad9
 8005698:	08006bf5 	.word	0x08006bf5

0800569c <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	f040 809b 	bne.w	80057ee <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_I2C_Slave_Receive_DMA+0x28>
 80056be:	88fb      	ldrh	r3, [r7, #6]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d105      	bne.n	80056d0 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e08f      	b.n	80057f0 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_I2C_Slave_Receive_DMA+0x42>
 80056da:	2302      	movs	r3, #2
 80056dc:	e088      	b.n	80057f0 <HAL_I2C_Slave_Receive_DMA+0x154>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2222      	movs	r2, #34	; 0x22
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	88fa      	ldrh	r2, [r7, #6]
 8005706:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570c:	b29a      	uxth	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a38      	ldr	r2, [pc, #224]	; (80057f8 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005716:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4a38      	ldr	r2, [pc, #224]	; (80057fc <HAL_I2C_Slave_Receive_DMA+0x160>)
 800571c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005722:	2b00      	cmp	r3, #0
 8005724:	d020      	beq.n	8005768 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572a:	4a35      	ldr	r2, [pc, #212]	; (8005800 <HAL_I2C_Slave_Receive_DMA+0x164>)
 800572c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	4a34      	ldr	r2, [pc, #208]	; (8005804 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005734:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573a:	2200      	movs	r2, #0
 800573c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005742:	2200      	movs	r2, #0
 8005744:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3324      	adds	r3, #36	; 0x24
 8005750:	4619      	mov	r1, r3
 8005752:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005758:	f7fd fd58 	bl	800320c <HAL_DMA_Start_IT>
 800575c:	4603      	mov	r3, r0
 800575e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005760:	7dfb      	ldrb	r3, [r7, #23]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d12f      	bne.n	80057c6 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005766:	e013      	b.n	8005790 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2228      	movs	r2, #40	; 0x28
 800576c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e02f      	b.n	80057f0 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800579e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80057a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f001 faab 	bl	8006d08 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057c0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e014      	b.n	80057f0 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2228      	movs	r2, #40	; 0x28
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057da:	f043 0210 	orr.w	r2, r3, #16
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 80057ee:	2302      	movs	r3, #2
  }
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	ffff0000 	.word	0xffff0000
 80057fc:	08005fbb 	.word	0x08005fbb
 8005800:	08006baf 	.word	0x08006baf
 8005804:	08006bf5 	.word	0x08006bf5

08005808 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	4798      	blx	r3
  }
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d010      	beq.n	8005882 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	09db      	lsrs	r3, r3, #7
 8005864:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005870:	f043 0201 	orr.w	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005880:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	0a9b      	lsrs	r3, r3, #10
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d010      	beq.n	80058b0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	09db      	lsrs	r3, r3, #7
 8005892:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589e:	f043 0208 	orr.w	r2, r3, #8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058ae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	0a5b      	lsrs	r3, r3, #9
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d010      	beq.n	80058de <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	09db      	lsrs	r3, r3, #7
 80058c0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058cc:	f043 0202 	orr.w	r2, r3, #2
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058dc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 030b 	and.w	r3, r3, #11
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80058ee:	68f9      	ldr	r1, [r7, #12]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 ff8b 	bl	800680c <I2C_ITError>
  }
}
 80058f6:	bf00      	nop
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	460b      	mov	r3, r1
 8005908:	70fb      	strb	r3, [r7, #3]
 800590a:	4613      	mov	r3, r2
 800590c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b088      	sub	sp, #32
 8005982:	af02      	add	r7, sp, #8
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <I2C_Master_ISR_IT+0x1e>
 8005998:	2302      	movs	r3, #2
 800599a:	e114      	b.n	8005bc6 <I2C_Master_ISR_IT+0x248>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	091b      	lsrs	r3, r3, #4
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d013      	beq.n	80059d8 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	091b      	lsrs	r3, r3, #4
 80059b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00d      	beq.n	80059d8 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2210      	movs	r2, #16
 80059c2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c8:	f043 0204 	orr.w	r2, r3, #4
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f001 f812 	bl	80069fa <I2C_Flush_TXDR>
 80059d6:	e0e1      	b.n	8005b9c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	089b      	lsrs	r3, r3, #2
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d023      	beq.n	8005a2c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	089b      	lsrs	r3, r3, #2
 80059e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01d      	beq.n	8005a2c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 0304 	bic.w	r3, r3, #4
 80059f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a2a:	e0b7      	b.n	8005b9c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	085b      	lsrs	r3, r3, #1
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01e      	beq.n	8005a76 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d018      	beq.n	8005a76 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a74:	e092      	b.n	8005b9c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	09db      	lsrs	r3, r3, #7
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d05d      	beq.n	8005b3e <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	099b      	lsrs	r3, r3, #6
 8005a86:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d057      	beq.n	8005b3e <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d040      	beq.n	8005b1a <I2C_Master_ISR_IT+0x19c>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d13c      	bne.n	8005b1a <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aac:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2bff      	cmp	r3, #255	; 0xff
 8005ab6:	d90e      	bls.n	8005ad6 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	22ff      	movs	r2, #255	; 0xff
 8005abc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	8a79      	ldrh	r1, [r7, #18]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f001 f8e8 	bl	8006ca4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ad4:	e032      	b.n	8005b3c <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ae8:	d00b      	beq.n	8005b02 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	8a79      	ldrh	r1, [r7, #18]
 8005af6:	2000      	movs	r0, #0
 8005af8:	9000      	str	r0, [sp, #0]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f001 f8d2 	bl	8006ca4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b00:	e01c      	b.n	8005b3c <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b06:	b2da      	uxtb	r2, r3
 8005b08:	8a79      	ldrh	r1, [r7, #18]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f001 f8c6 	bl	8006ca4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b18:	e010      	b.n	8005b3c <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b28:	d003      	beq.n	8005b32 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fba9 	bl	8006282 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b30:	e034      	b.n	8005b9c <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b32:	2140      	movs	r1, #64	; 0x40
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fe69 	bl	800680c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b3a:	e02f      	b.n	8005b9c <I2C_Master_ISR_IT+0x21e>
 8005b3c:	e02e      	b.n	8005b9c <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	099b      	lsrs	r3, r3, #6
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d028      	beq.n	8005b9c <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	099b      	lsrs	r3, r3, #6
 8005b4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d022      	beq.n	8005b9c <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d119      	bne.n	8005b94 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b6e:	d015      	beq.n	8005b9c <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b78:	d108      	bne.n	8005b8c <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	e007      	b.n	8005b9c <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fb78 	bl	8006282 <I2C_ITMasterSeqCplt>
 8005b92:	e003      	b.n	8005b9c <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b94:	2140      	movs	r1, #64	; 0x40
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fe38 	bl	800680c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005bb4:	6979      	ldr	r1, [r7, #20]
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 fbfe 	bl	80063b8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b086      	sub	sp, #24
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bde:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <I2C_Slave_ISR_IT+0x24>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e0ec      	b.n	8005dcc <I2C_Slave_ISR_IT+0x1fe>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d009      	beq.n	8005c1a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	095b      	lsrs	r3, r3, #5
 8005c0a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005c12:	6939      	ldr	r1, [r7, #16]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fc99 	bl	800654c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	091b      	lsrs	r3, r3, #4
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d04d      	beq.n	8005cc2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	091b      	lsrs	r3, r3, #4
 8005c2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d047      	beq.n	8005cc2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d128      	bne.n	8005c8e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b28      	cmp	r3, #40	; 0x28
 8005c46:	d108      	bne.n	8005c5a <I2C_Slave_ISR_IT+0x8c>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c4e:	d104      	bne.n	8005c5a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005c50:	6939      	ldr	r1, [r7, #16]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 fd84 	bl	8006760 <I2C_ITListenCplt>
 8005c58:	e032      	b.n	8005cc0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b29      	cmp	r3, #41	; 0x29
 8005c64:	d10e      	bne.n	8005c84 <I2C_Slave_ISR_IT+0xb6>
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c6c:	d00a      	beq.n	8005c84 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2210      	movs	r2, #16
 8005c74:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 febf 	bl	80069fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fb3d 	bl	80062fc <I2C_ITSlaveSeqCplt>
 8005c82:	e01d      	b.n	8005cc0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2210      	movs	r2, #16
 8005c8a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005c8c:	e096      	b.n	8005dbc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2210      	movs	r2, #16
 8005c94:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9a:	f043 0204 	orr.w	r2, r3, #4
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <I2C_Slave_ISR_IT+0xe4>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cae:	f040 8085 	bne.w	8005dbc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fda7 	bl	800680c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005cbe:	e07d      	b.n	8005dbc <I2C_Slave_ISR_IT+0x1ee>
 8005cc0:	e07c      	b.n	8005dbc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	089b      	lsrs	r3, r3, #2
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d030      	beq.n	8005d30 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	089b      	lsrs	r3, r3, #2
 8005cd2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d02a      	beq.n	8005d30 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d018      	beq.n	8005d16 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d00:	3b01      	subs	r3, #1
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d14f      	bne.n	8005dc0 <I2C_Slave_ISR_IT+0x1f2>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d26:	d04b      	beq.n	8005dc0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fae7 	bl	80062fc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005d2e:	e047      	b.n	8005dc0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	08db      	lsrs	r3, r3, #3
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00a      	beq.n	8005d52 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	08db      	lsrs	r3, r3, #3
 8005d40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d004      	beq.n	8005d52 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005d48:	6939      	ldr	r1, [r7, #16]
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 fa15 	bl	800617a <I2C_ITAddrCplt>
 8005d50:	e037      	b.n	8005dc2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	085b      	lsrs	r3, r3, #1
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d031      	beq.n	8005dc2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	085b      	lsrs	r3, r3, #1
 8005d62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d02b      	beq.n	8005dc2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d018      	beq.n	8005da6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	851a      	strh	r2, [r3, #40]	; 0x28
 8005da4:	e00d      	b.n	8005dc2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dac:	d002      	beq.n	8005db4 <I2C_Slave_ISR_IT+0x1e6>
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 faa1 	bl	80062fc <I2C_ITSlaveSeqCplt>
 8005dba:	e002      	b.n	8005dc2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005dbc:	bf00      	nop
 8005dbe:	e000      	b.n	8005dc2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005dc0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <I2C_Master_ISR_DMA+0x1a>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e0e1      	b.n	8005fb2 <I2C_Master_ISR_DMA+0x1de>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	091b      	lsrs	r3, r3, #4
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d017      	beq.n	8005e32 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d011      	beq.n	8005e32 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2210      	movs	r2, #16
 8005e14:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1a:	f043 0204 	orr.w	r2, r3, #4
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005e22:	2120      	movs	r1, #32
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 ff6f 	bl	8006d08 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 fde5 	bl	80069fa <I2C_Flush_TXDR>
 8005e30:	e0ba      	b.n	8005fa8 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	09db      	lsrs	r3, r3, #7
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d072      	beq.n	8005f24 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	099b      	lsrs	r3, r3, #6
 8005e42:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d06c      	beq.n	8005f24 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e58:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d04e      	beq.n	8005f02 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e70:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2bff      	cmp	r3, #255	; 0xff
 8005e7a:	d906      	bls.n	8005e8a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	22ff      	movs	r2, #255	; 0xff
 8005e80:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e010      	b.n	8005eac <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e9c:	d003      	beq.n	8005ea6 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	e002      	b.n	8005eac <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eaa:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	8a79      	ldrh	r1, [r7, #18]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fef2 	bl	8006ca4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b22      	cmp	r3, #34	; 0x22
 8005edc:	d108      	bne.n	8005ef0 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005eee:	e05b      	b.n	8005fa8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005efe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005f00:	e052      	b.n	8005fa8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f10:	d003      	beq.n	8005f1a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f9b5 	bl	8006282 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005f18:	e046      	b.n	8005fa8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f1a:	2140      	movs	r1, #64	; 0x40
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f000 fc75 	bl	800680c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005f22:	e041      	b.n	8005fa8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	099b      	lsrs	r3, r3, #6
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d029      	beq.n	8005f84 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	099b      	lsrs	r3, r3, #6
 8005f34:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d023      	beq.n	8005f84 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d119      	bne.n	8005f7a <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f54:	d027      	beq.n	8005fa6 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f5e:	d108      	bne.n	8005f72 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f6e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005f70:	e019      	b.n	8005fa6 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	f000 f985 	bl	8006282 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005f78:	e015      	b.n	8005fa6 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f7a:	2140      	movs	r1, #64	; 0x40
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 fc45 	bl	800680c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005f82:	e010      	b.n	8005fa6 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fa0a 	bl	80063b8 <I2C_ITMasterCplt>
 8005fa4:	e000      	b.n	8005fa8 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005fa6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b088      	sub	sp, #32
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d101      	bne.n	8005fde <I2C_Slave_ISR_DMA+0x24>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e0c9      	b.n	8006172 <I2C_Slave_ISR_DMA+0x1b8>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d009      	beq.n	8006006 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005ffe:	68b9      	ldr	r1, [r7, #8]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 faa3 	bl	800654c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	091b      	lsrs	r3, r3, #4
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 809a 	beq.w	8006148 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	091b      	lsrs	r3, r3, #4
 8006018:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8093 	beq.w	8006148 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	0b9b      	lsrs	r3, r3, #14
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d105      	bne.n	800603a <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	0bdb      	lsrs	r3, r3, #15
 8006032:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006036:	2b00      	cmp	r3, #0
 8006038:	d07f      	beq.n	800613a <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00d      	beq.n	800605e <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	0bdb      	lsrs	r3, r3, #15
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800605a:	2301      	movs	r3, #1
 800605c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00d      	beq.n	8006082 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	0b9b      	lsrs	r3, r3, #14
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800607e:	2301      	movs	r3, #1
 8006080:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d128      	bne.n	80060da <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b28      	cmp	r3, #40	; 0x28
 8006092:	d108      	bne.n	80060a6 <I2C_Slave_ISR_DMA+0xec>
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800609a:	d104      	bne.n	80060a6 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 fb5e 	bl	8006760 <I2C_ITListenCplt>
 80060a4:	e048      	b.n	8006138 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b29      	cmp	r3, #41	; 0x29
 80060b0:	d10e      	bne.n	80060d0 <I2C_Slave_ISR_DMA+0x116>
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060b8:	d00a      	beq.n	80060d0 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2210      	movs	r2, #16
 80060c0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 fc99 	bl	80069fa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f000 f917 	bl	80062fc <I2C_ITSlaveSeqCplt>
 80060ce:	e033      	b.n	8006138 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2210      	movs	r2, #16
 80060d6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80060d8:	e034      	b.n	8006144 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2210      	movs	r2, #16
 80060e0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e6:	f043 0204 	orr.w	r2, r3, #4
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060f4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d003      	beq.n	8006104 <I2C_Slave_ISR_DMA+0x14a>
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006102:	d11f      	bne.n	8006144 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006104:	7dfb      	ldrb	r3, [r7, #23]
 8006106:	2b21      	cmp	r3, #33	; 0x21
 8006108:	d002      	beq.n	8006110 <I2C_Slave_ISR_DMA+0x156>
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	2b29      	cmp	r3, #41	; 0x29
 800610e:	d103      	bne.n	8006118 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2221      	movs	r2, #33	; 0x21
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
 8006116:	e008      	b.n	800612a <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006118:	7dfb      	ldrb	r3, [r7, #23]
 800611a:	2b22      	cmp	r3, #34	; 0x22
 800611c:	d002      	beq.n	8006124 <I2C_Slave_ISR_DMA+0x16a>
 800611e:	7dfb      	ldrb	r3, [r7, #23]
 8006120:	2b2a      	cmp	r3, #42	; 0x2a
 8006122:	d102      	bne.n	800612a <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2222      	movs	r2, #34	; 0x22
 8006128:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612e:	4619      	mov	r1, r3
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fb6b 	bl	800680c <I2C_ITError>
      if (treatdmanack == 1U)
 8006136:	e005      	b.n	8006144 <I2C_Slave_ISR_DMA+0x18a>
 8006138:	e004      	b.n	8006144 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2210      	movs	r2, #16
 8006140:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006142:	e011      	b.n	8006168 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8006144:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006146:	e00f      	b.n	8006168 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	08db      	lsrs	r3, r3, #3
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d009      	beq.n	8006168 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	08db      	lsrs	r3, r3, #3
 8006158:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006160:	68b9      	ldr	r1, [r7, #8]
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f809 	bl	800617a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3720      	adds	r7, #32
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800618a:	b2db      	uxtb	r3, r3
 800618c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006190:	2b28      	cmp	r3, #40	; 0x28
 8006192:	d16a      	bne.n	800626a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	b2db      	uxtb	r3, r3
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	0c1b      	lsrs	r3, r3, #16
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80061b2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061c0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80061ce:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d138      	bne.n	800624a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80061d8:	897b      	ldrh	r3, [r7, #10]
 80061da:	09db      	lsrs	r3, r3, #7
 80061dc:	b29a      	uxth	r2, r3
 80061de:	89bb      	ldrh	r3, [r7, #12]
 80061e0:	4053      	eors	r3, r2
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f003 0306 	and.w	r3, r3, #6
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d11c      	bne.n	8006226 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80061ec:	897b      	ldrh	r3, [r7, #10]
 80061ee:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d13b      	bne.n	800627a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2208      	movs	r2, #8
 800620e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006218:	89ba      	ldrh	r2, [r7, #12]
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	4619      	mov	r1, r3
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff fb6d 	bl	80058fe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006224:	e029      	b.n	800627a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006226:	893b      	ldrh	r3, [r7, #8]
 8006228:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800622a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fdd4 	bl	8006ddc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800623c:	89ba      	ldrh	r2, [r7, #12]
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff fb5b 	bl	80058fe <HAL_I2C_AddrCallback>
}
 8006248:	e017      	b.n	800627a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800624a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fdc4 	bl	8006ddc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800625c:	89ba      	ldrh	r2, [r7, #12]
 800625e:	7bfb      	ldrb	r3, [r7, #15]
 8006260:	4619      	mov	r1, r3
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff fb4b 	bl	80058fe <HAL_I2C_AddrCallback>
}
 8006268:	e007      	b.n	800627a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2208      	movs	r2, #8
 8006270:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800627a:	bf00      	nop
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b21      	cmp	r3, #33	; 0x21
 800629c:	d115      	bne.n	80062ca <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2211      	movs	r2, #17
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80062b2:	2101      	movs	r1, #1
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fd91 	bl	8006ddc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f010 f982 	bl	80165cc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062c8:	e014      	b.n	80062f4 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2212      	movs	r2, #18
 80062d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80062de:	2102      	movs	r1, #2
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fd7b 	bl	8006ddc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f010 f982 	bl	80165f8 <HAL_I2C_MasterRxCpltCallback>
}
 80062f4:	bf00      	nop
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	0b9b      	lsrs	r3, r3, #14
 8006318:	f003 0301 	and.w	r3, r3, #1
 800631c:	2b00      	cmp	r3, #0
 800631e:	d008      	beq.n	8006332 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e00d      	b.n	800634e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	0bdb      	lsrs	r3, r3, #15
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800634c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b29      	cmp	r3, #41	; 0x29
 8006358:	d112      	bne.n	8006380 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2228      	movs	r2, #40	; 0x28
 800635e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2221      	movs	r2, #33	; 0x21
 8006366:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006368:	2101      	movs	r1, #1
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 fd36 	bl	8006ddc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f010 f953 	bl	8016624 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800637e:	e017      	b.n	80063b0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b2a      	cmp	r3, #42	; 0x2a
 800638a:	d111      	bne.n	80063b0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2228      	movs	r2, #40	; 0x28
 8006390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2222      	movs	r2, #34	; 0x22
 8006398:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800639a:	2102      	movs	r1, #2
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fd1d 	bl	8006ddc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f010 f950 	bl	8016650 <HAL_I2C_SlaveRxCpltCallback>
}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2220      	movs	r2, #32
 80063cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b21      	cmp	r3, #33	; 0x21
 80063d8:	d107      	bne.n	80063ea <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80063da:	2101      	movs	r1, #1
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fcfd 	bl	8006ddc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2211      	movs	r2, #17
 80063e6:	631a      	str	r2, [r3, #48]	; 0x30
 80063e8:	e00c      	b.n	8006404 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b22      	cmp	r3, #34	; 0x22
 80063f4:	d106      	bne.n	8006404 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80063f6:	2102      	movs	r1, #2
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 fcef 	bl	8006ddc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2212      	movs	r2, #18
 8006402:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6859      	ldr	r1, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	4b4d      	ldr	r3, [pc, #308]	; (8006544 <I2C_ITMasterCplt+0x18c>)
 8006410:	400b      	ands	r3, r1
 8006412:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a4a      	ldr	r2, [pc, #296]	; (8006548 <I2C_ITMasterCplt+0x190>)
 800641e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	091b      	lsrs	r3, r3, #4
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b00      	cmp	r3, #0
 800642a:	d009      	beq.n	8006440 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2210      	movs	r2, #16
 8006432:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006438:	f043 0204 	orr.w	r2, r3, #4
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b60      	cmp	r3, #96	; 0x60
 800644a:	d10b      	bne.n	8006464 <I2C_ITMasterCplt+0xac>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	089b      	lsrs	r3, r3, #2
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	b2db      	uxtb	r3, r3
 8006460:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006462:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fac8 	bl	80069fa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b60      	cmp	r3, #96	; 0x60
 800647a:	d002      	beq.n	8006482 <I2C_ITMasterCplt+0xca>
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d006      	beq.n	8006490 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f9bf 	bl	800680c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800648e:	e054      	b.n	800653a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b21      	cmp	r3, #33	; 0x21
 800649a:	d124      	bne.n	80064e6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b40      	cmp	r3, #64	; 0x40
 80064b4:	d10b      	bne.n	80064ce <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff fa31 	bl	800592e <HAL_I2C_MemTxCpltCallback>
}
 80064cc:	e035      	b.n	800653a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f010 f874 	bl	80165cc <HAL_I2C_MasterTxCpltCallback>
}
 80064e4:	e029      	b.n	800653a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b22      	cmp	r3, #34	; 0x22
 80064f0:	d123      	bne.n	800653a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b40      	cmp	r3, #64	; 0x40
 800650a:	d10b      	bne.n	8006524 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff fa10 	bl	8005942 <HAL_I2C_MemRxCpltCallback>
}
 8006522:	e00a      	b.n	800653a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f010 f85f 	bl	80165f8 <HAL_I2C_MasterRxCpltCallback>
}
 800653a:	bf00      	nop
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	fe00e800 	.word	0xfe00e800
 8006548:	ffff0000 	.word	0xffff0000

0800654c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006568:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2220      	movs	r2, #32
 8006570:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2b21      	cmp	r3, #33	; 0x21
 8006576:	d002      	beq.n	800657e <I2C_ITSlaveCplt+0x32>
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b29      	cmp	r3, #41	; 0x29
 800657c:	d108      	bne.n	8006590 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800657e:	f248 0101 	movw	r1, #32769	; 0x8001
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fc2a 	bl	8006ddc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2221      	movs	r2, #33	; 0x21
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
 800658e:	e00d      	b.n	80065ac <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	2b22      	cmp	r3, #34	; 0x22
 8006594:	d002      	beq.n	800659c <I2C_ITSlaveCplt+0x50>
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	2b2a      	cmp	r3, #42	; 0x2a
 800659a:	d107      	bne.n	80065ac <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800659c:	f248 0102 	movw	r1, #32770	; 0x8002
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fc1b 	bl	8006ddc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2222      	movs	r2, #34	; 0x22
 80065aa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6859      	ldr	r1, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4b64      	ldr	r3, [pc, #400]	; (8006758 <I2C_ITSlaveCplt+0x20c>)
 80065c8:	400b      	ands	r3, r1
 80065ca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fa14 	bl	80069fa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	0b9b      	lsrs	r3, r3, #14
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d013      	beq.n	8006606 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d020      	beq.n	8006638 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	b29a      	uxth	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006604:	e018      	b.n	8006638 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	0bdb      	lsrs	r3, r3, #15
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d012      	beq.n	8006638 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006620:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d006      	beq.n	8006638 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	b29a      	uxth	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	089b      	lsrs	r3, r3, #2
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d020      	beq.n	8006686 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 0304 	bic.w	r3, r3, #4
 800664a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	b2d2      	uxtb	r2, r2
 8006658:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00c      	beq.n	8006686 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006694:	f043 0204 	orr.w	r2, r3, #4
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d010      	beq.n	80066d4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f8a7 	bl	800680c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b28      	cmp	r3, #40	; 0x28
 80066c8:	d141      	bne.n	800674e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80066ca:	6979      	ldr	r1, [r7, #20]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f847 	bl	8006760 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066d2:	e03c      	b.n	800674e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066dc:	d014      	beq.n	8006708 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fe0c 	bl	80062fc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a1d      	ldr	r2, [pc, #116]	; (800675c <I2C_ITSlaveCplt+0x210>)
 80066e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff f90a 	bl	800591a <HAL_I2C_ListenCpltCallback>
}
 8006706:	e022      	b.n	800674e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b22      	cmp	r3, #34	; 0x22
 8006712:	d10e      	bne.n	8006732 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f00f ff90 	bl	8016650 <HAL_I2C_SlaveRxCpltCallback>
}
 8006730:	e00d      	b.n	800674e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f00f ff6b 	bl	8016624 <HAL_I2C_SlaveTxCpltCallback>
}
 800674e:	bf00      	nop
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	fe00e800 	.word	0xfe00e800
 800675c:	ffff0000 	.word	0xffff0000

08006760 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a26      	ldr	r2, [pc, #152]	; (8006808 <I2C_ITListenCplt+0xa8>)
 800676e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	089b      	lsrs	r3, r3, #2
 8006790:	f003 0301 	and.w	r3, r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	d022      	beq.n	80067de <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d012      	beq.n	80067de <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d6:	f043 0204 	orr.w	r2, r3, #4
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80067de:	f248 0103 	movw	r1, #32771	; 0x8003
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fafa 	bl	8006ddc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2210      	movs	r2, #16
 80067ee:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff f88e 	bl	800591a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	ffff0000 	.word	0xffff0000

0800680c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800681c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a5d      	ldr	r2, [pc, #372]	; (80069a0 <I2C_ITError+0x194>)
 800682a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800683e:	7bfb      	ldrb	r3, [r7, #15]
 8006840:	2b28      	cmp	r3, #40	; 0x28
 8006842:	d005      	beq.n	8006850 <I2C_ITError+0x44>
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	2b29      	cmp	r3, #41	; 0x29
 8006848:	d002      	beq.n	8006850 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	2b2a      	cmp	r3, #42	; 0x2a
 800684e:	d10b      	bne.n	8006868 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006850:	2103      	movs	r1, #3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fac2 	bl	8006ddc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2228      	movs	r2, #40	; 0x28
 800685c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a50      	ldr	r2, [pc, #320]	; (80069a4 <I2C_ITError+0x198>)
 8006864:	635a      	str	r2, [r3, #52]	; 0x34
 8006866:	e011      	b.n	800688c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006868:	f248 0103 	movw	r1, #32771	; 0x8003
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fab5 	bl	8006ddc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b60      	cmp	r3, #96	; 0x60
 800687c:	d003      	beq.n	8006886 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006890:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	2b00      	cmp	r3, #0
 8006898:	d039      	beq.n	800690e <I2C_ITError+0x102>
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b11      	cmp	r3, #17
 800689e:	d002      	beq.n	80068a6 <I2C_ITError+0x9a>
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b21      	cmp	r3, #33	; 0x21
 80068a4:	d133      	bne.n	800690e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068b4:	d107      	bne.n	80068c6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fc ff1a 	bl	8003704 <HAL_DMA_GetState>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d017      	beq.n	8006906 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	4a33      	ldr	r2, [pc, #204]	; (80069a8 <I2C_ITError+0x19c>)
 80068dc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fc fd5e 	bl	80033ac <HAL_DMA_Abort_IT>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04d      	beq.n	8006992 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006900:	4610      	mov	r0, r2
 8006902:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006904:	e045      	b.n	8006992 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f850 	bl	80069ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800690c:	e041      	b.n	8006992 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d039      	beq.n	800698a <I2C_ITError+0x17e>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b12      	cmp	r3, #18
 800691a:	d002      	beq.n	8006922 <I2C_ITError+0x116>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b22      	cmp	r3, #34	; 0x22
 8006920:	d133      	bne.n	800698a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006930:	d107      	bne.n	8006942 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006940:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006946:	4618      	mov	r0, r3
 8006948:	f7fc fedc 	bl	8003704 <HAL_DMA_GetState>
 800694c:	4603      	mov	r3, r0
 800694e:	2b01      	cmp	r3, #1
 8006950:	d017      	beq.n	8006982 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006956:	4a14      	ldr	r2, [pc, #80]	; (80069a8 <I2C_ITError+0x19c>)
 8006958:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006966:	4618      	mov	r0, r3
 8006968:	f7fc fd20 	bl	80033ac <HAL_DMA_Abort_IT>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d011      	beq.n	8006996 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800697c:	4610      	mov	r0, r2
 800697e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006980:	e009      	b.n	8006996 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f812 	bl	80069ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006988:	e005      	b.n	8006996 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f80e 	bl	80069ac <I2C_TreatErrorCallback>
  }
}
 8006990:	e002      	b.n	8006998 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006992:	bf00      	nop
 8006994:	e000      	b.n	8006998 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006996:	bf00      	nop
}
 8006998:	bf00      	nop
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	ffff0000 	.word	0xffff0000
 80069a4:	08005bcf 	.word	0x08005bcf
 80069a8:	08006c69 	.word	0x08006c69

080069ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b60      	cmp	r3, #96	; 0x60
 80069be:	d10e      	bne.n	80069de <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2220      	movs	r2, #32
 80069c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fe ffc7 	bl	800596a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069dc:	e009      	b.n	80069f2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7fe ffb2 	bl	8005956 <HAL_I2C_ErrorCallback>
}
 80069f2:	bf00      	nop
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d103      	bne.n	8006a18 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2200      	movs	r2, #0
 8006a16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	f003 0301 	and.w	r3, r3, #1
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d007      	beq.n	8006a36 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	699a      	ldr	r2, [r3, #24]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f042 0201 	orr.w	r2, r2, #1
 8006a34:	619a      	str	r2, [r3, #24]
  }
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a5e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006a6a:	2120      	movs	r1, #32
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 f94b 	bl	8006d08 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006a72:	e02d      	b.n	8006ad0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006a7c:	441a      	add	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2bff      	cmp	r3, #255	; 0xff
 8006a8a:	d903      	bls.n	8006a94 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	22ff      	movs	r2, #255	; 0xff
 8006a90:	851a      	strh	r2, [r3, #40]	; 0x28
 8006a92:	e004      	b.n	8006a9e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3328      	adds	r3, #40	; 0x28
 8006aae:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006ab4:	f7fc fbaa 	bl	800320c <HAL_DMA_Start_IT>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d004      	beq.n	8006ac8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006abe:	2110      	movs	r1, #16
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f7ff fea3 	bl	800680c <I2C_ITError>
}
 8006ac6:	e003      	b.n	8006ad0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006ac8:	2140      	movs	r1, #64	; 0x40
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f91c 	bl	8006d08 <I2C_Enable_IRQ>
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006af2:	d002      	beq.n	8006afa <I2C_DMASlaveTransmitCplt+0x22>
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b08:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff fbf6 	bl	80062fc <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b34:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006b40:	2120      	movs	r1, #32
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 f8e0 	bl	8006d08 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006b48:	e02d      	b.n	8006ba6 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006b52:	441a      	add	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2bff      	cmp	r3, #255	; 0xff
 8006b60:	d903      	bls.n	8006b6a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	22ff      	movs	r2, #255	; 0xff
 8006b66:	851a      	strh	r2, [r3, #40]	; 0x28
 8006b68:	e004      	b.n	8006b74 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	3324      	adds	r3, #36	; 0x24
 8006b7e:	4619      	mov	r1, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006b8a:	f7fc fb3f 	bl	800320c <HAL_DMA_Start_IT>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d004      	beq.n	8006b9e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006b94:	2110      	movs	r1, #16
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f7ff fe38 	bl	800680c <I2C_ITError>
}
 8006b9c:	e003      	b.n	8006ba6 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006b9e:	2140      	movs	r1, #64	; 0x40
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f8b1 	bl	8006d08 <I2C_Enable_IRQ>
}
 8006ba6:	bf00      	nop
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10e      	bne.n	8006bec <I2C_DMASlaveReceiveCplt+0x3e>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bd4:	d00a      	beq.n	8006bec <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006be4:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff fb88 	bl	80062fc <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d007      	beq.n	8006c36 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8006c32:	2301      	movs	r3, #1
 8006c34:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fc fd72 	bl	8003720 <HAL_DMA_GetError>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d00e      	beq.n	8006c60 <I2C_DMAError+0x6c>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c56:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006c58:	2110      	movs	r1, #16
 8006c5a:	68b8      	ldr	r0, [r7, #8]
 8006c5c:	f7ff fdd6 	bl	800680c <I2C_ITError>
  }
}
 8006c60:	bf00      	nop
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	2200      	movs	r2, #0
 8006c84:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c92:	2200      	movs	r2, #0
 8006c94:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f7ff fe88 	bl	80069ac <I2C_TreatErrorCallback>
}
 8006c9c:	bf00      	nop
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	607b      	str	r3, [r7, #4]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	817b      	strh	r3, [r7, #10]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cb6:	897b      	ldrh	r3, [r7, #10]
 8006cb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006cbc:	7a7b      	ldrb	r3, [r7, #9]
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cc4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cd2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	0d5b      	lsrs	r3, r3, #21
 8006cde:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ce2:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <I2C_TransferConfig+0x60>)
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	43db      	mvns	r3, r3
 8006ce8:	ea02 0103 	and.w	r1, r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	03ff63ff 	.word	0x03ff63ff

08006d08 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1c:	4a2d      	ldr	r2, [pc, #180]	; (8006dd4 <I2C_Enable_IRQ+0xcc>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d004      	beq.n	8006d2c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006d26:	4a2c      	ldr	r2, [pc, #176]	; (8006dd8 <I2C_Enable_IRQ+0xd0>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d11d      	bne.n	8006d68 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006d2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	da03      	bge.n	8006d3c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006d3a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d3c:	887b      	ldrh	r3, [r7, #2]
 8006d3e:	2b10      	cmp	r3, #16
 8006d40:	d103      	bne.n	8006d4a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006d48:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006d4a:	887b      	ldrh	r3, [r7, #2]
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	d103      	bne.n	8006d58 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d56:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006d58:	887b      	ldrh	r3, [r7, #2]
 8006d5a:	2b40      	cmp	r3, #64	; 0x40
 8006d5c:	d12c      	bne.n	8006db8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d64:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006d66:	e027      	b.n	8006db8 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006d68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	da03      	bge.n	8006d78 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006d76:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006d78:	887b      	ldrh	r3, [r7, #2]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006d88:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006d8a:	887b      	ldrh	r3, [r7, #2]
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006d9a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006d9c:	887b      	ldrh	r3, [r7, #2]
 8006d9e:	2b10      	cmp	r3, #16
 8006da0:	d103      	bne.n	8006daa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006da8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006daa:	887b      	ldrh	r3, [r7, #2]
 8006dac:	2b20      	cmp	r3, #32
 8006dae:	d103      	bne.n	8006db8 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f043 0320 	orr.w	r3, r3, #32
 8006db6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6819      	ldr	r1, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	08005dd5 	.word	0x08005dd5
 8006dd8:	08005fbb 	.word	0x08005fbb

08006ddc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006dec:	887b      	ldrh	r3, [r7, #2]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00f      	beq.n	8006e16 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006dfc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e0a:	2b28      	cmp	r3, #40	; 0x28
 8006e0c:	d003      	beq.n	8006e16 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006e14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006e16:	887b      	ldrh	r3, [r7, #2]
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00f      	beq.n	8006e40 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006e26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e34:	2b28      	cmp	r3, #40	; 0x28
 8006e36:	d003      	beq.n	8006e40 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006e3e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006e40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	da03      	bge.n	8006e50 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006e4e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006e50:	887b      	ldrh	r3, [r7, #2]
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d103      	bne.n	8006e5e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006e5c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006e5e:	887b      	ldrh	r3, [r7, #2]
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	d103      	bne.n	8006e6c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f043 0320 	orr.w	r3, r3, #32
 8006e6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006e6c:	887b      	ldrh	r3, [r7, #2]
 8006e6e:	2b40      	cmp	r3, #64	; 0x40
 8006e70:	d103      	bne.n	8006e7a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e78:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	43da      	mvns	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	400a      	ands	r2, r1
 8006e8a:	601a      	str	r2, [r3, #0]
}
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b20      	cmp	r3, #32
 8006eac:	d138      	bne.n	8006f20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e032      	b.n	8006f22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2224      	movs	r2, #36	; 0x24
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 0201 	bic.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006eea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6819      	ldr	r1, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0201 	orr.w	r2, r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e000      	b.n	8006f22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f20:	2302      	movs	r3, #2
  }
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	370c      	adds	r7, #12
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b085      	sub	sp, #20
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d139      	bne.n	8006fb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e033      	b.n	8006fba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2224      	movs	r2, #36	; 0x24
 8006f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0201 	bic.w	r2, r2, #1
 8006f70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e000      	b.n	8006fba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006fb8:	2302      	movs	r3, #2
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc8:	b08f      	sub	sp, #60	; 0x3c
 8006fca:	af0a      	add	r7, sp, #40	; 0x28
 8006fcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e116      	b.n	8007206 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d106      	bne.n	8006ff8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7fa fcb8 	bl	8001968 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2203      	movs	r2, #3
 8006ffc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f004 f84e 	bl	800b0b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	603b      	str	r3, [r7, #0]
 8007022:	687e      	ldr	r6, [r7, #4]
 8007024:	466d      	mov	r5, sp
 8007026:	f106 0410 	add.w	r4, r6, #16
 800702a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800702c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800702e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007032:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007036:	e885 0003 	stmia.w	r5, {r0, r1}
 800703a:	1d33      	adds	r3, r6, #4
 800703c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800703e:	6838      	ldr	r0, [r7, #0]
 8007040:	f003 ffe2 	bl	800b008 <USB_CoreInit>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d005      	beq.n	8007056 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2202      	movs	r2, #2
 800704e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e0d7      	b.n	8007206 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2100      	movs	r1, #0
 800705c:	4618      	mov	r0, r3
 800705e:	f004 f83c 	bl	800b0da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]
 8007066:	e04a      	b.n	80070fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007068:	7bfa      	ldrb	r2, [r7, #15]
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	333d      	adds	r3, #61	; 0x3d
 8007078:	2201      	movs	r2, #1
 800707a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800707c:	7bfa      	ldrb	r2, [r7, #15]
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	4613      	mov	r3, r2
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	4413      	add	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	333c      	adds	r3, #60	; 0x3c
 800708c:	7bfa      	ldrb	r2, [r7, #15]
 800708e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007090:	7bfa      	ldrb	r2, [r7, #15]
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	b298      	uxth	r0, r3
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	4613      	mov	r3, r2
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	3344      	adds	r3, #68	; 0x44
 80070a4:	4602      	mov	r2, r0
 80070a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80070a8:	7bfa      	ldrb	r2, [r7, #15]
 80070aa:	6879      	ldr	r1, [r7, #4]
 80070ac:	4613      	mov	r3, r2
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	440b      	add	r3, r1
 80070b6:	3340      	adds	r3, #64	; 0x40
 80070b8:	2200      	movs	r2, #0
 80070ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80070bc:	7bfa      	ldrb	r2, [r7, #15]
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	4613      	mov	r3, r2
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	440b      	add	r3, r1
 80070ca:	3348      	adds	r3, #72	; 0x48
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80070d0:	7bfa      	ldrb	r2, [r7, #15]
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	4613      	mov	r3, r2
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	440b      	add	r3, r1
 80070de:	334c      	adds	r3, #76	; 0x4c
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80070e4:	7bfa      	ldrb	r2, [r7, #15]
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	4613      	mov	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	4413      	add	r3, r2
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	3354      	adds	r3, #84	; 0x54
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	3301      	adds	r3, #1
 80070fc:	73fb      	strb	r3, [r7, #15]
 80070fe:	7bfa      	ldrb	r2, [r7, #15]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	429a      	cmp	r2, r3
 8007106:	d3af      	bcc.n	8007068 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]
 800710c:	e044      	b.n	8007198 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800710e:	7bfa      	ldrb	r2, [r7, #15]
 8007110:	6879      	ldr	r1, [r7, #4]
 8007112:	4613      	mov	r3, r2
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	4413      	add	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	440b      	add	r3, r1
 800711c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007120:	2200      	movs	r2, #0
 8007122:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007124:	7bfa      	ldrb	r2, [r7, #15]
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	4413      	add	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	440b      	add	r3, r1
 8007132:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007136:	7bfa      	ldrb	r2, [r7, #15]
 8007138:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800713a:	7bfa      	ldrb	r2, [r7, #15]
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007150:	7bfa      	ldrb	r2, [r7, #15]
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	4613      	mov	r3, r2
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	440b      	add	r3, r1
 800715e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007166:	7bfa      	ldrb	r2, [r7, #15]
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800717c:	7bfa      	ldrb	r2, [r7, #15]
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	4613      	mov	r3, r2
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	440b      	add	r3, r1
 800718a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007192:	7bfb      	ldrb	r3, [r7, #15]
 8007194:	3301      	adds	r3, #1
 8007196:	73fb      	strb	r3, [r7, #15]
 8007198:	7bfa      	ldrb	r2, [r7, #15]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d3b5      	bcc.n	800710e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	603b      	str	r3, [r7, #0]
 80071a8:	687e      	ldr	r6, [r7, #4]
 80071aa:	466d      	mov	r5, sp
 80071ac:	f106 0410 	add.w	r4, r6, #16
 80071b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80071b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80071c0:	1d33      	adds	r3, r6, #4
 80071c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071c4:	6838      	ldr	r0, [r7, #0]
 80071c6:	f003 ffd5 	bl	800b174 <USB_DevInit>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e014      	b.n	8007206 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d102      	bne.n	80071fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f80b 	bl	8007210 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f004 f993 	bl	800b52a <USB_DevDisconnect>

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007210 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800723e:	4b05      	ldr	r3, [pc, #20]	; (8007254 <HAL_PCDEx_ActivateLPM+0x44>)
 8007240:	4313      	orrs	r3, r2
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	10000003 	.word	0x10000003

08007258 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007258:	b480      	push	{r7}
 800725a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800725c:	4b05      	ldr	r3, [pc, #20]	; (8007274 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a04      	ldr	r2, [pc, #16]	; (8007274 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007266:	6013      	str	r3, [r2, #0]
}
 8007268:	bf00      	nop
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40007000 	.word	0x40007000

08007278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007280:	2300      	movs	r3, #0
 8007282:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e291      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 8087 	beq.w	80073aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800729c:	4b96      	ldr	r3, [pc, #600]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 030c 	and.w	r3, r3, #12
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d00c      	beq.n	80072c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072a8:	4b93      	ldr	r3, [pc, #588]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 030c 	and.w	r3, r3, #12
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d112      	bne.n	80072da <HAL_RCC_OscConfig+0x62>
 80072b4:	4b90      	ldr	r3, [pc, #576]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072c0:	d10b      	bne.n	80072da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c2:	4b8d      	ldr	r3, [pc, #564]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d06c      	beq.n	80073a8 <HAL_RCC_OscConfig+0x130>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d168      	bne.n	80073a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e26b      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e2:	d106      	bne.n	80072f2 <HAL_RCC_OscConfig+0x7a>
 80072e4:	4b84      	ldr	r3, [pc, #528]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a83      	ldr	r2, [pc, #524]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80072ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	e02e      	b.n	8007350 <HAL_RCC_OscConfig+0xd8>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10c      	bne.n	8007314 <HAL_RCC_OscConfig+0x9c>
 80072fa:	4b7f      	ldr	r3, [pc, #508]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a7e      	ldr	r2, [pc, #504]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	4b7c      	ldr	r3, [pc, #496]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a7b      	ldr	r2, [pc, #492]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800730c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	e01d      	b.n	8007350 <HAL_RCC_OscConfig+0xd8>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800731c:	d10c      	bne.n	8007338 <HAL_RCC_OscConfig+0xc0>
 800731e:	4b76      	ldr	r3, [pc, #472]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a75      	ldr	r2, [pc, #468]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007328:	6013      	str	r3, [r2, #0]
 800732a:	4b73      	ldr	r3, [pc, #460]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a72      	ldr	r2, [pc, #456]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	e00b      	b.n	8007350 <HAL_RCC_OscConfig+0xd8>
 8007338:	4b6f      	ldr	r3, [pc, #444]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a6e      	ldr	r2, [pc, #440]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800733e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	4b6c      	ldr	r3, [pc, #432]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a6b      	ldr	r2, [pc, #428]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800734a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800734e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d013      	beq.n	8007380 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007358:	f7fa ff52 	bl	8002200 <HAL_GetTick>
 800735c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800735e:	e008      	b.n	8007372 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007360:	f7fa ff4e 	bl	8002200 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	2b64      	cmp	r3, #100	; 0x64
 800736c:	d901      	bls.n	8007372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800736e:	2303      	movs	r3, #3
 8007370:	e21f      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007372:	4b61      	ldr	r3, [pc, #388]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f0      	beq.n	8007360 <HAL_RCC_OscConfig+0xe8>
 800737e:	e014      	b.n	80073aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007380:	f7fa ff3e 	bl	8002200 <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007388:	f7fa ff3a 	bl	8002200 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b64      	cmp	r3, #100	; 0x64
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e20b      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800739a:	4b57      	ldr	r3, [pc, #348]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1f0      	bne.n	8007388 <HAL_RCC_OscConfig+0x110>
 80073a6:	e000      	b.n	80073aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d069      	beq.n	800748a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073b6:	4b50      	ldr	r3, [pc, #320]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 030c 	and.w	r3, r3, #12
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073c2:	4b4d      	ldr	r3, [pc, #308]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 030c 	and.w	r3, r3, #12
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d11c      	bne.n	8007408 <HAL_RCC_OscConfig+0x190>
 80073ce:	4b4a      	ldr	r3, [pc, #296]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d116      	bne.n	8007408 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073da:	4b47      	ldr	r3, [pc, #284]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d005      	beq.n	80073f2 <HAL_RCC_OscConfig+0x17a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d001      	beq.n	80073f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e1df      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073f2:	4b41      	ldr	r3, [pc, #260]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	493d      	ldr	r1, [pc, #244]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007402:	4313      	orrs	r3, r2
 8007404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007406:	e040      	b.n	800748a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d023      	beq.n	8007458 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007410:	4b39      	ldr	r3, [pc, #228]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a38      	ldr	r2, [pc, #224]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007416:	f043 0301 	orr.w	r3, r3, #1
 800741a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741c:	f7fa fef0 	bl	8002200 <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007424:	f7fa feec 	bl	8002200 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e1bd      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007436:	4b30      	ldr	r3, [pc, #192]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0302 	and.w	r3, r3, #2
 800743e:	2b00      	cmp	r3, #0
 8007440:	d0f0      	beq.n	8007424 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007442:	4b2d      	ldr	r3, [pc, #180]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	4929      	ldr	r1, [pc, #164]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007452:	4313      	orrs	r3, r2
 8007454:	600b      	str	r3, [r1, #0]
 8007456:	e018      	b.n	800748a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007458:	4b27      	ldr	r3, [pc, #156]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a26      	ldr	r2, [pc, #152]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007464:	f7fa fecc 	bl	8002200 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800746c:	f7fa fec8 	bl	8002200 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e199      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800747e:	4b1e      	ldr	r3, [pc, #120]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f0      	bne.n	800746c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0308 	and.w	r3, r3, #8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d038      	beq.n	8007508 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d019      	beq.n	80074d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800749e:	4b16      	ldr	r3, [pc, #88]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80074a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a2:	4a15      	ldr	r2, [pc, #84]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80074a4:	f043 0301 	orr.w	r3, r3, #1
 80074a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074aa:	f7fa fea9 	bl	8002200 <HAL_GetTick>
 80074ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074b0:	e008      	b.n	80074c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074b2:	f7fa fea5 	bl	8002200 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d901      	bls.n	80074c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e176      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074c4:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80074c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0f0      	beq.n	80074b2 <HAL_RCC_OscConfig+0x23a>
 80074d0:	e01a      	b.n	8007508 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074d2:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80074d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074d6:	4a08      	ldr	r2, [pc, #32]	; (80074f8 <HAL_RCC_OscConfig+0x280>)
 80074d8:	f023 0301 	bic.w	r3, r3, #1
 80074dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074de:	f7fa fe8f 	bl	8002200 <HAL_GetTick>
 80074e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074e4:	e00a      	b.n	80074fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074e6:	f7fa fe8b 	bl	8002200 <HAL_GetTick>
 80074ea:	4602      	mov	r2, r0
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d903      	bls.n	80074fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e15c      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
 80074f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074fc:	4b91      	ldr	r3, [pc, #580]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80074fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1ee      	bne.n	80074e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 80a4 	beq.w	800765e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007516:	4b8b      	ldr	r3, [pc, #556]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10d      	bne.n	800753e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007522:	4b88      	ldr	r3, [pc, #544]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	4a87      	ldr	r2, [pc, #540]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800752c:	6413      	str	r3, [r2, #64]	; 0x40
 800752e:	4b85      	ldr	r3, [pc, #532]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007536:	60bb      	str	r3, [r7, #8]
 8007538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800753e:	4b82      	ldr	r3, [pc, #520]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007546:	2b00      	cmp	r3, #0
 8007548:	d118      	bne.n	800757c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800754a:	4b7f      	ldr	r3, [pc, #508]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a7e      	ldr	r2, [pc, #504]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007556:	f7fa fe53 	bl	8002200 <HAL_GetTick>
 800755a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800755c:	e008      	b.n	8007570 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800755e:	f7fa fe4f 	bl	8002200 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b64      	cmp	r3, #100	; 0x64
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e120      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007570:	4b75      	ldr	r3, [pc, #468]	; (8007748 <HAL_RCC_OscConfig+0x4d0>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0f0      	beq.n	800755e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d106      	bne.n	8007592 <HAL_RCC_OscConfig+0x31a>
 8007584:	4b6f      	ldr	r3, [pc, #444]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007588:	4a6e      	ldr	r2, [pc, #440]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 800758a:	f043 0301 	orr.w	r3, r3, #1
 800758e:	6713      	str	r3, [r2, #112]	; 0x70
 8007590:	e02d      	b.n	80075ee <HAL_RCC_OscConfig+0x376>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10c      	bne.n	80075b4 <HAL_RCC_OscConfig+0x33c>
 800759a:	4b6a      	ldr	r3, [pc, #424]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 800759c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759e:	4a69      	ldr	r2, [pc, #420]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80075a0:	f023 0301 	bic.w	r3, r3, #1
 80075a4:	6713      	str	r3, [r2, #112]	; 0x70
 80075a6:	4b67      	ldr	r3, [pc, #412]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80075a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075aa:	4a66      	ldr	r2, [pc, #408]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80075ac:	f023 0304 	bic.w	r3, r3, #4
 80075b0:	6713      	str	r3, [r2, #112]	; 0x70
 80075b2:	e01c      	b.n	80075ee <HAL_RCC_OscConfig+0x376>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	2b05      	cmp	r3, #5
 80075ba:	d10c      	bne.n	80075d6 <HAL_RCC_OscConfig+0x35e>
 80075bc:	4b61      	ldr	r3, [pc, #388]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80075be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c0:	4a60      	ldr	r2, [pc, #384]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80075c2:	f043 0304 	orr.w	r3, r3, #4
 80075c6:	6713      	str	r3, [r2, #112]	; 0x70
 80075c8:	4b5e      	ldr	r3, [pc, #376]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80075ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075cc:	4a5d      	ldr	r2, [pc, #372]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	6713      	str	r3, [r2, #112]	; 0x70
 80075d4:	e00b      	b.n	80075ee <HAL_RCC_OscConfig+0x376>
 80075d6:	4b5b      	ldr	r3, [pc, #364]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80075d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075da:	4a5a      	ldr	r2, [pc, #360]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	6713      	str	r3, [r2, #112]	; 0x70
 80075e2:	4b58      	ldr	r3, [pc, #352]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80075e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e6:	4a57      	ldr	r2, [pc, #348]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80075e8:	f023 0304 	bic.w	r3, r3, #4
 80075ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d015      	beq.n	8007622 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075f6:	f7fa fe03 	bl	8002200 <HAL_GetTick>
 80075fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075fc:	e00a      	b.n	8007614 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075fe:	f7fa fdff 	bl	8002200 <HAL_GetTick>
 8007602:	4602      	mov	r2, r0
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	f241 3288 	movw	r2, #5000	; 0x1388
 800760c:	4293      	cmp	r3, r2
 800760e:	d901      	bls.n	8007614 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	e0ce      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007614:	4b4b      	ldr	r3, [pc, #300]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b00      	cmp	r3, #0
 800761e:	d0ee      	beq.n	80075fe <HAL_RCC_OscConfig+0x386>
 8007620:	e014      	b.n	800764c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007622:	f7fa fded 	bl	8002200 <HAL_GetTick>
 8007626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007628:	e00a      	b.n	8007640 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800762a:	f7fa fde9 	bl	8002200 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	f241 3288 	movw	r2, #5000	; 0x1388
 8007638:	4293      	cmp	r3, r2
 800763a:	d901      	bls.n	8007640 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e0b8      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007640:	4b40      	ldr	r3, [pc, #256]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1ee      	bne.n	800762a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d105      	bne.n	800765e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007652:	4b3c      	ldr	r3, [pc, #240]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007656:	4a3b      	ldr	r2, [pc, #236]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800765c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 80a4 	beq.w	80077b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007668:	4b36      	ldr	r3, [pc, #216]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f003 030c 	and.w	r3, r3, #12
 8007670:	2b08      	cmp	r3, #8
 8007672:	d06b      	beq.n	800774c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	2b02      	cmp	r3, #2
 800767a:	d149      	bne.n	8007710 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800767c:	4b31      	ldr	r3, [pc, #196]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a30      	ldr	r2, [pc, #192]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007688:	f7fa fdba 	bl	8002200 <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007690:	f7fa fdb6 	bl	8002200 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e087      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076a2:	4b28      	ldr	r3, [pc, #160]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1f0      	bne.n	8007690 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69da      	ldr	r2, [r3, #28]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	019b      	lsls	r3, r3, #6
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	3b01      	subs	r3, #1
 80076c8:	041b      	lsls	r3, r3, #16
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	061b      	lsls	r3, r3, #24
 80076d2:	4313      	orrs	r3, r2
 80076d4:	4a1b      	ldr	r2, [pc, #108]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80076d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076da:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076dc:	4b19      	ldr	r3, [pc, #100]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a18      	ldr	r2, [pc, #96]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 80076e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e8:	f7fa fd8a 	bl	8002200 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f0:	f7fa fd86 	bl	8002200 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e057      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007702:	4b10      	ldr	r3, [pc, #64]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0f0      	beq.n	80076f0 <HAL_RCC_OscConfig+0x478>
 800770e:	e04f      	b.n	80077b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007710:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a0b      	ldr	r2, [pc, #44]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800771a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771c:	f7fa fd70 	bl	8002200 <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007724:	f7fa fd6c 	bl	8002200 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e03d      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007736:	4b03      	ldr	r3, [pc, #12]	; (8007744 <HAL_RCC_OscConfig+0x4cc>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1f0      	bne.n	8007724 <HAL_RCC_OscConfig+0x4ac>
 8007742:	e035      	b.n	80077b0 <HAL_RCC_OscConfig+0x538>
 8007744:	40023800 	.word	0x40023800
 8007748:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800774c:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <HAL_RCC_OscConfig+0x544>)
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d028      	beq.n	80077ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007764:	429a      	cmp	r2, r3
 8007766:	d121      	bne.n	80077ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007772:	429a      	cmp	r2, r3
 8007774:	d11a      	bne.n	80077ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800777c:	4013      	ands	r3, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007782:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007784:	4293      	cmp	r3, r2
 8007786:	d111      	bne.n	80077ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	085b      	lsrs	r3, r3, #1
 8007794:	3b01      	subs	r3, #1
 8007796:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007798:	429a      	cmp	r2, r3
 800779a:	d107      	bne.n	80077ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d001      	beq.n	80077b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	40023800 	.word	0x40023800

080077c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0d0      	b.n	800797a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077d8:	4b6a      	ldr	r3, [pc, #424]	; (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d910      	bls.n	8007808 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e6:	4b67      	ldr	r3, [pc, #412]	; (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f023 020f 	bic.w	r2, r3, #15
 80077ee:	4965      	ldr	r1, [pc, #404]	; (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077f6:	4b63      	ldr	r3, [pc, #396]	; (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	429a      	cmp	r2, r3
 8007802:	d001      	beq.n	8007808 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e0b8      	b.n	800797a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0302 	and.w	r3, r3, #2
 8007810:	2b00      	cmp	r3, #0
 8007812:	d020      	beq.n	8007856 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0304 	and.w	r3, r3, #4
 800781c:	2b00      	cmp	r3, #0
 800781e:	d005      	beq.n	800782c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007820:	4b59      	ldr	r3, [pc, #356]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	4a58      	ldr	r2, [pc, #352]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 8007826:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800782a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b00      	cmp	r3, #0
 8007836:	d005      	beq.n	8007844 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007838:	4b53      	ldr	r3, [pc, #332]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	4a52      	ldr	r2, [pc, #328]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 800783e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007842:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007844:	4b50      	ldr	r3, [pc, #320]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	494d      	ldr	r1, [pc, #308]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 8007852:	4313      	orrs	r3, r2
 8007854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d040      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d107      	bne.n	800787a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800786a:	4b47      	ldr	r3, [pc, #284]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d115      	bne.n	80078a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e07f      	b.n	800797a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d107      	bne.n	8007892 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007882:	4b41      	ldr	r3, [pc, #260]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d109      	bne.n	80078a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e073      	b.n	800797a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007892:	4b3d      	ldr	r3, [pc, #244]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e06b      	b.n	800797a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078a2:	4b39      	ldr	r3, [pc, #228]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f023 0203 	bic.w	r2, r3, #3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	4936      	ldr	r1, [pc, #216]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b4:	f7fa fca4 	bl	8002200 <HAL_GetTick>
 80078b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ba:	e00a      	b.n	80078d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078bc:	f7fa fca0 	bl	8002200 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e053      	b.n	800797a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d2:	4b2d      	ldr	r3, [pc, #180]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f003 020c 	and.w	r2, r3, #12
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d1eb      	bne.n	80078bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078e4:	4b27      	ldr	r3, [pc, #156]	; (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 030f 	and.w	r3, r3, #15
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d210      	bcs.n	8007914 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078f2:	4b24      	ldr	r3, [pc, #144]	; (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f023 020f 	bic.w	r2, r3, #15
 80078fa:	4922      	ldr	r1, [pc, #136]	; (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	4313      	orrs	r3, r2
 8007900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007902:	4b20      	ldr	r3, [pc, #128]	; (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	429a      	cmp	r2, r3
 800790e:	d001      	beq.n	8007914 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007910:	2301      	movs	r3, #1
 8007912:	e032      	b.n	800797a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0304 	and.w	r3, r3, #4
 800791c:	2b00      	cmp	r3, #0
 800791e:	d008      	beq.n	8007932 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007920:	4b19      	ldr	r3, [pc, #100]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	4916      	ldr	r1, [pc, #88]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 800792e:	4313      	orrs	r3, r2
 8007930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d009      	beq.n	8007952 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800793e:	4b12      	ldr	r3, [pc, #72]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	00db      	lsls	r3, r3, #3
 800794c:	490e      	ldr	r1, [pc, #56]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 800794e:	4313      	orrs	r3, r2
 8007950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007952:	f000 f821 	bl	8007998 <HAL_RCC_GetSysClockFreq>
 8007956:	4602      	mov	r2, r0
 8007958:	4b0b      	ldr	r3, [pc, #44]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	091b      	lsrs	r3, r3, #4
 800795e:	f003 030f 	and.w	r3, r3, #15
 8007962:	490a      	ldr	r1, [pc, #40]	; (800798c <HAL_RCC_ClockConfig+0x1cc>)
 8007964:	5ccb      	ldrb	r3, [r1, r3]
 8007966:	fa22 f303 	lsr.w	r3, r2, r3
 800796a:	4a09      	ldr	r2, [pc, #36]	; (8007990 <HAL_RCC_ClockConfig+0x1d0>)
 800796c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800796e:	4b09      	ldr	r3, [pc, #36]	; (8007994 <HAL_RCC_ClockConfig+0x1d4>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f7fa fc00 	bl	8002178 <HAL_InitTick>

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	40023c00 	.word	0x40023c00
 8007988:	40023800 	.word	0x40023800
 800798c:	0801a96c 	.word	0x0801a96c
 8007990:	20000000 	.word	0x20000000
 8007994:	20000004 	.word	0x20000004

08007998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800799c:	b094      	sub	sp, #80	; 0x50
 800799e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	647b      	str	r3, [r7, #68]	; 0x44
 80079a4:	2300      	movs	r3, #0
 80079a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079a8:	2300      	movs	r3, #0
 80079aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079b0:	4b79      	ldr	r3, [pc, #484]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f003 030c 	and.w	r3, r3, #12
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d00d      	beq.n	80079d8 <HAL_RCC_GetSysClockFreq+0x40>
 80079bc:	2b08      	cmp	r3, #8
 80079be:	f200 80e1 	bhi.w	8007b84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <HAL_RCC_GetSysClockFreq+0x34>
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d003      	beq.n	80079d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80079ca:	e0db      	b.n	8007b84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079cc:	4b73      	ldr	r3, [pc, #460]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x204>)
 80079ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079d0:	e0db      	b.n	8007b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079d2:	4b73      	ldr	r3, [pc, #460]	; (8007ba0 <HAL_RCC_GetSysClockFreq+0x208>)
 80079d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079d6:	e0d8      	b.n	8007b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079d8:	4b6f      	ldr	r3, [pc, #444]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079e0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80079e2:	4b6d      	ldr	r3, [pc, #436]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d063      	beq.n	8007ab6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079ee:	4b6a      	ldr	r3, [pc, #424]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	099b      	lsrs	r3, r3, #6
 80079f4:	2200      	movs	r2, #0
 80079f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80079f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a00:	633b      	str	r3, [r7, #48]	; 0x30
 8007a02:	2300      	movs	r3, #0
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
 8007a06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007a0a:	4622      	mov	r2, r4
 8007a0c:	462b      	mov	r3, r5
 8007a0e:	f04f 0000 	mov.w	r0, #0
 8007a12:	f04f 0100 	mov.w	r1, #0
 8007a16:	0159      	lsls	r1, r3, #5
 8007a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a1c:	0150      	lsls	r0, r2, #5
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	4621      	mov	r1, r4
 8007a24:	1a51      	subs	r1, r2, r1
 8007a26:	6139      	str	r1, [r7, #16]
 8007a28:	4629      	mov	r1, r5
 8007a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	018b      	lsls	r3, r1, #6
 8007a40:	4651      	mov	r1, sl
 8007a42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a46:	4651      	mov	r1, sl
 8007a48:	018a      	lsls	r2, r1, #6
 8007a4a:	4651      	mov	r1, sl
 8007a4c:	ebb2 0801 	subs.w	r8, r2, r1
 8007a50:	4659      	mov	r1, fp
 8007a52:	eb63 0901 	sbc.w	r9, r3, r1
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	f04f 0300 	mov.w	r3, #0
 8007a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a6a:	4690      	mov	r8, r2
 8007a6c:	4699      	mov	r9, r3
 8007a6e:	4623      	mov	r3, r4
 8007a70:	eb18 0303 	adds.w	r3, r8, r3
 8007a74:	60bb      	str	r3, [r7, #8]
 8007a76:	462b      	mov	r3, r5
 8007a78:	eb49 0303 	adc.w	r3, r9, r3
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	f04f 0200 	mov.w	r2, #0
 8007a82:	f04f 0300 	mov.w	r3, #0
 8007a86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	024b      	lsls	r3, r1, #9
 8007a8e:	4621      	mov	r1, r4
 8007a90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a94:	4621      	mov	r1, r4
 8007a96:	024a      	lsls	r2, r1, #9
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007aa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007aa8:	f7f8 fc02 	bl	80002b0 <__aeabi_uldivmod>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab4:	e058      	b.n	8007b68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ab6:	4b38      	ldr	r3, [pc, #224]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	099b      	lsrs	r3, r3, #6
 8007abc:	2200      	movs	r2, #0
 8007abe:	4618      	mov	r0, r3
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ac6:	623b      	str	r3, [r7, #32]
 8007ac8:	2300      	movs	r3, #0
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24
 8007acc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	464b      	mov	r3, r9
 8007ad4:	f04f 0000 	mov.w	r0, #0
 8007ad8:	f04f 0100 	mov.w	r1, #0
 8007adc:	0159      	lsls	r1, r3, #5
 8007ade:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ae2:	0150      	lsls	r0, r2, #5
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4641      	mov	r1, r8
 8007aea:	ebb2 0a01 	subs.w	sl, r2, r1
 8007aee:	4649      	mov	r1, r9
 8007af0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b08:	ebb2 040a 	subs.w	r4, r2, sl
 8007b0c:	eb63 050b 	sbc.w	r5, r3, fp
 8007b10:	f04f 0200 	mov.w	r2, #0
 8007b14:	f04f 0300 	mov.w	r3, #0
 8007b18:	00eb      	lsls	r3, r5, #3
 8007b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b1e:	00e2      	lsls	r2, r4, #3
 8007b20:	4614      	mov	r4, r2
 8007b22:	461d      	mov	r5, r3
 8007b24:	4643      	mov	r3, r8
 8007b26:	18e3      	adds	r3, r4, r3
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	eb45 0303 	adc.w	r3, r5, r3
 8007b30:	607b      	str	r3, [r7, #4]
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b3e:	4629      	mov	r1, r5
 8007b40:	028b      	lsls	r3, r1, #10
 8007b42:	4621      	mov	r1, r4
 8007b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b48:	4621      	mov	r1, r4
 8007b4a:	028a      	lsls	r2, r1, #10
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b52:	2200      	movs	r2, #0
 8007b54:	61bb      	str	r3, [r7, #24]
 8007b56:	61fa      	str	r2, [r7, #28]
 8007b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b5c:	f7f8 fba8 	bl	80002b0 <__aeabi_uldivmod>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4613      	mov	r3, r2
 8007b66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007b68:	4b0b      	ldr	r3, [pc, #44]	; (8007b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	0c1b      	lsrs	r3, r3, #16
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	3301      	adds	r3, #1
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b82:	e002      	b.n	8007b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <HAL_RCC_GetSysClockFreq+0x204>)
 8007b86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3750      	adds	r7, #80	; 0x50
 8007b90:	46bd      	mov	sp, r7
 8007b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b96:	bf00      	nop
 8007b98:	40023800 	.word	0x40023800
 8007b9c:	00f42400 	.word	0x00f42400
 8007ba0:	007a1200 	.word	0x007a1200

08007ba4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ba8:	4b03      	ldr	r3, [pc, #12]	; (8007bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007baa:	681b      	ldr	r3, [r3, #0]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	20000000 	.word	0x20000000

08007bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007bc0:	f7ff fff0 	bl	8007ba4 <HAL_RCC_GetHCLKFreq>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	0a9b      	lsrs	r3, r3, #10
 8007bcc:	f003 0307 	and.w	r3, r3, #7
 8007bd0:	4903      	ldr	r1, [pc, #12]	; (8007be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bd2:	5ccb      	ldrb	r3, [r1, r3]
 8007bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	40023800 	.word	0x40023800
 8007be0:	0801a97c 	.word	0x0801a97c

08007be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007be8:	f7ff ffdc 	bl	8007ba4 <HAL_RCC_GetHCLKFreq>
 8007bec:	4602      	mov	r2, r0
 8007bee:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	0b5b      	lsrs	r3, r3, #13
 8007bf4:	f003 0307 	and.w	r3, r3, #7
 8007bf8:	4903      	ldr	r1, [pc, #12]	; (8007c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bfa:	5ccb      	ldrb	r3, [r1, r3]
 8007bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	40023800 	.word	0x40023800
 8007c08:	0801a97c 	.word	0x0801a97c

08007c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d012      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c34:	4b69      	ldr	r3, [pc, #420]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	4a68      	ldr	r2, [pc, #416]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c3e:	6093      	str	r3, [r2, #8]
 8007c40:	4b66      	ldr	r3, [pc, #408]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c48:	4964      	ldr	r1, [pc, #400]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007c56:	2301      	movs	r3, #1
 8007c58:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d017      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c66:	4b5d      	ldr	r3, [pc, #372]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c74:	4959      	ldr	r1, [pc, #356]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c84:	d101      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007c86:	2301      	movs	r3, #1
 8007c88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007c92:	2301      	movs	r3, #1
 8007c94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d017      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007ca2:	4b4e      	ldr	r3, [pc, #312]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	494a      	ldr	r1, [pc, #296]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cc0:	d101      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 808b 	beq.w	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cf0:	4b3a      	ldr	r3, [pc, #232]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf4:	4a39      	ldr	r2, [pc, #228]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8007cfc:	4b37      	ldr	r3, [pc, #220]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d04:	60bb      	str	r3, [r7, #8]
 8007d06:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d08:	4b35      	ldr	r3, [pc, #212]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a34      	ldr	r2, [pc, #208]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d14:	f7fa fa74 	bl	8002200 <HAL_GetTick>
 8007d18:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d1a:	e008      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d1c:	f7fa fa70 	bl	8002200 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	2b64      	cmp	r3, #100	; 0x64
 8007d28:	d901      	bls.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e357      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d2e:	4b2c      	ldr	r3, [pc, #176]	; (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0f0      	beq.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d3a:	4b28      	ldr	r3, [pc, #160]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d42:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d035      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d02e      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d58:	4b20      	ldr	r3, [pc, #128]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d60:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d62:	4b1e      	ldr	r3, [pc, #120]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d66:	4a1d      	ldr	r2, [pc, #116]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d6c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d6e:	4b1b      	ldr	r3, [pc, #108]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d72:	4a1a      	ldr	r2, [pc, #104]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007d7a:	4a18      	ldr	r2, [pc, #96]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d80:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d114      	bne.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d8c:	f7fa fa38 	bl	8002200 <HAL_GetTick>
 8007d90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d92:	e00a      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d94:	f7fa fa34 	bl	8002200 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d901      	bls.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e319      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007daa:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d0ee      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dc2:	d111      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007dc4:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007dd0:	4b04      	ldr	r3, [pc, #16]	; (8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007dd2:	400b      	ands	r3, r1
 8007dd4:	4901      	ldr	r1, [pc, #4]	; (8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	608b      	str	r3, [r1, #8]
 8007dda:	e00b      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	40007000 	.word	0x40007000
 8007de4:	0ffffcff 	.word	0x0ffffcff
 8007de8:	4baa      	ldr	r3, [pc, #680]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	4aa9      	ldr	r2, [pc, #676]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007df2:	6093      	str	r3, [r2, #8]
 8007df4:	4ba7      	ldr	r3, [pc, #668]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007df6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e00:	49a4      	ldr	r1, [pc, #656]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0310 	and.w	r3, r3, #16
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d010      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e12:	4ba0      	ldr	r3, [pc, #640]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e18:	4a9e      	ldr	r2, [pc, #632]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007e22:	4b9c      	ldr	r3, [pc, #624]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e24:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	4999      	ldr	r1, [pc, #612]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e40:	4b94      	ldr	r3, [pc, #592]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e4e:	4991      	ldr	r1, [pc, #580]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e62:	4b8c      	ldr	r3, [pc, #560]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e70:	4988      	ldr	r1, [pc, #544]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e84:	4b83      	ldr	r3, [pc, #524]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e92:	4980      	ldr	r1, [pc, #512]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e94:	4313      	orrs	r3, r2
 8007e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ea6:	4b7b      	ldr	r3, [pc, #492]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb4:	4977      	ldr	r1, [pc, #476]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00a      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ec8:	4b72      	ldr	r3, [pc, #456]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ece:	f023 0203 	bic.w	r2, r3, #3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed6:	496f      	ldr	r1, [pc, #444]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00a      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007eea:	4b6a      	ldr	r3, [pc, #424]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef0:	f023 020c 	bic.w	r2, r3, #12
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ef8:	4966      	ldr	r1, [pc, #408]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00a      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f0c:	4b61      	ldr	r3, [pc, #388]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f1a:	495e      	ldr	r1, [pc, #376]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f2e:	4b59      	ldr	r3, [pc, #356]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f34:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f3c:	4955      	ldr	r1, [pc, #340]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00a      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f50:	4b50      	ldr	r3, [pc, #320]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5e:	494d      	ldr	r1, [pc, #308]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007f72:	4b48      	ldr	r3, [pc, #288]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f80:	4944      	ldr	r1, [pc, #272]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00a      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007f94:	4b3f      	ldr	r3, [pc, #252]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa2:	493c      	ldr	r1, [pc, #240]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00a      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007fb6:	4b37      	ldr	r3, [pc, #220]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc4:	4933      	ldr	r1, [pc, #204]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00a      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fd8:	4b2e      	ldr	r3, [pc, #184]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fde:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fe6:	492b      	ldr	r1, [pc, #172]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d011      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007ffa:	4b26      	ldr	r3, [pc, #152]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008000:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008008:	4922      	ldr	r1, [pc, #136]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800800a:	4313      	orrs	r3, r2
 800800c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008018:	d101      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800801a:	2301      	movs	r3, #1
 800801c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0308 	and.w	r3, r3, #8
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800802a:	2301      	movs	r3, #1
 800802c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00a      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800803a:	4b16      	ldr	r3, [pc, #88]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800803c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008040:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008048:	4912      	ldr	r1, [pc, #72]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800804a:	4313      	orrs	r3, r2
 800804c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00b      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800805c:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800805e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008062:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800806c:	4909      	ldr	r1, [pc, #36]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800806e:	4313      	orrs	r3, r2
 8008070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d006      	beq.n	8008088 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 80d9 	beq.w	800823a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008088:	4b02      	ldr	r3, [pc, #8]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a01      	ldr	r2, [pc, #4]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800808e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008092:	e001      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008094:	40023800 	.word	0x40023800
 8008098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800809a:	f7fa f8b1 	bl	8002200 <HAL_GetTick>
 800809e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080a0:	e008      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80080a2:	f7fa f8ad 	bl	8002200 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	2b64      	cmp	r3, #100	; 0x64
 80080ae:	d901      	bls.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e194      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080b4:	4b6c      	ldr	r3, [pc, #432]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1f0      	bne.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d021      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d11d      	bne.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80080d4:	4b64      	ldr	r3, [pc, #400]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080da:	0c1b      	lsrs	r3, r3, #16
 80080dc:	f003 0303 	and.w	r3, r3, #3
 80080e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80080e2:	4b61      	ldr	r3, [pc, #388]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80080e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e8:	0e1b      	lsrs	r3, r3, #24
 80080ea:	f003 030f 	and.w	r3, r3, #15
 80080ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	019a      	lsls	r2, r3, #6
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	041b      	lsls	r3, r3, #16
 80080fa:	431a      	orrs	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	061b      	lsls	r3, r3, #24
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	071b      	lsls	r3, r3, #28
 8008108:	4957      	ldr	r1, [pc, #348]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800810a:	4313      	orrs	r3, r2
 800810c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008124:	d00a      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800812e:	2b00      	cmp	r3, #0
 8008130:	d02e      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800813a:	d129      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800813c:	4b4a      	ldr	r3, [pc, #296]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800813e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008142:	0c1b      	lsrs	r3, r3, #16
 8008144:	f003 0303 	and.w	r3, r3, #3
 8008148:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800814a:	4b47      	ldr	r3, [pc, #284]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800814c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008150:	0f1b      	lsrs	r3, r3, #28
 8008152:	f003 0307 	and.w	r3, r3, #7
 8008156:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	019a      	lsls	r2, r3, #6
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	041b      	lsls	r3, r3, #16
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	061b      	lsls	r3, r3, #24
 800816a:	431a      	orrs	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	071b      	lsls	r3, r3, #28
 8008170:	493d      	ldr	r1, [pc, #244]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008172:	4313      	orrs	r3, r2
 8008174:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008178:	4b3b      	ldr	r3, [pc, #236]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800817a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800817e:	f023 021f 	bic.w	r2, r3, #31
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	3b01      	subs	r3, #1
 8008188:	4937      	ldr	r1, [pc, #220]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800818a:	4313      	orrs	r3, r2
 800818c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01d      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800819c:	4b32      	ldr	r3, [pc, #200]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800819e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081a2:	0e1b      	lsrs	r3, r3, #24
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80081aa:	4b2f      	ldr	r3, [pc, #188]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b0:	0f1b      	lsrs	r3, r3, #28
 80081b2:	f003 0307 	and.w	r3, r3, #7
 80081b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	019a      	lsls	r2, r3, #6
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	041b      	lsls	r3, r3, #16
 80081c4:	431a      	orrs	r2, r3
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	061b      	lsls	r3, r3, #24
 80081ca:	431a      	orrs	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	071b      	lsls	r3, r3, #28
 80081d0:	4925      	ldr	r1, [pc, #148]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d011      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	019a      	lsls	r2, r3, #6
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	041b      	lsls	r3, r3, #16
 80081f0:	431a      	orrs	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	061b      	lsls	r3, r3, #24
 80081f8:	431a      	orrs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	071b      	lsls	r3, r3, #28
 8008200:	4919      	ldr	r1, [pc, #100]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008202:	4313      	orrs	r3, r2
 8008204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008208:	4b17      	ldr	r3, [pc, #92]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a16      	ldr	r2, [pc, #88]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800820e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008214:	f7f9 fff4 	bl	8002200 <HAL_GetTick>
 8008218:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800821a:	e008      	b.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800821c:	f7f9 fff0 	bl	8002200 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b64      	cmp	r3, #100	; 0x64
 8008228:	d901      	bls.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e0d7      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800822e:	4b0e      	ldr	r3, [pc, #56]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0f0      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	2b01      	cmp	r3, #1
 800823e:	f040 80cd 	bne.w	80083dc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008242:	4b09      	ldr	r3, [pc, #36]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a08      	ldr	r2, [pc, #32]	; (8008268 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800824c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800824e:	f7f9 ffd7 	bl	8002200 <HAL_GetTick>
 8008252:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008254:	e00a      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008256:	f7f9 ffd3 	bl	8002200 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	2b64      	cmp	r3, #100	; 0x64
 8008262:	d903      	bls.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e0ba      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008268:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800826c:	4b5e      	ldr	r3, [pc, #376]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008278:	d0ed      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828a:	2b00      	cmp	r3, #0
 800828c:	d009      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008296:	2b00      	cmp	r3, #0
 8008298:	d02e      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d12a      	bne.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80082a2:	4b51      	ldr	r3, [pc, #324]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a8:	0c1b      	lsrs	r3, r3, #16
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80082b0:	4b4d      	ldr	r3, [pc, #308]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b6:	0f1b      	lsrs	r3, r3, #28
 80082b8:	f003 0307 	and.w	r3, r3, #7
 80082bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	019a      	lsls	r2, r3, #6
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	041b      	lsls	r3, r3, #16
 80082c8:	431a      	orrs	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	061b      	lsls	r3, r3, #24
 80082d0:	431a      	orrs	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	071b      	lsls	r3, r3, #28
 80082d6:	4944      	ldr	r1, [pc, #272]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80082de:	4b42      	ldr	r3, [pc, #264]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	3b01      	subs	r3, #1
 80082ee:	021b      	lsls	r3, r3, #8
 80082f0:	493d      	ldr	r1, [pc, #244]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d022      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800830c:	d11d      	bne.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800830e:	4b36      	ldr	r3, [pc, #216]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008314:	0e1b      	lsrs	r3, r3, #24
 8008316:	f003 030f 	and.w	r3, r3, #15
 800831a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800831c:	4b32      	ldr	r3, [pc, #200]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800831e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008322:	0f1b      	lsrs	r3, r3, #28
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	019a      	lsls	r2, r3, #6
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	041b      	lsls	r3, r3, #16
 8008336:	431a      	orrs	r2, r3
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	061b      	lsls	r3, r3, #24
 800833c:	431a      	orrs	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	071b      	lsls	r3, r3, #28
 8008342:	4929      	ldr	r1, [pc, #164]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008344:	4313      	orrs	r3, r2
 8008346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0308 	and.w	r3, r3, #8
 8008352:	2b00      	cmp	r3, #0
 8008354:	d028      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008356:	4b24      	ldr	r3, [pc, #144]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835c:	0e1b      	lsrs	r3, r3, #24
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008364:	4b20      	ldr	r3, [pc, #128]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836a:	0c1b      	lsrs	r3, r3, #16
 800836c:	f003 0303 	and.w	r3, r3, #3
 8008370:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	019a      	lsls	r2, r3, #6
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	041b      	lsls	r3, r3, #16
 800837c:	431a      	orrs	r2, r3
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	061b      	lsls	r3, r3, #24
 8008382:	431a      	orrs	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	071b      	lsls	r3, r3, #28
 800838a:	4917      	ldr	r1, [pc, #92]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800838c:	4313      	orrs	r3, r2
 800838e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008392:	4b15      	ldr	r3, [pc, #84]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	4911      	ldr	r1, [pc, #68]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80083a8:	4b0f      	ldr	r3, [pc, #60]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a0e      	ldr	r2, [pc, #56]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b4:	f7f9 ff24 	bl	8002200 <HAL_GetTick>
 80083b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80083ba:	e008      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80083bc:	f7f9 ff20 	bl	8002200 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b64      	cmp	r3, #100	; 0x64
 80083c8:	d901      	bls.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e007      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80083ce:	4b06      	ldr	r3, [pc, #24]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083da:	d1ef      	bne.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3720      	adds	r7, #32
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	40023800 	.word	0x40023800

080083ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e09d      	b.n	800853a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	2b00      	cmp	r3, #0
 8008404:	d108      	bne.n	8008418 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800840e:	d009      	beq.n	8008424 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	61da      	str	r2, [r3, #28]
 8008416:	e005      	b.n	8008424 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d106      	bne.n	8008444 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7f8 ff36 	bl	80012b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2202      	movs	r2, #2
 8008448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800845a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008464:	d902      	bls.n	800846c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008466:	2300      	movs	r3, #0
 8008468:	60fb      	str	r3, [r7, #12]
 800846a:	e002      	b.n	8008472 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800846c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008470:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800847a:	d007      	beq.n	800848c <HAL_SPI_Init+0xa0>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008484:	d002      	beq.n	800848c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800849c:	431a      	orrs	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	f003 0302 	and.w	r3, r3, #2
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	431a      	orrs	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084ba:	431a      	orrs	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ce:	ea42 0103 	orr.w	r1, r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	0c1b      	lsrs	r3, r3, #16
 80084e8:	f003 0204 	and.w	r2, r3, #4
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	f003 0310 	and.w	r3, r3, #16
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008508:	ea42 0103 	orr.w	r1, r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69da      	ldr	r2, [r3, #28]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008528:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b086      	sub	sp, #24
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800855c:	2b01      	cmp	r3, #1
 800855e:	d101      	bne.n	8008564 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008560:	2302      	movs	r3, #2
 8008562:	e16c      	b.n	800883e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008572:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800857a:	7dbb      	ldrb	r3, [r7, #22]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d00d      	beq.n	800859c <HAL_SPI_TransmitReceive_DMA+0x58>
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008586:	d106      	bne.n	8008596 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <HAL_SPI_TransmitReceive_DMA+0x52>
 8008590:	7dbb      	ldrb	r3, [r7, #22]
 8008592:	2b04      	cmp	r3, #4
 8008594:	d002      	beq.n	800859c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008596:	2302      	movs	r3, #2
 8008598:	75fb      	strb	r3, [r7, #23]
    goto error;
 800859a:	e14b      	b.n	8008834 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 80085a8:	887b      	ldrh	r3, [r7, #2]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d102      	bne.n	80085b4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80085b2:	e13f      	b.n	8008834 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b04      	cmp	r3, #4
 80085be:	d003      	beq.n	80085c8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2205      	movs	r2, #5
 80085c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2200      	movs	r2, #0
 80085cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	887a      	ldrh	r2, [r7, #2]
 80085d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	887a      	ldrh	r2, [r7, #2]
 80085de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	887a      	ldrh	r2, [r7, #2]
 80085ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	887a      	ldrh	r2, [r7, #2]
 80085f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8008610:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800861a:	d908      	bls.n	800862e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800862a:	605a      	str	r2, [r3, #4]
 800862c:	e06f      	b.n	800870e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800863c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008648:	d126      	bne.n	8008698 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10f      	bne.n	8008676 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008664:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800866a:	b29b      	uxth	r3, r3
 800866c:	085b      	lsrs	r3, r3, #1
 800866e:	b29a      	uxth	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008674:	e010      	b.n	8008698 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008684:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800868a:	b29b      	uxth	r3, r3
 800868c:	085b      	lsrs	r3, r3, #1
 800868e:	b29b      	uxth	r3, r3
 8008690:	3301      	adds	r3, #1
 8008692:	b29a      	uxth	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a2:	d134      	bne.n	800870e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086b2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d111      	bne.n	80086e8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086d2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086da:	b29b      	uxth	r3, r3
 80086dc:	085b      	lsrs	r3, r3, #1
 80086de:	b29a      	uxth	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80086e6:	e012      	b.n	800870e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086f6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086fe:	b29b      	uxth	r3, r3
 8008700:	085b      	lsrs	r3, r3, #1
 8008702:	b29b      	uxth	r3, r3
 8008704:	3301      	adds	r3, #1
 8008706:	b29a      	uxth	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b04      	cmp	r3, #4
 8008718:	d108      	bne.n	800872c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871e:	4a4a      	ldr	r2, [pc, #296]	; (8008848 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008720:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008726:	4a49      	ldr	r2, [pc, #292]	; (800884c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008728:	63da      	str	r2, [r3, #60]	; 0x3c
 800872a:	e007      	b.n	800873c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008730:	4a47      	ldr	r2, [pc, #284]	; (8008850 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8008732:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008738:	4a46      	ldr	r2, [pc, #280]	; (8008854 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800873a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008740:	4a45      	ldr	r2, [pc, #276]	; (8008858 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8008742:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008748:	2200      	movs	r2, #0
 800874a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	330c      	adds	r3, #12
 8008756:	4619      	mov	r1, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008764:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008766:	f7fa fd51 	bl	800320c <HAL_DMA_Start_IT>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00c      	beq.n	800878a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008774:	f043 0210 	orr.w	r2, r3, #16
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008788:	e054      	b.n	8008834 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	685a      	ldr	r2, [r3, #4]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f042 0201 	orr.w	r2, r2, #1
 8008798:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879e:	2200      	movs	r2, #0
 80087a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a6:	2200      	movs	r2, #0
 80087a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ae:	2200      	movs	r2, #0
 80087b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b6:	2200      	movs	r2, #0
 80087b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	4619      	mov	r1, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	330c      	adds	r3, #12
 80087ca:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80087d2:	f7fa fd1b 	bl	800320c <HAL_DMA_Start_IT>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00c      	beq.n	80087f6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e0:	f043 0210 	orr.w	r2, r3, #16
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80087f4:	e01e      	b.n	8008834 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008800:	2b40      	cmp	r3, #64	; 0x40
 8008802:	d007      	beq.n	8008814 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008812:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	685a      	ldr	r2, [r3, #4]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f042 0220 	orr.w	r2, r2, #32
 8008822:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0202 	orr.w	r2, r2, #2
 8008832:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800883c:	7dfb      	ldrb	r3, [r7, #23]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	08008be9 	.word	0x08008be9
 800884c:	08008aad 	.word	0x08008aad
 8008850:	08008c05 	.word	0x08008c05
 8008854:	08008b57 	.word	0x08008b57
 8008858:	08008c21 	.word	0x08008c21

0800885c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b088      	sub	sp, #32
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	099b      	lsrs	r3, r3, #6
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10f      	bne.n	80088a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	099b      	lsrs	r3, r3, #6
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d004      	beq.n	80088a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	4798      	blx	r3
    return;
 800889e:	e0d7      	b.n	8008a50 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	085b      	lsrs	r3, r3, #1
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00a      	beq.n	80088c2 <HAL_SPI_IRQHandler+0x66>
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	09db      	lsrs	r3, r3, #7
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d004      	beq.n	80088c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	4798      	blx	r3
    return;
 80088c0:	e0c6      	b.n	8008a50 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	095b      	lsrs	r3, r3, #5
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10c      	bne.n	80088e8 <HAL_SPI_IRQHandler+0x8c>
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	099b      	lsrs	r3, r3, #6
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d106      	bne.n	80088e8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	0a1b      	lsrs	r3, r3, #8
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 80b4 	beq.w	8008a50 <HAL_SPI_IRQHandler+0x1f4>
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	095b      	lsrs	r3, r3, #5
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 80ad 	beq.w	8008a50 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	099b      	lsrs	r3, r3, #6
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d023      	beq.n	800894a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b03      	cmp	r3, #3
 800890c:	d011      	beq.n	8008932 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008912:	f043 0204 	orr.w	r2, r3, #4
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800891a:	2300      	movs	r3, #0
 800891c:	617b      	str	r3, [r7, #20]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	617b      	str	r3, [r7, #20]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	617b      	str	r3, [r7, #20]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	e00b      	b.n	800894a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	613b      	str	r3, [r7, #16]
 8008946:	693b      	ldr	r3, [r7, #16]
        return;
 8008948:	e082      	b.n	8008a50 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	095b      	lsrs	r3, r3, #5
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d014      	beq.n	8008980 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800895a:	f043 0201 	orr.w	r2, r3, #1
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008962:	2300      	movs	r3, #0
 8008964:	60fb      	str	r3, [r7, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00c      	beq.n	80089a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008990:	f043 0208 	orr.w	r2, r3, #8
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008998:	2300      	movs	r3, #0
 800899a:	60bb      	str	r3, [r7, #8]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	60bb      	str	r3, [r7, #8]
 80089a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d04f      	beq.n	8008a4e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d104      	bne.n	80089da <HAL_SPI_IRQHandler+0x17e>
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d034      	beq.n	8008a44 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0203 	bic.w	r2, r2, #3
 80089e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d011      	beq.n	8008a16 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f6:	4a18      	ldr	r2, [pc, #96]	; (8008a58 <HAL_SPI_IRQHandler+0x1fc>)
 80089f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fa fcd4 	bl	80033ac <HAL_DMA_Abort_IT>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d005      	beq.n	8008a16 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d016      	beq.n	8008a4c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a22:	4a0d      	ldr	r2, [pc, #52]	; (8008a58 <HAL_SPI_IRQHandler+0x1fc>)
 8008a24:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fa fcbe 	bl	80033ac <HAL_DMA_Abort_IT>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008a42:	e003      	b.n	8008a4c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f827 	bl	8008a98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008a4a:	e000      	b.n	8008a4e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008a4c:	bf00      	nop
    return;
 8008a4e:	bf00      	nop
  }
}
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	08008c61 	.word	0x08008c61

08008a5c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008aba:	f7f9 fba1 	bl	8002200 <HAL_GetTick>
 8008abe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ace:	d03c      	beq.n	8008b4a <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f022 0220 	bic.w	r2, r2, #32
 8008ade:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10d      	bne.n	8008b04 <SPI_DMAReceiveCplt+0x58>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008af0:	d108      	bne.n	8008b04 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0203 	bic.w	r2, r2, #3
 8008b00:	605a      	str	r2, [r3, #4]
 8008b02:	e007      	b.n	8008b14 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f022 0201 	bic.w	r2, r2, #1
 8008b12:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	2164      	movs	r1, #100	; 0x64
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 f9d5 	bl	8008ec8 <SPI_EndRxTransaction>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2220      	movs	r2, #32
 8008b28:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7ff ffa8 	bl	8008a98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008b48:	e002      	b.n	8008b50 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7ff ff86 	bl	8008a5c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b62:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b64:	f7f9 fb4c 	bl	8002200 <HAL_GetTick>
 8008b68:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b78:	d030      	beq.n	8008bdc <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 0220 	bic.w	r2, r2, #32
 8008b88:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	2164      	movs	r1, #100	; 0x64
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 fa16 	bl	8008fc0 <SPI_EndRxTxTransaction>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d005      	beq.n	8008ba6 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b9e:	f043 0220 	orr.w	r2, r3, #32
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 0203 	bic.w	r2, r2, #3
 8008bb4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d003      	beq.n	8008bdc <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff ff5f 	bl	8008a98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008bda:	e002      	b.n	8008be2 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f00d fe71 	bl	80168c4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f7ff ff3a 	bl	8008a70 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008bfc:	bf00      	nop
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c10:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f7ff ff36 	bl	8008a84 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c18:	bf00      	nop
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f022 0203 	bic.w	r2, r2, #3
 8008c3c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c42:	f043 0210 	orr.w	r2, r3, #16
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f7ff ff20 	bl	8008a98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c58:	bf00      	nop
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f7ff ff0b 	bl	8008a98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c82:	bf00      	nop
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
	...

08008c8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b088      	sub	sp, #32
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	603b      	str	r3, [r7, #0]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c9c:	f7f9 fab0 	bl	8002200 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	4413      	add	r3, r2
 8008caa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008cac:	f7f9 faa8 	bl	8002200 <HAL_GetTick>
 8008cb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008cb2:	4b39      	ldr	r3, [pc, #228]	; (8008d98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	015b      	lsls	r3, r3, #5
 8008cb8:	0d1b      	lsrs	r3, r3, #20
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	fb02 f303 	mul.w	r3, r2, r3
 8008cc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cc2:	e054      	b.n	8008d6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cca:	d050      	beq.n	8008d6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ccc:	f7f9 fa98 	bl	8002200 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	69fa      	ldr	r2, [r7, #28]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d902      	bls.n	8008ce2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d13d      	bne.n	8008d5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008cf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cfa:	d111      	bne.n	8008d20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d04:	d004      	beq.n	8008d10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	689b      	ldr	r3, [r3, #8]
 8008d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d0e:	d107      	bne.n	8008d20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d28:	d10f      	bne.n	8008d4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e017      	b.n	8008d8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	4013      	ands	r3, r2
 8008d78:	68ba      	ldr	r2, [r7, #8]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	bf0c      	ite	eq
 8008d7e:	2301      	moveq	r3, #1
 8008d80:	2300      	movne	r3, #0
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	461a      	mov	r2, r3
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d19b      	bne.n	8008cc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3720      	adds	r7, #32
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	20000000 	.word	0x20000000

08008d9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08a      	sub	sp, #40	; 0x28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008dae:	f7f9 fa27 	bl	8002200 <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db6:	1a9b      	subs	r3, r3, r2
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	4413      	add	r3, r2
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008dbe:	f7f9 fa1f 	bl	8002200 <HAL_GetTick>
 8008dc2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	330c      	adds	r3, #12
 8008dca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008dcc:	4b3d      	ldr	r3, [pc, #244]	; (8008ec4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	4613      	mov	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4413      	add	r3, r2
 8008dd6:	00da      	lsls	r2, r3, #3
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	0d1b      	lsrs	r3, r3, #20
 8008ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dde:	fb02 f303 	mul.w	r3, r2, r3
 8008de2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008de4:	e060      	b.n	8008ea8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008dec:	d107      	bne.n	8008dfe <SPI_WaitFifoStateUntilTimeout+0x62>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d104      	bne.n	8008dfe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e04:	d050      	beq.n	8008ea8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e06:	f7f9 f9fb 	bl	8002200 <HAL_GetTick>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d902      	bls.n	8008e1c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d13d      	bne.n	8008e98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e34:	d111      	bne.n	8008e5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e3e:	d004      	beq.n	8008e4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e48:	d107      	bne.n	8008e5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e62:	d10f      	bne.n	8008e84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e010      	b.n	8008eba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d196      	bne.n	8008de6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008eb8:	2300      	movs	r3, #0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3728      	adds	r7, #40	; 0x28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20000000 	.word	0x20000000

08008ec8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af02      	add	r7, sp, #8
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008edc:	d111      	bne.n	8008f02 <SPI_EndRxTransaction+0x3a>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ee6:	d004      	beq.n	8008ef2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ef0:	d107      	bne.n	8008f02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f00:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f0a:	d112      	bne.n	8008f32 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2200      	movs	r2, #0
 8008f14:	2180      	movs	r1, #128	; 0x80
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff feb8 	bl	8008c8c <SPI_WaitFlagStateUntilTimeout>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d021      	beq.n	8008f66 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f26:	f043 0220 	orr.w	r2, r3, #32
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e03d      	b.n	8008fae <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f32:	4b21      	ldr	r3, [pc, #132]	; (8008fb8 <SPI_EndRxTransaction+0xf0>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a21      	ldr	r2, [pc, #132]	; (8008fbc <SPI_EndRxTransaction+0xf4>)
 8008f38:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3c:	0d5b      	lsrs	r3, r3, #21
 8008f3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f42:	fb02 f303 	mul.w	r3, r2, r3
 8008f46:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00a      	beq.n	8008f64 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f5e:	2b80      	cmp	r3, #128	; 0x80
 8008f60:	d0f2      	beq.n	8008f48 <SPI_EndRxTransaction+0x80>
 8008f62:	e000      	b.n	8008f66 <SPI_EndRxTransaction+0x9e>
        break;
 8008f64:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f6e:	d11d      	bne.n	8008fac <SPI_EndRxTransaction+0xe4>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f78:	d004      	beq.n	8008f84 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f82:	d113      	bne.n	8008fac <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f7ff ff03 	bl	8008d9c <SPI_WaitFifoStateUntilTimeout>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d007      	beq.n	8008fac <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fa0:	f043 0220 	orr.w	r2, r3, #32
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e000      	b.n	8008fae <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20000000 	.word	0x20000000
 8008fbc:	165e9f81 	.word	0x165e9f81

08008fc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b088      	sub	sp, #32
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f7ff fedf 	bl	8008d9c <SPI_WaitFifoStateUntilTimeout>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d007      	beq.n	8008ff4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe8:	f043 0220 	orr.w	r2, r3, #32
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e046      	b.n	8009082 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008ff4:	4b25      	ldr	r3, [pc, #148]	; (800908c <SPI_EndRxTxTransaction+0xcc>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a25      	ldr	r2, [pc, #148]	; (8009090 <SPI_EndRxTxTransaction+0xd0>)
 8008ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffe:	0d5b      	lsrs	r3, r3, #21
 8009000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009004:	fb02 f303 	mul.w	r3, r2, r3
 8009008:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009012:	d112      	bne.n	800903a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2200      	movs	r2, #0
 800901c:	2180      	movs	r1, #128	; 0x80
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f7ff fe34 	bl	8008c8c <SPI_WaitFlagStateUntilTimeout>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d016      	beq.n	8009058 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800902e:	f043 0220 	orr.w	r2, r3, #32
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e023      	b.n	8009082 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00a      	beq.n	8009056 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	3b01      	subs	r3, #1
 8009044:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009050:	2b80      	cmp	r3, #128	; 0x80
 8009052:	d0f2      	beq.n	800903a <SPI_EndRxTxTransaction+0x7a>
 8009054:	e000      	b.n	8009058 <SPI_EndRxTxTransaction+0x98>
        break;
 8009056:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2200      	movs	r2, #0
 8009060:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f7ff fe99 	bl	8008d9c <SPI_WaitFifoStateUntilTimeout>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d007      	beq.n	8009080 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009074:	f043 0220 	orr.w	r2, r3, #32
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e000      	b.n	8009082 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3718      	adds	r7, #24
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20000000 	.word	0x20000000
 8009090:	165e9f81 	.word	0x165e9f81

08009094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e049      	b.n	800913a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7f8 fa66 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3304      	adds	r3, #4
 80090d0:	4619      	mov	r1, r3
 80090d2:	4610      	mov	r0, r2
 80090d4:	f000 faee 	bl	80096b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b01      	cmp	r3, #1
 8009156:	d001      	beq.n	800915c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e054      	b.n	8009206 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2202      	movs	r2, #2
 8009160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f042 0201 	orr.w	r2, r2, #1
 8009172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a26      	ldr	r2, [pc, #152]	; (8009214 <HAL_TIM_Base_Start_IT+0xd0>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d022      	beq.n	80091c4 <HAL_TIM_Base_Start_IT+0x80>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009186:	d01d      	beq.n	80091c4 <HAL_TIM_Base_Start_IT+0x80>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a22      	ldr	r2, [pc, #136]	; (8009218 <HAL_TIM_Base_Start_IT+0xd4>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d018      	beq.n	80091c4 <HAL_TIM_Base_Start_IT+0x80>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a21      	ldr	r2, [pc, #132]	; (800921c <HAL_TIM_Base_Start_IT+0xd8>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d013      	beq.n	80091c4 <HAL_TIM_Base_Start_IT+0x80>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a1f      	ldr	r2, [pc, #124]	; (8009220 <HAL_TIM_Base_Start_IT+0xdc>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d00e      	beq.n	80091c4 <HAL_TIM_Base_Start_IT+0x80>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a1e      	ldr	r2, [pc, #120]	; (8009224 <HAL_TIM_Base_Start_IT+0xe0>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d009      	beq.n	80091c4 <HAL_TIM_Base_Start_IT+0x80>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a1c      	ldr	r2, [pc, #112]	; (8009228 <HAL_TIM_Base_Start_IT+0xe4>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d004      	beq.n	80091c4 <HAL_TIM_Base_Start_IT+0x80>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a1b      	ldr	r2, [pc, #108]	; (800922c <HAL_TIM_Base_Start_IT+0xe8>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d115      	bne.n	80091f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	689a      	ldr	r2, [r3, #8]
 80091ca:	4b19      	ldr	r3, [pc, #100]	; (8009230 <HAL_TIM_Base_Start_IT+0xec>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2b06      	cmp	r3, #6
 80091d4:	d015      	beq.n	8009202 <HAL_TIM_Base_Start_IT+0xbe>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091dc:	d011      	beq.n	8009202 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f042 0201 	orr.w	r2, r2, #1
 80091ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ee:	e008      	b.n	8009202 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 0201 	orr.w	r2, r2, #1
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	e000      	b.n	8009204 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	40010000 	.word	0x40010000
 8009218:	40000400 	.word	0x40000400
 800921c:	40000800 	.word	0x40000800
 8009220:	40000c00 	.word	0x40000c00
 8009224:	40010400 	.word	0x40010400
 8009228:	40014000 	.word	0x40014000
 800922c:	40001800 	.word	0x40001800
 8009230:	00010007 	.word	0x00010007

08009234 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f022 0201 	bic.w	r2, r2, #1
 800924a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6a1a      	ldr	r2, [r3, #32]
 8009252:	f241 1311 	movw	r3, #4369	; 0x1111
 8009256:	4013      	ands	r3, r2
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10f      	bne.n	800927c <HAL_TIM_Base_Stop_IT+0x48>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6a1a      	ldr	r2, [r3, #32]
 8009262:	f240 4344 	movw	r3, #1092	; 0x444
 8009266:	4013      	ands	r3, r2
 8009268:	2b00      	cmp	r3, #0
 800926a:	d107      	bne.n	800927c <HAL_TIM_Base_Stop_IT+0x48>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 0201 	bic.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b082      	sub	sp, #8
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	f003 0302 	and.w	r3, r3, #2
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d122      	bne.n	80092ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	f003 0302 	and.w	r3, r3, #2
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d11b      	bne.n	80092ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f06f 0202 	mvn.w	r2, #2
 80092be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	f003 0303 	and.w	r3, r3, #3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d003      	beq.n	80092dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f9cf 	bl	8009678 <HAL_TIM_IC_CaptureCallback>
 80092da:	e005      	b.n	80092e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f9c1 	bl	8009664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f9d2 	bl	800968c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b04      	cmp	r3, #4
 80092fa:	d122      	bne.n	8009342 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f003 0304 	and.w	r3, r3, #4
 8009306:	2b04      	cmp	r3, #4
 8009308:	d11b      	bne.n	8009342 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f06f 0204 	mvn.w	r2, #4
 8009312:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2202      	movs	r2, #2
 8009318:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f9a5 	bl	8009678 <HAL_TIM_IC_CaptureCallback>
 800932e:	e005      	b.n	800933c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f997 	bl	8009664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f9a8 	bl	800968c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f003 0308 	and.w	r3, r3, #8
 800934c:	2b08      	cmp	r3, #8
 800934e:	d122      	bne.n	8009396 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68db      	ldr	r3, [r3, #12]
 8009356:	f003 0308 	and.w	r3, r3, #8
 800935a:	2b08      	cmp	r3, #8
 800935c:	d11b      	bne.n	8009396 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f06f 0208 	mvn.w	r2, #8
 8009366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2204      	movs	r2, #4
 800936c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	69db      	ldr	r3, [r3, #28]
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d003      	beq.n	8009384 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f97b 	bl	8009678 <HAL_TIM_IC_CaptureCallback>
 8009382:	e005      	b.n	8009390 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f96d 	bl	8009664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f97e 	bl	800968c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	f003 0310 	and.w	r3, r3, #16
 80093a0:	2b10      	cmp	r3, #16
 80093a2:	d122      	bne.n	80093ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f003 0310 	and.w	r3, r3, #16
 80093ae:	2b10      	cmp	r3, #16
 80093b0:	d11b      	bne.n	80093ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f06f 0210 	mvn.w	r2, #16
 80093ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2208      	movs	r2, #8
 80093c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d003      	beq.n	80093d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f951 	bl	8009678 <HAL_TIM_IC_CaptureCallback>
 80093d6:	e005      	b.n	80093e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 f943 	bl	8009664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f954 	bl	800968c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d10e      	bne.n	8009416 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b01      	cmp	r3, #1
 8009404:	d107      	bne.n	8009416 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f06f 0201 	mvn.w	r2, #1
 800940e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f00d fac1 	bl	8016998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009420:	2b80      	cmp	r3, #128	; 0x80
 8009422:	d10e      	bne.n	8009442 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800942e:	2b80      	cmp	r3, #128	; 0x80
 8009430:	d107      	bne.n	8009442 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800943a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fb0b 	bl	8009a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800944c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009450:	d10e      	bne.n	8009470 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800945c:	2b80      	cmp	r3, #128	; 0x80
 800945e:	d107      	bne.n	8009470 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fafe 	bl	8009a6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800947a:	2b40      	cmp	r3, #64	; 0x40
 800947c:	d10e      	bne.n	800949c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009488:	2b40      	cmp	r3, #64	; 0x40
 800948a:	d107      	bne.n	800949c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f902 	bl	80096a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	d10e      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f003 0320 	and.w	r3, r3, #32
 80094b4:	2b20      	cmp	r3, #32
 80094b6:	d107      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f06f 0220 	mvn.w	r2, #32
 80094c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fabe 	bl	8009a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094c8:	bf00      	nop
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d101      	bne.n	80094ec <HAL_TIM_ConfigClockSource+0x1c>
 80094e8:	2302      	movs	r3, #2
 80094ea:	e0b4      	b.n	8009656 <HAL_TIM_ConfigClockSource+0x186>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	4b56      	ldr	r3, [pc, #344]	; (8009660 <HAL_TIM_ConfigClockSource+0x190>)
 8009508:	4013      	ands	r3, r2
 800950a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009512:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009524:	d03e      	beq.n	80095a4 <HAL_TIM_ConfigClockSource+0xd4>
 8009526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800952a:	f200 8087 	bhi.w	800963c <HAL_TIM_ConfigClockSource+0x16c>
 800952e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009532:	f000 8086 	beq.w	8009642 <HAL_TIM_ConfigClockSource+0x172>
 8009536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800953a:	d87f      	bhi.n	800963c <HAL_TIM_ConfigClockSource+0x16c>
 800953c:	2b70      	cmp	r3, #112	; 0x70
 800953e:	d01a      	beq.n	8009576 <HAL_TIM_ConfigClockSource+0xa6>
 8009540:	2b70      	cmp	r3, #112	; 0x70
 8009542:	d87b      	bhi.n	800963c <HAL_TIM_ConfigClockSource+0x16c>
 8009544:	2b60      	cmp	r3, #96	; 0x60
 8009546:	d050      	beq.n	80095ea <HAL_TIM_ConfigClockSource+0x11a>
 8009548:	2b60      	cmp	r3, #96	; 0x60
 800954a:	d877      	bhi.n	800963c <HAL_TIM_ConfigClockSource+0x16c>
 800954c:	2b50      	cmp	r3, #80	; 0x50
 800954e:	d03c      	beq.n	80095ca <HAL_TIM_ConfigClockSource+0xfa>
 8009550:	2b50      	cmp	r3, #80	; 0x50
 8009552:	d873      	bhi.n	800963c <HAL_TIM_ConfigClockSource+0x16c>
 8009554:	2b40      	cmp	r3, #64	; 0x40
 8009556:	d058      	beq.n	800960a <HAL_TIM_ConfigClockSource+0x13a>
 8009558:	2b40      	cmp	r3, #64	; 0x40
 800955a:	d86f      	bhi.n	800963c <HAL_TIM_ConfigClockSource+0x16c>
 800955c:	2b30      	cmp	r3, #48	; 0x30
 800955e:	d064      	beq.n	800962a <HAL_TIM_ConfigClockSource+0x15a>
 8009560:	2b30      	cmp	r3, #48	; 0x30
 8009562:	d86b      	bhi.n	800963c <HAL_TIM_ConfigClockSource+0x16c>
 8009564:	2b20      	cmp	r3, #32
 8009566:	d060      	beq.n	800962a <HAL_TIM_ConfigClockSource+0x15a>
 8009568:	2b20      	cmp	r3, #32
 800956a:	d867      	bhi.n	800963c <HAL_TIM_ConfigClockSource+0x16c>
 800956c:	2b00      	cmp	r3, #0
 800956e:	d05c      	beq.n	800962a <HAL_TIM_ConfigClockSource+0x15a>
 8009570:	2b10      	cmp	r3, #16
 8009572:	d05a      	beq.n	800962a <HAL_TIM_ConfigClockSource+0x15a>
 8009574:	e062      	b.n	800963c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	6899      	ldr	r1, [r3, #8]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	685a      	ldr	r2, [r3, #4]
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	f000 f9af 	bl	80098e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009598:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	609a      	str	r2, [r3, #8]
      break;
 80095a2:	e04f      	b.n	8009644 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6818      	ldr	r0, [r3, #0]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	6899      	ldr	r1, [r3, #8]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	f000 f998 	bl	80098e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689a      	ldr	r2, [r3, #8]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095c6:	609a      	str	r2, [r3, #8]
      break;
 80095c8:	e03c      	b.n	8009644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6818      	ldr	r0, [r3, #0]
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	6859      	ldr	r1, [r3, #4]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	461a      	mov	r2, r3
 80095d8:	f000 f90c 	bl	80097f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2150      	movs	r1, #80	; 0x50
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 f965 	bl	80098b2 <TIM_ITRx_SetConfig>
      break;
 80095e8:	e02c      	b.n	8009644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	6859      	ldr	r1, [r3, #4]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	461a      	mov	r2, r3
 80095f8:	f000 f92b 	bl	8009852 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2160      	movs	r1, #96	; 0x60
 8009602:	4618      	mov	r0, r3
 8009604:	f000 f955 	bl	80098b2 <TIM_ITRx_SetConfig>
      break;
 8009608:	e01c      	b.n	8009644 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	6859      	ldr	r1, [r3, #4]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	461a      	mov	r2, r3
 8009618:	f000 f8ec 	bl	80097f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2140      	movs	r1, #64	; 0x40
 8009622:	4618      	mov	r0, r3
 8009624:	f000 f945 	bl	80098b2 <TIM_ITRx_SetConfig>
      break;
 8009628:	e00c      	b.n	8009644 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4619      	mov	r1, r3
 8009634:	4610      	mov	r0, r2
 8009636:	f000 f93c 	bl	80098b2 <TIM_ITRx_SetConfig>
      break;
 800963a:	e003      	b.n	8009644 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	73fb      	strb	r3, [r7, #15]
      break;
 8009640:	e000      	b.n	8009644 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009642:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009654:	7bfb      	ldrb	r3, [r7, #15]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	fffeff88 	.word	0xfffeff88

08009664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009680:	bf00      	nop
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009694:	bf00      	nop
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b083      	sub	sp, #12
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a40      	ldr	r2, [pc, #256]	; (80097c8 <TIM_Base_SetConfig+0x114>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d013      	beq.n	80096f4 <TIM_Base_SetConfig+0x40>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096d2:	d00f      	beq.n	80096f4 <TIM_Base_SetConfig+0x40>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a3d      	ldr	r2, [pc, #244]	; (80097cc <TIM_Base_SetConfig+0x118>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d00b      	beq.n	80096f4 <TIM_Base_SetConfig+0x40>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a3c      	ldr	r2, [pc, #240]	; (80097d0 <TIM_Base_SetConfig+0x11c>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d007      	beq.n	80096f4 <TIM_Base_SetConfig+0x40>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a3b      	ldr	r2, [pc, #236]	; (80097d4 <TIM_Base_SetConfig+0x120>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d003      	beq.n	80096f4 <TIM_Base_SetConfig+0x40>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a3a      	ldr	r2, [pc, #232]	; (80097d8 <TIM_Base_SetConfig+0x124>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d108      	bne.n	8009706 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4313      	orrs	r3, r2
 8009704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a2f      	ldr	r2, [pc, #188]	; (80097c8 <TIM_Base_SetConfig+0x114>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d02b      	beq.n	8009766 <TIM_Base_SetConfig+0xb2>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009714:	d027      	beq.n	8009766 <TIM_Base_SetConfig+0xb2>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a2c      	ldr	r2, [pc, #176]	; (80097cc <TIM_Base_SetConfig+0x118>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d023      	beq.n	8009766 <TIM_Base_SetConfig+0xb2>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a2b      	ldr	r2, [pc, #172]	; (80097d0 <TIM_Base_SetConfig+0x11c>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d01f      	beq.n	8009766 <TIM_Base_SetConfig+0xb2>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a2a      	ldr	r2, [pc, #168]	; (80097d4 <TIM_Base_SetConfig+0x120>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d01b      	beq.n	8009766 <TIM_Base_SetConfig+0xb2>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a29      	ldr	r2, [pc, #164]	; (80097d8 <TIM_Base_SetConfig+0x124>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d017      	beq.n	8009766 <TIM_Base_SetConfig+0xb2>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a28      	ldr	r2, [pc, #160]	; (80097dc <TIM_Base_SetConfig+0x128>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d013      	beq.n	8009766 <TIM_Base_SetConfig+0xb2>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a27      	ldr	r2, [pc, #156]	; (80097e0 <TIM_Base_SetConfig+0x12c>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d00f      	beq.n	8009766 <TIM_Base_SetConfig+0xb2>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a26      	ldr	r2, [pc, #152]	; (80097e4 <TIM_Base_SetConfig+0x130>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d00b      	beq.n	8009766 <TIM_Base_SetConfig+0xb2>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a25      	ldr	r2, [pc, #148]	; (80097e8 <TIM_Base_SetConfig+0x134>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d007      	beq.n	8009766 <TIM_Base_SetConfig+0xb2>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a24      	ldr	r2, [pc, #144]	; (80097ec <TIM_Base_SetConfig+0x138>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d003      	beq.n	8009766 <TIM_Base_SetConfig+0xb2>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a23      	ldr	r2, [pc, #140]	; (80097f0 <TIM_Base_SetConfig+0x13c>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d108      	bne.n	8009778 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800976c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	4313      	orrs	r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	689a      	ldr	r2, [r3, #8]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	681a      	ldr	r2, [r3, #0]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a0a      	ldr	r2, [pc, #40]	; (80097c8 <TIM_Base_SetConfig+0x114>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d003      	beq.n	80097ac <TIM_Base_SetConfig+0xf8>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a0c      	ldr	r2, [pc, #48]	; (80097d8 <TIM_Base_SetConfig+0x124>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d103      	bne.n	80097b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	691a      	ldr	r2, [r3, #16]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	615a      	str	r2, [r3, #20]
}
 80097ba:	bf00      	nop
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	40010000 	.word	0x40010000
 80097cc:	40000400 	.word	0x40000400
 80097d0:	40000800 	.word	0x40000800
 80097d4:	40000c00 	.word	0x40000c00
 80097d8:	40010400 	.word	0x40010400
 80097dc:	40014000 	.word	0x40014000
 80097e0:	40014400 	.word	0x40014400
 80097e4:	40014800 	.word	0x40014800
 80097e8:	40001800 	.word	0x40001800
 80097ec:	40001c00 	.word	0x40001c00
 80097f0:	40002000 	.word	0x40002000

080097f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	f023 0201 	bic.w	r2, r3, #1
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800981e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	011b      	lsls	r3, r3, #4
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	4313      	orrs	r3, r2
 8009828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	f023 030a 	bic.w	r3, r3, #10
 8009830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	4313      	orrs	r3, r2
 8009838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	621a      	str	r2, [r3, #32]
}
 8009846:	bf00      	nop
 8009848:	371c      	adds	r7, #28
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009852:	b480      	push	{r7}
 8009854:	b087      	sub	sp, #28
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	f023 0210 	bic.w	r2, r3, #16
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6a1b      	ldr	r3, [r3, #32]
 8009874:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800987c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	031b      	lsls	r3, r3, #12
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800988e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	011b      	lsls	r3, r3, #4
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	4313      	orrs	r3, r2
 8009898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	621a      	str	r2, [r3, #32]
}
 80098a6:	bf00      	nop
 80098a8:	371c      	adds	r7, #28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	f043 0307 	orr.w	r3, r3, #7
 80098d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	609a      	str	r2, [r3, #8]
}
 80098dc:	bf00      	nop
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	021a      	lsls	r2, r3, #8
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	431a      	orrs	r2, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	4313      	orrs	r3, r2
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	4313      	orrs	r3, r2
 8009914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	609a      	str	r2, [r3, #8]
}
 800991c:	bf00      	nop
 800991e:	371c      	adds	r7, #28
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009938:	2b01      	cmp	r3, #1
 800993a:	d101      	bne.n	8009940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800993c:	2302      	movs	r3, #2
 800993e:	e06d      	b.n	8009a1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a30      	ldr	r2, [pc, #192]	; (8009a28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d004      	beq.n	8009974 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a2f      	ldr	r2, [pc, #188]	; (8009a2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d108      	bne.n	8009986 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800997a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	4313      	orrs	r3, r2
 8009984:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800998c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	4313      	orrs	r3, r2
 8009996:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a20      	ldr	r2, [pc, #128]	; (8009a28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d022      	beq.n	80099f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b2:	d01d      	beq.n	80099f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a1d      	ldr	r2, [pc, #116]	; (8009a30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d018      	beq.n	80099f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a1c      	ldr	r2, [pc, #112]	; (8009a34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d013      	beq.n	80099f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a1a      	ldr	r2, [pc, #104]	; (8009a38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d00e      	beq.n	80099f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a15      	ldr	r2, [pc, #84]	; (8009a2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d009      	beq.n	80099f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a16      	ldr	r2, [pc, #88]	; (8009a3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d004      	beq.n	80099f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a15      	ldr	r2, [pc, #84]	; (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d10c      	bne.n	8009a0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	40010000 	.word	0x40010000
 8009a2c:	40010400 	.word	0x40010400
 8009a30:	40000400 	.word	0x40000400
 8009a34:	40000800 	.word	0x40000800
 8009a38:	40000c00 	.word	0x40000c00
 8009a3c:	40014000 	.word	0x40014000
 8009a40:	40001800 	.word	0x40001800

08009a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d101      	bne.n	8009a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e040      	b.n	8009b14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d106      	bne.n	8009aa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7f7 fd98 	bl	80015d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2224      	movs	r2, #36	; 0x24
 8009aac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f022 0201 	bic.w	r2, r2, #1
 8009abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fbe8 	bl	800a294 <UART_SetConfig>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d101      	bne.n	8009ace <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e022      	b.n	8009b14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d002      	beq.n	8009adc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fe40 	bl	800a75c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	689a      	ldr	r2, [r3, #8]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0201 	orr.w	r2, r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fec7 	bl	800a8a0 <UART_CheckIdleState>
 8009b12:	4603      	mov	r3, r0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b08a      	sub	sp, #40	; 0x28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	4613      	mov	r3, r2
 8009b28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b2e:	2b20      	cmp	r3, #32
 8009b30:	d165      	bne.n	8009bfe <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d002      	beq.n	8009b3e <HAL_UART_Transmit_DMA+0x22>
 8009b38:	88fb      	ldrh	r3, [r7, #6]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e05e      	b.n	8009c00 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	88fa      	ldrh	r2, [r7, #6]
 8009b4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	88fa      	ldrh	r2, [r7, #6]
 8009b54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2221      	movs	r2, #33	; 0x21
 8009b64:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d027      	beq.n	8009bbe <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b72:	4a25      	ldr	r2, [pc, #148]	; (8009c08 <HAL_UART_Transmit_DMA+0xec>)
 8009b74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b7a:	4a24      	ldr	r2, [pc, #144]	; (8009c0c <HAL_UART_Transmit_DMA+0xf0>)
 8009b7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b82:	4a23      	ldr	r2, [pc, #140]	; (8009c10 <HAL_UART_Transmit_DMA+0xf4>)
 8009b84:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b96:	4619      	mov	r1, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3328      	adds	r3, #40	; 0x28
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	88fb      	ldrh	r3, [r7, #6]
 8009ba2:	f7f9 fb33 	bl	800320c <HAL_DMA_Start_IT>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d008      	beq.n	8009bbe <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2210      	movs	r2, #16
 8009bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e020      	b.n	8009c00 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2240      	movs	r2, #64	; 0x40
 8009bc4:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3308      	adds	r3, #8
 8009bcc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	e853 3f00 	ldrex	r3, [r3]
 8009bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3308      	adds	r3, #8
 8009be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be6:	623a      	str	r2, [r7, #32]
 8009be8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bea:	69f9      	ldr	r1, [r7, #28]
 8009bec:	6a3a      	ldr	r2, [r7, #32]
 8009bee:	e841 2300 	strex	r3, r2, [r1]
 8009bf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1e5      	bne.n	8009bc6 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e000      	b.n	8009c00 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8009bfe:	2302      	movs	r3, #2
  }
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3728      	adds	r7, #40	; 0x28
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	0800acf1 	.word	0x0800acf1
 8009c0c:	0800ad87 	.word	0x0800ad87
 8009c10:	0800af09 	.word	0x0800af09

08009c14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08a      	sub	sp, #40	; 0x28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c28:	2b20      	cmp	r3, #32
 8009c2a:	d132      	bne.n	8009c92 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d002      	beq.n	8009c38 <HAL_UART_Receive_DMA+0x24>
 8009c32:	88fb      	ldrh	r3, [r7, #6]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d101      	bne.n	8009c3c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e02b      	b.n	8009c94 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d018      	beq.n	8009c82 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	e853 3f00 	ldrex	r3, [r3]
 8009c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c64:	627b      	str	r3, [r7, #36]	; 0x24
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	623b      	str	r3, [r7, #32]
 8009c70:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c72:	69f9      	ldr	r1, [r7, #28]
 8009c74:	6a3a      	ldr	r2, [r7, #32]
 8009c76:	e841 2300 	strex	r3, r2, [r1]
 8009c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1e6      	bne.n	8009c50 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009c82:	88fb      	ldrh	r3, [r7, #6]
 8009c84:	461a      	mov	r2, r3
 8009c86:	68b9      	ldr	r1, [r7, #8]
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 ff07 	bl	800aa9c <UART_Start_Receive_DMA>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	e000      	b.n	8009c94 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009c92:	2302      	movs	r3, #2
  }
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3728      	adds	r7, #40	; 0x28
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b0ba      	sub	sp, #232	; 0xe8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009cc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009cc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8009cca:	4013      	ands	r3, r2
 8009ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d115      	bne.n	8009d04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cdc:	f003 0320 	and.w	r3, r3, #32
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00f      	beq.n	8009d04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ce8:	f003 0320 	and.w	r3, r3, #32
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d009      	beq.n	8009d04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 8297 	beq.w	800a228 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	4798      	blx	r3
      }
      return;
 8009d02:	e291      	b.n	800a228 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 8117 	beq.w	8009f3c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d12:	f003 0301 	and.w	r3, r3, #1
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d106      	bne.n	8009d28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009d1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009d1e:	4b85      	ldr	r3, [pc, #532]	; (8009f34 <HAL_UART_IRQHandler+0x298>)
 8009d20:	4013      	ands	r3, r2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f000 810a 	beq.w	8009f3c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d2c:	f003 0301 	and.w	r3, r3, #1
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d011      	beq.n	8009d58 <HAL_UART_IRQHandler+0xbc>
 8009d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2201      	movs	r2, #1
 8009d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d4e:	f043 0201 	orr.w	r2, r3, #1
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d5c:	f003 0302 	and.w	r3, r3, #2
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d011      	beq.n	8009d88 <HAL_UART_IRQHandler+0xec>
 8009d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d68:	f003 0301 	and.w	r3, r3, #1
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00b      	beq.n	8009d88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2202      	movs	r2, #2
 8009d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d7e:	f043 0204 	orr.w	r2, r3, #4
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d8c:	f003 0304 	and.w	r3, r3, #4
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d011      	beq.n	8009db8 <HAL_UART_IRQHandler+0x11c>
 8009d94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d98:	f003 0301 	and.w	r3, r3, #1
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00b      	beq.n	8009db8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2204      	movs	r2, #4
 8009da6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dae:	f043 0202 	orr.w	r2, r3, #2
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dbc:	f003 0308 	and.w	r3, r3, #8
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d017      	beq.n	8009df4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dc8:	f003 0320 	and.w	r3, r3, #32
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d105      	bne.n	8009ddc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dd4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d00b      	beq.n	8009df4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2208      	movs	r2, #8
 8009de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dea:	f043 0208 	orr.w	r2, r3, #8
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d012      	beq.n	8009e26 <HAL_UART_IRQHandler+0x18a>
 8009e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00c      	beq.n	8009e26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e1c:	f043 0220 	orr.w	r2, r3, #32
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 81fd 	beq.w	800a22c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e36:	f003 0320 	and.w	r3, r3, #32
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00d      	beq.n	8009e5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e42:	f003 0320 	and.w	r3, r3, #32
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d007      	beq.n	8009e5a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6e:	2b40      	cmp	r3, #64	; 0x40
 8009e70:	d005      	beq.n	8009e7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d04f      	beq.n	8009f1e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fed2 	bl	800ac28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8e:	2b40      	cmp	r3, #64	; 0x40
 8009e90:	d141      	bne.n	8009f16 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	3308      	adds	r3, #8
 8009e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
 8009ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3308      	adds	r3, #8
 8009eba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009ebe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009eca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009ece:	e841 2300 	strex	r3, r2, [r1]
 8009ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1d9      	bne.n	8009e92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d013      	beq.n	8009f0e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eea:	4a13      	ldr	r2, [pc, #76]	; (8009f38 <HAL_UART_IRQHandler+0x29c>)
 8009eec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7f9 fa5a 	bl	80033ac <HAL_DMA_Abort_IT>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d017      	beq.n	8009f2e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009f08:	4610      	mov	r0, r2
 8009f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f0c:	e00f      	b.n	8009f2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f9aa 	bl	800a268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f14:	e00b      	b.n	8009f2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f9a6 	bl	800a268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f1c:	e007      	b.n	8009f2e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f9a2 	bl	800a268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009f2c:	e17e      	b.n	800a22c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f2e:	bf00      	nop
    return;
 8009f30:	e17c      	b.n	800a22c <HAL_UART_IRQHandler+0x590>
 8009f32:	bf00      	nop
 8009f34:	04000120 	.word	0x04000120
 8009f38:	0800af87 	.word	0x0800af87

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	f040 814c 	bne.w	800a1de <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f4a:	f003 0310 	and.w	r3, r3, #16
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f000 8145 	beq.w	800a1de <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f58:	f003 0310 	and.w	r3, r3, #16
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 813e 	beq.w	800a1de <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2210      	movs	r2, #16
 8009f68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f74:	2b40      	cmp	r3, #64	; 0x40
 8009f76:	f040 80b6 	bne.w	800a0e6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009f86:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 8150 	beq.w	800a230 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	f080 8148 	bcs.w	800a230 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fae:	69db      	ldr	r3, [r3, #28]
 8009fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb4:	f000 8086 	beq.w	800a0c4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009fc4:	e853 3f00 	ldrex	r3, [r3]
 8009fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	461a      	mov	r2, r3
 8009fde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009fe6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1da      	bne.n	8009fb8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3308      	adds	r3, #8
 800a008:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a00c:	e853 3f00 	ldrex	r3, [r3]
 800a010:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a014:	f023 0301 	bic.w	r3, r3, #1
 800a018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3308      	adds	r3, #8
 800a022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a026:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a02a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a02e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e1      	bne.n	800a002 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3308      	adds	r3, #8
 800a044:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a04e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3308      	adds	r3, #8
 800a05e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a062:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a064:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a066:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a068:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a06a:	e841 2300 	strex	r3, r2, [r1]
 800a06e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1e3      	bne.n	800a03e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2220      	movs	r2, #32
 800a07a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a08c:	e853 3f00 	ldrex	r3, [r3]
 800a090:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a094:	f023 0310 	bic.w	r3, r3, #16
 800a098:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a0a6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0ae:	e841 2300 	strex	r3, r2, [r1]
 800a0b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a0b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1e4      	bne.n	800a084 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7f9 f904 	bl	80032cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	4619      	mov	r1, r3
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f8cc 	bl	800a27c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a0e4:	e0a4      	b.n	800a230 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a100:	b29b      	uxth	r3, r3
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 8096 	beq.w	800a234 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800a108:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 8091 	beq.w	800a234 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11a:	e853 3f00 	ldrex	r3, [r3]
 800a11e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a122:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a126:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a134:	647b      	str	r3, [r7, #68]	; 0x44
 800a136:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a138:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a13a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a13c:	e841 2300 	strex	r3, r2, [r1]
 800a140:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a144:	2b00      	cmp	r3, #0
 800a146:	d1e4      	bne.n	800a112 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3308      	adds	r3, #8
 800a14e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	e853 3f00 	ldrex	r3, [r3]
 800a156:	623b      	str	r3, [r7, #32]
   return(result);
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	f023 0301 	bic.w	r3, r3, #1
 800a15e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	3308      	adds	r3, #8
 800a168:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a16c:	633a      	str	r2, [r7, #48]	; 0x30
 800a16e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a170:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a174:	e841 2300 	strex	r3, r2, [r1]
 800a178:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1e3      	bne.n	800a148 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2220      	movs	r2, #32
 800a184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	e853 3f00 	ldrex	r3, [r3]
 800a1a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f023 0310 	bic.w	r3, r3, #16
 800a1a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a1b6:	61fb      	str	r3, [r7, #28]
 800a1b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ba:	69b9      	ldr	r1, [r7, #24]
 800a1bc:	69fa      	ldr	r2, [r7, #28]
 800a1be:	e841 2300 	strex	r3, r2, [r1]
 800a1c2:	617b      	str	r3, [r7, #20]
   return(result);
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1e4      	bne.n	800a194 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2202      	movs	r2, #2
 800a1ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a1d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f850 	bl	800a27c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1dc:	e02a      	b.n	800a234 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00e      	beq.n	800a208 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a1ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d008      	beq.n	800a208 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d01c      	beq.n	800a238 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	4798      	blx	r3
    }
    return;
 800a206:	e017      	b.n	800a238 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a210:	2b00      	cmp	r3, #0
 800a212:	d012      	beq.n	800a23a <HAL_UART_IRQHandler+0x59e>
 800a214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00c      	beq.n	800a23a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fec6 	bl	800afb2 <UART_EndTransmit_IT>
    return;
 800a226:	e008      	b.n	800a23a <HAL_UART_IRQHandler+0x59e>
      return;
 800a228:	bf00      	nop
 800a22a:	e006      	b.n	800a23a <HAL_UART_IRQHandler+0x59e>
    return;
 800a22c:	bf00      	nop
 800a22e:	e004      	b.n	800a23a <HAL_UART_IRQHandler+0x59e>
      return;
 800a230:	bf00      	nop
 800a232:	e002      	b.n	800a23a <HAL_UART_IRQHandler+0x59e>
      return;
 800a234:	bf00      	nop
 800a236:	e000      	b.n	800a23a <HAL_UART_IRQHandler+0x59e>
    return;
 800a238:	bf00      	nop
  }

}
 800a23a:	37e8      	adds	r7, #232	; 0xe8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	460b      	mov	r3, r1
 800a286:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a29c:	2300      	movs	r3, #0
 800a29e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	431a      	orrs	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	69db      	ldr	r3, [r3, #28]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	4ba6      	ldr	r3, [pc, #664]	; (800a558 <UART_SetConfig+0x2c4>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	6812      	ldr	r2, [r2, #0]
 800a2c6:	6979      	ldr	r1, [r7, #20]
 800a2c8:	430b      	orrs	r3, r1
 800a2ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68da      	ldr	r2, [r3, #12]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	430a      	orrs	r2, r1
 800a304:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a94      	ldr	r2, [pc, #592]	; (800a55c <UART_SetConfig+0x2c8>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d120      	bne.n	800a352 <UART_SetConfig+0xbe>
 800a310:	4b93      	ldr	r3, [pc, #588]	; (800a560 <UART_SetConfig+0x2cc>)
 800a312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a316:	f003 0303 	and.w	r3, r3, #3
 800a31a:	2b03      	cmp	r3, #3
 800a31c:	d816      	bhi.n	800a34c <UART_SetConfig+0xb8>
 800a31e:	a201      	add	r2, pc, #4	; (adr r2, 800a324 <UART_SetConfig+0x90>)
 800a320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a324:	0800a335 	.word	0x0800a335
 800a328:	0800a341 	.word	0x0800a341
 800a32c:	0800a33b 	.word	0x0800a33b
 800a330:	0800a347 	.word	0x0800a347
 800a334:	2301      	movs	r3, #1
 800a336:	77fb      	strb	r3, [r7, #31]
 800a338:	e150      	b.n	800a5dc <UART_SetConfig+0x348>
 800a33a:	2302      	movs	r3, #2
 800a33c:	77fb      	strb	r3, [r7, #31]
 800a33e:	e14d      	b.n	800a5dc <UART_SetConfig+0x348>
 800a340:	2304      	movs	r3, #4
 800a342:	77fb      	strb	r3, [r7, #31]
 800a344:	e14a      	b.n	800a5dc <UART_SetConfig+0x348>
 800a346:	2308      	movs	r3, #8
 800a348:	77fb      	strb	r3, [r7, #31]
 800a34a:	e147      	b.n	800a5dc <UART_SetConfig+0x348>
 800a34c:	2310      	movs	r3, #16
 800a34e:	77fb      	strb	r3, [r7, #31]
 800a350:	e144      	b.n	800a5dc <UART_SetConfig+0x348>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a83      	ldr	r2, [pc, #524]	; (800a564 <UART_SetConfig+0x2d0>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d132      	bne.n	800a3c2 <UART_SetConfig+0x12e>
 800a35c:	4b80      	ldr	r3, [pc, #512]	; (800a560 <UART_SetConfig+0x2cc>)
 800a35e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a362:	f003 030c 	and.w	r3, r3, #12
 800a366:	2b0c      	cmp	r3, #12
 800a368:	d828      	bhi.n	800a3bc <UART_SetConfig+0x128>
 800a36a:	a201      	add	r2, pc, #4	; (adr r2, 800a370 <UART_SetConfig+0xdc>)
 800a36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a370:	0800a3a5 	.word	0x0800a3a5
 800a374:	0800a3bd 	.word	0x0800a3bd
 800a378:	0800a3bd 	.word	0x0800a3bd
 800a37c:	0800a3bd 	.word	0x0800a3bd
 800a380:	0800a3b1 	.word	0x0800a3b1
 800a384:	0800a3bd 	.word	0x0800a3bd
 800a388:	0800a3bd 	.word	0x0800a3bd
 800a38c:	0800a3bd 	.word	0x0800a3bd
 800a390:	0800a3ab 	.word	0x0800a3ab
 800a394:	0800a3bd 	.word	0x0800a3bd
 800a398:	0800a3bd 	.word	0x0800a3bd
 800a39c:	0800a3bd 	.word	0x0800a3bd
 800a3a0:	0800a3b7 	.word	0x0800a3b7
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	77fb      	strb	r3, [r7, #31]
 800a3a8:	e118      	b.n	800a5dc <UART_SetConfig+0x348>
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	77fb      	strb	r3, [r7, #31]
 800a3ae:	e115      	b.n	800a5dc <UART_SetConfig+0x348>
 800a3b0:	2304      	movs	r3, #4
 800a3b2:	77fb      	strb	r3, [r7, #31]
 800a3b4:	e112      	b.n	800a5dc <UART_SetConfig+0x348>
 800a3b6:	2308      	movs	r3, #8
 800a3b8:	77fb      	strb	r3, [r7, #31]
 800a3ba:	e10f      	b.n	800a5dc <UART_SetConfig+0x348>
 800a3bc:	2310      	movs	r3, #16
 800a3be:	77fb      	strb	r3, [r7, #31]
 800a3c0:	e10c      	b.n	800a5dc <UART_SetConfig+0x348>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a68      	ldr	r2, [pc, #416]	; (800a568 <UART_SetConfig+0x2d4>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d120      	bne.n	800a40e <UART_SetConfig+0x17a>
 800a3cc:	4b64      	ldr	r3, [pc, #400]	; (800a560 <UART_SetConfig+0x2cc>)
 800a3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a3d6:	2b30      	cmp	r3, #48	; 0x30
 800a3d8:	d013      	beq.n	800a402 <UART_SetConfig+0x16e>
 800a3da:	2b30      	cmp	r3, #48	; 0x30
 800a3dc:	d814      	bhi.n	800a408 <UART_SetConfig+0x174>
 800a3de:	2b20      	cmp	r3, #32
 800a3e0:	d009      	beq.n	800a3f6 <UART_SetConfig+0x162>
 800a3e2:	2b20      	cmp	r3, #32
 800a3e4:	d810      	bhi.n	800a408 <UART_SetConfig+0x174>
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d002      	beq.n	800a3f0 <UART_SetConfig+0x15c>
 800a3ea:	2b10      	cmp	r3, #16
 800a3ec:	d006      	beq.n	800a3fc <UART_SetConfig+0x168>
 800a3ee:	e00b      	b.n	800a408 <UART_SetConfig+0x174>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	77fb      	strb	r3, [r7, #31]
 800a3f4:	e0f2      	b.n	800a5dc <UART_SetConfig+0x348>
 800a3f6:	2302      	movs	r3, #2
 800a3f8:	77fb      	strb	r3, [r7, #31]
 800a3fa:	e0ef      	b.n	800a5dc <UART_SetConfig+0x348>
 800a3fc:	2304      	movs	r3, #4
 800a3fe:	77fb      	strb	r3, [r7, #31]
 800a400:	e0ec      	b.n	800a5dc <UART_SetConfig+0x348>
 800a402:	2308      	movs	r3, #8
 800a404:	77fb      	strb	r3, [r7, #31]
 800a406:	e0e9      	b.n	800a5dc <UART_SetConfig+0x348>
 800a408:	2310      	movs	r3, #16
 800a40a:	77fb      	strb	r3, [r7, #31]
 800a40c:	e0e6      	b.n	800a5dc <UART_SetConfig+0x348>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a56      	ldr	r2, [pc, #344]	; (800a56c <UART_SetConfig+0x2d8>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d120      	bne.n	800a45a <UART_SetConfig+0x1c6>
 800a418:	4b51      	ldr	r3, [pc, #324]	; (800a560 <UART_SetConfig+0x2cc>)
 800a41a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a41e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a422:	2bc0      	cmp	r3, #192	; 0xc0
 800a424:	d013      	beq.n	800a44e <UART_SetConfig+0x1ba>
 800a426:	2bc0      	cmp	r3, #192	; 0xc0
 800a428:	d814      	bhi.n	800a454 <UART_SetConfig+0x1c0>
 800a42a:	2b80      	cmp	r3, #128	; 0x80
 800a42c:	d009      	beq.n	800a442 <UART_SetConfig+0x1ae>
 800a42e:	2b80      	cmp	r3, #128	; 0x80
 800a430:	d810      	bhi.n	800a454 <UART_SetConfig+0x1c0>
 800a432:	2b00      	cmp	r3, #0
 800a434:	d002      	beq.n	800a43c <UART_SetConfig+0x1a8>
 800a436:	2b40      	cmp	r3, #64	; 0x40
 800a438:	d006      	beq.n	800a448 <UART_SetConfig+0x1b4>
 800a43a:	e00b      	b.n	800a454 <UART_SetConfig+0x1c0>
 800a43c:	2300      	movs	r3, #0
 800a43e:	77fb      	strb	r3, [r7, #31]
 800a440:	e0cc      	b.n	800a5dc <UART_SetConfig+0x348>
 800a442:	2302      	movs	r3, #2
 800a444:	77fb      	strb	r3, [r7, #31]
 800a446:	e0c9      	b.n	800a5dc <UART_SetConfig+0x348>
 800a448:	2304      	movs	r3, #4
 800a44a:	77fb      	strb	r3, [r7, #31]
 800a44c:	e0c6      	b.n	800a5dc <UART_SetConfig+0x348>
 800a44e:	2308      	movs	r3, #8
 800a450:	77fb      	strb	r3, [r7, #31]
 800a452:	e0c3      	b.n	800a5dc <UART_SetConfig+0x348>
 800a454:	2310      	movs	r3, #16
 800a456:	77fb      	strb	r3, [r7, #31]
 800a458:	e0c0      	b.n	800a5dc <UART_SetConfig+0x348>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a44      	ldr	r2, [pc, #272]	; (800a570 <UART_SetConfig+0x2dc>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d125      	bne.n	800a4b0 <UART_SetConfig+0x21c>
 800a464:	4b3e      	ldr	r3, [pc, #248]	; (800a560 <UART_SetConfig+0x2cc>)
 800a466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a46a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a46e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a472:	d017      	beq.n	800a4a4 <UART_SetConfig+0x210>
 800a474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a478:	d817      	bhi.n	800a4aa <UART_SetConfig+0x216>
 800a47a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a47e:	d00b      	beq.n	800a498 <UART_SetConfig+0x204>
 800a480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a484:	d811      	bhi.n	800a4aa <UART_SetConfig+0x216>
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <UART_SetConfig+0x1fe>
 800a48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a48e:	d006      	beq.n	800a49e <UART_SetConfig+0x20a>
 800a490:	e00b      	b.n	800a4aa <UART_SetConfig+0x216>
 800a492:	2300      	movs	r3, #0
 800a494:	77fb      	strb	r3, [r7, #31]
 800a496:	e0a1      	b.n	800a5dc <UART_SetConfig+0x348>
 800a498:	2302      	movs	r3, #2
 800a49a:	77fb      	strb	r3, [r7, #31]
 800a49c:	e09e      	b.n	800a5dc <UART_SetConfig+0x348>
 800a49e:	2304      	movs	r3, #4
 800a4a0:	77fb      	strb	r3, [r7, #31]
 800a4a2:	e09b      	b.n	800a5dc <UART_SetConfig+0x348>
 800a4a4:	2308      	movs	r3, #8
 800a4a6:	77fb      	strb	r3, [r7, #31]
 800a4a8:	e098      	b.n	800a5dc <UART_SetConfig+0x348>
 800a4aa:	2310      	movs	r3, #16
 800a4ac:	77fb      	strb	r3, [r7, #31]
 800a4ae:	e095      	b.n	800a5dc <UART_SetConfig+0x348>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a2f      	ldr	r2, [pc, #188]	; (800a574 <UART_SetConfig+0x2e0>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d125      	bne.n	800a506 <UART_SetConfig+0x272>
 800a4ba:	4b29      	ldr	r3, [pc, #164]	; (800a560 <UART_SetConfig+0x2cc>)
 800a4bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a4c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4c8:	d017      	beq.n	800a4fa <UART_SetConfig+0x266>
 800a4ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4ce:	d817      	bhi.n	800a500 <UART_SetConfig+0x26c>
 800a4d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4d4:	d00b      	beq.n	800a4ee <UART_SetConfig+0x25a>
 800a4d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4da:	d811      	bhi.n	800a500 <UART_SetConfig+0x26c>
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d003      	beq.n	800a4e8 <UART_SetConfig+0x254>
 800a4e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4e4:	d006      	beq.n	800a4f4 <UART_SetConfig+0x260>
 800a4e6:	e00b      	b.n	800a500 <UART_SetConfig+0x26c>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	77fb      	strb	r3, [r7, #31]
 800a4ec:	e076      	b.n	800a5dc <UART_SetConfig+0x348>
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	77fb      	strb	r3, [r7, #31]
 800a4f2:	e073      	b.n	800a5dc <UART_SetConfig+0x348>
 800a4f4:	2304      	movs	r3, #4
 800a4f6:	77fb      	strb	r3, [r7, #31]
 800a4f8:	e070      	b.n	800a5dc <UART_SetConfig+0x348>
 800a4fa:	2308      	movs	r3, #8
 800a4fc:	77fb      	strb	r3, [r7, #31]
 800a4fe:	e06d      	b.n	800a5dc <UART_SetConfig+0x348>
 800a500:	2310      	movs	r3, #16
 800a502:	77fb      	strb	r3, [r7, #31]
 800a504:	e06a      	b.n	800a5dc <UART_SetConfig+0x348>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a1b      	ldr	r2, [pc, #108]	; (800a578 <UART_SetConfig+0x2e4>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d138      	bne.n	800a582 <UART_SetConfig+0x2ee>
 800a510:	4b13      	ldr	r3, [pc, #76]	; (800a560 <UART_SetConfig+0x2cc>)
 800a512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a516:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a51a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a51e:	d017      	beq.n	800a550 <UART_SetConfig+0x2bc>
 800a520:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a524:	d82a      	bhi.n	800a57c <UART_SetConfig+0x2e8>
 800a526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a52a:	d00b      	beq.n	800a544 <UART_SetConfig+0x2b0>
 800a52c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a530:	d824      	bhi.n	800a57c <UART_SetConfig+0x2e8>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d003      	beq.n	800a53e <UART_SetConfig+0x2aa>
 800a536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a53a:	d006      	beq.n	800a54a <UART_SetConfig+0x2b6>
 800a53c:	e01e      	b.n	800a57c <UART_SetConfig+0x2e8>
 800a53e:	2300      	movs	r3, #0
 800a540:	77fb      	strb	r3, [r7, #31]
 800a542:	e04b      	b.n	800a5dc <UART_SetConfig+0x348>
 800a544:	2302      	movs	r3, #2
 800a546:	77fb      	strb	r3, [r7, #31]
 800a548:	e048      	b.n	800a5dc <UART_SetConfig+0x348>
 800a54a:	2304      	movs	r3, #4
 800a54c:	77fb      	strb	r3, [r7, #31]
 800a54e:	e045      	b.n	800a5dc <UART_SetConfig+0x348>
 800a550:	2308      	movs	r3, #8
 800a552:	77fb      	strb	r3, [r7, #31]
 800a554:	e042      	b.n	800a5dc <UART_SetConfig+0x348>
 800a556:	bf00      	nop
 800a558:	efff69f3 	.word	0xefff69f3
 800a55c:	40011000 	.word	0x40011000
 800a560:	40023800 	.word	0x40023800
 800a564:	40004400 	.word	0x40004400
 800a568:	40004800 	.word	0x40004800
 800a56c:	40004c00 	.word	0x40004c00
 800a570:	40005000 	.word	0x40005000
 800a574:	40011400 	.word	0x40011400
 800a578:	40007800 	.word	0x40007800
 800a57c:	2310      	movs	r3, #16
 800a57e:	77fb      	strb	r3, [r7, #31]
 800a580:	e02c      	b.n	800a5dc <UART_SetConfig+0x348>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a72      	ldr	r2, [pc, #456]	; (800a750 <UART_SetConfig+0x4bc>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d125      	bne.n	800a5d8 <UART_SetConfig+0x344>
 800a58c:	4b71      	ldr	r3, [pc, #452]	; (800a754 <UART_SetConfig+0x4c0>)
 800a58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a592:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a596:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a59a:	d017      	beq.n	800a5cc <UART_SetConfig+0x338>
 800a59c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a5a0:	d817      	bhi.n	800a5d2 <UART_SetConfig+0x33e>
 800a5a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5a6:	d00b      	beq.n	800a5c0 <UART_SetConfig+0x32c>
 800a5a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ac:	d811      	bhi.n	800a5d2 <UART_SetConfig+0x33e>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <UART_SetConfig+0x326>
 800a5b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5b6:	d006      	beq.n	800a5c6 <UART_SetConfig+0x332>
 800a5b8:	e00b      	b.n	800a5d2 <UART_SetConfig+0x33e>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	77fb      	strb	r3, [r7, #31]
 800a5be:	e00d      	b.n	800a5dc <UART_SetConfig+0x348>
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	77fb      	strb	r3, [r7, #31]
 800a5c4:	e00a      	b.n	800a5dc <UART_SetConfig+0x348>
 800a5c6:	2304      	movs	r3, #4
 800a5c8:	77fb      	strb	r3, [r7, #31]
 800a5ca:	e007      	b.n	800a5dc <UART_SetConfig+0x348>
 800a5cc:	2308      	movs	r3, #8
 800a5ce:	77fb      	strb	r3, [r7, #31]
 800a5d0:	e004      	b.n	800a5dc <UART_SetConfig+0x348>
 800a5d2:	2310      	movs	r3, #16
 800a5d4:	77fb      	strb	r3, [r7, #31]
 800a5d6:	e001      	b.n	800a5dc <UART_SetConfig+0x348>
 800a5d8:	2310      	movs	r3, #16
 800a5da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	69db      	ldr	r3, [r3, #28]
 800a5e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5e4:	d15b      	bne.n	800a69e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a5e6:	7ffb      	ldrb	r3, [r7, #31]
 800a5e8:	2b08      	cmp	r3, #8
 800a5ea:	d828      	bhi.n	800a63e <UART_SetConfig+0x3aa>
 800a5ec:	a201      	add	r2, pc, #4	; (adr r2, 800a5f4 <UART_SetConfig+0x360>)
 800a5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f2:	bf00      	nop
 800a5f4:	0800a619 	.word	0x0800a619
 800a5f8:	0800a621 	.word	0x0800a621
 800a5fc:	0800a629 	.word	0x0800a629
 800a600:	0800a63f 	.word	0x0800a63f
 800a604:	0800a62f 	.word	0x0800a62f
 800a608:	0800a63f 	.word	0x0800a63f
 800a60c:	0800a63f 	.word	0x0800a63f
 800a610:	0800a63f 	.word	0x0800a63f
 800a614:	0800a637 	.word	0x0800a637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a618:	f7fd fad0 	bl	8007bbc <HAL_RCC_GetPCLK1Freq>
 800a61c:	61b8      	str	r0, [r7, #24]
        break;
 800a61e:	e013      	b.n	800a648 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a620:	f7fd fae0 	bl	8007be4 <HAL_RCC_GetPCLK2Freq>
 800a624:	61b8      	str	r0, [r7, #24]
        break;
 800a626:	e00f      	b.n	800a648 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a628:	4b4b      	ldr	r3, [pc, #300]	; (800a758 <UART_SetConfig+0x4c4>)
 800a62a:	61bb      	str	r3, [r7, #24]
        break;
 800a62c:	e00c      	b.n	800a648 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a62e:	f7fd f9b3 	bl	8007998 <HAL_RCC_GetSysClockFreq>
 800a632:	61b8      	str	r0, [r7, #24]
        break;
 800a634:	e008      	b.n	800a648 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a63a:	61bb      	str	r3, [r7, #24]
        break;
 800a63c:	e004      	b.n	800a648 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a63e:	2300      	movs	r3, #0
 800a640:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a642:	2301      	movs	r3, #1
 800a644:	77bb      	strb	r3, [r7, #30]
        break;
 800a646:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d074      	beq.n	800a738 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	005a      	lsls	r2, r3, #1
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	085b      	lsrs	r3, r3, #1
 800a658:	441a      	add	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a662:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	2b0f      	cmp	r3, #15
 800a668:	d916      	bls.n	800a698 <UART_SetConfig+0x404>
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a670:	d212      	bcs.n	800a698 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	b29b      	uxth	r3, r3
 800a676:	f023 030f 	bic.w	r3, r3, #15
 800a67a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	085b      	lsrs	r3, r3, #1
 800a680:	b29b      	uxth	r3, r3
 800a682:	f003 0307 	and.w	r3, r3, #7
 800a686:	b29a      	uxth	r2, r3
 800a688:	89fb      	ldrh	r3, [r7, #14]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	89fa      	ldrh	r2, [r7, #14]
 800a694:	60da      	str	r2, [r3, #12]
 800a696:	e04f      	b.n	800a738 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	77bb      	strb	r3, [r7, #30]
 800a69c:	e04c      	b.n	800a738 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a69e:	7ffb      	ldrb	r3, [r7, #31]
 800a6a0:	2b08      	cmp	r3, #8
 800a6a2:	d828      	bhi.n	800a6f6 <UART_SetConfig+0x462>
 800a6a4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <UART_SetConfig+0x418>)
 800a6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6aa:	bf00      	nop
 800a6ac:	0800a6d1 	.word	0x0800a6d1
 800a6b0:	0800a6d9 	.word	0x0800a6d9
 800a6b4:	0800a6e1 	.word	0x0800a6e1
 800a6b8:	0800a6f7 	.word	0x0800a6f7
 800a6bc:	0800a6e7 	.word	0x0800a6e7
 800a6c0:	0800a6f7 	.word	0x0800a6f7
 800a6c4:	0800a6f7 	.word	0x0800a6f7
 800a6c8:	0800a6f7 	.word	0x0800a6f7
 800a6cc:	0800a6ef 	.word	0x0800a6ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6d0:	f7fd fa74 	bl	8007bbc <HAL_RCC_GetPCLK1Freq>
 800a6d4:	61b8      	str	r0, [r7, #24]
        break;
 800a6d6:	e013      	b.n	800a700 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6d8:	f7fd fa84 	bl	8007be4 <HAL_RCC_GetPCLK2Freq>
 800a6dc:	61b8      	str	r0, [r7, #24]
        break;
 800a6de:	e00f      	b.n	800a700 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6e0:	4b1d      	ldr	r3, [pc, #116]	; (800a758 <UART_SetConfig+0x4c4>)
 800a6e2:	61bb      	str	r3, [r7, #24]
        break;
 800a6e4:	e00c      	b.n	800a700 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6e6:	f7fd f957 	bl	8007998 <HAL_RCC_GetSysClockFreq>
 800a6ea:	61b8      	str	r0, [r7, #24]
        break;
 800a6ec:	e008      	b.n	800a700 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6f2:	61bb      	str	r3, [r7, #24]
        break;
 800a6f4:	e004      	b.n	800a700 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	77bb      	strb	r3, [r7, #30]
        break;
 800a6fe:	bf00      	nop
    }

    if (pclk != 0U)
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d018      	beq.n	800a738 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	085a      	lsrs	r2, r3, #1
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	441a      	add	r2, r3
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	fbb2 f3f3 	udiv	r3, r2, r3
 800a718:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b0f      	cmp	r3, #15
 800a71e:	d909      	bls.n	800a734 <UART_SetConfig+0x4a0>
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a726:	d205      	bcs.n	800a734 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	60da      	str	r2, [r3, #12]
 800a732:	e001      	b.n	800a738 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a744:	7fbb      	ldrb	r3, [r7, #30]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3720      	adds	r7, #32
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	40007c00 	.word	0x40007c00
 800a754:	40023800 	.word	0x40023800
 800a758:	00f42400 	.word	0x00f42400

0800a75c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00a      	beq.n	800a786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	430a      	orrs	r2, r1
 800a784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00a      	beq.n	800a7a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00a      	beq.n	800a7ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ce:	f003 0308 	and.w	r3, r3, #8
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d00a      	beq.n	800a7ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	430a      	orrs	r2, r1
 800a7ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	f003 0310 	and.w	r3, r3, #16
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00a      	beq.n	800a80e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a812:	f003 0320 	and.w	r3, r3, #32
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	430a      	orrs	r2, r1
 800a82e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d01a      	beq.n	800a872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	430a      	orrs	r2, r1
 800a850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a85a:	d10a      	bne.n	800a872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	430a      	orrs	r2, r1
 800a870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00a      	beq.n	800a894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	430a      	orrs	r2, r1
 800a892:	605a      	str	r2, [r3, #4]
  }
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af02      	add	r7, sp, #8
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8b0:	f7f7 fca6 	bl	8002200 <HAL_GetTick>
 800a8b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0308 	and.w	r3, r3, #8
 800a8c0:	2b08      	cmp	r3, #8
 800a8c2:	d10e      	bne.n	800a8e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8c8:	9300      	str	r3, [sp, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f81b 	bl	800a90e <UART_WaitOnFlagUntilTimeout>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	e011      	b.n	800a906 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2220      	movs	r2, #32
 800a8e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b09c      	sub	sp, #112	; 0x70
 800a912:	af00      	add	r7, sp, #0
 800a914:	60f8      	str	r0, [r7, #12]
 800a916:	60b9      	str	r1, [r7, #8]
 800a918:	603b      	str	r3, [r7, #0]
 800a91a:	4613      	mov	r3, r2
 800a91c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a91e:	e0a7      	b.n	800aa70 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a926:	f000 80a3 	beq.w	800aa70 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a92a:	f7f7 fc69 	bl	8002200 <HAL_GetTick>
 800a92e:	4602      	mov	r2, r0
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	1ad3      	subs	r3, r2, r3
 800a934:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a936:	429a      	cmp	r2, r3
 800a938:	d302      	bcc.n	800a940 <UART_WaitOnFlagUntilTimeout+0x32>
 800a93a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d13f      	bne.n	800a9c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a948:	e853 3f00 	ldrex	r3, [r3]
 800a94c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a94e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a950:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a954:	667b      	str	r3, [r7, #100]	; 0x64
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a95e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a960:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a962:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a964:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a966:	e841 2300 	strex	r3, r2, [r1]
 800a96a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a96c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1e6      	bne.n	800a940 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	3308      	adds	r3, #8
 800a978:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a97c:	e853 3f00 	ldrex	r3, [r3]
 800a980:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a984:	f023 0301 	bic.w	r3, r3, #1
 800a988:	663b      	str	r3, [r7, #96]	; 0x60
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3308      	adds	r3, #8
 800a990:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a992:	64ba      	str	r2, [r7, #72]	; 0x48
 800a994:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a996:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a99a:	e841 2300 	strex	r3, r2, [r1]
 800a99e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a9a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1e5      	bne.n	800a972 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2220      	movs	r2, #32
 800a9b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a9bc:	2303      	movs	r3, #3
 800a9be:	e068      	b.n	800aa92 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 0304 	and.w	r3, r3, #4
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d050      	beq.n	800aa70 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	69db      	ldr	r3, [r3, #28]
 800a9d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9dc:	d148      	bne.n	800aa70 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f0:	e853 3f00 	ldrex	r3, [r3]
 800a9f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	461a      	mov	r2, r3
 800aa04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa06:	637b      	str	r3, [r7, #52]	; 0x34
 800aa08:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa0e:	e841 2300 	strex	r3, r2, [r1]
 800aa12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d1e6      	bne.n	800a9e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	3308      	adds	r3, #8
 800aa20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	e853 3f00 	ldrex	r3, [r3]
 800aa28:	613b      	str	r3, [r7, #16]
   return(result);
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f023 0301 	bic.w	r3, r3, #1
 800aa30:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	3308      	adds	r3, #8
 800aa38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa3a:	623a      	str	r2, [r7, #32]
 800aa3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3e:	69f9      	ldr	r1, [r7, #28]
 800aa40:	6a3a      	ldr	r2, [r7, #32]
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e5      	bne.n	800aa1a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2220      	movs	r2, #32
 800aa52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2220      	movs	r2, #32
 800aa58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2220      	movs	r2, #32
 800aa60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	e010      	b.n	800aa92 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	69da      	ldr	r2, [r3, #28]
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	4013      	ands	r3, r2
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	bf0c      	ite	eq
 800aa80:	2301      	moveq	r3, #1
 800aa82:	2300      	movne	r3, #0
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	461a      	mov	r2, r3
 800aa88:	79fb      	ldrb	r3, [r7, #7]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	f43f af48 	beq.w	800a920 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3770      	adds	r7, #112	; 0x70
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
	...

0800aa9c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b096      	sub	sp, #88	; 0x58
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	68ba      	ldr	r2, [r7, #8]
 800aaae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	88fa      	ldrh	r2, [r7, #6]
 800aab4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2222      	movs	r2, #34	; 0x22
 800aac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d028      	beq.n	800ab22 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aad4:	4a3e      	ldr	r2, [pc, #248]	; (800abd0 <UART_Start_Receive_DMA+0x134>)
 800aad6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aadc:	4a3d      	ldr	r2, [pc, #244]	; (800abd4 <UART_Start_Receive_DMA+0x138>)
 800aade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aae4:	4a3c      	ldr	r2, [pc, #240]	; (800abd8 <UART_Start_Receive_DMA+0x13c>)
 800aae6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaec:	2200      	movs	r2, #0
 800aaee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	3324      	adds	r3, #36	; 0x24
 800aafa:	4619      	mov	r1, r3
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab00:	461a      	mov	r2, r3
 800ab02:	88fb      	ldrh	r3, [r7, #6]
 800ab04:	f7f8 fb82 	bl	800320c <HAL_DMA_Start_IT>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d009      	beq.n	800ab22 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2210      	movs	r2, #16
 800ab12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e051      	b.n	800abc6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d018      	beq.n	800ab5c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab32:	e853 3f00 	ldrex	r3, [r3]
 800ab36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab3e:	657b      	str	r3, [r7, #84]	; 0x54
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	461a      	mov	r2, r3
 800ab46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab48:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab4a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab50:	e841 2300 	strex	r3, r2, [r1]
 800ab54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1e6      	bne.n	800ab2a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3308      	adds	r3, #8
 800ab62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab66:	e853 3f00 	ldrex	r3, [r3]
 800ab6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	f043 0301 	orr.w	r3, r3, #1
 800ab72:	653b      	str	r3, [r7, #80]	; 0x50
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	3308      	adds	r3, #8
 800ab7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab7c:	637a      	str	r2, [r7, #52]	; 0x34
 800ab7e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab84:	e841 2300 	strex	r3, r2, [r1]
 800ab88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1e5      	bne.n	800ab5c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	3308      	adds	r3, #8
 800ab96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	e853 3f00 	ldrex	r3, [r3]
 800ab9e:	613b      	str	r3, [r7, #16]
   return(result);
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3308      	adds	r3, #8
 800abae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abb0:	623a      	str	r2, [r7, #32]
 800abb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb4:	69f9      	ldr	r1, [r7, #28]
 800abb6:	6a3a      	ldr	r2, [r7, #32]
 800abb8:	e841 2300 	strex	r3, r2, [r1]
 800abbc:	61bb      	str	r3, [r7, #24]
   return(result);
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1e5      	bne.n	800ab90 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3758      	adds	r7, #88	; 0x58
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
 800abce:	bf00      	nop
 800abd0:	0800ada3 	.word	0x0800ada3
 800abd4:	0800aecb 	.word	0x0800aecb
 800abd8:	0800af09 	.word	0x0800af09

0800abdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abdc:	b480      	push	{r7}
 800abde:	b089      	sub	sp, #36	; 0x24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	e853 3f00 	ldrex	r3, [r3]
 800abf0:	60bb      	str	r3, [r7, #8]
   return(result);
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800abf8:	61fb      	str	r3, [r7, #28]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	461a      	mov	r2, r3
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	61bb      	str	r3, [r7, #24]
 800ac04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac06:	6979      	ldr	r1, [r7, #20]
 800ac08:	69ba      	ldr	r2, [r7, #24]
 800ac0a:	e841 2300 	strex	r3, r2, [r1]
 800ac0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1e6      	bne.n	800abe4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2220      	movs	r2, #32
 800ac1a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800ac1c:	bf00      	nop
 800ac1e:	3724      	adds	r7, #36	; 0x24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b095      	sub	sp, #84	; 0x54
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac38:	e853 3f00 	ldrex	r3, [r3]
 800ac3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac4e:	643b      	str	r3, [r7, #64]	; 0x40
 800ac50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac56:	e841 2300 	strex	r3, r2, [r1]
 800ac5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1e6      	bne.n	800ac30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	3308      	adds	r3, #8
 800ac68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	e853 3f00 	ldrex	r3, [r3]
 800ac70:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	f023 0301 	bic.w	r3, r3, #1
 800ac78:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	3308      	adds	r3, #8
 800ac80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac82:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac8a:	e841 2300 	strex	r3, r2, [r1]
 800ac8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1e5      	bne.n	800ac62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d118      	bne.n	800acd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	e853 3f00 	ldrex	r3, [r3]
 800acaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	f023 0310 	bic.w	r3, r3, #16
 800acb2:	647b      	str	r3, [r7, #68]	; 0x44
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	461a      	mov	r2, r3
 800acba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acbc:	61bb      	str	r3, [r7, #24]
 800acbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc0:	6979      	ldr	r1, [r7, #20]
 800acc2:	69ba      	ldr	r2, [r7, #24]
 800acc4:	e841 2300 	strex	r3, r2, [r1]
 800acc8:	613b      	str	r3, [r7, #16]
   return(result);
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1e6      	bne.n	800ac9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2220      	movs	r2, #32
 800acd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ace4:	bf00      	nop
 800ace6:	3754      	adds	r7, #84	; 0x54
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b090      	sub	sp, #64	; 0x40
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad06:	d037      	beq.n	800ad78 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ad08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	3308      	adds	r3, #8
 800ad16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad1a:	e853 3f00 	ldrex	r3, [r3]
 800ad1e:	623b      	str	r3, [r7, #32]
   return(result);
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad26:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	3308      	adds	r3, #8
 800ad2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad30:	633a      	str	r2, [r7, #48]	; 0x30
 800ad32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad38:	e841 2300 	strex	r3, r2, [r1]
 800ad3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1e5      	bne.n	800ad10 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	e853 3f00 	ldrex	r3, [r3]
 800ad50:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad58:	637b      	str	r3, [r7, #52]	; 0x34
 800ad5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad62:	61fb      	str	r3, [r7, #28]
 800ad64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	69b9      	ldr	r1, [r7, #24]
 800ad68:	69fa      	ldr	r2, [r7, #28]
 800ad6a:	e841 2300 	strex	r3, r2, [r1]
 800ad6e:	617b      	str	r3, [r7, #20]
   return(result);
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e6      	bne.n	800ad44 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad76:	e002      	b.n	800ad7e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ad78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ad7a:	f00b ff39 	bl	8016bf0 <HAL_UART_TxCpltCallback>
}
 800ad7e:	bf00      	nop
 800ad80:	3740      	adds	r7, #64	; 0x40
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad92:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f7ff fa53 	bl	800a240 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad9a:	bf00      	nop
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b09c      	sub	sp, #112	; 0x70
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adae:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	69db      	ldr	r3, [r3, #28]
 800adb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb8:	d071      	beq.n	800ae9e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800adba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adca:	e853 3f00 	ldrex	r3, [r3]
 800adce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800add0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800add2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800add6:	66bb      	str	r3, [r7, #104]	; 0x68
 800add8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	461a      	mov	r2, r3
 800adde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ade0:	65bb      	str	r3, [r7, #88]	; 0x58
 800ade2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ade6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ade8:	e841 2300 	strex	r3, r2, [r1]
 800adec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800adee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1e6      	bne.n	800adc2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	3308      	adds	r3, #8
 800adfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfe:	e853 3f00 	ldrex	r3, [r3]
 800ae02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae06:	f023 0301 	bic.w	r3, r3, #1
 800ae0a:	667b      	str	r3, [r7, #100]	; 0x64
 800ae0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3308      	adds	r3, #8
 800ae12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae14:	647a      	str	r2, [r7, #68]	; 0x44
 800ae16:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae1c:	e841 2300 	strex	r3, r2, [r1]
 800ae20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1e5      	bne.n	800adf4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	623b      	str	r3, [r7, #32]
   return(result);
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae3e:	663b      	str	r3, [r7, #96]	; 0x60
 800ae40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3308      	adds	r3, #8
 800ae46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae48:	633a      	str	r2, [r7, #48]	; 0x30
 800ae4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae50:	e841 2300 	strex	r3, r2, [r1]
 800ae54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1e5      	bne.n	800ae28 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae5e:	2220      	movs	r2, #32
 800ae60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d118      	bne.n	800ae9e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	e853 3f00 	ldrex	r3, [r3]
 800ae78:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f023 0310 	bic.w	r3, r3, #16
 800ae80:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae8a:	61fb      	str	r3, [r7, #28]
 800ae8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8e:	69b9      	ldr	r1, [r7, #24]
 800ae90:	69fa      	ldr	r2, [r7, #28]
 800ae92:	e841 2300 	strex	r3, r2, [r1]
 800ae96:	617b      	str	r3, [r7, #20]
   return(result);
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e6      	bne.n	800ae6c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aea0:	2200      	movs	r2, #0
 800aea2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d107      	bne.n	800aebc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aeac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aeb6:	f7ff f9e1 	bl	800a27c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aeba:	e002      	b.n	800aec2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800aebc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aebe:	f00b fe7b 	bl	8016bb8 <HAL_UART_RxCpltCallback>
}
 800aec2:	bf00      	nop
 800aec4:	3770      	adds	r7, #112	; 0x70
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}

0800aeca <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b084      	sub	sp, #16
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2201      	movs	r2, #1
 800aedc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d109      	bne.n	800aefa <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aeec:	085b      	lsrs	r3, r3, #1
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	4619      	mov	r1, r3
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f7ff f9c2 	bl	800a27c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aef8:	e002      	b.n	800af00 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	f7ff f9aa 	bl	800a254 <HAL_UART_RxHalfCpltCallback>
}
 800af00:	bf00      	nop
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af14:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af1a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af22:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af2e:	2b80      	cmp	r3, #128	; 0x80
 800af30:	d109      	bne.n	800af46 <UART_DMAError+0x3e>
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	2b21      	cmp	r3, #33	; 0x21
 800af36:	d106      	bne.n	800af46 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800af40:	6978      	ldr	r0, [r7, #20]
 800af42:	f7ff fe4b 	bl	800abdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af50:	2b40      	cmp	r3, #64	; 0x40
 800af52:	d109      	bne.n	800af68 <UART_DMAError+0x60>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b22      	cmp	r3, #34	; 0x22
 800af58:	d106      	bne.n	800af68 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800af62:	6978      	ldr	r0, [r7, #20]
 800af64:	f7ff fe60 	bl	800ac28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af6e:	f043 0210 	orr.w	r2, r3, #16
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af78:	6978      	ldr	r0, [r7, #20]
 800af7a:	f7ff f975 	bl	800a268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af7e:	bf00      	nop
 800af80:	3718      	adds	r7, #24
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b084      	sub	sp, #16
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2200      	movs	r2, #0
 800af98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f7ff f95f 	bl	800a268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afaa:	bf00      	nop
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b088      	sub	sp, #32
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	e853 3f00 	ldrex	r3, [r3]
 800afc6:	60bb      	str	r3, [r7, #8]
   return(result);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afce:	61fb      	str	r3, [r7, #28]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	461a      	mov	r2, r3
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	61bb      	str	r3, [r7, #24]
 800afda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afdc:	6979      	ldr	r1, [r7, #20]
 800afde:	69ba      	ldr	r2, [r7, #24]
 800afe0:	e841 2300 	strex	r3, r2, [r1]
 800afe4:	613b      	str	r3, [r7, #16]
   return(result);
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1e6      	bne.n	800afba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2220      	movs	r2, #32
 800aff0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f00b fdf9 	bl	8016bf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800affe:	bf00      	nop
 800b000:	3720      	adds	r7, #32
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
	...

0800b008 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b008:	b084      	sub	sp, #16
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b084      	sub	sp, #16
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	f107 001c 	add.w	r0, r7, #28
 800b016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d120      	bne.n	800b062 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b024:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	68da      	ldr	r2, [r3, #12]
 800b030:	4b20      	ldr	r3, [pc, #128]	; (800b0b4 <USB_CoreInit+0xac>)
 800b032:	4013      	ands	r3, r2
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b046:	2b01      	cmp	r3, #1
 800b048:	d105      	bne.n	800b056 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fa96 	bl	800b588 <USB_CoreReset>
 800b05c:	4603      	mov	r3, r0
 800b05e:	73fb      	strb	r3, [r7, #15]
 800b060:	e010      	b.n	800b084 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fa8a 	bl	800b588 <USB_CoreReset>
 800b074:	4603      	mov	r3, r0
 800b076:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b086:	2b01      	cmp	r3, #1
 800b088:	d10b      	bne.n	800b0a2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	f043 0206 	orr.w	r2, r3, #6
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	f043 0220 	orr.w	r2, r3, #32
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0ae:	b004      	add	sp, #16
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	ffbdffbf 	.word	0xffbdffbf

0800b0b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	f023 0201 	bic.w	r2, r3, #1
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	370c      	adds	r7, #12
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b0f6:	78fb      	ldrb	r3, [r7, #3]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d115      	bne.n	800b128 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b108:	2001      	movs	r0, #1
 800b10a:	f7f7 f885 	bl	8002218 <HAL_Delay>
      ms++;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	3301      	adds	r3, #1
 800b112:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fa29 	bl	800b56c <USB_GetMode>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d01e      	beq.n	800b15e <USB_SetCurrentMode+0x84>
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2b31      	cmp	r3, #49	; 0x31
 800b124:	d9f0      	bls.n	800b108 <USB_SetCurrentMode+0x2e>
 800b126:	e01a      	b.n	800b15e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d115      	bne.n	800b15a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b13a:	2001      	movs	r0, #1
 800b13c:	f7f7 f86c 	bl	8002218 <HAL_Delay>
      ms++;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	3301      	adds	r3, #1
 800b144:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fa10 	bl	800b56c <USB_GetMode>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d005      	beq.n	800b15e <USB_SetCurrentMode+0x84>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2b31      	cmp	r3, #49	; 0x31
 800b156:	d9f0      	bls.n	800b13a <USB_SetCurrentMode+0x60>
 800b158:	e001      	b.n	800b15e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	e005      	b.n	800b16a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2b32      	cmp	r3, #50	; 0x32
 800b162:	d101      	bne.n	800b168 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	e000      	b.n	800b16a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3710      	adds	r7, #16
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
	...

0800b174 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b174:	b084      	sub	sp, #16
 800b176:	b580      	push	{r7, lr}
 800b178:	b086      	sub	sp, #24
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b186:	2300      	movs	r3, #0
 800b188:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b18e:	2300      	movs	r3, #0
 800b190:	613b      	str	r3, [r7, #16]
 800b192:	e009      	b.n	800b1a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	3340      	adds	r3, #64	; 0x40
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	2200      	movs	r2, #0
 800b1a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	613b      	str	r3, [r7, #16]
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2b0e      	cmp	r3, #14
 800b1ac:	d9f2      	bls.n	800b194 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b1ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d11c      	bne.n	800b1ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1c2:	f043 0302 	orr.w	r3, r3, #2
 800b1c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	601a      	str	r2, [r3, #0]
 800b1ec:	e005      	b.n	800b1fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b200:	461a      	mov	r2, r3
 800b202:	2300      	movs	r3, #0
 800b204:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b20c:	4619      	mov	r1, r3
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b214:	461a      	mov	r2, r3
 800b216:	680b      	ldr	r3, [r1, #0]
 800b218:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d10c      	bne.n	800b23a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b222:	2b00      	cmp	r3, #0
 800b224:	d104      	bne.n	800b230 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b226:	2100      	movs	r1, #0
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f965 	bl	800b4f8 <USB_SetDevSpeed>
 800b22e:	e008      	b.n	800b242 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b230:	2101      	movs	r1, #1
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f960 	bl	800b4f8 <USB_SetDevSpeed>
 800b238:	e003      	b.n	800b242 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b23a:	2103      	movs	r1, #3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f95b 	bl	800b4f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b242:	2110      	movs	r1, #16
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 f8f3 	bl	800b430 <USB_FlushTxFifo>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f91f 	bl	800b498 <USB_FlushRxFifo>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b26a:	461a      	mov	r2, r3
 800b26c:	2300      	movs	r3, #0
 800b26e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b276:	461a      	mov	r2, r3
 800b278:	2300      	movs	r3, #0
 800b27a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b282:	461a      	mov	r2, r3
 800b284:	2300      	movs	r3, #0
 800b286:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b288:	2300      	movs	r3, #0
 800b28a:	613b      	str	r3, [r7, #16]
 800b28c:	e043      	b.n	800b316 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	015a      	lsls	r2, r3, #5
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	4413      	add	r3, r2
 800b296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2a4:	d118      	bne.n	800b2d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10a      	bne.n	800b2c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	015a      	lsls	r2, r3, #5
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b2be:	6013      	str	r3, [r2, #0]
 800b2c0:	e013      	b.n	800b2ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	015a      	lsls	r2, r3, #5
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b2d4:	6013      	str	r3, [r2, #0]
 800b2d6:	e008      	b.n	800b2ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	015a      	lsls	r2, r3, #5
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	4413      	add	r3, r2
 800b2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	015a      	lsls	r2, r3, #5
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	4413      	add	r3, r2
 800b304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b308:	461a      	mov	r2, r3
 800b30a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b30e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	3301      	adds	r3, #1
 800b314:	613b      	str	r3, [r7, #16]
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	693a      	ldr	r2, [r7, #16]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d3b7      	bcc.n	800b28e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b31e:	2300      	movs	r3, #0
 800b320:	613b      	str	r3, [r7, #16]
 800b322:	e043      	b.n	800b3ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b336:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b33a:	d118      	bne.n	800b36e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10a      	bne.n	800b358 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	015a      	lsls	r2, r3, #5
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	4413      	add	r3, r2
 800b34a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b34e:	461a      	mov	r2, r3
 800b350:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	e013      	b.n	800b380 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	015a      	lsls	r2, r3, #5
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4413      	add	r3, r2
 800b360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b364:	461a      	mov	r2, r3
 800b366:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b36a:	6013      	str	r3, [r2, #0]
 800b36c:	e008      	b.n	800b380 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	4413      	add	r3, r2
 800b376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b37a:	461a      	mov	r2, r3
 800b37c:	2300      	movs	r3, #0
 800b37e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	015a      	lsls	r2, r3, #5
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	4413      	add	r3, r2
 800b388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38c:	461a      	mov	r2, r3
 800b38e:	2300      	movs	r3, #0
 800b390:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	015a      	lsls	r2, r3, #5
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	4413      	add	r3, r2
 800b39a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	613b      	str	r3, [r7, #16]
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d3b7      	bcc.n	800b324 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ba:	691b      	ldr	r3, [r3, #16]
 800b3bc:	68fa      	ldr	r2, [r7, #12]
 800b3be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b3c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b3d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d105      	bne.n	800b3e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	f043 0210 	orr.w	r2, r3, #16
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	699a      	ldr	r2, [r3, #24]
 800b3ec:	4b0e      	ldr	r3, [pc, #56]	; (800b428 <USB_DevInit+0x2b4>)
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d005      	beq.n	800b406 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	699b      	ldr	r3, [r3, #24]
 800b3fe:	f043 0208 	orr.w	r2, r3, #8
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d105      	bne.n	800b418 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	699a      	ldr	r2, [r3, #24]
 800b410:	4b06      	ldr	r3, [pc, #24]	; (800b42c <USB_DevInit+0x2b8>)
 800b412:	4313      	orrs	r3, r2
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b418:	7dfb      	ldrb	r3, [r7, #23]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3718      	adds	r7, #24
 800b41e:	46bd      	mov	sp, r7
 800b420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b424:	b004      	add	sp, #16
 800b426:	4770      	bx	lr
 800b428:	803c3800 	.word	0x803c3800
 800b42c:	40000004 	.word	0x40000004

0800b430 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b43a:	2300      	movs	r3, #0
 800b43c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	3301      	adds	r3, #1
 800b442:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	4a13      	ldr	r2, [pc, #76]	; (800b494 <USB_FlushTxFifo+0x64>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d901      	bls.n	800b450 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b44c:	2303      	movs	r3, #3
 800b44e:	e01b      	b.n	800b488 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	2b00      	cmp	r3, #0
 800b456:	daf2      	bge.n	800b43e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b458:	2300      	movs	r3, #0
 800b45a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	019b      	lsls	r3, r3, #6
 800b460:	f043 0220 	orr.w	r2, r3, #32
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	3301      	adds	r3, #1
 800b46c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	4a08      	ldr	r2, [pc, #32]	; (800b494 <USB_FlushTxFifo+0x64>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d901      	bls.n	800b47a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b476:	2303      	movs	r3, #3
 800b478:	e006      	b.n	800b488 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	f003 0320 	and.w	r3, r3, #32
 800b482:	2b20      	cmp	r3, #32
 800b484:	d0f0      	beq.n	800b468 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr
 800b494:	00030d40 	.word	0x00030d40

0800b498 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	4a11      	ldr	r2, [pc, #68]	; (800b4f4 <USB_FlushRxFifo+0x5c>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d901      	bls.n	800b4b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b4b2:	2303      	movs	r3, #3
 800b4b4:	e018      	b.n	800b4e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	691b      	ldr	r3, [r3, #16]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	daf2      	bge.n	800b4a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2210      	movs	r2, #16
 800b4c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	4a08      	ldr	r2, [pc, #32]	; (800b4f4 <USB_FlushRxFifo+0x5c>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d901      	bls.n	800b4da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	e006      	b.n	800b4e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	f003 0310 	and.w	r3, r3, #16
 800b4e2:	2b10      	cmp	r3, #16
 800b4e4:	d0f0      	beq.n	800b4c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b4e6:	2300      	movs	r3, #0
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	00030d40 	.word	0x00030d40

0800b4f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	460b      	mov	r3, r1
 800b502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	78fb      	ldrb	r3, [r7, #3]
 800b512:	68f9      	ldr	r1, [r7, #12]
 800b514:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b518:	4313      	orrs	r3, r2
 800b51a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b52a:	b480      	push	{r7}
 800b52c:	b085      	sub	sp, #20
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b544:	f023 0303 	bic.w	r3, r3, #3
 800b548:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b558:	f043 0302 	orr.w	r3, r3, #2
 800b55c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3714      	adds	r7, #20
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	695b      	ldr	r3, [r3, #20]
 800b578:	f003 0301 	and.w	r3, r3, #1
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b590:	2300      	movs	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	3301      	adds	r3, #1
 800b598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	4a13      	ldr	r2, [pc, #76]	; (800b5ec <USB_CoreReset+0x64>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d901      	bls.n	800b5a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e01b      	b.n	800b5de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	daf2      	bge.n	800b594 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	f043 0201 	orr.w	r2, r3, #1
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	4a09      	ldr	r2, [pc, #36]	; (800b5ec <USB_CoreReset+0x64>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d901      	bls.n	800b5d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	e006      	b.n	800b5de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d0f0      	beq.n	800b5be <USB_CoreReset+0x36>

  return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	00030d40 	.word	0x00030d40

0800b5f0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b5f6:	4b8d      	ldr	r3, [pc, #564]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b5f8:	22c0      	movs	r2, #192	; 0xc0
 800b5fa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b5fc:	4b8b      	ldr	r3, [pc, #556]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b5fe:	22a8      	movs	r2, #168	; 0xa8
 800b600:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b602:	4b8a      	ldr	r3, [pc, #552]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b604:	2201      	movs	r2, #1
 800b606:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800b608:	4b88      	ldr	r3, [pc, #544]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b60a:	220a      	movs	r2, #10
 800b60c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b60e:	4b88      	ldr	r3, [pc, #544]	; (800b830 <MX_LWIP_Init+0x240>)
 800b610:	22ff      	movs	r2, #255	; 0xff
 800b612:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b614:	4b86      	ldr	r3, [pc, #536]	; (800b830 <MX_LWIP_Init+0x240>)
 800b616:	22ff      	movs	r2, #255	; 0xff
 800b618:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b61a:	4b85      	ldr	r3, [pc, #532]	; (800b830 <MX_LWIP_Init+0x240>)
 800b61c:	22ff      	movs	r2, #255	; 0xff
 800b61e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b620:	4b83      	ldr	r3, [pc, #524]	; (800b830 <MX_LWIP_Init+0x240>)
 800b622:	2200      	movs	r2, #0
 800b624:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800b626:	4b83      	ldr	r3, [pc, #524]	; (800b834 <MX_LWIP_Init+0x244>)
 800b628:	2200      	movs	r2, #0
 800b62a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800b62c:	4b81      	ldr	r3, [pc, #516]	; (800b834 <MX_LWIP_Init+0x244>)
 800b62e:	2200      	movs	r2, #0
 800b630:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800b632:	4b80      	ldr	r3, [pc, #512]	; (800b834 <MX_LWIP_Init+0x244>)
 800b634:	2200      	movs	r2, #0
 800b636:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800b638:	4b7e      	ldr	r3, [pc, #504]	; (800b834 <MX_LWIP_Init+0x244>)
 800b63a:	2200      	movs	r2, #0
 800b63c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800b63e:	f000 fd1d 	bl	800c07c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b642:	4b7a      	ldr	r3, [pc, #488]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	061a      	lsls	r2, r3, #24
 800b648:	4b78      	ldr	r3, [pc, #480]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b64a:	785b      	ldrb	r3, [r3, #1]
 800b64c:	041b      	lsls	r3, r3, #16
 800b64e:	431a      	orrs	r2, r3
 800b650:	4b76      	ldr	r3, [pc, #472]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b652:	789b      	ldrb	r3, [r3, #2]
 800b654:	021b      	lsls	r3, r3, #8
 800b656:	4313      	orrs	r3, r2
 800b658:	4a74      	ldr	r2, [pc, #464]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b65a:	78d2      	ldrb	r2, [r2, #3]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	061a      	lsls	r2, r3, #24
 800b660:	4b72      	ldr	r3, [pc, #456]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	0619      	lsls	r1, r3, #24
 800b666:	4b71      	ldr	r3, [pc, #452]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b668:	785b      	ldrb	r3, [r3, #1]
 800b66a:	041b      	lsls	r3, r3, #16
 800b66c:	4319      	orrs	r1, r3
 800b66e:	4b6f      	ldr	r3, [pc, #444]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b670:	789b      	ldrb	r3, [r3, #2]
 800b672:	021b      	lsls	r3, r3, #8
 800b674:	430b      	orrs	r3, r1
 800b676:	496d      	ldr	r1, [pc, #436]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b678:	78c9      	ldrb	r1, [r1, #3]
 800b67a:	430b      	orrs	r3, r1
 800b67c:	021b      	lsls	r3, r3, #8
 800b67e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b682:	431a      	orrs	r2, r3
 800b684:	4b69      	ldr	r3, [pc, #420]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	0619      	lsls	r1, r3, #24
 800b68a:	4b68      	ldr	r3, [pc, #416]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b68c:	785b      	ldrb	r3, [r3, #1]
 800b68e:	041b      	lsls	r3, r3, #16
 800b690:	4319      	orrs	r1, r3
 800b692:	4b66      	ldr	r3, [pc, #408]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b694:	789b      	ldrb	r3, [r3, #2]
 800b696:	021b      	lsls	r3, r3, #8
 800b698:	430b      	orrs	r3, r1
 800b69a:	4964      	ldr	r1, [pc, #400]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b69c:	78c9      	ldrb	r1, [r1, #3]
 800b69e:	430b      	orrs	r3, r1
 800b6a0:	0a1b      	lsrs	r3, r3, #8
 800b6a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b6a6:	431a      	orrs	r2, r3
 800b6a8:	4b60      	ldr	r3, [pc, #384]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	0619      	lsls	r1, r3, #24
 800b6ae:	4b5f      	ldr	r3, [pc, #380]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b6b0:	785b      	ldrb	r3, [r3, #1]
 800b6b2:	041b      	lsls	r3, r3, #16
 800b6b4:	4319      	orrs	r1, r3
 800b6b6:	4b5d      	ldr	r3, [pc, #372]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b6b8:	789b      	ldrb	r3, [r3, #2]
 800b6ba:	021b      	lsls	r3, r3, #8
 800b6bc:	430b      	orrs	r3, r1
 800b6be:	495b      	ldr	r1, [pc, #364]	; (800b82c <MX_LWIP_Init+0x23c>)
 800b6c0:	78c9      	ldrb	r1, [r1, #3]
 800b6c2:	430b      	orrs	r3, r1
 800b6c4:	0e1b      	lsrs	r3, r3, #24
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	4a5b      	ldr	r2, [pc, #364]	; (800b838 <MX_LWIP_Init+0x248>)
 800b6ca:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b6cc:	4b58      	ldr	r3, [pc, #352]	; (800b830 <MX_LWIP_Init+0x240>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	061a      	lsls	r2, r3, #24
 800b6d2:	4b57      	ldr	r3, [pc, #348]	; (800b830 <MX_LWIP_Init+0x240>)
 800b6d4:	785b      	ldrb	r3, [r3, #1]
 800b6d6:	041b      	lsls	r3, r3, #16
 800b6d8:	431a      	orrs	r2, r3
 800b6da:	4b55      	ldr	r3, [pc, #340]	; (800b830 <MX_LWIP_Init+0x240>)
 800b6dc:	789b      	ldrb	r3, [r3, #2]
 800b6de:	021b      	lsls	r3, r3, #8
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	4a53      	ldr	r2, [pc, #332]	; (800b830 <MX_LWIP_Init+0x240>)
 800b6e4:	78d2      	ldrb	r2, [r2, #3]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	061a      	lsls	r2, r3, #24
 800b6ea:	4b51      	ldr	r3, [pc, #324]	; (800b830 <MX_LWIP_Init+0x240>)
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	0619      	lsls	r1, r3, #24
 800b6f0:	4b4f      	ldr	r3, [pc, #316]	; (800b830 <MX_LWIP_Init+0x240>)
 800b6f2:	785b      	ldrb	r3, [r3, #1]
 800b6f4:	041b      	lsls	r3, r3, #16
 800b6f6:	4319      	orrs	r1, r3
 800b6f8:	4b4d      	ldr	r3, [pc, #308]	; (800b830 <MX_LWIP_Init+0x240>)
 800b6fa:	789b      	ldrb	r3, [r3, #2]
 800b6fc:	021b      	lsls	r3, r3, #8
 800b6fe:	430b      	orrs	r3, r1
 800b700:	494b      	ldr	r1, [pc, #300]	; (800b830 <MX_LWIP_Init+0x240>)
 800b702:	78c9      	ldrb	r1, [r1, #3]
 800b704:	430b      	orrs	r3, r1
 800b706:	021b      	lsls	r3, r3, #8
 800b708:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b70c:	431a      	orrs	r2, r3
 800b70e:	4b48      	ldr	r3, [pc, #288]	; (800b830 <MX_LWIP_Init+0x240>)
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	0619      	lsls	r1, r3, #24
 800b714:	4b46      	ldr	r3, [pc, #280]	; (800b830 <MX_LWIP_Init+0x240>)
 800b716:	785b      	ldrb	r3, [r3, #1]
 800b718:	041b      	lsls	r3, r3, #16
 800b71a:	4319      	orrs	r1, r3
 800b71c:	4b44      	ldr	r3, [pc, #272]	; (800b830 <MX_LWIP_Init+0x240>)
 800b71e:	789b      	ldrb	r3, [r3, #2]
 800b720:	021b      	lsls	r3, r3, #8
 800b722:	430b      	orrs	r3, r1
 800b724:	4942      	ldr	r1, [pc, #264]	; (800b830 <MX_LWIP_Init+0x240>)
 800b726:	78c9      	ldrb	r1, [r1, #3]
 800b728:	430b      	orrs	r3, r1
 800b72a:	0a1b      	lsrs	r3, r3, #8
 800b72c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b730:	431a      	orrs	r2, r3
 800b732:	4b3f      	ldr	r3, [pc, #252]	; (800b830 <MX_LWIP_Init+0x240>)
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	0619      	lsls	r1, r3, #24
 800b738:	4b3d      	ldr	r3, [pc, #244]	; (800b830 <MX_LWIP_Init+0x240>)
 800b73a:	785b      	ldrb	r3, [r3, #1]
 800b73c:	041b      	lsls	r3, r3, #16
 800b73e:	4319      	orrs	r1, r3
 800b740:	4b3b      	ldr	r3, [pc, #236]	; (800b830 <MX_LWIP_Init+0x240>)
 800b742:	789b      	ldrb	r3, [r3, #2]
 800b744:	021b      	lsls	r3, r3, #8
 800b746:	430b      	orrs	r3, r1
 800b748:	4939      	ldr	r1, [pc, #228]	; (800b830 <MX_LWIP_Init+0x240>)
 800b74a:	78c9      	ldrb	r1, [r1, #3]
 800b74c:	430b      	orrs	r3, r1
 800b74e:	0e1b      	lsrs	r3, r3, #24
 800b750:	4313      	orrs	r3, r2
 800b752:	4a3a      	ldr	r2, [pc, #232]	; (800b83c <MX_LWIP_Init+0x24c>)
 800b754:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b756:	4b37      	ldr	r3, [pc, #220]	; (800b834 <MX_LWIP_Init+0x244>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	061a      	lsls	r2, r3, #24
 800b75c:	4b35      	ldr	r3, [pc, #212]	; (800b834 <MX_LWIP_Init+0x244>)
 800b75e:	785b      	ldrb	r3, [r3, #1]
 800b760:	041b      	lsls	r3, r3, #16
 800b762:	431a      	orrs	r2, r3
 800b764:	4b33      	ldr	r3, [pc, #204]	; (800b834 <MX_LWIP_Init+0x244>)
 800b766:	789b      	ldrb	r3, [r3, #2]
 800b768:	021b      	lsls	r3, r3, #8
 800b76a:	4313      	orrs	r3, r2
 800b76c:	4a31      	ldr	r2, [pc, #196]	; (800b834 <MX_LWIP_Init+0x244>)
 800b76e:	78d2      	ldrb	r2, [r2, #3]
 800b770:	4313      	orrs	r3, r2
 800b772:	061a      	lsls	r2, r3, #24
 800b774:	4b2f      	ldr	r3, [pc, #188]	; (800b834 <MX_LWIP_Init+0x244>)
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	0619      	lsls	r1, r3, #24
 800b77a:	4b2e      	ldr	r3, [pc, #184]	; (800b834 <MX_LWIP_Init+0x244>)
 800b77c:	785b      	ldrb	r3, [r3, #1]
 800b77e:	041b      	lsls	r3, r3, #16
 800b780:	4319      	orrs	r1, r3
 800b782:	4b2c      	ldr	r3, [pc, #176]	; (800b834 <MX_LWIP_Init+0x244>)
 800b784:	789b      	ldrb	r3, [r3, #2]
 800b786:	021b      	lsls	r3, r3, #8
 800b788:	430b      	orrs	r3, r1
 800b78a:	492a      	ldr	r1, [pc, #168]	; (800b834 <MX_LWIP_Init+0x244>)
 800b78c:	78c9      	ldrb	r1, [r1, #3]
 800b78e:	430b      	orrs	r3, r1
 800b790:	021b      	lsls	r3, r3, #8
 800b792:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b796:	431a      	orrs	r2, r3
 800b798:	4b26      	ldr	r3, [pc, #152]	; (800b834 <MX_LWIP_Init+0x244>)
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	0619      	lsls	r1, r3, #24
 800b79e:	4b25      	ldr	r3, [pc, #148]	; (800b834 <MX_LWIP_Init+0x244>)
 800b7a0:	785b      	ldrb	r3, [r3, #1]
 800b7a2:	041b      	lsls	r3, r3, #16
 800b7a4:	4319      	orrs	r1, r3
 800b7a6:	4b23      	ldr	r3, [pc, #140]	; (800b834 <MX_LWIP_Init+0x244>)
 800b7a8:	789b      	ldrb	r3, [r3, #2]
 800b7aa:	021b      	lsls	r3, r3, #8
 800b7ac:	430b      	orrs	r3, r1
 800b7ae:	4921      	ldr	r1, [pc, #132]	; (800b834 <MX_LWIP_Init+0x244>)
 800b7b0:	78c9      	ldrb	r1, [r1, #3]
 800b7b2:	430b      	orrs	r3, r1
 800b7b4:	0a1b      	lsrs	r3, r3, #8
 800b7b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	4b1d      	ldr	r3, [pc, #116]	; (800b834 <MX_LWIP_Init+0x244>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	0619      	lsls	r1, r3, #24
 800b7c2:	4b1c      	ldr	r3, [pc, #112]	; (800b834 <MX_LWIP_Init+0x244>)
 800b7c4:	785b      	ldrb	r3, [r3, #1]
 800b7c6:	041b      	lsls	r3, r3, #16
 800b7c8:	4319      	orrs	r1, r3
 800b7ca:	4b1a      	ldr	r3, [pc, #104]	; (800b834 <MX_LWIP_Init+0x244>)
 800b7cc:	789b      	ldrb	r3, [r3, #2]
 800b7ce:	021b      	lsls	r3, r3, #8
 800b7d0:	430b      	orrs	r3, r1
 800b7d2:	4918      	ldr	r1, [pc, #96]	; (800b834 <MX_LWIP_Init+0x244>)
 800b7d4:	78c9      	ldrb	r1, [r1, #3]
 800b7d6:	430b      	orrs	r3, r1
 800b7d8:	0e1b      	lsrs	r3, r3, #24
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	4a18      	ldr	r2, [pc, #96]	; (800b840 <MX_LWIP_Init+0x250>)
 800b7de:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800b7e0:	4b18      	ldr	r3, [pc, #96]	; (800b844 <MX_LWIP_Init+0x254>)
 800b7e2:	9302      	str	r3, [sp, #8]
 800b7e4:	4b18      	ldr	r3, [pc, #96]	; (800b848 <MX_LWIP_Init+0x258>)
 800b7e6:	9301      	str	r3, [sp, #4]
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	4b14      	ldr	r3, [pc, #80]	; (800b840 <MX_LWIP_Init+0x250>)
 800b7ee:	4a13      	ldr	r2, [pc, #76]	; (800b83c <MX_LWIP_Init+0x24c>)
 800b7f0:	4911      	ldr	r1, [pc, #68]	; (800b838 <MX_LWIP_Init+0x248>)
 800b7f2:	4816      	ldr	r0, [pc, #88]	; (800b84c <MX_LWIP_Init+0x25c>)
 800b7f4:	f001 f92e 	bl	800ca54 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b7f8:	4814      	ldr	r0, [pc, #80]	; (800b84c <MX_LWIP_Init+0x25c>)
 800b7fa:	f001 fadd 	bl	800cdb8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b7fe:	4b13      	ldr	r3, [pc, #76]	; (800b84c <MX_LWIP_Init+0x25c>)
 800b800:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b804:	089b      	lsrs	r3, r3, #2
 800b806:	f003 0301 	and.w	r3, r3, #1
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d003      	beq.n	800b818 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b810:	480e      	ldr	r0, [pc, #56]	; (800b84c <MX_LWIP_Init+0x25c>)
 800b812:	f001 fae1 	bl	800cdd8 <netif_set_up>
 800b816:	e002      	b.n	800b81e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b818:	480c      	ldr	r0, [pc, #48]	; (800b84c <MX_LWIP_Init+0x25c>)
 800b81a:	f001 fb49 	bl	800ceb0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b81e:	490c      	ldr	r1, [pc, #48]	; (800b850 <MX_LWIP_Init+0x260>)
 800b820:	480a      	ldr	r0, [pc, #40]	; (800b84c <MX_LWIP_Init+0x25c>)
 800b822:	f001 fbdb 	bl	800cfdc <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b826:	bf00      	nop
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	20000fb8 	.word	0x20000fb8
 800b830:	20000fbc 	.word	0x20000fbc
 800b834:	20000fc0 	.word	0x20000fc0
 800b838:	20000fac 	.word	0x20000fac
 800b83c:	20000fb0 	.word	0x20000fb0
 800b840:	20000fb4 	.word	0x20000fb4
 800b844:	08016151 	.word	0x08016151
 800b848:	0800bb69 	.word	0x0800bb69
 800b84c:	20000f78 	.word	0x20000f78
 800b850:	0800b855 	.word	0x0800b855

0800b854 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <SCB_InvalidateDCache_by_Addr>:
{
 800b868:	b480      	push	{r7}
 800b86a:	b087      	sub	sp, #28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800b87a:	2320      	movs	r3, #32
 800b87c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b87e:	f3bf 8f4f 	dsb	sy
}
 800b882:	bf00      	nop
    while (op_size > 0) {
 800b884:	e00b      	b.n	800b89e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800b886:	4a0d      	ldr	r2, [pc, #52]	; (800b8bc <SCB_InvalidateDCache_by_Addr+0x54>)
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	4413      	add	r3, r2
 800b894:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800b896:	697a      	ldr	r2, [r7, #20]
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	dcf0      	bgt.n	800b886 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800b8a4:	f3bf 8f4f 	dsb	sy
}
 800b8a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b8aa:	f3bf 8f6f 	isb	sy
}
 800b8ae:	bf00      	nop
}
 800b8b0:	bf00      	nop
 800b8b2:	371c      	adds	r7, #28
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	e000ed00 	.word	0xe000ed00

0800b8c0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b8cc:	4b40      	ldr	r3, [pc, #256]	; (800b9d0 <low_level_init+0x110>)
 800b8ce:	4a41      	ldr	r2, [pc, #260]	; (800b9d4 <low_level_init+0x114>)
 800b8d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b8d6:	2380      	movs	r3, #128	; 0x80
 800b8d8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b8da:	23e1      	movs	r3, #225	; 0xe1
 800b8dc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b8ea:	4a39      	ldr	r2, [pc, #228]	; (800b9d0 <low_level_init+0x110>)
 800b8ec:	f107 0308 	add.w	r3, r7, #8
 800b8f0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b8f2:	4b37      	ldr	r3, [pc, #220]	; (800b9d0 <low_level_init+0x110>)
 800b8f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b8f8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b8fa:	4b35      	ldr	r3, [pc, #212]	; (800b9d0 <low_level_init+0x110>)
 800b8fc:	4a36      	ldr	r2, [pc, #216]	; (800b9d8 <low_level_init+0x118>)
 800b8fe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b900:	4b33      	ldr	r3, [pc, #204]	; (800b9d0 <low_level_init+0x110>)
 800b902:	4a36      	ldr	r2, [pc, #216]	; (800b9dc <low_level_init+0x11c>)
 800b904:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b906:	4b32      	ldr	r3, [pc, #200]	; (800b9d0 <low_level_init+0x110>)
 800b908:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b90c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b90e:	4830      	ldr	r0, [pc, #192]	; (800b9d0 <low_level_init+0x110>)
 800b910:	f7f7 fff2 	bl	80038f8 <HAL_ETH_Init>
 800b914:	4603      	mov	r3, r0
 800b916:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b918:	2238      	movs	r2, #56	; 0x38
 800b91a:	2100      	movs	r1, #0
 800b91c:	4830      	ldr	r0, [pc, #192]	; (800b9e0 <low_level_init+0x120>)
 800b91e:	f00b fac5 	bl	8016eac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b922:	4b2f      	ldr	r3, [pc, #188]	; (800b9e0 <low_level_init+0x120>)
 800b924:	2221      	movs	r2, #33	; 0x21
 800b926:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b928:	4b2d      	ldr	r3, [pc, #180]	; (800b9e0 <low_level_init+0x120>)
 800b92a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800b92e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b930:	4b2b      	ldr	r3, [pc, #172]	; (800b9e0 <low_level_init+0x120>)
 800b932:	2200      	movs	r2, #0
 800b934:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b936:	482b      	ldr	r0, [pc, #172]	; (800b9e4 <low_level_init+0x124>)
 800b938:	f000 ff54 	bl	800c7e4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2206      	movs	r2, #6
 800b940:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b944:	4b22      	ldr	r3, [pc, #136]	; (800b9d0 <low_level_init+0x110>)
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	781a      	ldrb	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b950:	4b1f      	ldr	r3, [pc, #124]	; (800b9d0 <low_level_init+0x110>)
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	785a      	ldrb	r2, [r3, #1]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b95c:	4b1c      	ldr	r3, [pc, #112]	; (800b9d0 <low_level_init+0x110>)
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	789a      	ldrb	r2, [r3, #2]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b968:	4b19      	ldr	r3, [pc, #100]	; (800b9d0 <low_level_init+0x110>)
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	78da      	ldrb	r2, [r3, #3]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b974:	4b16      	ldr	r3, [pc, #88]	; (800b9d0 <low_level_init+0x110>)
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	791a      	ldrb	r2, [r3, #4]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b980:	4b13      	ldr	r3, [pc, #76]	; (800b9d0 <low_level_init+0x110>)
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	795a      	ldrb	r2, [r3, #5]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b992:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b99a:	f043 030a 	orr.w	r3, r3, #10
 800b99e:	b2da      	uxtb	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b9a6:	4910      	ldr	r1, [pc, #64]	; (800b9e8 <low_level_init+0x128>)
 800b9a8:	4810      	ldr	r0, [pc, #64]	; (800b9ec <low_level_init+0x12c>)
 800b9aa:	f7f6 fa76 	bl	8001e9a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b9ae:	480f      	ldr	r0, [pc, #60]	; (800b9ec <low_level_init+0x12c>)
 800b9b0:	f7f6 faa5 	bl	8001efe <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d103      	bne.n	800b9c2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fa32 	bl	800be24 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b9c0:	e001      	b.n	800b9c6 <low_level_init+0x106>
    Error_Handler();
 800b9c2:	f7f5 fa3b 	bl	8000e3c <Error_Handler>
}
 800b9c6:	bf00      	nop
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20005950 	.word	0x20005950
 800b9d4:	40028000 	.word	0x40028000
 800b9d8:	20000130 	.word	0x20000130
 800b9dc:	20000090 	.word	0x20000090
 800b9e0:	20005a00 	.word	0x20005a00
 800b9e4:	0801a98c 	.word	0x0801a98c
 800b9e8:	2000000c 	.word	0x2000000c
 800b9ec:	20005a38 	.word	0x20005a38

0800b9f0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b092      	sub	sp, #72	; 0x48
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800ba08:	f107 030c 	add.w	r3, r7, #12
 800ba0c:	2230      	movs	r2, #48	; 0x30
 800ba0e:	2100      	movs	r1, #0
 800ba10:	4618      	mov	r0, r3
 800ba12:	f00b fa4b 	bl	8016eac <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ba16:	f107 030c 	add.w	r3, r7, #12
 800ba1a:	2230      	movs	r2, #48	; 0x30
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f00b fa44 	bl	8016eac <memset>

  for(q = p; q != NULL; q = q->next)
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	643b      	str	r3, [r7, #64]	; 0x40
 800ba28:	e045      	b.n	800bab6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800ba2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba2c:	2b03      	cmp	r3, #3
 800ba2e:	d902      	bls.n	800ba36 <low_level_output+0x46>
      return ERR_IF;
 800ba30:	f06f 030b 	mvn.w	r3, #11
 800ba34:	e055      	b.n	800bae2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800ba36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba38:	6859      	ldr	r1, [r3, #4]
 800ba3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	4413      	add	r3, r2
 800ba42:	009b      	lsls	r3, r3, #2
 800ba44:	3348      	adds	r3, #72	; 0x48
 800ba46:	443b      	add	r3, r7
 800ba48:	3b3c      	subs	r3, #60	; 0x3c
 800ba4a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ba4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba4e:	895b      	ldrh	r3, [r3, #10]
 800ba50:	4619      	mov	r1, r3
 800ba52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba54:	4613      	mov	r3, r2
 800ba56:	005b      	lsls	r3, r3, #1
 800ba58:	4413      	add	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	3348      	adds	r3, #72	; 0x48
 800ba5e:	443b      	add	r3, r7
 800ba60:	3b38      	subs	r3, #56	; 0x38
 800ba62:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ba64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d011      	beq.n	800ba8e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ba6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba6c:	1e5a      	subs	r2, r3, #1
 800ba6e:	f107 000c 	add.w	r0, r7, #12
 800ba72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba74:	460b      	mov	r3, r1
 800ba76:	005b      	lsls	r3, r3, #1
 800ba78:	440b      	add	r3, r1
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	18c1      	adds	r1, r0, r3
 800ba7e:	4613      	mov	r3, r2
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	4413      	add	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	3348      	adds	r3, #72	; 0x48
 800ba88:	443b      	add	r3, r7
 800ba8a:	3b34      	subs	r3, #52	; 0x34
 800ba8c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ba8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d109      	bne.n	800baaa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ba96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba98:	4613      	mov	r3, r2
 800ba9a:	005b      	lsls	r3, r3, #1
 800ba9c:	4413      	add	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	3348      	adds	r3, #72	; 0x48
 800baa2:	443b      	add	r3, r7
 800baa4:	3b34      	subs	r3, #52	; 0x34
 800baa6:	2200      	movs	r2, #0
 800baa8:	601a      	str	r2, [r3, #0]
    }

    i++;
 800baaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baac:	3301      	adds	r3, #1
 800baae:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800bab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	643b      	str	r3, [r7, #64]	; 0x40
 800bab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1b6      	bne.n	800ba2a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	891b      	ldrh	r3, [r3, #8]
 800bac0:	461a      	mov	r2, r3
 800bac2:	4b0a      	ldr	r3, [pc, #40]	; (800baec <low_level_output+0xfc>)
 800bac4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800bac6:	4a09      	ldr	r2, [pc, #36]	; (800baec <low_level_output+0xfc>)
 800bac8:	f107 030c 	add.w	r3, r7, #12
 800bacc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800bace:	4a07      	ldr	r2, [pc, #28]	; (800baec <low_level_output+0xfc>)
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800bad4:	2214      	movs	r2, #20
 800bad6:	4905      	ldr	r1, [pc, #20]	; (800baec <low_level_output+0xfc>)
 800bad8:	4805      	ldr	r0, [pc, #20]	; (800baf0 <low_level_output+0x100>)
 800bada:	f7f8 f841 	bl	8003b60 <HAL_ETH_Transmit>

  return errval;
 800bade:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3748      	adds	r7, #72	; 0x48
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	20005a00 	.word	0x20005a00
 800baf0:	20005950 	.word	0x20005950

0800baf4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bafc:	2300      	movs	r3, #0
 800bafe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800bb00:	4b07      	ldr	r3, [pc, #28]	; (800bb20 <low_level_input+0x2c>)
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d105      	bne.n	800bb14 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800bb08:	f107 030c 	add.w	r3, r7, #12
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	4805      	ldr	r0, [pc, #20]	; (800bb24 <low_level_input+0x30>)
 800bb10:	f7f8 f8ba 	bl	8003c88 <HAL_ETH_ReadData>
  }

  return p;
 800bb14:	68fb      	ldr	r3, [r7, #12]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	2000594c 	.word	0x2000594c
 800bb24:	20005950 	.word	0x20005950

0800bb28 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bb30:	2300      	movs	r3, #0
 800bb32:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7ff ffdd 	bl	800baf4 <low_level_input>
 800bb3a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d00a      	beq.n	800bb58 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	6879      	ldr	r1, [r7, #4]
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	4798      	blx	r3
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d002      	beq.n	800bb58 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f001 fdc2 	bl	800d6dc <pbuf_free>
      }
    }
  } while(p!=NULL);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1ea      	bne.n	800bb34 <ethernetif_input+0xc>
}
 800bb5e:	bf00      	nop
 800bb60:	bf00      	nop
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d106      	bne.n	800bb84 <ethernetif_init+0x1c>
 800bb76:	4b0e      	ldr	r3, [pc, #56]	; (800bbb0 <ethernetif_init+0x48>)
 800bb78:	f240 127b 	movw	r2, #379	; 0x17b
 800bb7c:	490d      	ldr	r1, [pc, #52]	; (800bbb4 <ethernetif_init+0x4c>)
 800bb7e:	480e      	ldr	r0, [pc, #56]	; (800bbb8 <ethernetif_init+0x50>)
 800bb80:	f00b fa7c 	bl	801707c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2273      	movs	r2, #115	; 0x73
 800bb88:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2274      	movs	r2, #116	; 0x74
 800bb90:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a09      	ldr	r2, [pc, #36]	; (800bbbc <ethernetif_init+0x54>)
 800bb98:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	4a08      	ldr	r2, [pc, #32]	; (800bbc0 <ethernetif_init+0x58>)
 800bb9e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f7ff fe8d 	bl	800b8c0 <low_level_init>

  return ERR_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	08017f8c 	.word	0x08017f8c
 800bbb4:	08017fa8 	.word	0x08017fa8
 800bbb8:	08017fb8 	.word	0x08017fb8
 800bbbc:	08014609 	.word	0x08014609
 800bbc0:	0800b9f1 	.word	0x0800b9f1

0800bbc4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800bbd0:	68f9      	ldr	r1, [r7, #12]
 800bbd2:	4807      	ldr	r0, [pc, #28]	; (800bbf0 <pbuf_free_custom+0x2c>)
 800bbd4:	f000 fee8 	bl	800c9a8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800bbd8:	4b06      	ldr	r3, [pc, #24]	; (800bbf4 <pbuf_free_custom+0x30>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d102      	bne.n	800bbe6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800bbe0:	4b04      	ldr	r3, [pc, #16]	; (800bbf4 <pbuf_free_custom+0x30>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	701a      	strb	r2, [r3, #0]
  }
}
 800bbe6:	bf00      	nop
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	0801a98c 	.word	0x0801a98c
 800bbf4:	2000594c 	.word	0x2000594c

0800bbf8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bbfc:	f7f6 fb00 	bl	8002200 <HAL_GetTick>
 800bc00:	4603      	mov	r3, r0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	bd80      	pop	{r7, pc}
	...

0800bc08 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08e      	sub	sp, #56	; 0x38
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc14:	2200      	movs	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]
 800bc18:	605a      	str	r2, [r3, #4]
 800bc1a:	609a      	str	r2, [r3, #8]
 800bc1c:	60da      	str	r2, [r3, #12]
 800bc1e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a52      	ldr	r2, [pc, #328]	; (800bd70 <HAL_ETH_MspInit+0x168>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	f040 809e 	bne.w	800bd68 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800bc2c:	4b51      	ldr	r3, [pc, #324]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc30:	4a50      	ldr	r2, [pc, #320]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800bc36:	6313      	str	r3, [r2, #48]	; 0x30
 800bc38:	4b4e      	ldr	r3, [pc, #312]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc40:	623b      	str	r3, [r7, #32]
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	4b4b      	ldr	r3, [pc, #300]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc48:	4a4a      	ldr	r2, [pc, #296]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc4e:	6313      	str	r3, [r2, #48]	; 0x30
 800bc50:	4b48      	ldr	r3, [pc, #288]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc58:	61fb      	str	r3, [r7, #28]
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	4b45      	ldr	r3, [pc, #276]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc60:	4a44      	ldr	r2, [pc, #272]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc66:	6313      	str	r3, [r2, #48]	; 0x30
 800bc68:	4b42      	ldr	r3, [pc, #264]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc70:	61bb      	str	r3, [r7, #24]
 800bc72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bc74:	4b3f      	ldr	r3, [pc, #252]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc78:	4a3e      	ldr	r2, [pc, #248]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc7a:	f043 0304 	orr.w	r3, r3, #4
 800bc7e:	6313      	str	r3, [r2, #48]	; 0x30
 800bc80:	4b3c      	ldr	r3, [pc, #240]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc84:	f003 0304 	and.w	r3, r3, #4
 800bc88:	617b      	str	r3, [r7, #20]
 800bc8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc8c:	4b39      	ldr	r3, [pc, #228]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc90:	4a38      	ldr	r2, [pc, #224]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc92:	f043 0301 	orr.w	r3, r3, #1
 800bc96:	6313      	str	r3, [r2, #48]	; 0x30
 800bc98:	4b36      	ldr	r3, [pc, #216]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc9c:	f003 0301 	and.w	r3, r3, #1
 800bca0:	613b      	str	r3, [r7, #16]
 800bca2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bca4:	4b33      	ldr	r3, [pc, #204]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca8:	4a32      	ldr	r2, [pc, #200]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bcaa:	f043 0302 	orr.w	r3, r3, #2
 800bcae:	6313      	str	r3, [r2, #48]	; 0x30
 800bcb0:	4b30      	ldr	r3, [pc, #192]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bcb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb4:	f003 0302 	and.w	r3, r3, #2
 800bcb8:	60fb      	str	r3, [r7, #12]
 800bcba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800bcbc:	4b2d      	ldr	r3, [pc, #180]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bcbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcc0:	4a2c      	ldr	r2, [pc, #176]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bcc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcc6:	6313      	str	r3, [r2, #48]	; 0x30
 800bcc8:	4b2a      	ldr	r3, [pc, #168]	; (800bd74 <HAL_ETH_MspInit+0x16c>)
 800bcca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd0:	60bb      	str	r3, [r7, #8]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800bcd4:	2332      	movs	r3, #50	; 0x32
 800bcd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcd8:	2302      	movs	r3, #2
 800bcda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bce0:	2303      	movs	r3, #3
 800bce2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bce4:	230b      	movs	r3, #11
 800bce6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bce8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcec:	4619      	mov	r1, r3
 800bcee:	4822      	ldr	r0, [pc, #136]	; (800bd78 <HAL_ETH_MspInit+0x170>)
 800bcf0:	f7f8 ffe8 	bl	8004cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800bcf4:	2386      	movs	r3, #134	; 0x86
 800bcf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd00:	2303      	movs	r3, #3
 800bd02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd04:	230b      	movs	r3, #11
 800bd06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	481b      	ldr	r0, [pc, #108]	; (800bd7c <HAL_ETH_MspInit+0x174>)
 800bd10:	f7f8 ffd8 	bl	8004cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800bd14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd22:	2303      	movs	r3, #3
 800bd24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd26:	230b      	movs	r3, #11
 800bd28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800bd2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd2e:	4619      	mov	r1, r3
 800bd30:	4813      	ldr	r0, [pc, #76]	; (800bd80 <HAL_ETH_MspInit+0x178>)
 800bd32:	f7f8 ffc7 	bl	8004cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800bd36:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bd3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd40:	2300      	movs	r3, #0
 800bd42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd44:	2303      	movs	r3, #3
 800bd46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bd48:	230b      	movs	r3, #11
 800bd4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800bd4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd50:	4619      	mov	r1, r3
 800bd52:	480c      	ldr	r0, [pc, #48]	; (800bd84 <HAL_ETH_MspInit+0x17c>)
 800bd54:	f7f8 ffb6 	bl	8004cc4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800bd58:	2200      	movs	r2, #0
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	203d      	movs	r0, #61	; 0x3d
 800bd5e:	f7f7 f970 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bd62:	203d      	movs	r0, #61	; 0x3d
 800bd64:	f7f7 f989 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bd68:	bf00      	nop
 800bd6a:	3738      	adds	r7, #56	; 0x38
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	40028000 	.word	0x40028000
 800bd74:	40023800 	.word	0x40023800
 800bd78:	40020800 	.word	0x40020800
 800bd7c:	40020000 	.word	0x40020000
 800bd80:	40020400 	.word	0x40020400
 800bd84:	40021800 	.word	0x40021800

0800bd88 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800bd8c:	4802      	ldr	r0, [pc, #8]	; (800bd98 <ETH_PHY_IO_Init+0x10>)
 800bd8e:	f7f8 fb3f 	bl	8004410 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	20005950 	.word	0x20005950

0800bd9c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	af00      	add	r7, sp, #0
  return 0;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	68f9      	ldr	r1, [r7, #12]
 800bdbe:	4807      	ldr	r0, [pc, #28]	; (800bddc <ETH_PHY_IO_ReadReg+0x30>)
 800bdc0:	f7f8 f98e 	bl	80040e0 <HAL_ETH_ReadPHYRegister>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d002      	beq.n	800bdd0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800bdca:	f04f 33ff 	mov.w	r3, #4294967295
 800bdce:	e000      	b.n	800bdd2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20005950 	.word	0x20005950

0800bde0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	68f9      	ldr	r1, [r7, #12]
 800bdf2:	4807      	ldr	r0, [pc, #28]	; (800be10 <ETH_PHY_IO_WriteReg+0x30>)
 800bdf4:	f7f8 f9bf 	bl	8004176 <HAL_ETH_WritePHYRegister>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d002      	beq.n	800be04 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800bdfe:	f04f 33ff 	mov.w	r3, #4294967295
 800be02:	e000      	b.n	800be06 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	20005950 	.word	0x20005950

0800be14 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800be18:	f7f6 f9f2 	bl	8002200 <HAL_GetTick>
 800be1c:	4603      	mov	r3, r0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	bd80      	pop	{r7, pc}
	...

0800be24 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b0a0      	sub	sp, #128	; 0x80
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800be2c:	f107 030c 	add.w	r3, r7, #12
 800be30:	2264      	movs	r2, #100	; 0x64
 800be32:	2100      	movs	r1, #0
 800be34:	4618      	mov	r0, r3
 800be36:	f00b f839 	bl	8016eac <memset>
  int32_t PHYLinkState = 0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800be3e:	2300      	movs	r3, #0
 800be40:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be42:	2300      	movs	r3, #0
 800be44:	67bb      	str	r3, [r7, #120]	; 0x78
 800be46:	2300      	movs	r3, #0
 800be48:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800be4a:	483a      	ldr	r0, [pc, #232]	; (800bf34 <ethernet_link_check_state+0x110>)
 800be4c:	f7f6 f8ff 	bl	800204e <LAN8742_GetLinkState>
 800be50:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be58:	089b      	lsrs	r3, r3, #2
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00c      	beq.n	800be7e <ethernet_link_check_state+0x5a>
 800be64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be66:	2b01      	cmp	r3, #1
 800be68:	dc09      	bgt.n	800be7e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800be6a:	4833      	ldr	r0, [pc, #204]	; (800bf38 <ethernet_link_check_state+0x114>)
 800be6c:	f7f7 fe1f 	bl	8003aae <HAL_ETH_Stop>
    netif_set_down(netif);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f001 f81d 	bl	800ceb0 <netif_set_down>
    netif_set_link_down(netif);
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f001 f880 	bl	800cf7c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800be7c:	e055      	b.n	800bf2a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800be84:	f003 0304 	and.w	r3, r3, #4
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d14e      	bne.n	800bf2a <ethernet_link_check_state+0x106>
 800be8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be8e:	2b01      	cmp	r3, #1
 800be90:	dd4b      	ble.n	800bf2a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800be92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be94:	3b02      	subs	r3, #2
 800be96:	2b03      	cmp	r3, #3
 800be98:	d82a      	bhi.n	800bef0 <ethernet_link_check_state+0xcc>
 800be9a:	a201      	add	r2, pc, #4	; (adr r2, 800bea0 <ethernet_link_check_state+0x7c>)
 800be9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea0:	0800beb1 	.word	0x0800beb1
 800bea4:	0800bec3 	.word	0x0800bec3
 800bea8:	0800bed3 	.word	0x0800bed3
 800beac:	0800bee3 	.word	0x0800bee3
      duplex = ETH_FULLDUPLEX_MODE;
 800beb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800beb4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800beb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800beba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800bebc:	2301      	movs	r3, #1
 800bebe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800bec0:	e017      	b.n	800bef2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800bec2:	2300      	movs	r3, #0
 800bec4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800bec6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800beca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800becc:	2301      	movs	r3, #1
 800bece:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800bed0:	e00f      	b.n	800bef2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800bed2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bed6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800bed8:	2300      	movs	r3, #0
 800beda:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800bedc:	2301      	movs	r3, #1
 800bede:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800bee0:	e007      	b.n	800bef2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800bee2:	2300      	movs	r3, #0
 800bee4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800bee6:	2300      	movs	r3, #0
 800bee8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800beea:	2301      	movs	r3, #1
 800beec:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800beee:	e000      	b.n	800bef2 <ethernet_link_check_state+0xce>
      break;
 800bef0:	bf00      	nop
    if(linkchanged)
 800bef2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d018      	beq.n	800bf2a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bef8:	f107 030c 	add.w	r3, r7, #12
 800befc:	4619      	mov	r1, r3
 800befe:	480e      	ldr	r0, [pc, #56]	; (800bf38 <ethernet_link_check_state+0x114>)
 800bf00:	f7f8 f982 	bl	8004208 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800bf04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf06:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800bf08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf0a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bf0c:	f107 030c 	add.w	r3, r7, #12
 800bf10:	4619      	mov	r1, r3
 800bf12:	4809      	ldr	r0, [pc, #36]	; (800bf38 <ethernet_link_check_state+0x114>)
 800bf14:	f7f8 fa62 	bl	80043dc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800bf18:	4807      	ldr	r0, [pc, #28]	; (800bf38 <ethernet_link_check_state+0x114>)
 800bf1a:	f7f7 fd69 	bl	80039f0 <HAL_ETH_Start>
      netif_set_up(netif);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 ff5a 	bl	800cdd8 <netif_set_up>
      netif_set_link_up(netif);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fff5 	bl	800cf14 <netif_set_link_up>
}
 800bf2a:	bf00      	nop
 800bf2c:	3780      	adds	r7, #128	; 0x80
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	20005a38 	.word	0x20005a38
 800bf38:	20005950 	.word	0x20005950

0800bf3c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af02      	add	r7, sp, #8
 800bf42:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800bf44:	4812      	ldr	r0, [pc, #72]	; (800bf90 <HAL_ETH_RxAllocateCallback+0x54>)
 800bf46:	f000 fcc1 	bl	800c8cc <memp_malloc_pool>
 800bf4a:	60f8      	str	r0, [r7, #12]
  if (p)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d014      	beq.n	800bf7c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f103 0220 	add.w	r2, r3, #32
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4a0d      	ldr	r2, [pc, #52]	; (800bf94 <HAL_ETH_RxAllocateCallback+0x58>)
 800bf60:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bf6a:	9201      	str	r2, [sp, #4]
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2241      	movs	r2, #65	; 0x41
 800bf72:	2100      	movs	r1, #0
 800bf74:	2000      	movs	r0, #0
 800bf76:	f001 f9f7 	bl	800d368 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800bf7a:	e005      	b.n	800bf88 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800bf7c:	4b06      	ldr	r3, [pc, #24]	; (800bf98 <HAL_ETH_RxAllocateCallback+0x5c>)
 800bf7e:	2201      	movs	r2, #1
 800bf80:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	601a      	str	r2, [r3, #0]
}
 800bf88:	bf00      	nop
 800bf8a:	3710      	adds	r7, #16
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	0801a98c 	.word	0x0801a98c
 800bf94:	0800bbc5 	.word	0x0800bbc5
 800bf98:	2000594c 	.word	0x2000594c

0800bf9c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b088      	sub	sp, #32
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	60f8      	str	r0, [r7, #12]
 800bfa4:	60b9      	str	r1, [r7, #8]
 800bfa6:	607a      	str	r2, [r7, #4]
 800bfa8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3b20      	subs	r3, #32
 800bfba:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800bfc2:	69fb      	ldr	r3, [r7, #28]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	887a      	ldrh	r2, [r7, #2]
 800bfcc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d103      	bne.n	800bfde <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	69fa      	ldr	r2, [r7, #28]
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	e003      	b.n	800bfe6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	69fa      	ldr	r2, [r7, #28]
 800bfe4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	69fa      	ldr	r2, [r7, #28]
 800bfea:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	61fb      	str	r3, [r7, #28]
 800bff2:	e009      	b.n	800c008 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	891a      	ldrh	r2, [r3, #8]
 800bff8:	887b      	ldrh	r3, [r7, #2]
 800bffa:	4413      	add	r3, r2
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c002:	69fb      	ldr	r3, [r7, #28]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	61fb      	str	r3, [r7, #28]
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1f2      	bne.n	800bff4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c00e:	887b      	ldrh	r3, [r7, #2]
 800c010:	4619      	mov	r1, r3
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7ff fc28 	bl	800b868 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c018:	bf00      	nop
 800c01a:	3720      	adds	r7, #32
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	4603      	mov	r3, r0
 800c028:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c02a:	88fb      	ldrh	r3, [r7, #6]
 800c02c:	021b      	lsls	r3, r3, #8
 800c02e:	b21a      	sxth	r2, r3
 800c030:	88fb      	ldrh	r3, [r7, #6]
 800c032:	0a1b      	lsrs	r3, r3, #8
 800c034:	b29b      	uxth	r3, r3
 800c036:	b21b      	sxth	r3, r3
 800c038:	4313      	orrs	r3, r2
 800c03a:	b21b      	sxth	r3, r3
 800c03c:	b29b      	uxth	r3, r3
}
 800c03e:	4618      	mov	r0, r3
 800c040:	370c      	adds	r7, #12
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr

0800c04a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c04a:	b480      	push	{r7}
 800c04c:	b083      	sub	sp, #12
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	061a      	lsls	r2, r3, #24
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	021b      	lsls	r3, r3, #8
 800c05a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c05e:	431a      	orrs	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	0a1b      	lsrs	r3, r3, #8
 800c064:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c068:	431a      	orrs	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	0e1b      	lsrs	r3, r3, #24
 800c06e:	4313      	orrs	r3, r2
}
 800c070:	4618      	mov	r0, r3
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c086:	f000 f8d5 	bl	800c234 <mem_init>
  memp_init();
 800c08a:	f000 fbdb 	bl	800c844 <memp_init>
  pbuf_init();
  netif_init();
 800c08e:	f000 fcd9 	bl	800ca44 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c092:	f007 f8f9 	bl	8013288 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c096:	f001 fe51 	bl	800dd3c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c09a:	f007 f86b 	bl	8013174 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c09e:	bf00      	nop
 800c0a0:	3708      	adds	r7, #8
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
	...

0800c0a8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c0b2:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <ptr_to_mem+0x20>)
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	88fb      	ldrh	r3, [r7, #6]
 800c0b8:	4413      	add	r3, r2
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	200060c4 	.word	0x200060c4

0800c0cc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c0d4:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <mem_to_ptr+0x20>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	1ad3      	subs	r3, r2, r3
 800c0dc:	b29b      	uxth	r3, r3
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	200060c4 	.word	0x200060c4

0800c0f0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c0f0:	b590      	push	{r4, r7, lr}
 800c0f2:	b085      	sub	sp, #20
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c0f8:	4b45      	ldr	r3, [pc, #276]	; (800c210 <plug_holes+0x120>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d206      	bcs.n	800c110 <plug_holes+0x20>
 800c102:	4b44      	ldr	r3, [pc, #272]	; (800c214 <plug_holes+0x124>)
 800c104:	f240 12df 	movw	r2, #479	; 0x1df
 800c108:	4943      	ldr	r1, [pc, #268]	; (800c218 <plug_holes+0x128>)
 800c10a:	4844      	ldr	r0, [pc, #272]	; (800c21c <plug_holes+0x12c>)
 800c10c:	f00a ffb6 	bl	801707c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c110:	4b43      	ldr	r3, [pc, #268]	; (800c220 <plug_holes+0x130>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	429a      	cmp	r2, r3
 800c118:	d306      	bcc.n	800c128 <plug_holes+0x38>
 800c11a:	4b3e      	ldr	r3, [pc, #248]	; (800c214 <plug_holes+0x124>)
 800c11c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c120:	4940      	ldr	r1, [pc, #256]	; (800c224 <plug_holes+0x134>)
 800c122:	483e      	ldr	r0, [pc, #248]	; (800c21c <plug_holes+0x12c>)
 800c124:	f00a ffaa 	bl	801707c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	791b      	ldrb	r3, [r3, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d006      	beq.n	800c13e <plug_holes+0x4e>
 800c130:	4b38      	ldr	r3, [pc, #224]	; (800c214 <plug_holes+0x124>)
 800c132:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c136:	493c      	ldr	r1, [pc, #240]	; (800c228 <plug_holes+0x138>)
 800c138:	4838      	ldr	r0, [pc, #224]	; (800c21c <plug_holes+0x12c>)
 800c13a:	f00a ff9f 	bl	801707c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	881b      	ldrh	r3, [r3, #0]
 800c142:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c146:	d906      	bls.n	800c156 <plug_holes+0x66>
 800c148:	4b32      	ldr	r3, [pc, #200]	; (800c214 <plug_holes+0x124>)
 800c14a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c14e:	4937      	ldr	r1, [pc, #220]	; (800c22c <plug_holes+0x13c>)
 800c150:	4832      	ldr	r0, [pc, #200]	; (800c21c <plug_holes+0x12c>)
 800c152:	f00a ff93 	bl	801707c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	881b      	ldrh	r3, [r3, #0]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7ff ffa4 	bl	800c0a8 <ptr_to_mem>
 800c160:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	429a      	cmp	r2, r3
 800c168:	d024      	beq.n	800c1b4 <plug_holes+0xc4>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	791b      	ldrb	r3, [r3, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d120      	bne.n	800c1b4 <plug_holes+0xc4>
 800c172:	4b2b      	ldr	r3, [pc, #172]	; (800c220 <plug_holes+0x130>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d01b      	beq.n	800c1b4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c17c:	4b2c      	ldr	r3, [pc, #176]	; (800c230 <plug_holes+0x140>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	429a      	cmp	r2, r3
 800c184:	d102      	bne.n	800c18c <plug_holes+0x9c>
      lfree = mem;
 800c186:	4a2a      	ldr	r2, [pc, #168]	; (800c230 <plug_holes+0x140>)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	881a      	ldrh	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	881b      	ldrh	r3, [r3, #0]
 800c198:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c19c:	d00a      	beq.n	800c1b4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	881b      	ldrh	r3, [r3, #0]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7ff ff80 	bl	800c0a8 <ptr_to_mem>
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7ff ff8e 	bl	800c0cc <mem_to_ptr>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	885b      	ldrh	r3, [r3, #2]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7ff ff75 	bl	800c0a8 <ptr_to_mem>
 800c1be:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d01f      	beq.n	800c208 <plug_holes+0x118>
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	791b      	ldrb	r3, [r3, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d11b      	bne.n	800c208 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c1d0:	4b17      	ldr	r3, [pc, #92]	; (800c230 <plug_holes+0x140>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d102      	bne.n	800c1e0 <plug_holes+0xf0>
      lfree = pmem;
 800c1da:	4a15      	ldr	r2, [pc, #84]	; (800c230 <plug_holes+0x140>)
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	881a      	ldrh	r2, [r3, #0]
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	881b      	ldrh	r3, [r3, #0]
 800c1ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1f0:	d00a      	beq.n	800c208 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	881b      	ldrh	r3, [r3, #0]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7ff ff56 	bl	800c0a8 <ptr_to_mem>
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	68b8      	ldr	r0, [r7, #8]
 800c200:	f7ff ff64 	bl	800c0cc <mem_to_ptr>
 800c204:	4603      	mov	r3, r0
 800c206:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c208:	bf00      	nop
 800c20a:	3714      	adds	r7, #20
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd90      	pop	{r4, r7, pc}
 800c210:	200060c4 	.word	0x200060c4
 800c214:	08017fe0 	.word	0x08017fe0
 800c218:	08018010 	.word	0x08018010
 800c21c:	08018028 	.word	0x08018028
 800c220:	200060c8 	.word	0x200060c8
 800c224:	08018050 	.word	0x08018050
 800c228:	0801806c 	.word	0x0801806c
 800c22c:	08018088 	.word	0x08018088
 800c230:	200060cc 	.word	0x200060cc

0800c234 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c23a:	4b18      	ldr	r3, [pc, #96]	; (800c29c <mem_init+0x68>)
 800c23c:	3303      	adds	r3, #3
 800c23e:	f023 0303 	bic.w	r3, r3, #3
 800c242:	461a      	mov	r2, r3
 800c244:	4b16      	ldr	r3, [pc, #88]	; (800c2a0 <mem_init+0x6c>)
 800c246:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c248:	4b15      	ldr	r3, [pc, #84]	; (800c2a0 <mem_init+0x6c>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c254:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c262:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c266:	f7ff ff1f 	bl	800c0a8 <ptr_to_mem>
 800c26a:	4603      	mov	r3, r0
 800c26c:	4a0d      	ldr	r2, [pc, #52]	; (800c2a4 <mem_init+0x70>)
 800c26e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c270:	4b0c      	ldr	r3, [pc, #48]	; (800c2a4 <mem_init+0x70>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2201      	movs	r2, #1
 800c276:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c278:	4b0a      	ldr	r3, [pc, #40]	; (800c2a4 <mem_init+0x70>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c280:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c282:	4b08      	ldr	r3, [pc, #32]	; (800c2a4 <mem_init+0x70>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c28a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c28c:	4b04      	ldr	r3, [pc, #16]	; (800c2a0 <mem_init+0x6c>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a05      	ldr	r2, [pc, #20]	; (800c2a8 <mem_init+0x74>)
 800c292:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c294:	bf00      	nop
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	20005a70 	.word	0x20005a70
 800c2a0:	200060c4 	.word	0x200060c4
 800c2a4:	200060c8 	.word	0x200060c8
 800c2a8:	200060cc 	.word	0x200060cc

0800c2ac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b086      	sub	sp, #24
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7ff ff09 	bl	800c0cc <mem_to_ptr>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	881b      	ldrh	r3, [r3, #0]
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7ff fef0 	bl	800c0a8 <ptr_to_mem>
 800c2c8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	885b      	ldrh	r3, [r3, #2]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7ff feea 	bl	800c0a8 <ptr_to_mem>
 800c2d4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2de:	d818      	bhi.n	800c312 <mem_link_valid+0x66>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	885b      	ldrh	r3, [r3, #2]
 800c2e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2e8:	d813      	bhi.n	800c312 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c2ee:	8afa      	ldrh	r2, [r7, #22]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d004      	beq.n	800c2fe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	8afa      	ldrh	r2, [r7, #22]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d109      	bne.n	800c312 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c2fe:	4b08      	ldr	r3, [pc, #32]	; (800c320 <mem_link_valid+0x74>)
 800c300:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c302:	693a      	ldr	r2, [r7, #16]
 800c304:	429a      	cmp	r2, r3
 800c306:	d006      	beq.n	800c316 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	885b      	ldrh	r3, [r3, #2]
 800c30c:	8afa      	ldrh	r2, [r7, #22]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d001      	beq.n	800c316 <mem_link_valid+0x6a>
    return 0;
 800c312:	2300      	movs	r3, #0
 800c314:	e000      	b.n	800c318 <mem_link_valid+0x6c>
  }
  return 1;
 800c316:	2301      	movs	r3, #1
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3718      	adds	r7, #24
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	200060c8 	.word	0x200060c8

0800c324 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d04c      	beq.n	800c3cc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f003 0303 	and.w	r3, r3, #3
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d007      	beq.n	800c34c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c33c:	4b25      	ldr	r3, [pc, #148]	; (800c3d4 <mem_free+0xb0>)
 800c33e:	f240 2273 	movw	r2, #627	; 0x273
 800c342:	4925      	ldr	r1, [pc, #148]	; (800c3d8 <mem_free+0xb4>)
 800c344:	4825      	ldr	r0, [pc, #148]	; (800c3dc <mem_free+0xb8>)
 800c346:	f00a fe99 	bl	801707c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c34a:	e040      	b.n	800c3ce <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3b08      	subs	r3, #8
 800c350:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c352:	4b23      	ldr	r3, [pc, #140]	; (800c3e0 <mem_free+0xbc>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d306      	bcc.n	800c36a <mem_free+0x46>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f103 020c 	add.w	r2, r3, #12
 800c362:	4b20      	ldr	r3, [pc, #128]	; (800c3e4 <mem_free+0xc0>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	429a      	cmp	r2, r3
 800c368:	d907      	bls.n	800c37a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c36a:	4b1a      	ldr	r3, [pc, #104]	; (800c3d4 <mem_free+0xb0>)
 800c36c:	f240 227f 	movw	r2, #639	; 0x27f
 800c370:	491d      	ldr	r1, [pc, #116]	; (800c3e8 <mem_free+0xc4>)
 800c372:	481a      	ldr	r0, [pc, #104]	; (800c3dc <mem_free+0xb8>)
 800c374:	f00a fe82 	bl	801707c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c378:	e029      	b.n	800c3ce <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	791b      	ldrb	r3, [r3, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d107      	bne.n	800c392 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c382:	4b14      	ldr	r3, [pc, #80]	; (800c3d4 <mem_free+0xb0>)
 800c384:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c388:	4918      	ldr	r1, [pc, #96]	; (800c3ec <mem_free+0xc8>)
 800c38a:	4814      	ldr	r0, [pc, #80]	; (800c3dc <mem_free+0xb8>)
 800c38c:	f00a fe76 	bl	801707c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c390:	e01d      	b.n	800c3ce <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f7ff ff8a 	bl	800c2ac <mem_link_valid>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d107      	bne.n	800c3ae <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c39e:	4b0d      	ldr	r3, [pc, #52]	; (800c3d4 <mem_free+0xb0>)
 800c3a0:	f240 2295 	movw	r2, #661	; 0x295
 800c3a4:	4912      	ldr	r1, [pc, #72]	; (800c3f0 <mem_free+0xcc>)
 800c3a6:	480d      	ldr	r0, [pc, #52]	; (800c3dc <mem_free+0xb8>)
 800c3a8:	f00a fe68 	bl	801707c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c3ac:	e00f      	b.n	800c3ce <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c3b4:	4b0f      	ldr	r3, [pc, #60]	; (800c3f4 <mem_free+0xd0>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d202      	bcs.n	800c3c4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c3be:	4a0d      	ldr	r2, [pc, #52]	; (800c3f4 <mem_free+0xd0>)
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f7ff fe93 	bl	800c0f0 <plug_holes>
 800c3ca:	e000      	b.n	800c3ce <mem_free+0xaa>
    return;
 800c3cc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	08017fe0 	.word	0x08017fe0
 800c3d8:	080180b4 	.word	0x080180b4
 800c3dc:	08018028 	.word	0x08018028
 800c3e0:	200060c4 	.word	0x200060c4
 800c3e4:	200060c8 	.word	0x200060c8
 800c3e8:	080180d8 	.word	0x080180d8
 800c3ec:	080180f4 	.word	0x080180f4
 800c3f0:	0801811c 	.word	0x0801811c
 800c3f4:	200060cc 	.word	0x200060cc

0800c3f8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b088      	sub	sp, #32
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	460b      	mov	r3, r1
 800c402:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c404:	887b      	ldrh	r3, [r7, #2]
 800c406:	3303      	adds	r3, #3
 800c408:	b29b      	uxth	r3, r3
 800c40a:	f023 0303 	bic.w	r3, r3, #3
 800c40e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c410:	8bfb      	ldrh	r3, [r7, #30]
 800c412:	2b0b      	cmp	r3, #11
 800c414:	d801      	bhi.n	800c41a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c416:	230c      	movs	r3, #12
 800c418:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c41a:	8bfb      	ldrh	r3, [r7, #30]
 800c41c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c420:	d803      	bhi.n	800c42a <mem_trim+0x32>
 800c422:	8bfa      	ldrh	r2, [r7, #30]
 800c424:	887b      	ldrh	r3, [r7, #2]
 800c426:	429a      	cmp	r2, r3
 800c428:	d201      	bcs.n	800c42e <mem_trim+0x36>
    return NULL;
 800c42a:	2300      	movs	r3, #0
 800c42c:	e0cc      	b.n	800c5c8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c42e:	4b68      	ldr	r3, [pc, #416]	; (800c5d0 <mem_trim+0x1d8>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	429a      	cmp	r2, r3
 800c436:	d304      	bcc.n	800c442 <mem_trim+0x4a>
 800c438:	4b66      	ldr	r3, [pc, #408]	; (800c5d4 <mem_trim+0x1dc>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d306      	bcc.n	800c450 <mem_trim+0x58>
 800c442:	4b65      	ldr	r3, [pc, #404]	; (800c5d8 <mem_trim+0x1e0>)
 800c444:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c448:	4964      	ldr	r1, [pc, #400]	; (800c5dc <mem_trim+0x1e4>)
 800c44a:	4865      	ldr	r0, [pc, #404]	; (800c5e0 <mem_trim+0x1e8>)
 800c44c:	f00a fe16 	bl	801707c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c450:	4b5f      	ldr	r3, [pc, #380]	; (800c5d0 <mem_trim+0x1d8>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	429a      	cmp	r2, r3
 800c458:	d304      	bcc.n	800c464 <mem_trim+0x6c>
 800c45a:	4b5e      	ldr	r3, [pc, #376]	; (800c5d4 <mem_trim+0x1dc>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	429a      	cmp	r2, r3
 800c462:	d301      	bcc.n	800c468 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	e0af      	b.n	800c5c8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	3b08      	subs	r3, #8
 800c46c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c46e:	69b8      	ldr	r0, [r7, #24]
 800c470:	f7ff fe2c 	bl	800c0cc <mem_to_ptr>
 800c474:	4603      	mov	r3, r0
 800c476:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	881a      	ldrh	r2, [r3, #0]
 800c47c:	8afb      	ldrh	r3, [r7, #22]
 800c47e:	1ad3      	subs	r3, r2, r3
 800c480:	b29b      	uxth	r3, r3
 800c482:	3b08      	subs	r3, #8
 800c484:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c486:	8bfa      	ldrh	r2, [r7, #30]
 800c488:	8abb      	ldrh	r3, [r7, #20]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d906      	bls.n	800c49c <mem_trim+0xa4>
 800c48e:	4b52      	ldr	r3, [pc, #328]	; (800c5d8 <mem_trim+0x1e0>)
 800c490:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c494:	4953      	ldr	r1, [pc, #332]	; (800c5e4 <mem_trim+0x1ec>)
 800c496:	4852      	ldr	r0, [pc, #328]	; (800c5e0 <mem_trim+0x1e8>)
 800c498:	f00a fdf0 	bl	801707c <iprintf>
  if (newsize > size) {
 800c49c:	8bfa      	ldrh	r2, [r7, #30]
 800c49e:	8abb      	ldrh	r3, [r7, #20]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d901      	bls.n	800c4a8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	e08f      	b.n	800c5c8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c4a8:	8bfa      	ldrh	r2, [r7, #30]
 800c4aa:	8abb      	ldrh	r3, [r7, #20]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d101      	bne.n	800c4b4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	e089      	b.n	800c5c8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	881b      	ldrh	r3, [r3, #0]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7ff fdf5 	bl	800c0a8 <ptr_to_mem>
 800c4be:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	791b      	ldrb	r3, [r3, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d13f      	bne.n	800c548 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	881b      	ldrh	r3, [r3, #0]
 800c4cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4d0:	d106      	bne.n	800c4e0 <mem_trim+0xe8>
 800c4d2:	4b41      	ldr	r3, [pc, #260]	; (800c5d8 <mem_trim+0x1e0>)
 800c4d4:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c4d8:	4943      	ldr	r1, [pc, #268]	; (800c5e8 <mem_trim+0x1f0>)
 800c4da:	4841      	ldr	r0, [pc, #260]	; (800c5e0 <mem_trim+0x1e8>)
 800c4dc:	f00a fdce 	bl	801707c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	881b      	ldrh	r3, [r3, #0]
 800c4e4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c4e6:	8afa      	ldrh	r2, [r7, #22]
 800c4e8:	8bfb      	ldrh	r3, [r7, #30]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	3308      	adds	r3, #8
 800c4f0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c4f2:	4b3e      	ldr	r3, [pc, #248]	; (800c5ec <mem_trim+0x1f4>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	693a      	ldr	r2, [r7, #16]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d106      	bne.n	800c50a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c4fc:	89fb      	ldrh	r3, [r7, #14]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7ff fdd2 	bl	800c0a8 <ptr_to_mem>
 800c504:	4603      	mov	r3, r0
 800c506:	4a39      	ldr	r2, [pc, #228]	; (800c5ec <mem_trim+0x1f4>)
 800c508:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c50a:	89fb      	ldrh	r3, [r7, #14]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7ff fdcb 	bl	800c0a8 <ptr_to_mem>
 800c512:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	2200      	movs	r2, #0
 800c518:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	89ba      	ldrh	r2, [r7, #12]
 800c51e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	8afa      	ldrh	r2, [r7, #22]
 800c524:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	89fa      	ldrh	r2, [r7, #14]
 800c52a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	881b      	ldrh	r3, [r3, #0]
 800c530:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c534:	d047      	beq.n	800c5c6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	881b      	ldrh	r3, [r3, #0]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7ff fdb4 	bl	800c0a8 <ptr_to_mem>
 800c540:	4602      	mov	r2, r0
 800c542:	89fb      	ldrh	r3, [r7, #14]
 800c544:	8053      	strh	r3, [r2, #2]
 800c546:	e03e      	b.n	800c5c6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c548:	8bfb      	ldrh	r3, [r7, #30]
 800c54a:	f103 0214 	add.w	r2, r3, #20
 800c54e:	8abb      	ldrh	r3, [r7, #20]
 800c550:	429a      	cmp	r2, r3
 800c552:	d838      	bhi.n	800c5c6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c554:	8afa      	ldrh	r2, [r7, #22]
 800c556:	8bfb      	ldrh	r3, [r7, #30]
 800c558:	4413      	add	r3, r2
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	3308      	adds	r3, #8
 800c55e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	881b      	ldrh	r3, [r3, #0]
 800c564:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c568:	d106      	bne.n	800c578 <mem_trim+0x180>
 800c56a:	4b1b      	ldr	r3, [pc, #108]	; (800c5d8 <mem_trim+0x1e0>)
 800c56c:	f240 3216 	movw	r2, #790	; 0x316
 800c570:	491d      	ldr	r1, [pc, #116]	; (800c5e8 <mem_trim+0x1f0>)
 800c572:	481b      	ldr	r0, [pc, #108]	; (800c5e0 <mem_trim+0x1e8>)
 800c574:	f00a fd82 	bl	801707c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c578:	89fb      	ldrh	r3, [r7, #14]
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7ff fd94 	bl	800c0a8 <ptr_to_mem>
 800c580:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c582:	4b1a      	ldr	r3, [pc, #104]	; (800c5ec <mem_trim+0x1f4>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d202      	bcs.n	800c592 <mem_trim+0x19a>
      lfree = mem2;
 800c58c:	4a17      	ldr	r2, [pc, #92]	; (800c5ec <mem_trim+0x1f4>)
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2200      	movs	r2, #0
 800c596:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	881a      	ldrh	r2, [r3, #0]
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	8afa      	ldrh	r2, [r7, #22]
 800c5a4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	89fa      	ldrh	r2, [r7, #14]
 800c5aa:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	881b      	ldrh	r3, [r3, #0]
 800c5b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5b4:	d007      	beq.n	800c5c6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	881b      	ldrh	r3, [r3, #0]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7ff fd74 	bl	800c0a8 <ptr_to_mem>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	89fb      	ldrh	r3, [r7, #14]
 800c5c4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c5c6:	687b      	ldr	r3, [r7, #4]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3720      	adds	r7, #32
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	200060c4 	.word	0x200060c4
 800c5d4:	200060c8 	.word	0x200060c8
 800c5d8:	08017fe0 	.word	0x08017fe0
 800c5dc:	08018150 	.word	0x08018150
 800c5e0:	08018028 	.word	0x08018028
 800c5e4:	08018168 	.word	0x08018168
 800c5e8:	08018188 	.word	0x08018188
 800c5ec:	200060cc 	.word	0x200060cc

0800c5f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b088      	sub	sp, #32
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c5fa:	88fb      	ldrh	r3, [r7, #6]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <mem_malloc+0x14>
    return NULL;
 800c600:	2300      	movs	r3, #0
 800c602:	e0d9      	b.n	800c7b8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c604:	88fb      	ldrh	r3, [r7, #6]
 800c606:	3303      	adds	r3, #3
 800c608:	b29b      	uxth	r3, r3
 800c60a:	f023 0303 	bic.w	r3, r3, #3
 800c60e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c610:	8bbb      	ldrh	r3, [r7, #28]
 800c612:	2b0b      	cmp	r3, #11
 800c614:	d801      	bhi.n	800c61a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c616:	230c      	movs	r3, #12
 800c618:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c61a:	8bbb      	ldrh	r3, [r7, #28]
 800c61c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c620:	d803      	bhi.n	800c62a <mem_malloc+0x3a>
 800c622:	8bba      	ldrh	r2, [r7, #28]
 800c624:	88fb      	ldrh	r3, [r7, #6]
 800c626:	429a      	cmp	r2, r3
 800c628:	d201      	bcs.n	800c62e <mem_malloc+0x3e>
    return NULL;
 800c62a:	2300      	movs	r3, #0
 800c62c:	e0c4      	b.n	800c7b8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c62e:	4b64      	ldr	r3, [pc, #400]	; (800c7c0 <mem_malloc+0x1d0>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4618      	mov	r0, r3
 800c634:	f7ff fd4a 	bl	800c0cc <mem_to_ptr>
 800c638:	4603      	mov	r3, r0
 800c63a:	83fb      	strh	r3, [r7, #30]
 800c63c:	e0b4      	b.n	800c7a8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c63e:	8bfb      	ldrh	r3, [r7, #30]
 800c640:	4618      	mov	r0, r3
 800c642:	f7ff fd31 	bl	800c0a8 <ptr_to_mem>
 800c646:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	791b      	ldrb	r3, [r3, #4]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	f040 80a4 	bne.w	800c79a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	8bfb      	ldrh	r3, [r7, #30]
 800c65a:	1ad3      	subs	r3, r2, r3
 800c65c:	f1a3 0208 	sub.w	r2, r3, #8
 800c660:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c662:	429a      	cmp	r2, r3
 800c664:	f0c0 8099 	bcc.w	800c79a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	461a      	mov	r2, r3
 800c66e:	8bfb      	ldrh	r3, [r7, #30]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	f1a3 0208 	sub.w	r2, r3, #8
 800c676:	8bbb      	ldrh	r3, [r7, #28]
 800c678:	3314      	adds	r3, #20
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d333      	bcc.n	800c6e6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c67e:	8bfa      	ldrh	r2, [r7, #30]
 800c680:	8bbb      	ldrh	r3, [r7, #28]
 800c682:	4413      	add	r3, r2
 800c684:	b29b      	uxth	r3, r3
 800c686:	3308      	adds	r3, #8
 800c688:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c68a:	8a7b      	ldrh	r3, [r7, #18]
 800c68c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c690:	d106      	bne.n	800c6a0 <mem_malloc+0xb0>
 800c692:	4b4c      	ldr	r3, [pc, #304]	; (800c7c4 <mem_malloc+0x1d4>)
 800c694:	f240 3287 	movw	r2, #903	; 0x387
 800c698:	494b      	ldr	r1, [pc, #300]	; (800c7c8 <mem_malloc+0x1d8>)
 800c69a:	484c      	ldr	r0, [pc, #304]	; (800c7cc <mem_malloc+0x1dc>)
 800c69c:	f00a fcee 	bl	801707c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c6a0:	8a7b      	ldrh	r3, [r7, #18]
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7ff fd00 	bl	800c0a8 <ptr_to_mem>
 800c6a8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	881a      	ldrh	r2, [r3, #0]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	8bfa      	ldrh	r2, [r7, #30]
 800c6bc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	8a7a      	ldrh	r2, [r7, #18]
 800c6c2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c6d2:	d00b      	beq.n	800c6ec <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	881b      	ldrh	r3, [r3, #0]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7ff fce5 	bl	800c0a8 <ptr_to_mem>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	8a7b      	ldrh	r3, [r7, #18]
 800c6e2:	8053      	strh	r3, [r2, #2]
 800c6e4:	e002      	b.n	800c6ec <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c6ec:	4b34      	ldr	r3, [pc, #208]	; (800c7c0 <mem_malloc+0x1d0>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	697a      	ldr	r2, [r7, #20]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d127      	bne.n	800c746 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c6f6:	4b32      	ldr	r3, [pc, #200]	; (800c7c0 <mem_malloc+0x1d0>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c6fc:	e005      	b.n	800c70a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	881b      	ldrh	r3, [r3, #0]
 800c702:	4618      	mov	r0, r3
 800c704:	f7ff fcd0 	bl	800c0a8 <ptr_to_mem>
 800c708:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	791b      	ldrb	r3, [r3, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d004      	beq.n	800c71c <mem_malloc+0x12c>
 800c712:	4b2f      	ldr	r3, [pc, #188]	; (800c7d0 <mem_malloc+0x1e0>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	69ba      	ldr	r2, [r7, #24]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d1f0      	bne.n	800c6fe <mem_malloc+0x10e>
          }
          lfree = cur;
 800c71c:	4a28      	ldr	r2, [pc, #160]	; (800c7c0 <mem_malloc+0x1d0>)
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c722:	4b27      	ldr	r3, [pc, #156]	; (800c7c0 <mem_malloc+0x1d0>)
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	4b2a      	ldr	r3, [pc, #168]	; (800c7d0 <mem_malloc+0x1e0>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d00b      	beq.n	800c746 <mem_malloc+0x156>
 800c72e:	4b24      	ldr	r3, [pc, #144]	; (800c7c0 <mem_malloc+0x1d0>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	791b      	ldrb	r3, [r3, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d006      	beq.n	800c746 <mem_malloc+0x156>
 800c738:	4b22      	ldr	r3, [pc, #136]	; (800c7c4 <mem_malloc+0x1d4>)
 800c73a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c73e:	4925      	ldr	r1, [pc, #148]	; (800c7d4 <mem_malloc+0x1e4>)
 800c740:	4822      	ldr	r0, [pc, #136]	; (800c7cc <mem_malloc+0x1dc>)
 800c742:	f00a fc9b 	bl	801707c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c746:	8bba      	ldrh	r2, [r7, #28]
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	4413      	add	r3, r2
 800c74c:	3308      	adds	r3, #8
 800c74e:	4a20      	ldr	r2, [pc, #128]	; (800c7d0 <mem_malloc+0x1e0>)
 800c750:	6812      	ldr	r2, [r2, #0]
 800c752:	4293      	cmp	r3, r2
 800c754:	d906      	bls.n	800c764 <mem_malloc+0x174>
 800c756:	4b1b      	ldr	r3, [pc, #108]	; (800c7c4 <mem_malloc+0x1d4>)
 800c758:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c75c:	491e      	ldr	r1, [pc, #120]	; (800c7d8 <mem_malloc+0x1e8>)
 800c75e:	481b      	ldr	r0, [pc, #108]	; (800c7cc <mem_malloc+0x1dc>)
 800c760:	f00a fc8c 	bl	801707c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	f003 0303 	and.w	r3, r3, #3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d006      	beq.n	800c77c <mem_malloc+0x18c>
 800c76e:	4b15      	ldr	r3, [pc, #84]	; (800c7c4 <mem_malloc+0x1d4>)
 800c770:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c774:	4919      	ldr	r1, [pc, #100]	; (800c7dc <mem_malloc+0x1ec>)
 800c776:	4815      	ldr	r0, [pc, #84]	; (800c7cc <mem_malloc+0x1dc>)
 800c778:	f00a fc80 	bl	801707c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	f003 0303 	and.w	r3, r3, #3
 800c782:	2b00      	cmp	r3, #0
 800c784:	d006      	beq.n	800c794 <mem_malloc+0x1a4>
 800c786:	4b0f      	ldr	r3, [pc, #60]	; (800c7c4 <mem_malloc+0x1d4>)
 800c788:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c78c:	4914      	ldr	r1, [pc, #80]	; (800c7e0 <mem_malloc+0x1f0>)
 800c78e:	480f      	ldr	r0, [pc, #60]	; (800c7cc <mem_malloc+0x1dc>)
 800c790:	f00a fc74 	bl	801707c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	3308      	adds	r3, #8
 800c798:	e00e      	b.n	800c7b8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800c79a:	8bfb      	ldrh	r3, [r7, #30]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7ff fc83 	bl	800c0a8 <ptr_to_mem>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c7a8:	8bfa      	ldrh	r2, [r7, #30]
 800c7aa:	8bbb      	ldrh	r3, [r7, #28]
 800c7ac:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	f4ff af44 	bcc.w	800c63e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3720      	adds	r7, #32
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	200060cc 	.word	0x200060cc
 800c7c4:	08017fe0 	.word	0x08017fe0
 800c7c8:	08018188 	.word	0x08018188
 800c7cc:	08018028 	.word	0x08018028
 800c7d0:	200060c8 	.word	0x200060c8
 800c7d4:	0801819c 	.word	0x0801819c
 800c7d8:	080181b8 	.word	0x080181b8
 800c7dc:	080181e8 	.word	0x080181e8
 800c7e0:	08018218 	.word	0x08018218

0800c7e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	3303      	adds	r3, #3
 800c7fa:	f023 0303 	bic.w	r3, r3, #3
 800c7fe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c800:	2300      	movs	r3, #0
 800c802:	60fb      	str	r3, [r7, #12]
 800c804:	e011      	b.n	800c82a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	461a      	mov	r2, r3
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	4413      	add	r3, r2
 800c822:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	3301      	adds	r3, #1
 800c828:	60fb      	str	r3, [r7, #12]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	885b      	ldrh	r3, [r3, #2]
 800c82e:	461a      	mov	r2, r3
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	4293      	cmp	r3, r2
 800c834:	dbe7      	blt.n	800c806 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c836:	bf00      	nop
 800c838:	bf00      	nop
 800c83a:	3714      	adds	r7, #20
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c84a:	2300      	movs	r3, #0
 800c84c:	80fb      	strh	r3, [r7, #6]
 800c84e:	e009      	b.n	800c864 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c850:	88fb      	ldrh	r3, [r7, #6]
 800c852:	4a08      	ldr	r2, [pc, #32]	; (800c874 <memp_init+0x30>)
 800c854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c858:	4618      	mov	r0, r3
 800c85a:	f7ff ffc3 	bl	800c7e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c85e:	88fb      	ldrh	r3, [r7, #6]
 800c860:	3301      	adds	r3, #1
 800c862:	80fb      	strh	r3, [r7, #6]
 800c864:	88fb      	ldrh	r3, [r7, #6]
 800c866:	2b08      	cmp	r3, #8
 800c868:	d9f2      	bls.n	800c850 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c86a:	bf00      	nop
 800c86c:	bf00      	nop
 800c86e:	3708      	adds	r7, #8
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	0801aa04 	.word	0x0801aa04

0800c878 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d012      	beq.n	800c8b4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	6812      	ldr	r2, [r2, #0]
 800c896:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f003 0303 	and.w	r3, r3, #3
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d006      	beq.n	800c8b0 <do_memp_malloc_pool+0x38>
 800c8a2:	4b07      	ldr	r3, [pc, #28]	; (800c8c0 <do_memp_malloc_pool+0x48>)
 800c8a4:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c8a8:	4906      	ldr	r1, [pc, #24]	; (800c8c4 <do_memp_malloc_pool+0x4c>)
 800c8aa:	4807      	ldr	r0, [pc, #28]	; (800c8c8 <do_memp_malloc_pool+0x50>)
 800c8ac:	f00a fbe6 	bl	801707c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	e000      	b.n	800c8b6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	0801823c 	.word	0x0801823c
 800c8c4:	0801826c 	.word	0x0801826c
 800c8c8:	08018290 	.word	0x08018290

0800c8cc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <memp_malloc_pool+0x1c>
 800c8da:	4b0a      	ldr	r3, [pc, #40]	; (800c904 <memp_malloc_pool+0x38>)
 800c8dc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c8e0:	4909      	ldr	r1, [pc, #36]	; (800c908 <memp_malloc_pool+0x3c>)
 800c8e2:	480a      	ldr	r0, [pc, #40]	; (800c90c <memp_malloc_pool+0x40>)
 800c8e4:	f00a fbca 	bl	801707c <iprintf>
  if (desc == NULL) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d101      	bne.n	800c8f2 <memp_malloc_pool+0x26>
    return NULL;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e003      	b.n	800c8fa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7ff ffc0 	bl	800c878 <do_memp_malloc_pool>
 800c8f8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	0801823c 	.word	0x0801823c
 800c908:	080182b8 	.word	0x080182b8
 800c90c:	08018290 	.word	0x08018290

0800c910 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	4603      	mov	r3, r0
 800c918:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c91a:	79fb      	ldrb	r3, [r7, #7]
 800c91c:	2b08      	cmp	r3, #8
 800c91e:	d908      	bls.n	800c932 <memp_malloc+0x22>
 800c920:	4b0a      	ldr	r3, [pc, #40]	; (800c94c <memp_malloc+0x3c>)
 800c922:	f240 1257 	movw	r2, #343	; 0x157
 800c926:	490a      	ldr	r1, [pc, #40]	; (800c950 <memp_malloc+0x40>)
 800c928:	480a      	ldr	r0, [pc, #40]	; (800c954 <memp_malloc+0x44>)
 800c92a:	f00a fba7 	bl	801707c <iprintf>
 800c92e:	2300      	movs	r3, #0
 800c930:	e008      	b.n	800c944 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c932:	79fb      	ldrb	r3, [r7, #7]
 800c934:	4a08      	ldr	r2, [pc, #32]	; (800c958 <memp_malloc+0x48>)
 800c936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7ff ff9c 	bl	800c878 <do_memp_malloc_pool>
 800c940:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c942:	68fb      	ldr	r3, [r7, #12]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	0801823c 	.word	0x0801823c
 800c950:	080182cc 	.word	0x080182cc
 800c954:	08018290 	.word	0x08018290
 800c958:	0801aa04 	.word	0x0801aa04

0800c95c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	f003 0303 	and.w	r3, r3, #3
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d006      	beq.n	800c97e <do_memp_free_pool+0x22>
 800c970:	4b0a      	ldr	r3, [pc, #40]	; (800c99c <do_memp_free_pool+0x40>)
 800c972:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c976:	490a      	ldr	r1, [pc, #40]	; (800c9a0 <do_memp_free_pool+0x44>)
 800c978:	480a      	ldr	r0, [pc, #40]	; (800c9a4 <do_memp_free_pool+0x48>)
 800c97a:	f00a fb7f 	bl	801707c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c994:	bf00      	nop
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	0801823c 	.word	0x0801823c
 800c9a0:	080182ec 	.word	0x080182ec
 800c9a4:	08018290 	.word	0x08018290

0800c9a8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d106      	bne.n	800c9c6 <memp_free_pool+0x1e>
 800c9b8:	4b0a      	ldr	r3, [pc, #40]	; (800c9e4 <memp_free_pool+0x3c>)
 800c9ba:	f240 1295 	movw	r2, #405	; 0x195
 800c9be:	490a      	ldr	r1, [pc, #40]	; (800c9e8 <memp_free_pool+0x40>)
 800c9c0:	480a      	ldr	r0, [pc, #40]	; (800c9ec <memp_free_pool+0x44>)
 800c9c2:	f00a fb5b 	bl	801707c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d007      	beq.n	800c9dc <memp_free_pool+0x34>
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d004      	beq.n	800c9dc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c9d2:	6839      	ldr	r1, [r7, #0]
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7ff ffc1 	bl	800c95c <do_memp_free_pool>
 800c9da:	e000      	b.n	800c9de <memp_free_pool+0x36>
    return;
 800c9dc:	bf00      	nop
}
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	0801823c 	.word	0x0801823c
 800c9e8:	080182b8 	.word	0x080182b8
 800c9ec:	08018290 	.word	0x08018290

0800c9f0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	6039      	str	r1, [r7, #0]
 800c9fa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c9fc:	79fb      	ldrb	r3, [r7, #7]
 800c9fe:	2b08      	cmp	r3, #8
 800ca00:	d907      	bls.n	800ca12 <memp_free+0x22>
 800ca02:	4b0c      	ldr	r3, [pc, #48]	; (800ca34 <memp_free+0x44>)
 800ca04:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ca08:	490b      	ldr	r1, [pc, #44]	; (800ca38 <memp_free+0x48>)
 800ca0a:	480c      	ldr	r0, [pc, #48]	; (800ca3c <memp_free+0x4c>)
 800ca0c:	f00a fb36 	bl	801707c <iprintf>
 800ca10:	e00c      	b.n	800ca2c <memp_free+0x3c>

  if (mem == NULL) {
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d008      	beq.n	800ca2a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ca18:	79fb      	ldrb	r3, [r7, #7]
 800ca1a:	4a09      	ldr	r2, [pc, #36]	; (800ca40 <memp_free+0x50>)
 800ca1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca20:	6839      	ldr	r1, [r7, #0]
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7ff ff9a 	bl	800c95c <do_memp_free_pool>
 800ca28:	e000      	b.n	800ca2c <memp_free+0x3c>
    return;
 800ca2a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ca2c:	3708      	adds	r7, #8
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	0801823c 	.word	0x0801823c
 800ca38:	0801830c 	.word	0x0801830c
 800ca3c:	08018290 	.word	0x08018290
 800ca40:	0801aa04 	.word	0x0801aa04

0800ca44 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ca44:	b480      	push	{r7}
 800ca46:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ca48:	bf00      	nop
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
	...

0800ca54 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b086      	sub	sp, #24
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
 800ca60:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d108      	bne.n	800ca7a <netif_add+0x26>
 800ca68:	4b57      	ldr	r3, [pc, #348]	; (800cbc8 <netif_add+0x174>)
 800ca6a:	f240 1227 	movw	r2, #295	; 0x127
 800ca6e:	4957      	ldr	r1, [pc, #348]	; (800cbcc <netif_add+0x178>)
 800ca70:	4857      	ldr	r0, [pc, #348]	; (800cbd0 <netif_add+0x17c>)
 800ca72:	f00a fb03 	bl	801707c <iprintf>
 800ca76:	2300      	movs	r3, #0
 800ca78:	e0a2      	b.n	800cbc0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d108      	bne.n	800ca92 <netif_add+0x3e>
 800ca80:	4b51      	ldr	r3, [pc, #324]	; (800cbc8 <netif_add+0x174>)
 800ca82:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ca86:	4953      	ldr	r1, [pc, #332]	; (800cbd4 <netif_add+0x180>)
 800ca88:	4851      	ldr	r0, [pc, #324]	; (800cbd0 <netif_add+0x17c>)
 800ca8a:	f00a faf7 	bl	801707c <iprintf>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	e096      	b.n	800cbc0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d101      	bne.n	800ca9c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ca98:	4b4f      	ldr	r3, [pc, #316]	; (800cbd8 <netif_add+0x184>)
 800ca9a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d101      	bne.n	800caa6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800caa2:	4b4d      	ldr	r3, [pc, #308]	; (800cbd8 <netif_add+0x184>)
 800caa4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d101      	bne.n	800cab0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800caac:	4b4a      	ldr	r3, [pc, #296]	; (800cbd8 <netif_add+0x184>)
 800caae:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2200      	movs	r2, #0
 800cab4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2200      	movs	r2, #0
 800caba:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2200      	movs	r2, #0
 800cac0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	4a45      	ldr	r2, [pc, #276]	; (800cbdc <netif_add+0x188>)
 800cac6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2200      	movs	r2, #0
 800cacc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2200      	movs	r2, #0
 800cada:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6a3a      	ldr	r2, [r7, #32]
 800cae0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cae2:	4b3f      	ldr	r3, [pc, #252]	; (800cbe0 <netif_add+0x18c>)
 800cae4:	781a      	ldrb	r2, [r3, #0]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caf0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	68b9      	ldr	r1, [r7, #8]
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f000 f913 	bl	800cd24 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb00:	68f8      	ldr	r0, [r7, #12]
 800cb02:	4798      	blx	r3
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <netif_add+0xba>
    return NULL;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e058      	b.n	800cbc0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb14:	2bff      	cmp	r3, #255	; 0xff
 800cb16:	d103      	bne.n	800cb20 <netif_add+0xcc>
        netif->num = 0;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800cb20:	2300      	movs	r3, #0
 800cb22:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cb24:	4b2f      	ldr	r3, [pc, #188]	; (800cbe4 <netif_add+0x190>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	617b      	str	r3, [r7, #20]
 800cb2a:	e02b      	b.n	800cb84 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cb2c:	697a      	ldr	r2, [r7, #20]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d106      	bne.n	800cb42 <netif_add+0xee>
 800cb34:	4b24      	ldr	r3, [pc, #144]	; (800cbc8 <netif_add+0x174>)
 800cb36:	f240 128b 	movw	r2, #395	; 0x18b
 800cb3a:	492b      	ldr	r1, [pc, #172]	; (800cbe8 <netif_add+0x194>)
 800cb3c:	4824      	ldr	r0, [pc, #144]	; (800cbd0 <netif_add+0x17c>)
 800cb3e:	f00a fa9d 	bl	801707c <iprintf>
        num_netifs++;
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	3301      	adds	r3, #1
 800cb46:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	2bff      	cmp	r3, #255	; 0xff
 800cb4c:	dd06      	ble.n	800cb5c <netif_add+0x108>
 800cb4e:	4b1e      	ldr	r3, [pc, #120]	; (800cbc8 <netif_add+0x174>)
 800cb50:	f240 128d 	movw	r2, #397	; 0x18d
 800cb54:	4925      	ldr	r1, [pc, #148]	; (800cbec <netif_add+0x198>)
 800cb56:	481e      	ldr	r0, [pc, #120]	; (800cbd0 <netif_add+0x17c>)
 800cb58:	f00a fa90 	bl	801707c <iprintf>
        if (netif2->num == netif->num) {
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d108      	bne.n	800cb7e <netif_add+0x12a>
          netif->num++;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb72:	3301      	adds	r3, #1
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800cb7c:	e005      	b.n	800cb8a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	617b      	str	r3, [r7, #20]
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d1d0      	bne.n	800cb2c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1be      	bne.n	800cb0e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb96:	2bfe      	cmp	r3, #254	; 0xfe
 800cb98:	d103      	bne.n	800cba2 <netif_add+0x14e>
    netif_num = 0;
 800cb9a:	4b11      	ldr	r3, [pc, #68]	; (800cbe0 <netif_add+0x18c>)
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	701a      	strb	r2, [r3, #0]
 800cba0:	e006      	b.n	800cbb0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cba8:	3301      	adds	r3, #1
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	4b0c      	ldr	r3, [pc, #48]	; (800cbe0 <netif_add+0x18c>)
 800cbae:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cbb0:	4b0c      	ldr	r3, [pc, #48]	; (800cbe4 <netif_add+0x190>)
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cbb8:	4a0a      	ldr	r2, [pc, #40]	; (800cbe4 <netif_add+0x190>)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3718      	adds	r7, #24
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	08018328 	.word	0x08018328
 800cbcc:	080183bc 	.word	0x080183bc
 800cbd0:	08018378 	.word	0x08018378
 800cbd4:	080183d8 	.word	0x080183d8
 800cbd8:	0801aa68 	.word	0x0801aa68
 800cbdc:	0800cfff 	.word	0x0800cfff
 800cbe0:	20008fc4 	.word	0x20008fc4
 800cbe4:	20008fbc 	.word	0x20008fbc
 800cbe8:	080183fc 	.word	0x080183fc
 800cbec:	08018410 	.word	0x08018410

0800cbf0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f002 fbe5 	bl	800f3cc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cc02:	6839      	ldr	r1, [r7, #0]
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f007 f883 	bl	8013d10 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cc0a:	bf00      	nop
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
	...

0800cc14 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d106      	bne.n	800cc34 <netif_do_set_ipaddr+0x20>
 800cc26:	4b1d      	ldr	r3, [pc, #116]	; (800cc9c <netif_do_set_ipaddr+0x88>)
 800cc28:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cc2c:	491c      	ldr	r1, [pc, #112]	; (800cca0 <netif_do_set_ipaddr+0x8c>)
 800cc2e:	481d      	ldr	r0, [pc, #116]	; (800cca4 <netif_do_set_ipaddr+0x90>)
 800cc30:	f00a fa24 	bl	801707c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d106      	bne.n	800cc48 <netif_do_set_ipaddr+0x34>
 800cc3a:	4b18      	ldr	r3, [pc, #96]	; (800cc9c <netif_do_set_ipaddr+0x88>)
 800cc3c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cc40:	4917      	ldr	r1, [pc, #92]	; (800cca0 <netif_do_set_ipaddr+0x8c>)
 800cc42:	4818      	ldr	r0, [pc, #96]	; (800cca4 <netif_do_set_ipaddr+0x90>)
 800cc44:	f00a fa1a 	bl	801707c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	3304      	adds	r3, #4
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d01c      	beq.n	800cc90 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	3304      	adds	r3, #4
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cc66:	f107 0314 	add.w	r3, r7, #20
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f7ff ffbf 	bl	800cbf0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d002      	beq.n	800cc7e <netif_do_set_ipaddr+0x6a>
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	e000      	b.n	800cc80 <netif_do_set_ipaddr+0x6c>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cc84:	2101      	movs	r1, #1
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f000 f8d2 	bl	800ce30 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e000      	b.n	800cc92 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3718      	adds	r7, #24
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	08018328 	.word	0x08018328
 800cca0:	08018440 	.word	0x08018440
 800cca4:	08018378 	.word	0x08018378

0800cca8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	681a      	ldr	r2, [r3, #0]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	3308      	adds	r3, #8
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d00a      	beq.n	800ccd8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d002      	beq.n	800ccce <netif_do_set_netmask+0x26>
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	e000      	b.n	800ccd0 <netif_do_set_netmask+0x28>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e000      	b.n	800ccda <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3714      	adds	r7, #20
 800ccde:	46bd      	mov	sp, r7
 800cce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce4:	4770      	bx	lr

0800cce6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cce6:	b480      	push	{r7}
 800cce8:	b085      	sub	sp, #20
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	60f8      	str	r0, [r7, #12]
 800ccee:	60b9      	str	r1, [r7, #8]
 800ccf0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	330c      	adds	r3, #12
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d00a      	beq.n	800cd16 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d002      	beq.n	800cd0c <netif_do_set_gw+0x26>
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	e000      	b.n	800cd0e <netif_do_set_gw+0x28>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cd12:	2301      	movs	r3, #1
 800cd14:	e000      	b.n	800cd18 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b088      	sub	sp, #32
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
 800cd30:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cd36:	2300      	movs	r3, #0
 800cd38:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d101      	bne.n	800cd44 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cd40:	4b1c      	ldr	r3, [pc, #112]	; (800cdb4 <netif_set_addr+0x90>)
 800cd42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d101      	bne.n	800cd4e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cd4a:	4b1a      	ldr	r3, [pc, #104]	; (800cdb4 <netif_set_addr+0x90>)
 800cd4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d101      	bne.n	800cd58 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cd54:	4b17      	ldr	r3, [pc, #92]	; (800cdb4 <netif_set_addr+0x90>)
 800cd56:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <netif_set_addr+0x42>
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d101      	bne.n	800cd6a <netif_set_addr+0x46>
 800cd66:	2301      	movs	r3, #1
 800cd68:	e000      	b.n	800cd6c <netif_set_addr+0x48>
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d006      	beq.n	800cd82 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cd74:	f107 0310 	add.w	r3, r7, #16
 800cd78:	461a      	mov	r2, r3
 800cd7a:	68b9      	ldr	r1, [r7, #8]
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f7ff ff49 	bl	800cc14 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cd82:	69fa      	ldr	r2, [r7, #28]
 800cd84:	6879      	ldr	r1, [r7, #4]
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f7ff ff8e 	bl	800cca8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cd8c:	69ba      	ldr	r2, [r7, #24]
 800cd8e:	6839      	ldr	r1, [r7, #0]
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f7ff ffa8 	bl	800cce6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d106      	bne.n	800cdaa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cd9c:	f107 0310 	add.w	r3, r7, #16
 800cda0:	461a      	mov	r2, r3
 800cda2:	68b9      	ldr	r1, [r7, #8]
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f7ff ff35 	bl	800cc14 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cdaa:	bf00      	nop
 800cdac:	3720      	adds	r7, #32
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	0801aa68 	.word	0x0801aa68

0800cdb8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cdc0:	4a04      	ldr	r2, [pc, #16]	; (800cdd4 <netif_set_default+0x1c>)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cdc6:	bf00      	nop
 800cdc8:	370c      	adds	r7, #12
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd0:	4770      	bx	lr
 800cdd2:	bf00      	nop
 800cdd4:	20008fc0 	.word	0x20008fc0

0800cdd8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d107      	bne.n	800cdf6 <netif_set_up+0x1e>
 800cde6:	4b0f      	ldr	r3, [pc, #60]	; (800ce24 <netif_set_up+0x4c>)
 800cde8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cdec:	490e      	ldr	r1, [pc, #56]	; (800ce28 <netif_set_up+0x50>)
 800cdee:	480f      	ldr	r0, [pc, #60]	; (800ce2c <netif_set_up+0x54>)
 800cdf0:	f00a f944 	bl	801707c <iprintf>
 800cdf4:	e013      	b.n	800ce1e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cdfc:	f003 0301 	and.w	r3, r3, #1
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d10c      	bne.n	800ce1e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce0a:	f043 0301 	orr.w	r3, r3, #1
 800ce0e:	b2da      	uxtb	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ce16:	2103      	movs	r1, #3
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f809 	bl	800ce30 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	08018328 	.word	0x08018328
 800ce28:	080184b0 	.word	0x080184b0
 800ce2c:	08018378 	.word	0x08018378

0800ce30 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	460b      	mov	r3, r1
 800ce3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d106      	bne.n	800ce50 <netif_issue_reports+0x20>
 800ce42:	4b18      	ldr	r3, [pc, #96]	; (800cea4 <netif_issue_reports+0x74>)
 800ce44:	f240 326d 	movw	r2, #877	; 0x36d
 800ce48:	4917      	ldr	r1, [pc, #92]	; (800cea8 <netif_issue_reports+0x78>)
 800ce4a:	4818      	ldr	r0, [pc, #96]	; (800ceac <netif_issue_reports+0x7c>)
 800ce4c:	f00a f916 	bl	801707c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce56:	f003 0304 	and.w	r3, r3, #4
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d01e      	beq.n	800ce9c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce64:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d017      	beq.n	800ce9c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ce6c:	78fb      	ldrb	r3, [r7, #3]
 800ce6e:	f003 0301 	and.w	r3, r3, #1
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d013      	beq.n	800ce9e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	3304      	adds	r3, #4
 800ce7a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00e      	beq.n	800ce9e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce86:	f003 0308 	and.w	r3, r3, #8
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d007      	beq.n	800ce9e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	3304      	adds	r3, #4
 800ce92:	4619      	mov	r1, r3
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f007 fea5 	bl	8014be4 <etharp_request>
 800ce9a:	e000      	b.n	800ce9e <netif_issue_reports+0x6e>
    return;
 800ce9c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	08018328 	.word	0x08018328
 800cea8:	080184cc 	.word	0x080184cc
 800ceac:	08018378 	.word	0x08018378

0800ceb0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d107      	bne.n	800cece <netif_set_down+0x1e>
 800cebe:	4b12      	ldr	r3, [pc, #72]	; (800cf08 <netif_set_down+0x58>)
 800cec0:	f240 329b 	movw	r2, #923	; 0x39b
 800cec4:	4911      	ldr	r1, [pc, #68]	; (800cf0c <netif_set_down+0x5c>)
 800cec6:	4812      	ldr	r0, [pc, #72]	; (800cf10 <netif_set_down+0x60>)
 800cec8:	f00a f8d8 	bl	801707c <iprintf>
 800cecc:	e019      	b.n	800cf02 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ced4:	f003 0301 	and.w	r3, r3, #1
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d012      	beq.n	800cf02 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cee2:	f023 0301 	bic.w	r3, r3, #1
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cef4:	f003 0308 	and.w	r3, r3, #8
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f007 fa2f 	bl	8014360 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	08018328 	.word	0x08018328
 800cf0c:	080184f0 	.word	0x080184f0
 800cf10:	08018378 	.word	0x08018378

0800cf14 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d107      	bne.n	800cf32 <netif_set_link_up+0x1e>
 800cf22:	4b13      	ldr	r3, [pc, #76]	; (800cf70 <netif_set_link_up+0x5c>)
 800cf24:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cf28:	4912      	ldr	r1, [pc, #72]	; (800cf74 <netif_set_link_up+0x60>)
 800cf2a:	4813      	ldr	r0, [pc, #76]	; (800cf78 <netif_set_link_up+0x64>)
 800cf2c:	f00a f8a6 	bl	801707c <iprintf>
 800cf30:	e01b      	b.n	800cf6a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf38:	f003 0304 	and.w	r3, r3, #4
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d114      	bne.n	800cf6a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf46:	f043 0304 	orr.w	r3, r3, #4
 800cf4a:	b2da      	uxtb	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cf52:	2103      	movs	r1, #3
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7ff ff6b 	bl	800ce30 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	69db      	ldr	r3, [r3, #28]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d003      	beq.n	800cf6a <netif_set_link_up+0x56>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	69db      	ldr	r3, [r3, #28]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	08018328 	.word	0x08018328
 800cf74:	08018510 	.word	0x08018510
 800cf78:	08018378 	.word	0x08018378

0800cf7c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d107      	bne.n	800cf9a <netif_set_link_down+0x1e>
 800cf8a:	4b11      	ldr	r3, [pc, #68]	; (800cfd0 <netif_set_link_down+0x54>)
 800cf8c:	f240 4206 	movw	r2, #1030	; 0x406
 800cf90:	4910      	ldr	r1, [pc, #64]	; (800cfd4 <netif_set_link_down+0x58>)
 800cf92:	4811      	ldr	r0, [pc, #68]	; (800cfd8 <netif_set_link_down+0x5c>)
 800cf94:	f00a f872 	bl	801707c <iprintf>
 800cf98:	e017      	b.n	800cfca <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfa0:	f003 0304 	and.w	r3, r3, #4
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d010      	beq.n	800cfca <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfae:	f023 0304 	bic.w	r3, r3, #4
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	69db      	ldr	r3, [r3, #28]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d003      	beq.n	800cfca <netif_set_link_down+0x4e>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	69db      	ldr	r3, [r3, #28]
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	08018328 	.word	0x08018328
 800cfd4:	08018534 	.word	0x08018534
 800cfd8:	08018378 	.word	0x08018378

0800cfdc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d002      	beq.n	800cff2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	61da      	str	r2, [r3, #28]
  }
}
 800cff2:	bf00      	nop
 800cff4:	370c      	adds	r7, #12
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr

0800cffe <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cffe:	b480      	push	{r7}
 800d000:	b085      	sub	sp, #20
 800d002:	af00      	add	r7, sp, #0
 800d004:	60f8      	str	r0, [r7, #12]
 800d006:	60b9      	str	r1, [r7, #8]
 800d008:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d00a:	f06f 030b 	mvn.w	r3, #11
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr
	...

0800d01c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b085      	sub	sp, #20
 800d020:	af00      	add	r7, sp, #0
 800d022:	4603      	mov	r3, r0
 800d024:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d026:	79fb      	ldrb	r3, [r7, #7]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d013      	beq.n	800d054 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d02c:	4b0d      	ldr	r3, [pc, #52]	; (800d064 <netif_get_by_index+0x48>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	60fb      	str	r3, [r7, #12]
 800d032:	e00c      	b.n	800d04e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d03a:	3301      	adds	r3, #1
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	79fa      	ldrb	r2, [r7, #7]
 800d040:	429a      	cmp	r2, r3
 800d042:	d101      	bne.n	800d048 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	e006      	b.n	800d056 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	60fb      	str	r3, [r7, #12]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d1ef      	bne.n	800d034 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3714      	adds	r7, #20
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	20008fbc 	.word	0x20008fbc

0800d068 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d06e:	4b0c      	ldr	r3, [pc, #48]	; (800d0a0 <pbuf_free_ooseq+0x38>)
 800d070:	2200      	movs	r2, #0
 800d072:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d074:	4b0b      	ldr	r3, [pc, #44]	; (800d0a4 <pbuf_free_ooseq+0x3c>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	607b      	str	r3, [r7, #4]
 800d07a:	e00a      	b.n	800d092 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d080:	2b00      	cmp	r3, #0
 800d082:	d003      	beq.n	800d08c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f002 f9df 	bl	800f448 <tcp_free_ooseq>
      return;
 800d08a:	e005      	b.n	800d098 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	607b      	str	r3, [r7, #4]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d1f1      	bne.n	800d07c <pbuf_free_ooseq+0x14>
    }
  }
}
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	20008fc5 	.word	0x20008fc5
 800d0a4:	20008fd4 	.word	0x20008fd4

0800d0a8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d0ac:	4b03      	ldr	r3, [pc, #12]	; (800d0bc <pbuf_pool_is_empty+0x14>)
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d0b2:	bf00      	nop
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	20008fc5 	.word	0x20008fc5

0800d0c0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	80fb      	strh	r3, [r7, #6]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	68ba      	ldr	r2, [r7, #8]
 800d0e0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	88fa      	ldrh	r2, [r7, #6]
 800d0e6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	88ba      	ldrh	r2, [r7, #4]
 800d0ec:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d0ee:	8b3b      	ldrh	r3, [r7, #24]
 800d0f0:	b2da      	uxtb	r2, r3
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	7f3a      	ldrb	r2, [r7, #28]
 800d0fa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2201      	movs	r2, #1
 800d100:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	73da      	strb	r2, [r3, #15]
}
 800d108:	bf00      	nop
 800d10a:	3714      	adds	r7, #20
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b08c      	sub	sp, #48	; 0x30
 800d118:	af02      	add	r7, sp, #8
 800d11a:	4603      	mov	r3, r0
 800d11c:	71fb      	strb	r3, [r7, #7]
 800d11e:	460b      	mov	r3, r1
 800d120:	80bb      	strh	r3, [r7, #4]
 800d122:	4613      	mov	r3, r2
 800d124:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d126:	79fb      	ldrb	r3, [r7, #7]
 800d128:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d12a:	887b      	ldrh	r3, [r7, #2]
 800d12c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d130:	d07f      	beq.n	800d232 <pbuf_alloc+0x11e>
 800d132:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d136:	f300 80c8 	bgt.w	800d2ca <pbuf_alloc+0x1b6>
 800d13a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d13e:	d010      	beq.n	800d162 <pbuf_alloc+0x4e>
 800d140:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d144:	f300 80c1 	bgt.w	800d2ca <pbuf_alloc+0x1b6>
 800d148:	2b01      	cmp	r3, #1
 800d14a:	d002      	beq.n	800d152 <pbuf_alloc+0x3e>
 800d14c:	2b41      	cmp	r3, #65	; 0x41
 800d14e:	f040 80bc 	bne.w	800d2ca <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d152:	887a      	ldrh	r2, [r7, #2]
 800d154:	88bb      	ldrh	r3, [r7, #4]
 800d156:	4619      	mov	r1, r3
 800d158:	2000      	movs	r0, #0
 800d15a:	f000 f8d1 	bl	800d300 <pbuf_alloc_reference>
 800d15e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d160:	e0bd      	b.n	800d2de <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d162:	2300      	movs	r3, #0
 800d164:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d166:	2300      	movs	r3, #0
 800d168:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d16a:	88bb      	ldrh	r3, [r7, #4]
 800d16c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d16e:	2008      	movs	r0, #8
 800d170:	f7ff fbce 	bl	800c910 <memp_malloc>
 800d174:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d109      	bne.n	800d190 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d17c:	f7ff ff94 	bl	800d0a8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d182:	2b00      	cmp	r3, #0
 800d184:	d002      	beq.n	800d18c <pbuf_alloc+0x78>
            pbuf_free(p);
 800d186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d188:	f000 faa8 	bl	800d6dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d18c:	2300      	movs	r3, #0
 800d18e:	e0a7      	b.n	800d2e0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d190:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d192:	3303      	adds	r3, #3
 800d194:	b29b      	uxth	r3, r3
 800d196:	f023 0303 	bic.w	r3, r3, #3
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d1a0:	b29b      	uxth	r3, r3
 800d1a2:	8b7a      	ldrh	r2, [r7, #26]
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	bf28      	it	cs
 800d1a8:	4613      	movcs	r3, r2
 800d1aa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d1ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1ae:	3310      	adds	r3, #16
 800d1b0:	693a      	ldr	r2, [r7, #16]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	3303      	adds	r3, #3
 800d1b6:	f023 0303 	bic.w	r3, r3, #3
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	89f9      	ldrh	r1, [r7, #14]
 800d1be:	8b7a      	ldrh	r2, [r7, #26]
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	9301      	str	r3, [sp, #4]
 800d1c4:	887b      	ldrh	r3, [r7, #2]
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	4601      	mov	r1, r0
 800d1cc:	6938      	ldr	r0, [r7, #16]
 800d1ce:	f7ff ff77 	bl	800d0c0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	f003 0303 	and.w	r3, r3, #3
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d006      	beq.n	800d1ec <pbuf_alloc+0xd8>
 800d1de:	4b42      	ldr	r3, [pc, #264]	; (800d2e8 <pbuf_alloc+0x1d4>)
 800d1e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1e4:	4941      	ldr	r1, [pc, #260]	; (800d2ec <pbuf_alloc+0x1d8>)
 800d1e6:	4842      	ldr	r0, [pc, #264]	; (800d2f0 <pbuf_alloc+0x1dc>)
 800d1e8:	f009 ff48 	bl	801707c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d1ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1ee:	3303      	adds	r3, #3
 800d1f0:	f023 0303 	bic.w	r3, r3, #3
 800d1f4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d1f8:	d106      	bne.n	800d208 <pbuf_alloc+0xf4>
 800d1fa:	4b3b      	ldr	r3, [pc, #236]	; (800d2e8 <pbuf_alloc+0x1d4>)
 800d1fc:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d200:	493c      	ldr	r1, [pc, #240]	; (800d2f4 <pbuf_alloc+0x1e0>)
 800d202:	483b      	ldr	r0, [pc, #236]	; (800d2f0 <pbuf_alloc+0x1dc>)
 800d204:	f009 ff3a 	bl	801707c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d102      	bne.n	800d214 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	627b      	str	r3, [r7, #36]	; 0x24
 800d212:	e002      	b.n	800d21a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	693a      	ldr	r2, [r7, #16]
 800d218:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d21e:	8b7a      	ldrh	r2, [r7, #26]
 800d220:	89fb      	ldrh	r3, [r7, #14]
 800d222:	1ad3      	subs	r3, r2, r3
 800d224:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d226:	2300      	movs	r3, #0
 800d228:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d22a:	8b7b      	ldrh	r3, [r7, #26]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d19e      	bne.n	800d16e <pbuf_alloc+0x5a>
      break;
 800d230:	e055      	b.n	800d2de <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d232:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d234:	3303      	adds	r3, #3
 800d236:	b29b      	uxth	r3, r3
 800d238:	f023 0303 	bic.w	r3, r3, #3
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	88bb      	ldrh	r3, [r7, #4]
 800d240:	3303      	adds	r3, #3
 800d242:	b29b      	uxth	r3, r3
 800d244:	f023 0303 	bic.w	r3, r3, #3
 800d248:	b29b      	uxth	r3, r3
 800d24a:	4413      	add	r3, r2
 800d24c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d24e:	8b3b      	ldrh	r3, [r7, #24]
 800d250:	3310      	adds	r3, #16
 800d252:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d254:	8b3a      	ldrh	r2, [r7, #24]
 800d256:	88bb      	ldrh	r3, [r7, #4]
 800d258:	3303      	adds	r3, #3
 800d25a:	f023 0303 	bic.w	r3, r3, #3
 800d25e:	429a      	cmp	r2, r3
 800d260:	d306      	bcc.n	800d270 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d262:	8afa      	ldrh	r2, [r7, #22]
 800d264:	88bb      	ldrh	r3, [r7, #4]
 800d266:	3303      	adds	r3, #3
 800d268:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d201      	bcs.n	800d274 <pbuf_alloc+0x160>
        return NULL;
 800d270:	2300      	movs	r3, #0
 800d272:	e035      	b.n	800d2e0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d274:	8afb      	ldrh	r3, [r7, #22]
 800d276:	4618      	mov	r0, r3
 800d278:	f7ff f9ba 	bl	800c5f0 <mem_malloc>
 800d27c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d280:	2b00      	cmp	r3, #0
 800d282:	d101      	bne.n	800d288 <pbuf_alloc+0x174>
        return NULL;
 800d284:	2300      	movs	r3, #0
 800d286:	e02b      	b.n	800d2e0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d288:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d28a:	3310      	adds	r3, #16
 800d28c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d28e:	4413      	add	r3, r2
 800d290:	3303      	adds	r3, #3
 800d292:	f023 0303 	bic.w	r3, r3, #3
 800d296:	4618      	mov	r0, r3
 800d298:	88b9      	ldrh	r1, [r7, #4]
 800d29a:	88ba      	ldrh	r2, [r7, #4]
 800d29c:	2300      	movs	r3, #0
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	887b      	ldrh	r3, [r7, #2]
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	4601      	mov	r1, r0
 800d2a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2aa:	f7ff ff09 	bl	800d0c0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	f003 0303 	and.w	r3, r3, #3
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d010      	beq.n	800d2dc <pbuf_alloc+0x1c8>
 800d2ba:	4b0b      	ldr	r3, [pc, #44]	; (800d2e8 <pbuf_alloc+0x1d4>)
 800d2bc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d2c0:	490d      	ldr	r1, [pc, #52]	; (800d2f8 <pbuf_alloc+0x1e4>)
 800d2c2:	480b      	ldr	r0, [pc, #44]	; (800d2f0 <pbuf_alloc+0x1dc>)
 800d2c4:	f009 feda 	bl	801707c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d2c8:	e008      	b.n	800d2dc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d2ca:	4b07      	ldr	r3, [pc, #28]	; (800d2e8 <pbuf_alloc+0x1d4>)
 800d2cc:	f240 1227 	movw	r2, #295	; 0x127
 800d2d0:	490a      	ldr	r1, [pc, #40]	; (800d2fc <pbuf_alloc+0x1e8>)
 800d2d2:	4807      	ldr	r0, [pc, #28]	; (800d2f0 <pbuf_alloc+0x1dc>)
 800d2d4:	f009 fed2 	bl	801707c <iprintf>
      return NULL;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	e001      	b.n	800d2e0 <pbuf_alloc+0x1cc>
      break;
 800d2dc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3728      	adds	r7, #40	; 0x28
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	08018558 	.word	0x08018558
 800d2ec:	08018588 	.word	0x08018588
 800d2f0:	080185b8 	.word	0x080185b8
 800d2f4:	080185e0 	.word	0x080185e0
 800d2f8:	08018614 	.word	0x08018614
 800d2fc:	08018640 	.word	0x08018640

0800d300 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af02      	add	r7, sp, #8
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	460b      	mov	r3, r1
 800d30a:	807b      	strh	r3, [r7, #2]
 800d30c:	4613      	mov	r3, r2
 800d30e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d310:	883b      	ldrh	r3, [r7, #0]
 800d312:	2b41      	cmp	r3, #65	; 0x41
 800d314:	d009      	beq.n	800d32a <pbuf_alloc_reference+0x2a>
 800d316:	883b      	ldrh	r3, [r7, #0]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d006      	beq.n	800d32a <pbuf_alloc_reference+0x2a>
 800d31c:	4b0f      	ldr	r3, [pc, #60]	; (800d35c <pbuf_alloc_reference+0x5c>)
 800d31e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d322:	490f      	ldr	r1, [pc, #60]	; (800d360 <pbuf_alloc_reference+0x60>)
 800d324:	480f      	ldr	r0, [pc, #60]	; (800d364 <pbuf_alloc_reference+0x64>)
 800d326:	f009 fea9 	bl	801707c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d32a:	2007      	movs	r0, #7
 800d32c:	f7ff faf0 	bl	800c910 <memp_malloc>
 800d330:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d101      	bne.n	800d33c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d338:	2300      	movs	r3, #0
 800d33a:	e00b      	b.n	800d354 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d33c:	8879      	ldrh	r1, [r7, #2]
 800d33e:	887a      	ldrh	r2, [r7, #2]
 800d340:	2300      	movs	r3, #0
 800d342:	9301      	str	r3, [sp, #4]
 800d344:	883b      	ldrh	r3, [r7, #0]
 800d346:	9300      	str	r3, [sp, #0]
 800d348:	460b      	mov	r3, r1
 800d34a:	6879      	ldr	r1, [r7, #4]
 800d34c:	68f8      	ldr	r0, [r7, #12]
 800d34e:	f7ff feb7 	bl	800d0c0 <pbuf_init_alloced_pbuf>
  return p;
 800d352:	68fb      	ldr	r3, [r7, #12]
}
 800d354:	4618      	mov	r0, r3
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	08018558 	.word	0x08018558
 800d360:	0801865c 	.word	0x0801865c
 800d364:	080185b8 	.word	0x080185b8

0800d368 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b088      	sub	sp, #32
 800d36c:	af02      	add	r7, sp, #8
 800d36e:	607b      	str	r3, [r7, #4]
 800d370:	4603      	mov	r3, r0
 800d372:	73fb      	strb	r3, [r7, #15]
 800d374:	460b      	mov	r3, r1
 800d376:	81bb      	strh	r3, [r7, #12]
 800d378:	4613      	mov	r3, r2
 800d37a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d37c:	7bfb      	ldrb	r3, [r7, #15]
 800d37e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d380:	8a7b      	ldrh	r3, [r7, #18]
 800d382:	3303      	adds	r3, #3
 800d384:	f023 0203 	bic.w	r2, r3, #3
 800d388:	89bb      	ldrh	r3, [r7, #12]
 800d38a:	441a      	add	r2, r3
 800d38c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d38e:	429a      	cmp	r2, r3
 800d390:	d901      	bls.n	800d396 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d392:	2300      	movs	r3, #0
 800d394:	e018      	b.n	800d3c8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d396:	6a3b      	ldr	r3, [r7, #32]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d007      	beq.n	800d3ac <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d39c:	8a7b      	ldrh	r3, [r7, #18]
 800d39e:	3303      	adds	r3, #3
 800d3a0:	f023 0303 	bic.w	r3, r3, #3
 800d3a4:	6a3a      	ldr	r2, [r7, #32]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	617b      	str	r3, [r7, #20]
 800d3aa:	e001      	b.n	800d3b0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	89b9      	ldrh	r1, [r7, #12]
 800d3b4:	89ba      	ldrh	r2, [r7, #12]
 800d3b6:	2302      	movs	r3, #2
 800d3b8:	9301      	str	r3, [sp, #4]
 800d3ba:	897b      	ldrh	r3, [r7, #10]
 800d3bc:	9300      	str	r3, [sp, #0]
 800d3be:	460b      	mov	r3, r1
 800d3c0:	6979      	ldr	r1, [r7, #20]
 800d3c2:	f7ff fe7d 	bl	800d0c0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d3c6:	687b      	ldr	r3, [r7, #4]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3718      	adds	r7, #24
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	460b      	mov	r3, r1
 800d3da:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d106      	bne.n	800d3f0 <pbuf_realloc+0x20>
 800d3e2:	4b3a      	ldr	r3, [pc, #232]	; (800d4cc <pbuf_realloc+0xfc>)
 800d3e4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d3e8:	4939      	ldr	r1, [pc, #228]	; (800d4d0 <pbuf_realloc+0x100>)
 800d3ea:	483a      	ldr	r0, [pc, #232]	; (800d4d4 <pbuf_realloc+0x104>)
 800d3ec:	f009 fe46 	bl	801707c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	891b      	ldrh	r3, [r3, #8]
 800d3f4:	887a      	ldrh	r2, [r7, #2]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d263      	bcs.n	800d4c2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	891a      	ldrh	r2, [r3, #8]
 800d3fe:	887b      	ldrh	r3, [r7, #2]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d404:	887b      	ldrh	r3, [r7, #2]
 800d406:	817b      	strh	r3, [r7, #10]
  q = p;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d40c:	e018      	b.n	800d440 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	895b      	ldrh	r3, [r3, #10]
 800d412:	897a      	ldrh	r2, [r7, #10]
 800d414:	1ad3      	subs	r3, r2, r3
 800d416:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	891a      	ldrh	r2, [r3, #8]
 800d41c:	893b      	ldrh	r3, [r7, #8]
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	b29a      	uxth	r2, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d106      	bne.n	800d440 <pbuf_realloc+0x70>
 800d432:	4b26      	ldr	r3, [pc, #152]	; (800d4cc <pbuf_realloc+0xfc>)
 800d434:	f240 12af 	movw	r2, #431	; 0x1af
 800d438:	4927      	ldr	r1, [pc, #156]	; (800d4d8 <pbuf_realloc+0x108>)
 800d43a:	4826      	ldr	r0, [pc, #152]	; (800d4d4 <pbuf_realloc+0x104>)
 800d43c:	f009 fe1e 	bl	801707c <iprintf>
  while (rem_len > q->len) {
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	895b      	ldrh	r3, [r3, #10]
 800d444:	897a      	ldrh	r2, [r7, #10]
 800d446:	429a      	cmp	r2, r3
 800d448:	d8e1      	bhi.n	800d40e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	7b1b      	ldrb	r3, [r3, #12]
 800d44e:	f003 030f 	and.w	r3, r3, #15
 800d452:	2b00      	cmp	r3, #0
 800d454:	d121      	bne.n	800d49a <pbuf_realloc+0xca>
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	895b      	ldrh	r3, [r3, #10]
 800d45a:	897a      	ldrh	r2, [r7, #10]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d01c      	beq.n	800d49a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	7b5b      	ldrb	r3, [r3, #13]
 800d464:	f003 0302 	and.w	r3, r3, #2
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d116      	bne.n	800d49a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	685a      	ldr	r2, [r3, #4]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	1ad3      	subs	r3, r2, r3
 800d474:	b29a      	uxth	r2, r3
 800d476:	897b      	ldrh	r3, [r7, #10]
 800d478:	4413      	add	r3, r2
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	4619      	mov	r1, r3
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f7fe ffba 	bl	800c3f8 <mem_trim>
 800d484:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d106      	bne.n	800d49a <pbuf_realloc+0xca>
 800d48c:	4b0f      	ldr	r3, [pc, #60]	; (800d4cc <pbuf_realloc+0xfc>)
 800d48e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d492:	4912      	ldr	r1, [pc, #72]	; (800d4dc <pbuf_realloc+0x10c>)
 800d494:	480f      	ldr	r0, [pc, #60]	; (800d4d4 <pbuf_realloc+0x104>)
 800d496:	f009 fdf1 	bl	801707c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	897a      	ldrh	r2, [r7, #10]
 800d49e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	895a      	ldrh	r2, [r3, #10]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d004      	beq.n	800d4ba <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f000 f911 	bl	800d6dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	601a      	str	r2, [r3, #0]
 800d4c0:	e000      	b.n	800d4c4 <pbuf_realloc+0xf4>
    return;
 800d4c2:	bf00      	nop

}
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	08018558 	.word	0x08018558
 800d4d0:	08018670 	.word	0x08018670
 800d4d4:	080185b8 	.word	0x080185b8
 800d4d8:	08018688 	.word	0x08018688
 800d4dc:	080186a0 	.word	0x080186a0

0800d4e0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b086      	sub	sp, #24
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	60b9      	str	r1, [r7, #8]
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d106      	bne.n	800d502 <pbuf_add_header_impl+0x22>
 800d4f4:	4b2b      	ldr	r3, [pc, #172]	; (800d5a4 <pbuf_add_header_impl+0xc4>)
 800d4f6:	f240 12df 	movw	r2, #479	; 0x1df
 800d4fa:	492b      	ldr	r1, [pc, #172]	; (800d5a8 <pbuf_add_header_impl+0xc8>)
 800d4fc:	482b      	ldr	r0, [pc, #172]	; (800d5ac <pbuf_add_header_impl+0xcc>)
 800d4fe:	f009 fdbd 	bl	801707c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d003      	beq.n	800d510 <pbuf_add_header_impl+0x30>
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d50e:	d301      	bcc.n	800d514 <pbuf_add_header_impl+0x34>
    return 1;
 800d510:	2301      	movs	r3, #1
 800d512:	e043      	b.n	800d59c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d101      	bne.n	800d51e <pbuf_add_header_impl+0x3e>
    return 0;
 800d51a:	2300      	movs	r3, #0
 800d51c:	e03e      	b.n	800d59c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	891a      	ldrh	r2, [r3, #8]
 800d526:	8a7b      	ldrh	r3, [r7, #18]
 800d528:	4413      	add	r3, r2
 800d52a:	b29b      	uxth	r3, r3
 800d52c:	8a7a      	ldrh	r2, [r7, #18]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d901      	bls.n	800d536 <pbuf_add_header_impl+0x56>
    return 1;
 800d532:	2301      	movs	r3, #1
 800d534:	e032      	b.n	800d59c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	7b1b      	ldrb	r3, [r3, #12]
 800d53a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d53c:	8a3b      	ldrh	r3, [r7, #16]
 800d53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00c      	beq.n	800d560 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	685a      	ldr	r2, [r3, #4]
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	425b      	negs	r3, r3
 800d54e:	4413      	add	r3, r2
 800d550:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	3310      	adds	r3, #16
 800d556:	697a      	ldr	r2, [r7, #20]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d20d      	bcs.n	800d578 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d55c:	2301      	movs	r3, #1
 800d55e:	e01d      	b.n	800d59c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d560:	79fb      	ldrb	r3, [r7, #7]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d006      	beq.n	800d574 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	685a      	ldr	r2, [r3, #4]
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	425b      	negs	r3, r3
 800d56e:	4413      	add	r3, r2
 800d570:	617b      	str	r3, [r7, #20]
 800d572:	e001      	b.n	800d578 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d574:	2301      	movs	r3, #1
 800d576:	e011      	b.n	800d59c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	697a      	ldr	r2, [r7, #20]
 800d57c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	895a      	ldrh	r2, [r3, #10]
 800d582:	8a7b      	ldrh	r3, [r7, #18]
 800d584:	4413      	add	r3, r2
 800d586:	b29a      	uxth	r2, r3
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	891a      	ldrh	r2, [r3, #8]
 800d590:	8a7b      	ldrh	r3, [r7, #18]
 800d592:	4413      	add	r3, r2
 800d594:	b29a      	uxth	r2, r3
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	811a      	strh	r2, [r3, #8]


  return 0;
 800d59a:	2300      	movs	r3, #0
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3718      	adds	r7, #24
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	08018558 	.word	0x08018558
 800d5a8:	080186bc 	.word	0x080186bc
 800d5ac:	080185b8 	.word	0x080185b8

0800d5b0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	6839      	ldr	r1, [r7, #0]
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7ff ff8e 	bl	800d4e0 <pbuf_add_header_impl>
 800d5c4:	4603      	mov	r3, r0
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
	...

0800d5d0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d106      	bne.n	800d5ee <pbuf_remove_header+0x1e>
 800d5e0:	4b20      	ldr	r3, [pc, #128]	; (800d664 <pbuf_remove_header+0x94>)
 800d5e2:	f240 224b 	movw	r2, #587	; 0x24b
 800d5e6:	4920      	ldr	r1, [pc, #128]	; (800d668 <pbuf_remove_header+0x98>)
 800d5e8:	4820      	ldr	r0, [pc, #128]	; (800d66c <pbuf_remove_header+0x9c>)
 800d5ea:	f009 fd47 	bl	801707c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d003      	beq.n	800d5fc <pbuf_remove_header+0x2c>
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5fa:	d301      	bcc.n	800d600 <pbuf_remove_header+0x30>
    return 1;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e02c      	b.n	800d65a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d101      	bne.n	800d60a <pbuf_remove_header+0x3a>
    return 0;
 800d606:	2300      	movs	r3, #0
 800d608:	e027      	b.n	800d65a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	895b      	ldrh	r3, [r3, #10]
 800d612:	89fa      	ldrh	r2, [r7, #14]
 800d614:	429a      	cmp	r2, r3
 800d616:	d908      	bls.n	800d62a <pbuf_remove_header+0x5a>
 800d618:	4b12      	ldr	r3, [pc, #72]	; (800d664 <pbuf_remove_header+0x94>)
 800d61a:	f240 2255 	movw	r2, #597	; 0x255
 800d61e:	4914      	ldr	r1, [pc, #80]	; (800d670 <pbuf_remove_header+0xa0>)
 800d620:	4812      	ldr	r0, [pc, #72]	; (800d66c <pbuf_remove_header+0x9c>)
 800d622:	f009 fd2b 	bl	801707c <iprintf>
 800d626:	2301      	movs	r3, #1
 800d628:	e017      	b.n	800d65a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	685a      	ldr	r2, [r3, #4]
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	441a      	add	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	895a      	ldrh	r2, [r3, #10]
 800d640:	89fb      	ldrh	r3, [r7, #14]
 800d642:	1ad3      	subs	r3, r2, r3
 800d644:	b29a      	uxth	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	891a      	ldrh	r2, [r3, #8]
 800d64e:	89fb      	ldrh	r3, [r7, #14]
 800d650:	1ad3      	subs	r3, r2, r3
 800d652:	b29a      	uxth	r2, r3
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	08018558 	.word	0x08018558
 800d668:	080186bc 	.word	0x080186bc
 800d66c:	080185b8 	.word	0x080185b8
 800d670:	080186c8 	.word	0x080186c8

0800d674 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	460b      	mov	r3, r1
 800d67e:	807b      	strh	r3, [r7, #2]
 800d680:	4613      	mov	r3, r2
 800d682:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d684:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	da08      	bge.n	800d69e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d68c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d690:	425b      	negs	r3, r3
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff ff9b 	bl	800d5d0 <pbuf_remove_header>
 800d69a:	4603      	mov	r3, r0
 800d69c:	e007      	b.n	800d6ae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d69e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6a2:	787a      	ldrb	r2, [r7, #1]
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f7ff ff1a 	bl	800d4e0 <pbuf_add_header_impl>
 800d6ac:	4603      	mov	r3, r0
  }
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b082      	sub	sp, #8
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
 800d6be:	460b      	mov	r3, r1
 800d6c0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d6c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7ff ffd2 	bl	800d674 <pbuf_header_impl>
 800d6d0:	4603      	mov	r3, r0
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3708      	adds	r7, #8
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
	...

0800d6dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b086      	sub	sp, #24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10b      	bne.n	800d702 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d106      	bne.n	800d6fe <pbuf_free+0x22>
 800d6f0:	4b38      	ldr	r3, [pc, #224]	; (800d7d4 <pbuf_free+0xf8>)
 800d6f2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d6f6:	4938      	ldr	r1, [pc, #224]	; (800d7d8 <pbuf_free+0xfc>)
 800d6f8:	4838      	ldr	r0, [pc, #224]	; (800d7dc <pbuf_free+0x100>)
 800d6fa:	f009 fcbf 	bl	801707c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d6fe:	2300      	movs	r3, #0
 800d700:	e063      	b.n	800d7ca <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d702:	2300      	movs	r3, #0
 800d704:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d706:	e05c      	b.n	800d7c2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	7b9b      	ldrb	r3, [r3, #14]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d106      	bne.n	800d71e <pbuf_free+0x42>
 800d710:	4b30      	ldr	r3, [pc, #192]	; (800d7d4 <pbuf_free+0xf8>)
 800d712:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d716:	4932      	ldr	r1, [pc, #200]	; (800d7e0 <pbuf_free+0x104>)
 800d718:	4830      	ldr	r0, [pc, #192]	; (800d7dc <pbuf_free+0x100>)
 800d71a:	f009 fcaf 	bl	801707c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	7b9b      	ldrb	r3, [r3, #14]
 800d722:	3b01      	subs	r3, #1
 800d724:	b2da      	uxtb	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	739a      	strb	r2, [r3, #14]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	7b9b      	ldrb	r3, [r3, #14]
 800d72e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d730:	7dbb      	ldrb	r3, [r7, #22]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d143      	bne.n	800d7be <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	7b1b      	ldrb	r3, [r3, #12]
 800d740:	f003 030f 	and.w	r3, r3, #15
 800d744:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	7b5b      	ldrb	r3, [r3, #13]
 800d74a:	f003 0302 	and.w	r3, r3, #2
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d011      	beq.n	800d776 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d106      	bne.n	800d76c <pbuf_free+0x90>
 800d75e:	4b1d      	ldr	r3, [pc, #116]	; (800d7d4 <pbuf_free+0xf8>)
 800d760:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d764:	491f      	ldr	r1, [pc, #124]	; (800d7e4 <pbuf_free+0x108>)
 800d766:	481d      	ldr	r0, [pc, #116]	; (800d7dc <pbuf_free+0x100>)
 800d768:	f009 fc88 	bl	801707c <iprintf>
        pc->custom_free_function(p);
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	691b      	ldr	r3, [r3, #16]
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	4798      	blx	r3
 800d774:	e01d      	b.n	800d7b2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d776:	7bfb      	ldrb	r3, [r7, #15]
 800d778:	2b02      	cmp	r3, #2
 800d77a:	d104      	bne.n	800d786 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d77c:	6879      	ldr	r1, [r7, #4]
 800d77e:	2008      	movs	r0, #8
 800d780:	f7ff f936 	bl	800c9f0 <memp_free>
 800d784:	e015      	b.n	800d7b2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d786:	7bfb      	ldrb	r3, [r7, #15]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d104      	bne.n	800d796 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d78c:	6879      	ldr	r1, [r7, #4]
 800d78e:	2007      	movs	r0, #7
 800d790:	f7ff f92e 	bl	800c9f0 <memp_free>
 800d794:	e00d      	b.n	800d7b2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d796:	7bfb      	ldrb	r3, [r7, #15]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d103      	bne.n	800d7a4 <pbuf_free+0xc8>
          mem_free(p);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7fe fdc1 	bl	800c324 <mem_free>
 800d7a2:	e006      	b.n	800d7b2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d7a4:	4b0b      	ldr	r3, [pc, #44]	; (800d7d4 <pbuf_free+0xf8>)
 800d7a6:	f240 320f 	movw	r2, #783	; 0x30f
 800d7aa:	490f      	ldr	r1, [pc, #60]	; (800d7e8 <pbuf_free+0x10c>)
 800d7ac:	480b      	ldr	r0, [pc, #44]	; (800d7dc <pbuf_free+0x100>)
 800d7ae:	f009 fc65 	bl	801707c <iprintf>
        }
      }
      count++;
 800d7b2:	7dfb      	ldrb	r3, [r7, #23]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	607b      	str	r3, [r7, #4]
 800d7bc:	e001      	b.n	800d7c2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d19f      	bne.n	800d708 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3718      	adds	r7, #24
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	08018558 	.word	0x08018558
 800d7d8:	080186bc 	.word	0x080186bc
 800d7dc:	080185b8 	.word	0x080185b8
 800d7e0:	080186e8 	.word	0x080186e8
 800d7e4:	08018700 	.word	0x08018700
 800d7e8:	08018724 	.word	0x08018724

0800d7ec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d7f8:	e005      	b.n	800d806 <pbuf_clen+0x1a>
    ++len;
 800d7fa:	89fb      	ldrh	r3, [r7, #14]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d1f6      	bne.n	800d7fa <pbuf_clen+0xe>
  }
  return len;
 800d80c:	89fb      	ldrh	r3, [r7, #14]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3714      	adds	r7, #20
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr
	...

0800d81c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d010      	beq.n	800d84c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	7b9b      	ldrb	r3, [r3, #14]
 800d82e:	3301      	adds	r3, #1
 800d830:	b2da      	uxtb	r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	7b9b      	ldrb	r3, [r3, #14]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d106      	bne.n	800d84c <pbuf_ref+0x30>
 800d83e:	4b05      	ldr	r3, [pc, #20]	; (800d854 <pbuf_ref+0x38>)
 800d840:	f240 3242 	movw	r2, #834	; 0x342
 800d844:	4904      	ldr	r1, [pc, #16]	; (800d858 <pbuf_ref+0x3c>)
 800d846:	4805      	ldr	r0, [pc, #20]	; (800d85c <pbuf_ref+0x40>)
 800d848:	f009 fc18 	bl	801707c <iprintf>
  }
}
 800d84c:	bf00      	nop
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	08018558 	.word	0x08018558
 800d858:	08018738 	.word	0x08018738
 800d85c:	080185b8 	.word	0x080185b8

0800d860 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d002      	beq.n	800d876 <pbuf_cat+0x16>
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d107      	bne.n	800d886 <pbuf_cat+0x26>
 800d876:	4b20      	ldr	r3, [pc, #128]	; (800d8f8 <pbuf_cat+0x98>)
 800d878:	f240 3259 	movw	r2, #857	; 0x359
 800d87c:	491f      	ldr	r1, [pc, #124]	; (800d8fc <pbuf_cat+0x9c>)
 800d87e:	4820      	ldr	r0, [pc, #128]	; (800d900 <pbuf_cat+0xa0>)
 800d880:	f009 fbfc 	bl	801707c <iprintf>
 800d884:	e034      	b.n	800d8f0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	60fb      	str	r3, [r7, #12]
 800d88a:	e00a      	b.n	800d8a2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	891a      	ldrh	r2, [r3, #8]
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	891b      	ldrh	r3, [r3, #8]
 800d894:	4413      	add	r3, r2
 800d896:	b29a      	uxth	r2, r3
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	60fb      	str	r3, [r7, #12]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1f0      	bne.n	800d88c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	891a      	ldrh	r2, [r3, #8]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	895b      	ldrh	r3, [r3, #10]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d006      	beq.n	800d8c4 <pbuf_cat+0x64>
 800d8b6:	4b10      	ldr	r3, [pc, #64]	; (800d8f8 <pbuf_cat+0x98>)
 800d8b8:	f240 3262 	movw	r2, #866	; 0x362
 800d8bc:	4911      	ldr	r1, [pc, #68]	; (800d904 <pbuf_cat+0xa4>)
 800d8be:	4810      	ldr	r0, [pc, #64]	; (800d900 <pbuf_cat+0xa0>)
 800d8c0:	f009 fbdc 	bl	801707c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d006      	beq.n	800d8da <pbuf_cat+0x7a>
 800d8cc:	4b0a      	ldr	r3, [pc, #40]	; (800d8f8 <pbuf_cat+0x98>)
 800d8ce:	f240 3263 	movw	r2, #867	; 0x363
 800d8d2:	490d      	ldr	r1, [pc, #52]	; (800d908 <pbuf_cat+0xa8>)
 800d8d4:	480a      	ldr	r0, [pc, #40]	; (800d900 <pbuf_cat+0xa0>)
 800d8d6:	f009 fbd1 	bl	801707c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	891a      	ldrh	r2, [r3, #8]
 800d8de:	683b      	ldr	r3, [r7, #0]
 800d8e0:	891b      	ldrh	r3, [r3, #8]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	b29a      	uxth	r2, r3
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	683a      	ldr	r2, [r7, #0]
 800d8ee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d8f0:	3710      	adds	r7, #16
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	08018558 	.word	0x08018558
 800d8fc:	0801874c 	.word	0x0801874c
 800d900:	080185b8 	.word	0x080185b8
 800d904:	08018784 	.word	0x08018784
 800d908:	080187b4 	.word	0x080187b4

0800d90c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d916:	6839      	ldr	r1, [r7, #0]
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff ffa1 	bl	800d860 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d91e:	6838      	ldr	r0, [r7, #0]
 800d920:	f7ff ff7c 	bl	800d81c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d924:	bf00      	nop
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b086      	sub	sp, #24
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d936:	2300      	movs	r3, #0
 800d938:	617b      	str	r3, [r7, #20]
 800d93a:	2300      	movs	r3, #0
 800d93c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d008      	beq.n	800d956 <pbuf_copy+0x2a>
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d005      	beq.n	800d956 <pbuf_copy+0x2a>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	891a      	ldrh	r2, [r3, #8]
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	891b      	ldrh	r3, [r3, #8]
 800d952:	429a      	cmp	r2, r3
 800d954:	d209      	bcs.n	800d96a <pbuf_copy+0x3e>
 800d956:	4b57      	ldr	r3, [pc, #348]	; (800dab4 <pbuf_copy+0x188>)
 800d958:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d95c:	4956      	ldr	r1, [pc, #344]	; (800dab8 <pbuf_copy+0x18c>)
 800d95e:	4857      	ldr	r0, [pc, #348]	; (800dabc <pbuf_copy+0x190>)
 800d960:	f009 fb8c 	bl	801707c <iprintf>
 800d964:	f06f 030f 	mvn.w	r3, #15
 800d968:	e09f      	b.n	800daaa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	895b      	ldrh	r3, [r3, #10]
 800d96e:	461a      	mov	r2, r3
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	1ad2      	subs	r2, r2, r3
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	895b      	ldrh	r3, [r3, #10]
 800d978:	4619      	mov	r1, r3
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	1acb      	subs	r3, r1, r3
 800d97e:	429a      	cmp	r2, r3
 800d980:	d306      	bcc.n	800d990 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	895b      	ldrh	r3, [r3, #10]
 800d986:	461a      	mov	r2, r3
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	1ad3      	subs	r3, r2, r3
 800d98c:	60fb      	str	r3, [r7, #12]
 800d98e:	e005      	b.n	800d99c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	895b      	ldrh	r3, [r3, #10]
 800d994:	461a      	mov	r2, r3
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	685a      	ldr	r2, [r3, #4]
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	18d0      	adds	r0, r2, r3
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	685a      	ldr	r2, [r3, #4]
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	68fa      	ldr	r2, [r7, #12]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	f009 fa6e 	bl	8016e90 <memcpy>
    offset_to += len;
 800d9b4:	697a      	ldr	r2, [r7, #20]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	895b      	ldrh	r3, [r3, #10]
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d906      	bls.n	800d9de <pbuf_copy+0xb2>
 800d9d0:	4b38      	ldr	r3, [pc, #224]	; (800dab4 <pbuf_copy+0x188>)
 800d9d2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d9d6:	493a      	ldr	r1, [pc, #232]	; (800dac0 <pbuf_copy+0x194>)
 800d9d8:	4838      	ldr	r0, [pc, #224]	; (800dabc <pbuf_copy+0x190>)
 800d9da:	f009 fb4f 	bl	801707c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	895b      	ldrh	r3, [r3, #10]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d906      	bls.n	800d9f8 <pbuf_copy+0xcc>
 800d9ea:	4b32      	ldr	r3, [pc, #200]	; (800dab4 <pbuf_copy+0x188>)
 800d9ec:	f240 32da 	movw	r2, #986	; 0x3da
 800d9f0:	4934      	ldr	r1, [pc, #208]	; (800dac4 <pbuf_copy+0x198>)
 800d9f2:	4832      	ldr	r0, [pc, #200]	; (800dabc <pbuf_copy+0x190>)
 800d9f4:	f009 fb42 	bl	801707c <iprintf>
    if (offset_from >= p_from->len) {
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	895b      	ldrh	r3, [r3, #10]
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	4293      	cmp	r3, r2
 800da02:	d304      	bcc.n	800da0e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800da04:	2300      	movs	r3, #0
 800da06:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	895b      	ldrh	r3, [r3, #10]
 800da12:	461a      	mov	r2, r3
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	4293      	cmp	r3, r2
 800da18:	d114      	bne.n	800da44 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800da1a:	2300      	movs	r3, #0
 800da1c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d10c      	bne.n	800da44 <pbuf_copy+0x118>
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d009      	beq.n	800da44 <pbuf_copy+0x118>
 800da30:	4b20      	ldr	r3, [pc, #128]	; (800dab4 <pbuf_copy+0x188>)
 800da32:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800da36:	4924      	ldr	r1, [pc, #144]	; (800dac8 <pbuf_copy+0x19c>)
 800da38:	4820      	ldr	r0, [pc, #128]	; (800dabc <pbuf_copy+0x190>)
 800da3a:	f009 fb1f 	bl	801707c <iprintf>
 800da3e:	f06f 030f 	mvn.w	r3, #15
 800da42:	e032      	b.n	800daaa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d013      	beq.n	800da72 <pbuf_copy+0x146>
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	895a      	ldrh	r2, [r3, #10]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	891b      	ldrh	r3, [r3, #8]
 800da52:	429a      	cmp	r2, r3
 800da54:	d10d      	bne.n	800da72 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d009      	beq.n	800da72 <pbuf_copy+0x146>
 800da5e:	4b15      	ldr	r3, [pc, #84]	; (800dab4 <pbuf_copy+0x188>)
 800da60:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800da64:	4919      	ldr	r1, [pc, #100]	; (800dacc <pbuf_copy+0x1a0>)
 800da66:	4815      	ldr	r0, [pc, #84]	; (800dabc <pbuf_copy+0x190>)
 800da68:	f009 fb08 	bl	801707c <iprintf>
 800da6c:	f06f 0305 	mvn.w	r3, #5
 800da70:	e01b      	b.n	800daaa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d013      	beq.n	800daa0 <pbuf_copy+0x174>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	895a      	ldrh	r2, [r3, #10]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	891b      	ldrh	r3, [r3, #8]
 800da80:	429a      	cmp	r2, r3
 800da82:	d10d      	bne.n	800daa0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d009      	beq.n	800daa0 <pbuf_copy+0x174>
 800da8c:	4b09      	ldr	r3, [pc, #36]	; (800dab4 <pbuf_copy+0x188>)
 800da8e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800da92:	490e      	ldr	r1, [pc, #56]	; (800dacc <pbuf_copy+0x1a0>)
 800da94:	4809      	ldr	r0, [pc, #36]	; (800dabc <pbuf_copy+0x190>)
 800da96:	f009 faf1 	bl	801707c <iprintf>
 800da9a:	f06f 0305 	mvn.w	r3, #5
 800da9e:	e004      	b.n	800daaa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	f47f af61 	bne.w	800d96a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	08018558 	.word	0x08018558
 800dab8:	08018800 	.word	0x08018800
 800dabc:	080185b8 	.word	0x080185b8
 800dac0:	08018830 	.word	0x08018830
 800dac4:	08018848 	.word	0x08018848
 800dac8:	08018864 	.word	0x08018864
 800dacc:	08018874 	.word	0x08018874

0800dad0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b088      	sub	sp, #32
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	4611      	mov	r1, r2
 800dadc:	461a      	mov	r2, r3
 800dade:	460b      	mov	r3, r1
 800dae0:	80fb      	strh	r3, [r7, #6]
 800dae2:	4613      	mov	r3, r2
 800dae4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800daea:	2300      	movs	r3, #0
 800daec:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d108      	bne.n	800db06 <pbuf_copy_partial+0x36>
 800daf4:	4b2b      	ldr	r3, [pc, #172]	; (800dba4 <pbuf_copy_partial+0xd4>)
 800daf6:	f240 420a 	movw	r2, #1034	; 0x40a
 800dafa:	492b      	ldr	r1, [pc, #172]	; (800dba8 <pbuf_copy_partial+0xd8>)
 800dafc:	482b      	ldr	r0, [pc, #172]	; (800dbac <pbuf_copy_partial+0xdc>)
 800dafe:	f009 fabd 	bl	801707c <iprintf>
 800db02:	2300      	movs	r3, #0
 800db04:	e04a      	b.n	800db9c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d108      	bne.n	800db1e <pbuf_copy_partial+0x4e>
 800db0c:	4b25      	ldr	r3, [pc, #148]	; (800dba4 <pbuf_copy_partial+0xd4>)
 800db0e:	f240 420b 	movw	r2, #1035	; 0x40b
 800db12:	4927      	ldr	r1, [pc, #156]	; (800dbb0 <pbuf_copy_partial+0xe0>)
 800db14:	4825      	ldr	r0, [pc, #148]	; (800dbac <pbuf_copy_partial+0xdc>)
 800db16:	f009 fab1 	bl	801707c <iprintf>
 800db1a:	2300      	movs	r3, #0
 800db1c:	e03e      	b.n	800db9c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	61fb      	str	r3, [r7, #28]
 800db22:	e034      	b.n	800db8e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800db24:	88bb      	ldrh	r3, [r7, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00a      	beq.n	800db40 <pbuf_copy_partial+0x70>
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	895b      	ldrh	r3, [r3, #10]
 800db2e:	88ba      	ldrh	r2, [r7, #4]
 800db30:	429a      	cmp	r2, r3
 800db32:	d305      	bcc.n	800db40 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	895b      	ldrh	r3, [r3, #10]
 800db38:	88ba      	ldrh	r2, [r7, #4]
 800db3a:	1ad3      	subs	r3, r2, r3
 800db3c:	80bb      	strh	r3, [r7, #4]
 800db3e:	e023      	b.n	800db88 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	895a      	ldrh	r2, [r3, #10]
 800db44:	88bb      	ldrh	r3, [r7, #4]
 800db46:	1ad3      	subs	r3, r2, r3
 800db48:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800db4a:	8b3a      	ldrh	r2, [r7, #24]
 800db4c:	88fb      	ldrh	r3, [r7, #6]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d901      	bls.n	800db56 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800db52:	88fb      	ldrh	r3, [r7, #6]
 800db54:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800db56:	8b7b      	ldrh	r3, [r7, #26]
 800db58:	68ba      	ldr	r2, [r7, #8]
 800db5a:	18d0      	adds	r0, r2, r3
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	685a      	ldr	r2, [r3, #4]
 800db60:	88bb      	ldrh	r3, [r7, #4]
 800db62:	4413      	add	r3, r2
 800db64:	8b3a      	ldrh	r2, [r7, #24]
 800db66:	4619      	mov	r1, r3
 800db68:	f009 f992 	bl	8016e90 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800db6c:	8afa      	ldrh	r2, [r7, #22]
 800db6e:	8b3b      	ldrh	r3, [r7, #24]
 800db70:	4413      	add	r3, r2
 800db72:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800db74:	8b7a      	ldrh	r2, [r7, #26]
 800db76:	8b3b      	ldrh	r3, [r7, #24]
 800db78:	4413      	add	r3, r2
 800db7a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800db7c:	88fa      	ldrh	r2, [r7, #6]
 800db7e:	8b3b      	ldrh	r3, [r7, #24]
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800db84:	2300      	movs	r3, #0
 800db86:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	61fb      	str	r3, [r7, #28]
 800db8e:	88fb      	ldrh	r3, [r7, #6]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d002      	beq.n	800db9a <pbuf_copy_partial+0xca>
 800db94:	69fb      	ldr	r3, [r7, #28]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1c4      	bne.n	800db24 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800db9a:	8afb      	ldrh	r3, [r7, #22]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3720      	adds	r7, #32
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	08018558 	.word	0x08018558
 800dba8:	080188a0 	.word	0x080188a0
 800dbac:	080185b8 	.word	0x080185b8
 800dbb0:	080188c0 	.word	0x080188c0

0800dbb4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b088      	sub	sp, #32
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800dbc2:	88fb      	ldrh	r3, [r7, #6]
 800dbc4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d109      	bne.n	800dbe4 <pbuf_take+0x30>
 800dbd0:	4b3a      	ldr	r3, [pc, #232]	; (800dcbc <pbuf_take+0x108>)
 800dbd2:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800dbd6:	493a      	ldr	r1, [pc, #232]	; (800dcc0 <pbuf_take+0x10c>)
 800dbd8:	483a      	ldr	r0, [pc, #232]	; (800dcc4 <pbuf_take+0x110>)
 800dbda:	f009 fa4f 	bl	801707c <iprintf>
 800dbde:	f06f 030f 	mvn.w	r3, #15
 800dbe2:	e067      	b.n	800dcb4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d109      	bne.n	800dbfe <pbuf_take+0x4a>
 800dbea:	4b34      	ldr	r3, [pc, #208]	; (800dcbc <pbuf_take+0x108>)
 800dbec:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800dbf0:	4935      	ldr	r1, [pc, #212]	; (800dcc8 <pbuf_take+0x114>)
 800dbf2:	4834      	ldr	r0, [pc, #208]	; (800dcc4 <pbuf_take+0x110>)
 800dbf4:	f009 fa42 	bl	801707c <iprintf>
 800dbf8:	f06f 030f 	mvn.w	r3, #15
 800dbfc:	e05a      	b.n	800dcb4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	891b      	ldrh	r3, [r3, #8]
 800dc02:	88fa      	ldrh	r2, [r7, #6]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d909      	bls.n	800dc1c <pbuf_take+0x68>
 800dc08:	4b2c      	ldr	r3, [pc, #176]	; (800dcbc <pbuf_take+0x108>)
 800dc0a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800dc0e:	492f      	ldr	r1, [pc, #188]	; (800dccc <pbuf_take+0x118>)
 800dc10:	482c      	ldr	r0, [pc, #176]	; (800dcc4 <pbuf_take+0x110>)
 800dc12:	f009 fa33 	bl	801707c <iprintf>
 800dc16:	f04f 33ff 	mov.w	r3, #4294967295
 800dc1a:	e04b      	b.n	800dcb4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d007      	beq.n	800dc32 <pbuf_take+0x7e>
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d004      	beq.n	800dc32 <pbuf_take+0x7e>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	891b      	ldrh	r3, [r3, #8]
 800dc2c:	88fa      	ldrh	r2, [r7, #6]
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d902      	bls.n	800dc38 <pbuf_take+0x84>
    return ERR_ARG;
 800dc32:	f06f 030f 	mvn.w	r3, #15
 800dc36:	e03d      	b.n	800dcb4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	61fb      	str	r3, [r7, #28]
 800dc3c:	e028      	b.n	800dc90 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d106      	bne.n	800dc52 <pbuf_take+0x9e>
 800dc44:	4b1d      	ldr	r3, [pc, #116]	; (800dcbc <pbuf_take+0x108>)
 800dc46:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800dc4a:	4921      	ldr	r1, [pc, #132]	; (800dcd0 <pbuf_take+0x11c>)
 800dc4c:	481d      	ldr	r0, [pc, #116]	; (800dcc4 <pbuf_take+0x110>)
 800dc4e:	f009 fa15 	bl	801707c <iprintf>
    buf_copy_len = total_copy_len;
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800dc56:	69fb      	ldr	r3, [r7, #28]
 800dc58:	895b      	ldrh	r3, [r3, #10]
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d902      	bls.n	800dc68 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	895b      	ldrh	r3, [r3, #10]
 800dc66:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	6858      	ldr	r0, [r3, #4]
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	4413      	add	r3, r2
 800dc72:	69ba      	ldr	r2, [r7, #24]
 800dc74:	4619      	mov	r1, r3
 800dc76:	f009 f90b 	bl	8016e90 <memcpy>
    total_copy_len -= buf_copy_len;
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	1ad3      	subs	r3, r2, r3
 800dc80:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800dc82:	693a      	ldr	r2, [r7, #16]
 800dc84:	69bb      	ldr	r3, [r7, #24]
 800dc86:	4413      	add	r3, r2
 800dc88:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	61fb      	str	r3, [r7, #28]
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d1d3      	bne.n	800dc3e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d103      	bne.n	800dca4 <pbuf_take+0xf0>
 800dc9c:	88fb      	ldrh	r3, [r7, #6]
 800dc9e:	693a      	ldr	r2, [r7, #16]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d006      	beq.n	800dcb2 <pbuf_take+0xfe>
 800dca4:	4b05      	ldr	r3, [pc, #20]	; (800dcbc <pbuf_take+0x108>)
 800dca6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800dcaa:	490a      	ldr	r1, [pc, #40]	; (800dcd4 <pbuf_take+0x120>)
 800dcac:	4805      	ldr	r0, [pc, #20]	; (800dcc4 <pbuf_take+0x110>)
 800dcae:	f009 f9e5 	bl	801707c <iprintf>
  return ERR_OK;
 800dcb2:	2300      	movs	r3, #0
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3720      	adds	r7, #32
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	08018558 	.word	0x08018558
 800dcc0:	08018930 	.word	0x08018930
 800dcc4:	080185b8 	.word	0x080185b8
 800dcc8:	08018948 	.word	0x08018948
 800dccc:	08018964 	.word	0x08018964
 800dcd0:	08018984 	.word	0x08018984
 800dcd4:	0801899c 	.word	0x0801899c

0800dcd8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	4603      	mov	r3, r0
 800dce0:	603a      	str	r2, [r7, #0]
 800dce2:	71fb      	strb	r3, [r7, #7]
 800dce4:	460b      	mov	r3, r1
 800dce6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	8919      	ldrh	r1, [r3, #8]
 800dcec:	88ba      	ldrh	r2, [r7, #4]
 800dcee:	79fb      	ldrb	r3, [r7, #7]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7ff fa0f 	bl	800d114 <pbuf_alloc>
 800dcf6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d101      	bne.n	800dd02 <pbuf_clone+0x2a>
    return NULL;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	e011      	b.n	800dd26 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dd02:	6839      	ldr	r1, [r7, #0]
 800dd04:	68f8      	ldr	r0, [r7, #12]
 800dd06:	f7ff fe11 	bl	800d92c <pbuf_copy>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dd0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d006      	beq.n	800dd24 <pbuf_clone+0x4c>
 800dd16:	4b06      	ldr	r3, [pc, #24]	; (800dd30 <pbuf_clone+0x58>)
 800dd18:	f240 5224 	movw	r2, #1316	; 0x524
 800dd1c:	4905      	ldr	r1, [pc, #20]	; (800dd34 <pbuf_clone+0x5c>)
 800dd1e:	4806      	ldr	r0, [pc, #24]	; (800dd38 <pbuf_clone+0x60>)
 800dd20:	f009 f9ac 	bl	801707c <iprintf>
  return q;
 800dd24:	68fb      	ldr	r3, [r7, #12]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	08018558 	.word	0x08018558
 800dd34:	080189cc 	.word	0x080189cc
 800dd38:	080185b8 	.word	0x080185b8

0800dd3c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dd40:	f009 f9b4 	bl	80170ac <rand>
 800dd44:	4603      	mov	r3, r0
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	4b01      	ldr	r3, [pc, #4]	; (800dd5c <tcp_init+0x20>)
 800dd56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dd58:	bf00      	nop
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	20000020 	.word	0x20000020

0800dd60 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	7d1b      	ldrb	r3, [r3, #20]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d105      	bne.n	800dd7c <tcp_free+0x1c>
 800dd70:	4b06      	ldr	r3, [pc, #24]	; (800dd8c <tcp_free+0x2c>)
 800dd72:	22d4      	movs	r2, #212	; 0xd4
 800dd74:	4906      	ldr	r1, [pc, #24]	; (800dd90 <tcp_free+0x30>)
 800dd76:	4807      	ldr	r0, [pc, #28]	; (800dd94 <tcp_free+0x34>)
 800dd78:	f009 f980 	bl	801707c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800dd7c:	6879      	ldr	r1, [r7, #4]
 800dd7e:	2001      	movs	r0, #1
 800dd80:	f7fe fe36 	bl	800c9f0 <memp_free>
}
 800dd84:	bf00      	nop
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	08018a58 	.word	0x08018a58
 800dd90:	08018a88 	.word	0x08018a88
 800dd94:	08018a9c 	.word	0x08018a9c

0800dd98 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	7d1b      	ldrb	r3, [r3, #20]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d105      	bne.n	800ddb4 <tcp_free_listen+0x1c>
 800dda8:	4b06      	ldr	r3, [pc, #24]	; (800ddc4 <tcp_free_listen+0x2c>)
 800ddaa:	22df      	movs	r2, #223	; 0xdf
 800ddac:	4906      	ldr	r1, [pc, #24]	; (800ddc8 <tcp_free_listen+0x30>)
 800ddae:	4807      	ldr	r0, [pc, #28]	; (800ddcc <tcp_free_listen+0x34>)
 800ddb0:	f009 f964 	bl	801707c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ddb4:	6879      	ldr	r1, [r7, #4]
 800ddb6:	2002      	movs	r0, #2
 800ddb8:	f7fe fe1a 	bl	800c9f0 <memp_free>
}
 800ddbc:	bf00      	nop
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	08018a58 	.word	0x08018a58
 800ddc8:	08018ac4 	.word	0x08018ac4
 800ddcc:	08018a9c 	.word	0x08018a9c

0800ddd0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ddd4:	f000 fea2 	bl	800eb1c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ddd8:	4b07      	ldr	r3, [pc, #28]	; (800ddf8 <tcp_tmr+0x28>)
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	3301      	adds	r3, #1
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	4b05      	ldr	r3, [pc, #20]	; (800ddf8 <tcp_tmr+0x28>)
 800dde2:	701a      	strb	r2, [r3, #0]
 800dde4:	4b04      	ldr	r3, [pc, #16]	; (800ddf8 <tcp_tmr+0x28>)
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	f003 0301 	and.w	r3, r3, #1
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d001      	beq.n	800ddf4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ddf0:	f000 fb54 	bl	800e49c <tcp_slowtmr>
  }
}
 800ddf4:	bf00      	nop
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	20008fdd 	.word	0x20008fdd

0800ddfc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d105      	bne.n	800de18 <tcp_remove_listener+0x1c>
 800de0c:	4b0d      	ldr	r3, [pc, #52]	; (800de44 <tcp_remove_listener+0x48>)
 800de0e:	22ff      	movs	r2, #255	; 0xff
 800de10:	490d      	ldr	r1, [pc, #52]	; (800de48 <tcp_remove_listener+0x4c>)
 800de12:	480e      	ldr	r0, [pc, #56]	; (800de4c <tcp_remove_listener+0x50>)
 800de14:	f009 f932 	bl	801707c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	60fb      	str	r3, [r7, #12]
 800de1c:	e00a      	b.n	800de34 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de22:	683a      	ldr	r2, [r7, #0]
 800de24:	429a      	cmp	r2, r3
 800de26:	d102      	bne.n	800de2e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2200      	movs	r2, #0
 800de2c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	60fb      	str	r3, [r7, #12]
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1f1      	bne.n	800de1e <tcp_remove_listener+0x22>
    }
  }
}
 800de3a:	bf00      	nop
 800de3c:	bf00      	nop
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	08018a58 	.word	0x08018a58
 800de48:	08018ae0 	.word	0x08018ae0
 800de4c:	08018a9c 	.word	0x08018a9c

0800de50 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d106      	bne.n	800de6c <tcp_listen_closed+0x1c>
 800de5e:	4b14      	ldr	r3, [pc, #80]	; (800deb0 <tcp_listen_closed+0x60>)
 800de60:	f240 1211 	movw	r2, #273	; 0x111
 800de64:	4913      	ldr	r1, [pc, #76]	; (800deb4 <tcp_listen_closed+0x64>)
 800de66:	4814      	ldr	r0, [pc, #80]	; (800deb8 <tcp_listen_closed+0x68>)
 800de68:	f009 f908 	bl	801707c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	7d1b      	ldrb	r3, [r3, #20]
 800de70:	2b01      	cmp	r3, #1
 800de72:	d006      	beq.n	800de82 <tcp_listen_closed+0x32>
 800de74:	4b0e      	ldr	r3, [pc, #56]	; (800deb0 <tcp_listen_closed+0x60>)
 800de76:	f44f 7289 	mov.w	r2, #274	; 0x112
 800de7a:	4910      	ldr	r1, [pc, #64]	; (800debc <tcp_listen_closed+0x6c>)
 800de7c:	480e      	ldr	r0, [pc, #56]	; (800deb8 <tcp_listen_closed+0x68>)
 800de7e:	f009 f8fd 	bl	801707c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800de82:	2301      	movs	r3, #1
 800de84:	60fb      	str	r3, [r7, #12]
 800de86:	e00b      	b.n	800dea0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800de88:	4a0d      	ldr	r2, [pc, #52]	; (800dec0 <tcp_listen_closed+0x70>)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	6879      	ldr	r1, [r7, #4]
 800de94:	4618      	mov	r0, r3
 800de96:	f7ff ffb1 	bl	800ddfc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3301      	adds	r3, #1
 800de9e:	60fb      	str	r3, [r7, #12]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2b03      	cmp	r3, #3
 800dea4:	d9f0      	bls.n	800de88 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dea6:	bf00      	nop
 800dea8:	bf00      	nop
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	08018a58 	.word	0x08018a58
 800deb4:	08018b08 	.word	0x08018b08
 800deb8:	08018a9c 	.word	0x08018a9c
 800debc:	08018b14 	.word	0x08018b14
 800dec0:	0801aa40 	.word	0x0801aa40

0800dec4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dec4:	b5b0      	push	{r4, r5, r7, lr}
 800dec6:	b088      	sub	sp, #32
 800dec8:	af04      	add	r7, sp, #16
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	460b      	mov	r3, r1
 800dece:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d106      	bne.n	800dee4 <tcp_close_shutdown+0x20>
 800ded6:	4b63      	ldr	r3, [pc, #396]	; (800e064 <tcp_close_shutdown+0x1a0>)
 800ded8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800dedc:	4962      	ldr	r1, [pc, #392]	; (800e068 <tcp_close_shutdown+0x1a4>)
 800dede:	4863      	ldr	r0, [pc, #396]	; (800e06c <tcp_close_shutdown+0x1a8>)
 800dee0:	f009 f8cc 	bl	801707c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dee4:	78fb      	ldrb	r3, [r7, #3]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d066      	beq.n	800dfb8 <tcp_close_shutdown+0xf4>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	7d1b      	ldrb	r3, [r3, #20]
 800deee:	2b04      	cmp	r3, #4
 800def0:	d003      	beq.n	800defa <tcp_close_shutdown+0x36>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	7d1b      	ldrb	r3, [r3, #20]
 800def6:	2b07      	cmp	r3, #7
 800def8:	d15e      	bne.n	800dfb8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800defe:	2b00      	cmp	r3, #0
 800df00:	d104      	bne.n	800df0c <tcp_close_shutdown+0x48>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800df0a:	d055      	beq.n	800dfb8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	8b5b      	ldrh	r3, [r3, #26]
 800df10:	f003 0310 	and.w	r3, r3, #16
 800df14:	2b00      	cmp	r3, #0
 800df16:	d106      	bne.n	800df26 <tcp_close_shutdown+0x62>
 800df18:	4b52      	ldr	r3, [pc, #328]	; (800e064 <tcp_close_shutdown+0x1a0>)
 800df1a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800df1e:	4954      	ldr	r1, [pc, #336]	; (800e070 <tcp_close_shutdown+0x1ac>)
 800df20:	4852      	ldr	r0, [pc, #328]	; (800e06c <tcp_close_shutdown+0x1a8>)
 800df22:	f009 f8ab 	bl	801707c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800df2e:	687d      	ldr	r5, [r7, #4]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	3304      	adds	r3, #4
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	8ad2      	ldrh	r2, [r2, #22]
 800df38:	6879      	ldr	r1, [r7, #4]
 800df3a:	8b09      	ldrh	r1, [r1, #24]
 800df3c:	9102      	str	r1, [sp, #8]
 800df3e:	9201      	str	r2, [sp, #4]
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	462b      	mov	r3, r5
 800df44:	4622      	mov	r2, r4
 800df46:	4601      	mov	r1, r0
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f004 fe91 	bl	8012c70 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f001 f8c6 	bl	800f0e0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800df54:	4b47      	ldr	r3, [pc, #284]	; (800e074 <tcp_close_shutdown+0x1b0>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d105      	bne.n	800df6a <tcp_close_shutdown+0xa6>
 800df5e:	4b45      	ldr	r3, [pc, #276]	; (800e074 <tcp_close_shutdown+0x1b0>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	4a43      	ldr	r2, [pc, #268]	; (800e074 <tcp_close_shutdown+0x1b0>)
 800df66:	6013      	str	r3, [r2, #0]
 800df68:	e013      	b.n	800df92 <tcp_close_shutdown+0xce>
 800df6a:	4b42      	ldr	r3, [pc, #264]	; (800e074 <tcp_close_shutdown+0x1b0>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	60fb      	str	r3, [r7, #12]
 800df70:	e00c      	b.n	800df8c <tcp_close_shutdown+0xc8>
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d104      	bne.n	800df86 <tcp_close_shutdown+0xc2>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	68da      	ldr	r2, [r3, #12]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	60da      	str	r2, [r3, #12]
 800df84:	e005      	b.n	800df92 <tcp_close_shutdown+0xce>
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	60fb      	str	r3, [r7, #12]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d1ef      	bne.n	800df72 <tcp_close_shutdown+0xae>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2200      	movs	r2, #0
 800df96:	60da      	str	r2, [r3, #12]
 800df98:	4b37      	ldr	r3, [pc, #220]	; (800e078 <tcp_close_shutdown+0x1b4>)
 800df9a:	2201      	movs	r2, #1
 800df9c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800df9e:	4b37      	ldr	r3, [pc, #220]	; (800e07c <tcp_close_shutdown+0x1b8>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d102      	bne.n	800dfae <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dfa8:	f003 fd5e 	bl	8011a68 <tcp_trigger_input_pcb_close>
 800dfac:	e002      	b.n	800dfb4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7ff fed6 	bl	800dd60 <tcp_free>
      }
      return ERR_OK;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	e050      	b.n	800e05a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	7d1b      	ldrb	r3, [r3, #20]
 800dfbc:	2b02      	cmp	r3, #2
 800dfbe:	d03b      	beq.n	800e038 <tcp_close_shutdown+0x174>
 800dfc0:	2b02      	cmp	r3, #2
 800dfc2:	dc44      	bgt.n	800e04e <tcp_close_shutdown+0x18a>
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d002      	beq.n	800dfce <tcp_close_shutdown+0x10a>
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d02a      	beq.n	800e022 <tcp_close_shutdown+0x15e>
 800dfcc:	e03f      	b.n	800e04e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	8adb      	ldrh	r3, [r3, #22]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d021      	beq.n	800e01a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dfd6:	4b2a      	ldr	r3, [pc, #168]	; (800e080 <tcp_close_shutdown+0x1bc>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d105      	bne.n	800dfec <tcp_close_shutdown+0x128>
 800dfe0:	4b27      	ldr	r3, [pc, #156]	; (800e080 <tcp_close_shutdown+0x1bc>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	4a26      	ldr	r2, [pc, #152]	; (800e080 <tcp_close_shutdown+0x1bc>)
 800dfe8:	6013      	str	r3, [r2, #0]
 800dfea:	e013      	b.n	800e014 <tcp_close_shutdown+0x150>
 800dfec:	4b24      	ldr	r3, [pc, #144]	; (800e080 <tcp_close_shutdown+0x1bc>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	60bb      	str	r3, [r7, #8]
 800dff2:	e00c      	b.n	800e00e <tcp_close_shutdown+0x14a>
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	68db      	ldr	r3, [r3, #12]
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d104      	bne.n	800e008 <tcp_close_shutdown+0x144>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	68da      	ldr	r2, [r3, #12]
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	60da      	str	r2, [r3, #12]
 800e006:	e005      	b.n	800e014 <tcp_close_shutdown+0x150>
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	60bb      	str	r3, [r7, #8]
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d1ef      	bne.n	800dff4 <tcp_close_shutdown+0x130>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7ff fea0 	bl	800dd60 <tcp_free>
      break;
 800e020:	e01a      	b.n	800e058 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f7ff ff14 	bl	800de50 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e028:	6879      	ldr	r1, [r7, #4]
 800e02a:	4816      	ldr	r0, [pc, #88]	; (800e084 <tcp_close_shutdown+0x1c0>)
 800e02c:	f001 f8a8 	bl	800f180 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7ff feb1 	bl	800dd98 <tcp_free_listen>
      break;
 800e036:	e00f      	b.n	800e058 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e038:	6879      	ldr	r1, [r7, #4]
 800e03a:	480e      	ldr	r0, [pc, #56]	; (800e074 <tcp_close_shutdown+0x1b0>)
 800e03c:	f001 f8a0 	bl	800f180 <tcp_pcb_remove>
 800e040:	4b0d      	ldr	r3, [pc, #52]	; (800e078 <tcp_close_shutdown+0x1b4>)
 800e042:	2201      	movs	r2, #1
 800e044:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f7ff fe8a 	bl	800dd60 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e04c:	e004      	b.n	800e058 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 f81a 	bl	800e088 <tcp_close_shutdown_fin>
 800e054:	4603      	mov	r3, r0
 800e056:	e000      	b.n	800e05a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bdb0      	pop	{r4, r5, r7, pc}
 800e062:	bf00      	nop
 800e064:	08018a58 	.word	0x08018a58
 800e068:	08018b2c 	.word	0x08018b2c
 800e06c:	08018a9c 	.word	0x08018a9c
 800e070:	08018b4c 	.word	0x08018b4c
 800e074:	20008fd4 	.word	0x20008fd4
 800e078:	20008fdc 	.word	0x20008fdc
 800e07c:	20009014 	.word	0x20009014
 800e080:	20008fcc 	.word	0x20008fcc
 800e084:	20008fd0 	.word	0x20008fd0

0800e088 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d106      	bne.n	800e0a4 <tcp_close_shutdown_fin+0x1c>
 800e096:	4b2e      	ldr	r3, [pc, #184]	; (800e150 <tcp_close_shutdown_fin+0xc8>)
 800e098:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e09c:	492d      	ldr	r1, [pc, #180]	; (800e154 <tcp_close_shutdown_fin+0xcc>)
 800e09e:	482e      	ldr	r0, [pc, #184]	; (800e158 <tcp_close_shutdown_fin+0xd0>)
 800e0a0:	f008 ffec 	bl	801707c <iprintf>

  switch (pcb->state) {
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	7d1b      	ldrb	r3, [r3, #20]
 800e0a8:	2b07      	cmp	r3, #7
 800e0aa:	d020      	beq.n	800e0ee <tcp_close_shutdown_fin+0x66>
 800e0ac:	2b07      	cmp	r3, #7
 800e0ae:	dc2b      	bgt.n	800e108 <tcp_close_shutdown_fin+0x80>
 800e0b0:	2b03      	cmp	r3, #3
 800e0b2:	d002      	beq.n	800e0ba <tcp_close_shutdown_fin+0x32>
 800e0b4:	2b04      	cmp	r3, #4
 800e0b6:	d00d      	beq.n	800e0d4 <tcp_close_shutdown_fin+0x4c>
 800e0b8:	e026      	b.n	800e108 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f003 fee6 	bl	8011e8c <tcp_send_fin>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e0c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d11f      	bne.n	800e10c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2205      	movs	r2, #5
 800e0d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e0d2:	e01b      	b.n	800e10c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f003 fed9 	bl	8011e8c <tcp_send_fin>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e0de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d114      	bne.n	800e110 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2205      	movs	r2, #5
 800e0ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e0ec:	e010      	b.n	800e110 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f003 fecc 	bl	8011e8c <tcp_send_fin>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e0f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d109      	bne.n	800e114 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2209      	movs	r2, #9
 800e104:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e106:	e005      	b.n	800e114 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e108:	2300      	movs	r3, #0
 800e10a:	e01c      	b.n	800e146 <tcp_close_shutdown_fin+0xbe>
      break;
 800e10c:	bf00      	nop
 800e10e:	e002      	b.n	800e116 <tcp_close_shutdown_fin+0x8e>
      break;
 800e110:	bf00      	nop
 800e112:	e000      	b.n	800e116 <tcp_close_shutdown_fin+0x8e>
      break;
 800e114:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d103      	bne.n	800e126 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f003 fff2 	bl	8012108 <tcp_output>
 800e124:	e00d      	b.n	800e142 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e12e:	d108      	bne.n	800e142 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	8b5b      	ldrh	r3, [r3, #26]
 800e134:	f043 0308 	orr.w	r3, r3, #8
 800e138:	b29a      	uxth	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e13e:	2300      	movs	r3, #0
 800e140:	e001      	b.n	800e146 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e142:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e146:	4618      	mov	r0, r3
 800e148:	3710      	adds	r7, #16
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	08018a58 	.word	0x08018a58
 800e154:	08018b08 	.word	0x08018b08
 800e158:	08018a9c 	.word	0x08018a9c

0800e15c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d109      	bne.n	800e17e <tcp_close+0x22>
 800e16a:	4b0f      	ldr	r3, [pc, #60]	; (800e1a8 <tcp_close+0x4c>)
 800e16c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e170:	490e      	ldr	r1, [pc, #56]	; (800e1ac <tcp_close+0x50>)
 800e172:	480f      	ldr	r0, [pc, #60]	; (800e1b0 <tcp_close+0x54>)
 800e174:	f008 ff82 	bl	801707c <iprintf>
 800e178:	f06f 030f 	mvn.w	r3, #15
 800e17c:	e00f      	b.n	800e19e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	7d1b      	ldrb	r3, [r3, #20]
 800e182:	2b01      	cmp	r3, #1
 800e184:	d006      	beq.n	800e194 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	8b5b      	ldrh	r3, [r3, #26]
 800e18a:	f043 0310 	orr.w	r3, r3, #16
 800e18e:	b29a      	uxth	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e194:	2101      	movs	r1, #1
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7ff fe94 	bl	800dec4 <tcp_close_shutdown>
 800e19c:	4603      	mov	r3, r0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3708      	adds	r7, #8
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	08018a58 	.word	0x08018a58
 800e1ac:	08018b68 	.word	0x08018b68
 800e1b0:	08018a9c 	.word	0x08018a9c

0800e1b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b08e      	sub	sp, #56	; 0x38
 800e1b8:	af04      	add	r7, sp, #16
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d107      	bne.n	800e1d4 <tcp_abandon+0x20>
 800e1c4:	4b52      	ldr	r3, [pc, #328]	; (800e310 <tcp_abandon+0x15c>)
 800e1c6:	f240 223d 	movw	r2, #573	; 0x23d
 800e1ca:	4952      	ldr	r1, [pc, #328]	; (800e314 <tcp_abandon+0x160>)
 800e1cc:	4852      	ldr	r0, [pc, #328]	; (800e318 <tcp_abandon+0x164>)
 800e1ce:	f008 ff55 	bl	801707c <iprintf>
 800e1d2:	e099      	b.n	800e308 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	7d1b      	ldrb	r3, [r3, #20]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d106      	bne.n	800e1ea <tcp_abandon+0x36>
 800e1dc:	4b4c      	ldr	r3, [pc, #304]	; (800e310 <tcp_abandon+0x15c>)
 800e1de:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e1e2:	494e      	ldr	r1, [pc, #312]	; (800e31c <tcp_abandon+0x168>)
 800e1e4:	484c      	ldr	r0, [pc, #304]	; (800e318 <tcp_abandon+0x164>)
 800e1e6:	f008 ff49 	bl	801707c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	7d1b      	ldrb	r3, [r3, #20]
 800e1ee:	2b0a      	cmp	r3, #10
 800e1f0:	d107      	bne.n	800e202 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e1f2:	6879      	ldr	r1, [r7, #4]
 800e1f4:	484a      	ldr	r0, [pc, #296]	; (800e320 <tcp_abandon+0x16c>)
 800e1f6:	f000 ffc3 	bl	800f180 <tcp_pcb_remove>
    tcp_free(pcb);
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7ff fdb0 	bl	800dd60 <tcp_free>
 800e200:	e082      	b.n	800e308 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e202:	2300      	movs	r3, #0
 800e204:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e206:	2300      	movs	r3, #0
 800e208:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e20e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e214:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e21c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	691b      	ldr	r3, [r3, #16]
 800e222:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	7d1b      	ldrb	r3, [r3, #20]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d126      	bne.n	800e27a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	8adb      	ldrh	r3, [r3, #22]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d02e      	beq.n	800e292 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e234:	4b3b      	ldr	r3, [pc, #236]	; (800e324 <tcp_abandon+0x170>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d105      	bne.n	800e24a <tcp_abandon+0x96>
 800e23e:	4b39      	ldr	r3, [pc, #228]	; (800e324 <tcp_abandon+0x170>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	4a37      	ldr	r2, [pc, #220]	; (800e324 <tcp_abandon+0x170>)
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	e013      	b.n	800e272 <tcp_abandon+0xbe>
 800e24a:	4b36      	ldr	r3, [pc, #216]	; (800e324 <tcp_abandon+0x170>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	61fb      	str	r3, [r7, #28]
 800e250:	e00c      	b.n	800e26c <tcp_abandon+0xb8>
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d104      	bne.n	800e266 <tcp_abandon+0xb2>
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	68da      	ldr	r2, [r3, #12]
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	60da      	str	r2, [r3, #12]
 800e264:	e005      	b.n	800e272 <tcp_abandon+0xbe>
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	61fb      	str	r3, [r7, #28]
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1ef      	bne.n	800e252 <tcp_abandon+0x9e>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2200      	movs	r2, #0
 800e276:	60da      	str	r2, [r3, #12]
 800e278:	e00b      	b.n	800e292 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	8adb      	ldrh	r3, [r3, #22]
 800e282:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e284:	6879      	ldr	r1, [r7, #4]
 800e286:	4828      	ldr	r0, [pc, #160]	; (800e328 <tcp_abandon+0x174>)
 800e288:	f000 ff7a 	bl	800f180 <tcp_pcb_remove>
 800e28c:	4b27      	ldr	r3, [pc, #156]	; (800e32c <tcp_abandon+0x178>)
 800e28e:	2201      	movs	r2, #1
 800e290:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e296:	2b00      	cmp	r3, #0
 800e298:	d004      	beq.n	800e2a4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f000 fd1c 	bl	800ecdc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d004      	beq.n	800e2b6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f000 fd13 	bl	800ecdc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d004      	beq.n	800e2c8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f000 fd0a 	bl	800ecdc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00e      	beq.n	800e2ec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e2ce:	6879      	ldr	r1, [r7, #4]
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	3304      	adds	r3, #4
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	8b12      	ldrh	r2, [r2, #24]
 800e2d8:	9202      	str	r2, [sp, #8]
 800e2da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e2dc:	9201      	str	r2, [sp, #4]
 800e2de:	9300      	str	r3, [sp, #0]
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	697a      	ldr	r2, [r7, #20]
 800e2e4:	69b9      	ldr	r1, [r7, #24]
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f004 fcc2 	bl	8012c70 <tcp_rst>
    }
    last_state = pcb->state;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	7d1b      	ldrb	r3, [r3, #20]
 800e2f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f7ff fd34 	bl	800dd60 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d004      	beq.n	800e308 <tcp_abandon+0x154>
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	f06f 010c 	mvn.w	r1, #12
 800e304:	68f8      	ldr	r0, [r7, #12]
 800e306:	4798      	blx	r3
  }
}
 800e308:	3728      	adds	r7, #40	; 0x28
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	08018a58 	.word	0x08018a58
 800e314:	08018b9c 	.word	0x08018b9c
 800e318:	08018a9c 	.word	0x08018a9c
 800e31c:	08018bb8 	.word	0x08018bb8
 800e320:	20008fd8 	.word	0x20008fd8
 800e324:	20008fcc 	.word	0x20008fcc
 800e328:	20008fd4 	.word	0x20008fd4
 800e32c:	20008fdc 	.word	0x20008fdc

0800e330 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e338:	2101      	movs	r1, #1
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7ff ff3a 	bl	800e1b4 <tcp_abandon>
}
 800e340:	bf00      	nop
 800e342:	3708      	adds	r7, #8
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d106      	bne.n	800e364 <tcp_update_rcv_ann_wnd+0x1c>
 800e356:	4b25      	ldr	r3, [pc, #148]	; (800e3ec <tcp_update_rcv_ann_wnd+0xa4>)
 800e358:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e35c:	4924      	ldr	r1, [pc, #144]	; (800e3f0 <tcp_update_rcv_ann_wnd+0xa8>)
 800e35e:	4825      	ldr	r0, [pc, #148]	; (800e3f4 <tcp_update_rcv_ann_wnd+0xac>)
 800e360:	f008 fe8c 	bl	801707c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e36c:	4413      	add	r3, r2
 800e36e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e378:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e37c:	bf28      	it	cs
 800e37e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e382:	b292      	uxth	r2, r2
 800e384:	4413      	add	r3, r2
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	1ad3      	subs	r3, r2, r3
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	db08      	blt.n	800e3a0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e39a:	68fa      	ldr	r2, [r7, #12]
 800e39c:	1ad3      	subs	r3, r2, r3
 800e39e:	e020      	b.n	800e3e2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a8:	1ad3      	subs	r3, r2, r3
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	dd03      	ble.n	800e3b6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e3b4:	e014      	b.n	800e3e0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3be:	1ad3      	subs	r3, r2, r3
 800e3c0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3c8:	d306      	bcc.n	800e3d8 <tcp_update_rcv_ann_wnd+0x90>
 800e3ca:	4b08      	ldr	r3, [pc, #32]	; (800e3ec <tcp_update_rcv_ann_wnd+0xa4>)
 800e3cc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e3d0:	4909      	ldr	r1, [pc, #36]	; (800e3f8 <tcp_update_rcv_ann_wnd+0xb0>)
 800e3d2:	4808      	ldr	r0, [pc, #32]	; (800e3f4 <tcp_update_rcv_ann_wnd+0xac>)
 800e3d4:	f008 fe52 	bl	801707c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	b29a      	uxth	r2, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e3e0:	2300      	movs	r3, #0
  }
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	08018a58 	.word	0x08018a58
 800e3f0:	08018cb4 	.word	0x08018cb4
 800e3f4:	08018a9c 	.word	0x08018a9c
 800e3f8:	08018cd8 	.word	0x08018cd8

0800e3fc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	460b      	mov	r3, r1
 800e406:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d107      	bne.n	800e41e <tcp_recved+0x22>
 800e40e:	4b1f      	ldr	r3, [pc, #124]	; (800e48c <tcp_recved+0x90>)
 800e410:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e414:	491e      	ldr	r1, [pc, #120]	; (800e490 <tcp_recved+0x94>)
 800e416:	481f      	ldr	r0, [pc, #124]	; (800e494 <tcp_recved+0x98>)
 800e418:	f008 fe30 	bl	801707c <iprintf>
 800e41c:	e032      	b.n	800e484 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	7d1b      	ldrb	r3, [r3, #20]
 800e422:	2b01      	cmp	r3, #1
 800e424:	d106      	bne.n	800e434 <tcp_recved+0x38>
 800e426:	4b19      	ldr	r3, [pc, #100]	; (800e48c <tcp_recved+0x90>)
 800e428:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e42c:	491a      	ldr	r1, [pc, #104]	; (800e498 <tcp_recved+0x9c>)
 800e42e:	4819      	ldr	r0, [pc, #100]	; (800e494 <tcp_recved+0x98>)
 800e430:	f008 fe24 	bl	801707c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e438:	887b      	ldrh	r3, [r7, #2]
 800e43a:	4413      	add	r3, r2
 800e43c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e43e:	89fb      	ldrh	r3, [r7, #14]
 800e440:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e444:	d804      	bhi.n	800e450 <tcp_recved+0x54>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e44a:	89fa      	ldrh	r2, [r7, #14]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d204      	bcs.n	800e45a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e456:	851a      	strh	r2, [r3, #40]	; 0x28
 800e458:	e002      	b.n	800e460 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	89fa      	ldrh	r2, [r7, #14]
 800e45e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f7ff ff71 	bl	800e348 <tcp_update_rcv_ann_wnd>
 800e466:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e46e:	d309      	bcc.n	800e484 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	8b5b      	ldrh	r3, [r3, #26]
 800e474:	f043 0302 	orr.w	r3, r3, #2
 800e478:	b29a      	uxth	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f003 fe42 	bl	8012108 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	08018a58 	.word	0x08018a58
 800e490:	08018cf4 	.word	0x08018cf4
 800e494:	08018a9c 	.word	0x08018a9c
 800e498:	08018d0c 	.word	0x08018d0c

0800e49c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e49c:	b5b0      	push	{r4, r5, r7, lr}
 800e49e:	b090      	sub	sp, #64	; 0x40
 800e4a0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e4a8:	4b94      	ldr	r3, [pc, #592]	; (800e6fc <tcp_slowtmr+0x260>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	4a93      	ldr	r2, [pc, #588]	; (800e6fc <tcp_slowtmr+0x260>)
 800e4b0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e4b2:	4b93      	ldr	r3, [pc, #588]	; (800e700 <tcp_slowtmr+0x264>)
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	4b91      	ldr	r3, [pc, #580]	; (800e700 <tcp_slowtmr+0x264>)
 800e4bc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e4c2:	4b90      	ldr	r3, [pc, #576]	; (800e704 <tcp_slowtmr+0x268>)
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e4c8:	e29d      	b.n	800ea06 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4cc:	7d1b      	ldrb	r3, [r3, #20]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d106      	bne.n	800e4e0 <tcp_slowtmr+0x44>
 800e4d2:	4b8d      	ldr	r3, [pc, #564]	; (800e708 <tcp_slowtmr+0x26c>)
 800e4d4:	f240 42be 	movw	r2, #1214	; 0x4be
 800e4d8:	498c      	ldr	r1, [pc, #560]	; (800e70c <tcp_slowtmr+0x270>)
 800e4da:	488d      	ldr	r0, [pc, #564]	; (800e710 <tcp_slowtmr+0x274>)
 800e4dc:	f008 fdce 	bl	801707c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e2:	7d1b      	ldrb	r3, [r3, #20]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d106      	bne.n	800e4f6 <tcp_slowtmr+0x5a>
 800e4e8:	4b87      	ldr	r3, [pc, #540]	; (800e708 <tcp_slowtmr+0x26c>)
 800e4ea:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e4ee:	4989      	ldr	r1, [pc, #548]	; (800e714 <tcp_slowtmr+0x278>)
 800e4f0:	4887      	ldr	r0, [pc, #540]	; (800e710 <tcp_slowtmr+0x274>)
 800e4f2:	f008 fdc3 	bl	801707c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f8:	7d1b      	ldrb	r3, [r3, #20]
 800e4fa:	2b0a      	cmp	r3, #10
 800e4fc:	d106      	bne.n	800e50c <tcp_slowtmr+0x70>
 800e4fe:	4b82      	ldr	r3, [pc, #520]	; (800e708 <tcp_slowtmr+0x26c>)
 800e500:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e504:	4984      	ldr	r1, [pc, #528]	; (800e718 <tcp_slowtmr+0x27c>)
 800e506:	4882      	ldr	r0, [pc, #520]	; (800e710 <tcp_slowtmr+0x274>)
 800e508:	f008 fdb8 	bl	801707c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e50e:	7f9a      	ldrb	r2, [r3, #30]
 800e510:	4b7b      	ldr	r3, [pc, #492]	; (800e700 <tcp_slowtmr+0x264>)
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	429a      	cmp	r2, r3
 800e516:	d105      	bne.n	800e524 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e522:	e270      	b.n	800ea06 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e524:	4b76      	ldr	r3, [pc, #472]	; (800e700 <tcp_slowtmr+0x264>)
 800e526:	781a      	ldrb	r2, [r3, #0]
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e52c:	2300      	movs	r3, #0
 800e52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53a:	7d1b      	ldrb	r3, [r3, #20]
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	d10a      	bne.n	800e556 <tcp_slowtmr+0xba>
 800e540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e542:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e546:	2b05      	cmp	r3, #5
 800e548:	d905      	bls.n	800e556 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e54a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e54e:	3301      	adds	r3, #1
 800e550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e554:	e11e      	b.n	800e794 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e55c:	2b0b      	cmp	r3, #11
 800e55e:	d905      	bls.n	800e56c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e564:	3301      	adds	r3, #1
 800e566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e56a:	e113      	b.n	800e794 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e572:	2b00      	cmp	r3, #0
 800e574:	d075      	beq.n	800e662 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d006      	beq.n	800e58c <tcp_slowtmr+0xf0>
 800e57e:	4b62      	ldr	r3, [pc, #392]	; (800e708 <tcp_slowtmr+0x26c>)
 800e580:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e584:	4965      	ldr	r1, [pc, #404]	; (800e71c <tcp_slowtmr+0x280>)
 800e586:	4862      	ldr	r0, [pc, #392]	; (800e710 <tcp_slowtmr+0x274>)
 800e588:	f008 fd78 	bl	801707c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e590:	2b00      	cmp	r3, #0
 800e592:	d106      	bne.n	800e5a2 <tcp_slowtmr+0x106>
 800e594:	4b5c      	ldr	r3, [pc, #368]	; (800e708 <tcp_slowtmr+0x26c>)
 800e596:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e59a:	4961      	ldr	r1, [pc, #388]	; (800e720 <tcp_slowtmr+0x284>)
 800e59c:	485c      	ldr	r0, [pc, #368]	; (800e710 <tcp_slowtmr+0x274>)
 800e59e:	f008 fd6d 	bl	801707c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e5a8:	2b0b      	cmp	r3, #11
 800e5aa:	d905      	bls.n	800e5b8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e5b6:	e0ed      	b.n	800e794 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e5be:	3b01      	subs	r3, #1
 800e5c0:	4a58      	ldr	r2, [pc, #352]	; (800e724 <tcp_slowtmr+0x288>)
 800e5c2:	5cd3      	ldrb	r3, [r2, r3]
 800e5c4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e5cc:	7c7a      	ldrb	r2, [r7, #17]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d907      	bls.n	800e5e2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e5d8:	3301      	adds	r3, #1
 800e5da:	b2da      	uxtb	r2, r3
 800e5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e5e8:	7c7a      	ldrb	r2, [r7, #17]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	f200 80d2 	bhi.w	800e794 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d108      	bne.n	800e610 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e5fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e600:	f004 fc2a 	bl	8012e58 <tcp_zero_window_probe>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d014      	beq.n	800e634 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e60a:	2300      	movs	r3, #0
 800e60c:	623b      	str	r3, [r7, #32]
 800e60e:	e011      	b.n	800e634 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e612:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e616:	4619      	mov	r1, r3
 800e618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e61a:	f003 faef 	bl	8011bfc <tcp_split_unsent_seg>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	d107      	bne.n	800e634 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e626:	f003 fd6f 	bl	8012108 <tcp_output>
 800e62a:	4603      	mov	r3, r0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d101      	bne.n	800e634 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e630:	2300      	movs	r3, #0
 800e632:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	2b00      	cmp	r3, #0
 800e638:	f000 80ac 	beq.w	800e794 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e646:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e64a:	2b06      	cmp	r3, #6
 800e64c:	f200 80a2 	bhi.w	800e794 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e652:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e656:	3301      	adds	r3, #1
 800e658:	b2da      	uxtb	r2, r3
 800e65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e660:	e098      	b.n	800e794 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e668:	2b00      	cmp	r3, #0
 800e66a:	db0f      	blt.n	800e68c <tcp_slowtmr+0x1f0>
 800e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e672:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e676:	4293      	cmp	r3, r2
 800e678:	d008      	beq.n	800e68c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e680:	b29b      	uxth	r3, r3
 800e682:	3301      	adds	r3, #1
 800e684:	b29b      	uxth	r3, r3
 800e686:	b21a      	sxth	r2, r3
 800e688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e694:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e698:	429a      	cmp	r2, r3
 800e69a:	db7b      	blt.n	800e794 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e69c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e69e:	f004 f825 	bl	80126ec <tcp_rexmit_rto_prepare>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d007      	beq.n	800e6b8 <tcp_slowtmr+0x21c>
 800e6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d171      	bne.n	800e794 <tcp_slowtmr+0x2f8>
 800e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d06d      	beq.n	800e794 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ba:	7d1b      	ldrb	r3, [r3, #20]
 800e6bc:	2b02      	cmp	r3, #2
 800e6be:	d03a      	beq.n	800e736 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e6c6:	2b0c      	cmp	r3, #12
 800e6c8:	bf28      	it	cs
 800e6ca:	230c      	movcs	r3, #12
 800e6cc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e6d4:	10db      	asrs	r3, r3, #3
 800e6d6:	b21b      	sxth	r3, r3
 800e6d8:	461a      	mov	r2, r3
 800e6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e6e0:	4413      	add	r3, r2
 800e6e2:	7efa      	ldrb	r2, [r7, #27]
 800e6e4:	4910      	ldr	r1, [pc, #64]	; (800e728 <tcp_slowtmr+0x28c>)
 800e6e6:	5c8a      	ldrb	r2, [r1, r2]
 800e6e8:	4093      	lsls	r3, r2
 800e6ea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	dc1a      	bgt.n	800e72c <tcp_slowtmr+0x290>
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	b21a      	sxth	r2, r3
 800e6fa:	e019      	b.n	800e730 <tcp_slowtmr+0x294>
 800e6fc:	20008fc8 	.word	0x20008fc8
 800e700:	20008fde 	.word	0x20008fde
 800e704:	20008fd4 	.word	0x20008fd4
 800e708:	08018a58 	.word	0x08018a58
 800e70c:	08018d9c 	.word	0x08018d9c
 800e710:	08018a9c 	.word	0x08018a9c
 800e714:	08018dc8 	.word	0x08018dc8
 800e718:	08018df4 	.word	0x08018df4
 800e71c:	08018e24 	.word	0x08018e24
 800e720:	08018e58 	.word	0x08018e58
 800e724:	0801aa38 	.word	0x0801aa38
 800e728:	0801aa28 	.word	0x0801aa28
 800e72c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e732:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	2200      	movs	r2, #0
 800e73a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e748:	4293      	cmp	r3, r2
 800e74a:	bf28      	it	cs
 800e74c:	4613      	movcs	r3, r2
 800e74e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e750:	8a7b      	ldrh	r3, [r7, #18]
 800e752:	085b      	lsrs	r3, r3, #1
 800e754:	b29a      	uxth	r2, r3
 800e756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e758:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e766:	005b      	lsls	r3, r3, #1
 800e768:	b29b      	uxth	r3, r3
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d206      	bcs.n	800e77c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e772:	005b      	lsls	r3, r3, #1
 800e774:	b29a      	uxth	r2, r3
 800e776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e778:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e782:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e788:	2200      	movs	r2, #0
 800e78a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e78e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e790:	f004 f81c 	bl	80127cc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	7d1b      	ldrb	r3, [r3, #20]
 800e798:	2b06      	cmp	r3, #6
 800e79a:	d111      	bne.n	800e7c0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79e:	8b5b      	ldrh	r3, [r3, #26]
 800e7a0:	f003 0310 	and.w	r3, r3, #16
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d00b      	beq.n	800e7c0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7a8:	4b9c      	ldr	r3, [pc, #624]	; (800ea1c <tcp_slowtmr+0x580>)
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	6a1b      	ldr	r3, [r3, #32]
 800e7b0:	1ad3      	subs	r3, r2, r3
 800e7b2:	2b28      	cmp	r3, #40	; 0x28
 800e7b4:	d904      	bls.n	800e7c0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e7b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c2:	7a5b      	ldrb	r3, [r3, #9]
 800e7c4:	f003 0308 	and.w	r3, r3, #8
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d04a      	beq.n	800e862 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e7d0:	2b04      	cmp	r3, #4
 800e7d2:	d003      	beq.n	800e7dc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e7d8:	2b07      	cmp	r3, #7
 800e7da:	d142      	bne.n	800e862 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7dc:	4b8f      	ldr	r3, [pc, #572]	; (800ea1c <tcp_slowtmr+0x580>)
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e2:	6a1b      	ldr	r3, [r3, #32]
 800e7e4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e7ec:	4b8c      	ldr	r3, [pc, #560]	; (800ea20 <tcp_slowtmr+0x584>)
 800e7ee:	440b      	add	r3, r1
 800e7f0:	498c      	ldr	r1, [pc, #560]	; (800ea24 <tcp_slowtmr+0x588>)
 800e7f2:	fba1 1303 	umull	r1, r3, r1, r3
 800e7f6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d90a      	bls.n	800e812 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e800:	3301      	adds	r3, #1
 800e802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e806:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e80a:	3301      	adds	r3, #1
 800e80c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e810:	e027      	b.n	800e862 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e812:	4b82      	ldr	r3, [pc, #520]	; (800ea1c <tcp_slowtmr+0x580>)
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e818:	6a1b      	ldr	r3, [r3, #32]
 800e81a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e824:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e828:	4618      	mov	r0, r3
 800e82a:	4b7f      	ldr	r3, [pc, #508]	; (800ea28 <tcp_slowtmr+0x58c>)
 800e82c:	fb00 f303 	mul.w	r3, r0, r3
 800e830:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e832:	497c      	ldr	r1, [pc, #496]	; (800ea24 <tcp_slowtmr+0x588>)
 800e834:	fba1 1303 	umull	r1, r3, r1, r3
 800e838:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d911      	bls.n	800e862 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e83e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e840:	f004 faca 	bl	8012dd8 <tcp_keepalive>
 800e844:	4603      	mov	r3, r0
 800e846:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e84a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d107      	bne.n	800e862 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e854:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e858:	3301      	adds	r3, #1
 800e85a:	b2da      	uxtb	r2, r3
 800e85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e866:	2b00      	cmp	r3, #0
 800e868:	d011      	beq.n	800e88e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e86a:	4b6c      	ldr	r3, [pc, #432]	; (800ea1c <tcp_slowtmr+0x580>)
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	1ad2      	subs	r2, r2, r3
 800e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e876:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e87a:	4619      	mov	r1, r3
 800e87c:	460b      	mov	r3, r1
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	440b      	add	r3, r1
 800e882:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e884:	429a      	cmp	r2, r3
 800e886:	d302      	bcc.n	800e88e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e88a:	f000 fddd 	bl	800f448 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e890:	7d1b      	ldrb	r3, [r3, #20]
 800e892:	2b03      	cmp	r3, #3
 800e894:	d10b      	bne.n	800e8ae <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e896:	4b61      	ldr	r3, [pc, #388]	; (800ea1c <tcp_slowtmr+0x580>)
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89c:	6a1b      	ldr	r3, [r3, #32]
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	2b28      	cmp	r3, #40	; 0x28
 800e8a2:	d904      	bls.n	800e8ae <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b0:	7d1b      	ldrb	r3, [r3, #20]
 800e8b2:	2b09      	cmp	r3, #9
 800e8b4:	d10b      	bne.n	800e8ce <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e8b6:	4b59      	ldr	r3, [pc, #356]	; (800ea1c <tcp_slowtmr+0x580>)
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8bc:	6a1b      	ldr	r3, [r3, #32]
 800e8be:	1ad3      	subs	r3, r2, r3
 800e8c0:	2bf0      	cmp	r3, #240	; 0xf0
 800e8c2:	d904      	bls.n	800e8ce <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e8ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d060      	beq.n	800e998 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8dc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e8de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8e0:	f000 fbfe 	bl	800f0e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d010      	beq.n	800e90c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e8ea:	4b50      	ldr	r3, [pc, #320]	; (800ea2c <tcp_slowtmr+0x590>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d106      	bne.n	800e902 <tcp_slowtmr+0x466>
 800e8f4:	4b4e      	ldr	r3, [pc, #312]	; (800ea30 <tcp_slowtmr+0x594>)
 800e8f6:	f240 526d 	movw	r2, #1389	; 0x56d
 800e8fa:	494e      	ldr	r1, [pc, #312]	; (800ea34 <tcp_slowtmr+0x598>)
 800e8fc:	484e      	ldr	r0, [pc, #312]	; (800ea38 <tcp_slowtmr+0x59c>)
 800e8fe:	f008 fbbd 	bl	801707c <iprintf>
        prev->next = pcb->next;
 800e902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e904:	68da      	ldr	r2, [r3, #12]
 800e906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e908:	60da      	str	r2, [r3, #12]
 800e90a:	e00f      	b.n	800e92c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e90c:	4b47      	ldr	r3, [pc, #284]	; (800ea2c <tcp_slowtmr+0x590>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e912:	429a      	cmp	r2, r3
 800e914:	d006      	beq.n	800e924 <tcp_slowtmr+0x488>
 800e916:	4b46      	ldr	r3, [pc, #280]	; (800ea30 <tcp_slowtmr+0x594>)
 800e918:	f240 5271 	movw	r2, #1393	; 0x571
 800e91c:	4947      	ldr	r1, [pc, #284]	; (800ea3c <tcp_slowtmr+0x5a0>)
 800e91e:	4846      	ldr	r0, [pc, #280]	; (800ea38 <tcp_slowtmr+0x59c>)
 800e920:	f008 fbac 	bl	801707c <iprintf>
        tcp_active_pcbs = pcb->next;
 800e924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	4a40      	ldr	r2, [pc, #256]	; (800ea2c <tcp_slowtmr+0x590>)
 800e92a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e92c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e930:	2b00      	cmp	r3, #0
 800e932:	d013      	beq.n	800e95c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e936:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e93c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e940:	3304      	adds	r3, #4
 800e942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e944:	8ad2      	ldrh	r2, [r2, #22]
 800e946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e948:	8b09      	ldrh	r1, [r1, #24]
 800e94a:	9102      	str	r1, [sp, #8]
 800e94c:	9201      	str	r2, [sp, #4]
 800e94e:	9300      	str	r3, [sp, #0]
 800e950:	462b      	mov	r3, r5
 800e952:	4622      	mov	r2, r4
 800e954:	4601      	mov	r1, r0
 800e956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e958:	f004 f98a 	bl	8012c70 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e964:	7d1b      	ldrb	r3, [r3, #20]
 800e966:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e972:	6838      	ldr	r0, [r7, #0]
 800e974:	f7ff f9f4 	bl	800dd60 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e978:	4b31      	ldr	r3, [pc, #196]	; (800ea40 <tcp_slowtmr+0x5a4>)
 800e97a:	2200      	movs	r2, #0
 800e97c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d004      	beq.n	800e98e <tcp_slowtmr+0x4f2>
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f06f 010c 	mvn.w	r1, #12
 800e98a:	68b8      	ldr	r0, [r7, #8]
 800e98c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e98e:	4b2c      	ldr	r3, [pc, #176]	; (800ea40 <tcp_slowtmr+0x5a4>)
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d037      	beq.n	800ea06 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e996:	e592      	b.n	800e4be <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99e:	68db      	ldr	r3, [r3, #12]
 800e9a0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	7f1b      	ldrb	r3, [r3, #28]
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	b2da      	uxtb	r2, r3
 800e9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b0:	7f1a      	ldrb	r2, [r3, #28]
 800e9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9b4:	7f5b      	ldrb	r3, [r3, #29]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d325      	bcc.n	800ea06 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9bc:	2200      	movs	r2, #0
 800e9be:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e9c0:	4b1f      	ldr	r3, [pc, #124]	; (800ea40 <tcp_slowtmr+0x5a4>)
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00b      	beq.n	800e9e8 <tcp_slowtmr+0x54c>
 800e9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9d8:	6912      	ldr	r2, [r2, #16]
 800e9da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9dc:	4610      	mov	r0, r2
 800e9de:	4798      	blx	r3
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e9e6:	e002      	b.n	800e9ee <tcp_slowtmr+0x552>
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e9ee:	4b14      	ldr	r3, [pc, #80]	; (800ea40 <tcp_slowtmr+0x5a4>)
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d000      	beq.n	800e9f8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e9f6:	e562      	b.n	800e4be <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e9f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d102      	bne.n	800ea06 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ea00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea02:	f003 fb81 	bl	8012108 <tcp_output>
  while (pcb != NULL) {
 800ea06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	f47f ad5e 	bne.w	800e4ca <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ea12:	4b0c      	ldr	r3, [pc, #48]	; (800ea44 <tcp_slowtmr+0x5a8>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ea18:	e069      	b.n	800eaee <tcp_slowtmr+0x652>
 800ea1a:	bf00      	nop
 800ea1c:	20008fc8 	.word	0x20008fc8
 800ea20:	000a4cb8 	.word	0x000a4cb8
 800ea24:	10624dd3 	.word	0x10624dd3
 800ea28:	000124f8 	.word	0x000124f8
 800ea2c:	20008fd4 	.word	0x20008fd4
 800ea30:	08018a58 	.word	0x08018a58
 800ea34:	08018e90 	.word	0x08018e90
 800ea38:	08018a9c 	.word	0x08018a9c
 800ea3c:	08018ebc 	.word	0x08018ebc
 800ea40:	20008fdc 	.word	0x20008fdc
 800ea44:	20008fd8 	.word	0x20008fd8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ea48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4a:	7d1b      	ldrb	r3, [r3, #20]
 800ea4c:	2b0a      	cmp	r3, #10
 800ea4e:	d006      	beq.n	800ea5e <tcp_slowtmr+0x5c2>
 800ea50:	4b2b      	ldr	r3, [pc, #172]	; (800eb00 <tcp_slowtmr+0x664>)
 800ea52:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ea56:	492b      	ldr	r1, [pc, #172]	; (800eb04 <tcp_slowtmr+0x668>)
 800ea58:	482b      	ldr	r0, [pc, #172]	; (800eb08 <tcp_slowtmr+0x66c>)
 800ea5a:	f008 fb0f 	bl	801707c <iprintf>
    pcb_remove = 0;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ea64:	4b29      	ldr	r3, [pc, #164]	; (800eb0c <tcp_slowtmr+0x670>)
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6a:	6a1b      	ldr	r3, [r3, #32]
 800ea6c:	1ad3      	subs	r3, r2, r3
 800ea6e:	2bf0      	cmp	r3, #240	; 0xf0
 800ea70:	d904      	bls.n	800ea7c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ea72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea76:	3301      	adds	r3, #1
 800ea78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ea7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d02f      	beq.n	800eae4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ea84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea86:	f000 fb2b 	bl	800f0e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ea8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d010      	beq.n	800eab2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ea90:	4b1f      	ldr	r3, [pc, #124]	; (800eb10 <tcp_slowtmr+0x674>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d106      	bne.n	800eaa8 <tcp_slowtmr+0x60c>
 800ea9a:	4b19      	ldr	r3, [pc, #100]	; (800eb00 <tcp_slowtmr+0x664>)
 800ea9c:	f240 52af 	movw	r2, #1455	; 0x5af
 800eaa0:	491c      	ldr	r1, [pc, #112]	; (800eb14 <tcp_slowtmr+0x678>)
 800eaa2:	4819      	ldr	r0, [pc, #100]	; (800eb08 <tcp_slowtmr+0x66c>)
 800eaa4:	f008 faea 	bl	801707c <iprintf>
        prev->next = pcb->next;
 800eaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaaa:	68da      	ldr	r2, [r3, #12]
 800eaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaae:	60da      	str	r2, [r3, #12]
 800eab0:	e00f      	b.n	800ead2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800eab2:	4b17      	ldr	r3, [pc, #92]	; (800eb10 <tcp_slowtmr+0x674>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d006      	beq.n	800eaca <tcp_slowtmr+0x62e>
 800eabc:	4b10      	ldr	r3, [pc, #64]	; (800eb00 <tcp_slowtmr+0x664>)
 800eabe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800eac2:	4915      	ldr	r1, [pc, #84]	; (800eb18 <tcp_slowtmr+0x67c>)
 800eac4:	4810      	ldr	r0, [pc, #64]	; (800eb08 <tcp_slowtmr+0x66c>)
 800eac6:	f008 fad9 	bl	801707c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800eaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	4a10      	ldr	r2, [pc, #64]	; (800eb10 <tcp_slowtmr+0x674>)
 800ead0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ead2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ead6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead8:	68db      	ldr	r3, [r3, #12]
 800eada:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800eadc:	69f8      	ldr	r0, [r7, #28]
 800eade:	f7ff f93f 	bl	800dd60 <tcp_free>
 800eae2:	e004      	b.n	800eaee <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800eae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800eaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d1a9      	bne.n	800ea48 <tcp_slowtmr+0x5ac>
    }
  }
}
 800eaf4:	bf00      	nop
 800eaf6:	bf00      	nop
 800eaf8:	3730      	adds	r7, #48	; 0x30
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bdb0      	pop	{r4, r5, r7, pc}
 800eafe:	bf00      	nop
 800eb00:	08018a58 	.word	0x08018a58
 800eb04:	08018ee8 	.word	0x08018ee8
 800eb08:	08018a9c 	.word	0x08018a9c
 800eb0c:	20008fc8 	.word	0x20008fc8
 800eb10:	20008fd8 	.word	0x20008fd8
 800eb14:	08018f18 	.word	0x08018f18
 800eb18:	08018f40 	.word	0x08018f40

0800eb1c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b082      	sub	sp, #8
 800eb20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800eb22:	4b2d      	ldr	r3, [pc, #180]	; (800ebd8 <tcp_fasttmr+0xbc>)
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	3301      	adds	r3, #1
 800eb28:	b2da      	uxtb	r2, r3
 800eb2a:	4b2b      	ldr	r3, [pc, #172]	; (800ebd8 <tcp_fasttmr+0xbc>)
 800eb2c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800eb2e:	4b2b      	ldr	r3, [pc, #172]	; (800ebdc <tcp_fasttmr+0xc0>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eb34:	e048      	b.n	800ebc8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	7f9a      	ldrb	r2, [r3, #30]
 800eb3a:	4b27      	ldr	r3, [pc, #156]	; (800ebd8 <tcp_fasttmr+0xbc>)
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d03f      	beq.n	800ebc2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800eb42:	4b25      	ldr	r3, [pc, #148]	; (800ebd8 <tcp_fasttmr+0xbc>)
 800eb44:	781a      	ldrb	r2, [r3, #0]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	8b5b      	ldrh	r3, [r3, #26]
 800eb4e:	f003 0301 	and.w	r3, r3, #1
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d010      	beq.n	800eb78 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	8b5b      	ldrh	r3, [r3, #26]
 800eb5a:	f043 0302 	orr.w	r3, r3, #2
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f003 facf 	bl	8012108 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	8b5b      	ldrh	r3, [r3, #26]
 800eb6e:	f023 0303 	bic.w	r3, r3, #3
 800eb72:	b29a      	uxth	r2, r3
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	8b5b      	ldrh	r3, [r3, #26]
 800eb7c:	f003 0308 	and.w	r3, r3, #8
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d009      	beq.n	800eb98 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	8b5b      	ldrh	r3, [r3, #26]
 800eb88:	f023 0308 	bic.w	r3, r3, #8
 800eb8c:	b29a      	uxth	r2, r3
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7ff fa78 	bl	800e088 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	68db      	ldr	r3, [r3, #12]
 800eb9c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00a      	beq.n	800ebbc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eba6:	4b0e      	ldr	r3, [pc, #56]	; (800ebe0 <tcp_fasttmr+0xc4>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 f819 	bl	800ebe4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ebb2:	4b0b      	ldr	r3, [pc, #44]	; (800ebe0 <tcp_fasttmr+0xc4>)
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d000      	beq.n	800ebbc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ebba:	e7b8      	b.n	800eb2e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	607b      	str	r3, [r7, #4]
 800ebc0:	e002      	b.n	800ebc8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d1b3      	bne.n	800eb36 <tcp_fasttmr+0x1a>
    }
  }
}
 800ebce:	bf00      	nop
 800ebd0:	bf00      	nop
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	20008fde 	.word	0x20008fde
 800ebdc:	20008fd4 	.word	0x20008fd4
 800ebe0:	20008fdc 	.word	0x20008fdc

0800ebe4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ebe4:	b590      	push	{r4, r7, lr}
 800ebe6:	b085      	sub	sp, #20
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d109      	bne.n	800ec06 <tcp_process_refused_data+0x22>
 800ebf2:	4b37      	ldr	r3, [pc, #220]	; (800ecd0 <tcp_process_refused_data+0xec>)
 800ebf4:	f240 6209 	movw	r2, #1545	; 0x609
 800ebf8:	4936      	ldr	r1, [pc, #216]	; (800ecd4 <tcp_process_refused_data+0xf0>)
 800ebfa:	4837      	ldr	r0, [pc, #220]	; (800ecd8 <tcp_process_refused_data+0xf4>)
 800ebfc:	f008 fa3e 	bl	801707c <iprintf>
 800ec00:	f06f 030f 	mvn.w	r3, #15
 800ec04:	e060      	b.n	800ecc8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec0a:	7b5b      	ldrb	r3, [r3, #13]
 800ec0c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec12:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2200      	movs	r2, #0
 800ec18:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00b      	beq.n	800ec3c <tcp_process_refused_data+0x58>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6918      	ldr	r0, [r3, #16]
 800ec2e:	2300      	movs	r3, #0
 800ec30:	68ba      	ldr	r2, [r7, #8]
 800ec32:	6879      	ldr	r1, [r7, #4]
 800ec34:	47a0      	blx	r4
 800ec36:	4603      	mov	r3, r0
 800ec38:	73fb      	strb	r3, [r7, #15]
 800ec3a:	e007      	b.n	800ec4c <tcp_process_refused_data+0x68>
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	68ba      	ldr	r2, [r7, #8]
 800ec40:	6879      	ldr	r1, [r7, #4]
 800ec42:	2000      	movs	r0, #0
 800ec44:	f000 f8a4 	bl	800ed90 <tcp_recv_null>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ec4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d12a      	bne.n	800ecaa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ec54:	7bbb      	ldrb	r3, [r7, #14]
 800ec56:	f003 0320 	and.w	r3, r3, #32
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d033      	beq.n	800ecc6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec62:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ec66:	d005      	beq.n	800ec74 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	b29a      	uxth	r2, r3
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00b      	beq.n	800ec96 <tcp_process_refused_data+0xb2>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6918      	ldr	r0, [r3, #16]
 800ec88:	2300      	movs	r3, #0
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	6879      	ldr	r1, [r7, #4]
 800ec8e:	47a0      	blx	r4
 800ec90:	4603      	mov	r3, r0
 800ec92:	73fb      	strb	r3, [r7, #15]
 800ec94:	e001      	b.n	800ec9a <tcp_process_refused_data+0xb6>
 800ec96:	2300      	movs	r3, #0
 800ec98:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ec9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec9e:	f113 0f0d 	cmn.w	r3, #13
 800eca2:	d110      	bne.n	800ecc6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800eca4:	f06f 030c 	mvn.w	r3, #12
 800eca8:	e00e      	b.n	800ecc8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ecaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecae:	f113 0f0d 	cmn.w	r3, #13
 800ecb2:	d102      	bne.n	800ecba <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ecb4:	f06f 030c 	mvn.w	r3, #12
 800ecb8:	e006      	b.n	800ecc8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ecc0:	f06f 0304 	mvn.w	r3, #4
 800ecc4:	e000      	b.n	800ecc8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3714      	adds	r7, #20
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd90      	pop	{r4, r7, pc}
 800ecd0:	08018a58 	.word	0x08018a58
 800ecd4:	08018f68 	.word	0x08018f68
 800ecd8:	08018a9c 	.word	0x08018a9c

0800ecdc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ece4:	e007      	b.n	800ecf6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	f000 f80a 	bl	800ed06 <tcp_seg_free>
    seg = next;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1f4      	bne.n	800ece6 <tcp_segs_free+0xa>
  }
}
 800ecfc:	bf00      	nop
 800ecfe:	bf00      	nop
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ed06:	b580      	push	{r7, lr}
 800ed08:	b082      	sub	sp, #8
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00c      	beq.n	800ed2e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d004      	beq.n	800ed26 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fe fcdb 	bl	800d6dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ed26:	6879      	ldr	r1, [r7, #4]
 800ed28:	2003      	movs	r0, #3
 800ed2a:	f7fd fe61 	bl	800c9f0 <memp_free>
  }
}
 800ed2e:	bf00      	nop
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
	...

0800ed38 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d106      	bne.n	800ed54 <tcp_seg_copy+0x1c>
 800ed46:	4b0f      	ldr	r3, [pc, #60]	; (800ed84 <tcp_seg_copy+0x4c>)
 800ed48:	f240 6282 	movw	r2, #1666	; 0x682
 800ed4c:	490e      	ldr	r1, [pc, #56]	; (800ed88 <tcp_seg_copy+0x50>)
 800ed4e:	480f      	ldr	r0, [pc, #60]	; (800ed8c <tcp_seg_copy+0x54>)
 800ed50:	f008 f994 	bl	801707c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ed54:	2003      	movs	r0, #3
 800ed56:	f7fd fddb 	bl	800c910 <memp_malloc>
 800ed5a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d101      	bne.n	800ed66 <tcp_seg_copy+0x2e>
    return NULL;
 800ed62:	2300      	movs	r3, #0
 800ed64:	e00a      	b.n	800ed7c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ed66:	2210      	movs	r2, #16
 800ed68:	6879      	ldr	r1, [r7, #4]
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f008 f890 	bl	8016e90 <memcpy>
  pbuf_ref(cseg->p);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7fe fd51 	bl	800d81c <pbuf_ref>
  return cseg;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	08018a58 	.word	0x08018a58
 800ed88:	08018fac 	.word	0x08018fac
 800ed8c:	08018a9c 	.word	0x08018a9c

0800ed90 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
 800ed9c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d109      	bne.n	800edb8 <tcp_recv_null+0x28>
 800eda4:	4b12      	ldr	r3, [pc, #72]	; (800edf0 <tcp_recv_null+0x60>)
 800eda6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800edaa:	4912      	ldr	r1, [pc, #72]	; (800edf4 <tcp_recv_null+0x64>)
 800edac:	4812      	ldr	r0, [pc, #72]	; (800edf8 <tcp_recv_null+0x68>)
 800edae:	f008 f965 	bl	801707c <iprintf>
 800edb2:	f06f 030f 	mvn.w	r3, #15
 800edb6:	e016      	b.n	800ede6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d009      	beq.n	800edd2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	891b      	ldrh	r3, [r3, #8]
 800edc2:	4619      	mov	r1, r3
 800edc4:	68b8      	ldr	r0, [r7, #8]
 800edc6:	f7ff fb19 	bl	800e3fc <tcp_recved>
    pbuf_free(p);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7fe fc86 	bl	800d6dc <pbuf_free>
 800edd0:	e008      	b.n	800ede4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800edd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d104      	bne.n	800ede4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800edda:	68b8      	ldr	r0, [r7, #8]
 800eddc:	f7ff f9be 	bl	800e15c <tcp_close>
 800ede0:	4603      	mov	r3, r0
 800ede2:	e000      	b.n	800ede6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ede4:	2300      	movs	r3, #0
}
 800ede6:	4618      	mov	r0, r3
 800ede8:	3710      	adds	r7, #16
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	08018a58 	.word	0x08018a58
 800edf4:	08018fc8 	.word	0x08018fc8
 800edf8:	08018a9c 	.word	0x08018a9c

0800edfc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	4603      	mov	r3, r0
 800ee04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ee06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	db01      	blt.n	800ee12 <tcp_kill_prio+0x16>
 800ee0e:	79fb      	ldrb	r3, [r7, #7]
 800ee10:	e000      	b.n	800ee14 <tcp_kill_prio+0x18>
 800ee12:	237f      	movs	r3, #127	; 0x7f
 800ee14:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ee16:	7afb      	ldrb	r3, [r7, #11]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d034      	beq.n	800ee86 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ee1c:	7afb      	ldrb	r3, [r7, #11]
 800ee1e:	3b01      	subs	r3, #1
 800ee20:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ee22:	2300      	movs	r3, #0
 800ee24:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ee26:	2300      	movs	r3, #0
 800ee28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee2a:	4b19      	ldr	r3, [pc, #100]	; (800ee90 <tcp_kill_prio+0x94>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	617b      	str	r3, [r7, #20]
 800ee30:	e01f      	b.n	800ee72 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	7d5b      	ldrb	r3, [r3, #21]
 800ee36:	7afa      	ldrb	r2, [r7, #11]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d80c      	bhi.n	800ee56 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ee40:	7afa      	ldrb	r2, [r7, #11]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d112      	bne.n	800ee6c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ee46:	4b13      	ldr	r3, [pc, #76]	; (800ee94 <tcp_kill_prio+0x98>)
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	6a1b      	ldr	r3, [r3, #32]
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	68fa      	ldr	r2, [r7, #12]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d80a      	bhi.n	800ee6c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ee56:	4b0f      	ldr	r3, [pc, #60]	; (800ee94 <tcp_kill_prio+0x98>)
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	1ad3      	subs	r3, r2, r3
 800ee60:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	7d5b      	ldrb	r3, [r3, #21]
 800ee6a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	68db      	ldr	r3, [r3, #12]
 800ee70:	617b      	str	r3, [r7, #20]
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1dc      	bne.n	800ee32 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d004      	beq.n	800ee88 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee7e:	6938      	ldr	r0, [r7, #16]
 800ee80:	f7ff fa56 	bl	800e330 <tcp_abort>
 800ee84:	e000      	b.n	800ee88 <tcp_kill_prio+0x8c>
    return;
 800ee86:	bf00      	nop
  }
}
 800ee88:	3718      	adds	r7, #24
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	20008fd4 	.word	0x20008fd4
 800ee94:	20008fc8 	.word	0x20008fc8

0800ee98 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b086      	sub	sp, #24
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	4603      	mov	r3, r0
 800eea0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800eea2:	79fb      	ldrb	r3, [r7, #7]
 800eea4:	2b08      	cmp	r3, #8
 800eea6:	d009      	beq.n	800eebc <tcp_kill_state+0x24>
 800eea8:	79fb      	ldrb	r3, [r7, #7]
 800eeaa:	2b09      	cmp	r3, #9
 800eeac:	d006      	beq.n	800eebc <tcp_kill_state+0x24>
 800eeae:	4b1a      	ldr	r3, [pc, #104]	; (800ef18 <tcp_kill_state+0x80>)
 800eeb0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800eeb4:	4919      	ldr	r1, [pc, #100]	; (800ef1c <tcp_kill_state+0x84>)
 800eeb6:	481a      	ldr	r0, [pc, #104]	; (800ef20 <tcp_kill_state+0x88>)
 800eeb8:	f008 f8e0 	bl	801707c <iprintf>

  inactivity = 0;
 800eebc:	2300      	movs	r3, #0
 800eebe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eec0:	2300      	movs	r3, #0
 800eec2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eec4:	4b17      	ldr	r3, [pc, #92]	; (800ef24 <tcp_kill_state+0x8c>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	617b      	str	r3, [r7, #20]
 800eeca:	e017      	b.n	800eefc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	7d1b      	ldrb	r3, [r3, #20]
 800eed0:	79fa      	ldrb	r2, [r7, #7]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d10f      	bne.n	800eef6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eed6:	4b14      	ldr	r3, [pc, #80]	; (800ef28 <tcp_kill_state+0x90>)
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	6a1b      	ldr	r3, [r3, #32]
 800eede:	1ad3      	subs	r3, r2, r3
 800eee0:	68fa      	ldr	r2, [r7, #12]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d807      	bhi.n	800eef6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800eee6:	4b10      	ldr	r3, [pc, #64]	; (800ef28 <tcp_kill_state+0x90>)
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	6a1b      	ldr	r3, [r3, #32]
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	617b      	str	r3, [r7, #20]
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1e4      	bne.n	800eecc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d003      	beq.n	800ef10 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ef08:	2100      	movs	r1, #0
 800ef0a:	6938      	ldr	r0, [r7, #16]
 800ef0c:	f7ff f952 	bl	800e1b4 <tcp_abandon>
  }
}
 800ef10:	bf00      	nop
 800ef12:	3718      	adds	r7, #24
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	08018a58 	.word	0x08018a58
 800ef1c:	08018fe4 	.word	0x08018fe4
 800ef20:	08018a9c 	.word	0x08018a9c
 800ef24:	20008fd4 	.word	0x20008fd4
 800ef28:	20008fc8 	.word	0x20008fc8

0800ef2c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ef36:	2300      	movs	r3, #0
 800ef38:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef3a:	4b12      	ldr	r3, [pc, #72]	; (800ef84 <tcp_kill_timewait+0x58>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	60fb      	str	r3, [r7, #12]
 800ef40:	e012      	b.n	800ef68 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ef42:	4b11      	ldr	r3, [pc, #68]	; (800ef88 <tcp_kill_timewait+0x5c>)
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	6a1b      	ldr	r3, [r3, #32]
 800ef4a:	1ad3      	subs	r3, r2, r3
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d807      	bhi.n	800ef62 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ef52:	4b0d      	ldr	r3, [pc, #52]	; (800ef88 <tcp_kill_timewait+0x5c>)
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	6a1b      	ldr	r3, [r3, #32]
 800ef5a:	1ad3      	subs	r3, r2, r3
 800ef5c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	68db      	ldr	r3, [r3, #12]
 800ef66:	60fb      	str	r3, [r7, #12]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d1e9      	bne.n	800ef42 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d002      	beq.n	800ef7a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ef74:	68b8      	ldr	r0, [r7, #8]
 800ef76:	f7ff f9db 	bl	800e330 <tcp_abort>
  }
}
 800ef7a:	bf00      	nop
 800ef7c:	3710      	adds	r7, #16
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	20008fd8 	.word	0x20008fd8
 800ef88:	20008fc8 	.word	0x20008fc8

0800ef8c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ef92:	4b10      	ldr	r3, [pc, #64]	; (800efd4 <tcp_handle_closepend+0x48>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ef98:	e014      	b.n	800efc4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	68db      	ldr	r3, [r3, #12]
 800ef9e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	8b5b      	ldrh	r3, [r3, #26]
 800efa4:	f003 0308 	and.w	r3, r3, #8
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d009      	beq.n	800efc0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	8b5b      	ldrh	r3, [r3, #26]
 800efb0:	f023 0308 	bic.w	r3, r3, #8
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f7ff f864 	bl	800e088 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1e7      	bne.n	800ef9a <tcp_handle_closepend+0xe>
  }
}
 800efca:	bf00      	nop
 800efcc:	bf00      	nop
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	20008fd4 	.word	0x20008fd4

0800efd8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	4603      	mov	r3, r0
 800efe0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800efe2:	2001      	movs	r0, #1
 800efe4:	f7fd fc94 	bl	800c910 <memp_malloc>
 800efe8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d126      	bne.n	800f03e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800eff0:	f7ff ffcc 	bl	800ef8c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800eff4:	f7ff ff9a 	bl	800ef2c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eff8:	2001      	movs	r0, #1
 800effa:	f7fd fc89 	bl	800c910 <memp_malloc>
 800effe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d11b      	bne.n	800f03e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f006:	2009      	movs	r0, #9
 800f008:	f7ff ff46 	bl	800ee98 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f00c:	2001      	movs	r0, #1
 800f00e:	f7fd fc7f 	bl	800c910 <memp_malloc>
 800f012:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d111      	bne.n	800f03e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f01a:	2008      	movs	r0, #8
 800f01c:	f7ff ff3c 	bl	800ee98 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f020:	2001      	movs	r0, #1
 800f022:	f7fd fc75 	bl	800c910 <memp_malloc>
 800f026:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d107      	bne.n	800f03e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f02e:	79fb      	ldrb	r3, [r7, #7]
 800f030:	4618      	mov	r0, r3
 800f032:	f7ff fee3 	bl	800edfc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f036:	2001      	movs	r0, #1
 800f038:	f7fd fc6a 	bl	800c910 <memp_malloc>
 800f03c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d03f      	beq.n	800f0c4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f044:	229c      	movs	r2, #156	; 0x9c
 800f046:	2100      	movs	r1, #0
 800f048:	68f8      	ldr	r0, [r7, #12]
 800f04a:	f007 ff2f 	bl	8016eac <memset>
    pcb->prio = prio;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	79fa      	ldrb	r2, [r7, #7]
 800f052:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f05a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f064:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	22ff      	movs	r2, #255	; 0xff
 800f072:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f07a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2206      	movs	r2, #6
 800f080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2206      	movs	r2, #6
 800f088:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f090:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2201      	movs	r2, #1
 800f096:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f09a:	4b0d      	ldr	r3, [pc, #52]	; (800f0d0 <tcp_alloc+0xf8>)
 800f09c:	681a      	ldr	r2, [r3, #0]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f0a2:	4b0c      	ldr	r3, [pc, #48]	; (800f0d4 <tcp_alloc+0xfc>)
 800f0a4:	781a      	ldrb	r2, [r3, #0]
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f0b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	4a08      	ldr	r2, [pc, #32]	; (800f0d8 <tcp_alloc+0x100>)
 800f0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	4a07      	ldr	r2, [pc, #28]	; (800f0dc <tcp_alloc+0x104>)
 800f0c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3710      	adds	r7, #16
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
 800f0ce:	bf00      	nop
 800f0d0:	20008fc8 	.word	0x20008fc8
 800f0d4:	20008fde 	.word	0x20008fde
 800f0d8:	0800ed91 	.word	0x0800ed91
 800f0dc:	006ddd00 	.word	0x006ddd00

0800f0e0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d107      	bne.n	800f0fe <tcp_pcb_purge+0x1e>
 800f0ee:	4b21      	ldr	r3, [pc, #132]	; (800f174 <tcp_pcb_purge+0x94>)
 800f0f0:	f640 0251 	movw	r2, #2129	; 0x851
 800f0f4:	4920      	ldr	r1, [pc, #128]	; (800f178 <tcp_pcb_purge+0x98>)
 800f0f6:	4821      	ldr	r0, [pc, #132]	; (800f17c <tcp_pcb_purge+0x9c>)
 800f0f8:	f007 ffc0 	bl	801707c <iprintf>
 800f0fc:	e037      	b.n	800f16e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	7d1b      	ldrb	r3, [r3, #20]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d033      	beq.n	800f16e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f10a:	2b0a      	cmp	r3, #10
 800f10c:	d02f      	beq.n	800f16e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f112:	2b01      	cmp	r3, #1
 800f114:	d02b      	beq.n	800f16e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d007      	beq.n	800f12e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f122:	4618      	mov	r0, r3
 800f124:	f7fe fada 	bl	800d6dc <pbuf_free>
      pcb->refused_data = NULL;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f132:	2b00      	cmp	r3, #0
 800f134:	d002      	beq.n	800f13c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 f986 	bl	800f448 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f142:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f148:	4618      	mov	r0, r3
 800f14a:	f7ff fdc7 	bl	800ecdc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f152:	4618      	mov	r0, r3
 800f154:	f7ff fdc2 	bl	800ecdc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	66da      	str	r2, [r3, #108]	; 0x6c
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2200      	movs	r2, #0
 800f16a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f16e:	3708      	adds	r7, #8
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	08018a58 	.word	0x08018a58
 800f178:	080190a4 	.word	0x080190a4
 800f17c:	08018a9c 	.word	0x08018a9c

0800f180 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f18a:	683b      	ldr	r3, [r7, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d106      	bne.n	800f19e <tcp_pcb_remove+0x1e>
 800f190:	4b3e      	ldr	r3, [pc, #248]	; (800f28c <tcp_pcb_remove+0x10c>)
 800f192:	f640 0283 	movw	r2, #2179	; 0x883
 800f196:	493e      	ldr	r1, [pc, #248]	; (800f290 <tcp_pcb_remove+0x110>)
 800f198:	483e      	ldr	r0, [pc, #248]	; (800f294 <tcp_pcb_remove+0x114>)
 800f19a:	f007 ff6f 	bl	801707c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d106      	bne.n	800f1b2 <tcp_pcb_remove+0x32>
 800f1a4:	4b39      	ldr	r3, [pc, #228]	; (800f28c <tcp_pcb_remove+0x10c>)
 800f1a6:	f640 0284 	movw	r2, #2180	; 0x884
 800f1aa:	493b      	ldr	r1, [pc, #236]	; (800f298 <tcp_pcb_remove+0x118>)
 800f1ac:	4839      	ldr	r0, [pc, #228]	; (800f294 <tcp_pcb_remove+0x114>)
 800f1ae:	f007 ff65 	bl	801707c <iprintf>

  TCP_RMV(pcblist, pcb);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d105      	bne.n	800f1c8 <tcp_pcb_remove+0x48>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	68da      	ldr	r2, [r3, #12]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	601a      	str	r2, [r3, #0]
 800f1c6:	e013      	b.n	800f1f0 <tcp_pcb_remove+0x70>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	60fb      	str	r3, [r7, #12]
 800f1ce:	e00c      	b.n	800f1ea <tcp_pcb_remove+0x6a>
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	68db      	ldr	r3, [r3, #12]
 800f1d4:	683a      	ldr	r2, [r7, #0]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d104      	bne.n	800f1e4 <tcp_pcb_remove+0x64>
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	68da      	ldr	r2, [r3, #12]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	60da      	str	r2, [r3, #12]
 800f1e2:	e005      	b.n	800f1f0 <tcp_pcb_remove+0x70>
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	60fb      	str	r3, [r7, #12]
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d1ef      	bne.n	800f1d0 <tcp_pcb_remove+0x50>
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f1f6:	6838      	ldr	r0, [r7, #0]
 800f1f8:	f7ff ff72 	bl	800f0e0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	7d1b      	ldrb	r3, [r3, #20]
 800f200:	2b0a      	cmp	r3, #10
 800f202:	d013      	beq.n	800f22c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d00f      	beq.n	800f22c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	8b5b      	ldrh	r3, [r3, #26]
 800f210:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f214:	2b00      	cmp	r3, #0
 800f216:	d009      	beq.n	800f22c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	8b5b      	ldrh	r3, [r3, #26]
 800f21c:	f043 0302 	orr.w	r3, r3, #2
 800f220:	b29a      	uxth	r2, r3
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f226:	6838      	ldr	r0, [r7, #0]
 800f228:	f002 ff6e 	bl	8012108 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	7d1b      	ldrb	r3, [r3, #20]
 800f230:	2b01      	cmp	r3, #1
 800f232:	d020      	beq.n	800f276 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d006      	beq.n	800f24a <tcp_pcb_remove+0xca>
 800f23c:	4b13      	ldr	r3, [pc, #76]	; (800f28c <tcp_pcb_remove+0x10c>)
 800f23e:	f640 0293 	movw	r2, #2195	; 0x893
 800f242:	4916      	ldr	r1, [pc, #88]	; (800f29c <tcp_pcb_remove+0x11c>)
 800f244:	4813      	ldr	r0, [pc, #76]	; (800f294 <tcp_pcb_remove+0x114>)
 800f246:	f007 ff19 	bl	801707c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d006      	beq.n	800f260 <tcp_pcb_remove+0xe0>
 800f252:	4b0e      	ldr	r3, [pc, #56]	; (800f28c <tcp_pcb_remove+0x10c>)
 800f254:	f640 0294 	movw	r2, #2196	; 0x894
 800f258:	4911      	ldr	r1, [pc, #68]	; (800f2a0 <tcp_pcb_remove+0x120>)
 800f25a:	480e      	ldr	r0, [pc, #56]	; (800f294 <tcp_pcb_remove+0x114>)
 800f25c:	f007 ff0e 	bl	801707c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f264:	2b00      	cmp	r3, #0
 800f266:	d006      	beq.n	800f276 <tcp_pcb_remove+0xf6>
 800f268:	4b08      	ldr	r3, [pc, #32]	; (800f28c <tcp_pcb_remove+0x10c>)
 800f26a:	f640 0296 	movw	r2, #2198	; 0x896
 800f26e:	490d      	ldr	r1, [pc, #52]	; (800f2a4 <tcp_pcb_remove+0x124>)
 800f270:	4808      	ldr	r0, [pc, #32]	; (800f294 <tcp_pcb_remove+0x114>)
 800f272:	f007 ff03 	bl	801707c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	2200      	movs	r2, #0
 800f27a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	2200      	movs	r2, #0
 800f280:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f282:	bf00      	nop
 800f284:	3710      	adds	r7, #16
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}
 800f28a:	bf00      	nop
 800f28c:	08018a58 	.word	0x08018a58
 800f290:	080190c0 	.word	0x080190c0
 800f294:	08018a9c 	.word	0x08018a9c
 800f298:	080190dc 	.word	0x080190dc
 800f29c:	080190fc 	.word	0x080190fc
 800f2a0:	08019114 	.word	0x08019114
 800f2a4:	08019130 	.word	0x08019130

0800f2a8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d106      	bne.n	800f2c4 <tcp_next_iss+0x1c>
 800f2b6:	4b0a      	ldr	r3, [pc, #40]	; (800f2e0 <tcp_next_iss+0x38>)
 800f2b8:	f640 02af 	movw	r2, #2223	; 0x8af
 800f2bc:	4909      	ldr	r1, [pc, #36]	; (800f2e4 <tcp_next_iss+0x3c>)
 800f2be:	480a      	ldr	r0, [pc, #40]	; (800f2e8 <tcp_next_iss+0x40>)
 800f2c0:	f007 fedc 	bl	801707c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f2c4:	4b09      	ldr	r3, [pc, #36]	; (800f2ec <tcp_next_iss+0x44>)
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	4b09      	ldr	r3, [pc, #36]	; (800f2f0 <tcp_next_iss+0x48>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	4413      	add	r3, r2
 800f2ce:	4a07      	ldr	r2, [pc, #28]	; (800f2ec <tcp_next_iss+0x44>)
 800f2d0:	6013      	str	r3, [r2, #0]
  return iss;
 800f2d2:	4b06      	ldr	r3, [pc, #24]	; (800f2ec <tcp_next_iss+0x44>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3708      	adds	r7, #8
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	08018a58 	.word	0x08018a58
 800f2e4:	08019148 	.word	0x08019148
 800f2e8:	08018a9c 	.word	0x08018a9c
 800f2ec:	20000024 	.word	0x20000024
 800f2f0:	20008fc8 	.word	0x20008fc8

0800f2f4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b086      	sub	sp, #24
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	60b9      	str	r1, [r7, #8]
 800f2fe:	607a      	str	r2, [r7, #4]
 800f300:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d106      	bne.n	800f316 <tcp_eff_send_mss_netif+0x22>
 800f308:	4b14      	ldr	r3, [pc, #80]	; (800f35c <tcp_eff_send_mss_netif+0x68>)
 800f30a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f30e:	4914      	ldr	r1, [pc, #80]	; (800f360 <tcp_eff_send_mss_netif+0x6c>)
 800f310:	4814      	ldr	r0, [pc, #80]	; (800f364 <tcp_eff_send_mss_netif+0x70>)
 800f312:	f007 feb3 	bl	801707c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d101      	bne.n	800f320 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f31c:	89fb      	ldrh	r3, [r7, #14]
 800f31e:	e019      	b.n	800f354 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f324:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f326:	8afb      	ldrh	r3, [r7, #22]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d012      	beq.n	800f352 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f32c:	2328      	movs	r3, #40	; 0x28
 800f32e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f330:	8afa      	ldrh	r2, [r7, #22]
 800f332:	8abb      	ldrh	r3, [r7, #20]
 800f334:	429a      	cmp	r2, r3
 800f336:	d904      	bls.n	800f342 <tcp_eff_send_mss_netif+0x4e>
 800f338:	8afa      	ldrh	r2, [r7, #22]
 800f33a:	8abb      	ldrh	r3, [r7, #20]
 800f33c:	1ad3      	subs	r3, r2, r3
 800f33e:	b29b      	uxth	r3, r3
 800f340:	e000      	b.n	800f344 <tcp_eff_send_mss_netif+0x50>
 800f342:	2300      	movs	r3, #0
 800f344:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f346:	8a7a      	ldrh	r2, [r7, #18]
 800f348:	89fb      	ldrh	r3, [r7, #14]
 800f34a:	4293      	cmp	r3, r2
 800f34c:	bf28      	it	cs
 800f34e:	4613      	movcs	r3, r2
 800f350:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f352:	89fb      	ldrh	r3, [r7, #14]
}
 800f354:	4618      	mov	r0, r3
 800f356:	3718      	adds	r7, #24
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}
 800f35c:	08018a58 	.word	0x08018a58
 800f360:	08019164 	.word	0x08019164
 800f364:	08018a9c 	.word	0x08018a9c

0800f368 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b084      	sub	sp, #16
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d119      	bne.n	800f3b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f37c:	4b10      	ldr	r3, [pc, #64]	; (800f3c0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f37e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f382:	4910      	ldr	r1, [pc, #64]	; (800f3c4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f384:	4810      	ldr	r0, [pc, #64]	; (800f3c8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f386:	f007 fe79 	bl	801707c <iprintf>

  while (pcb != NULL) {
 800f38a:	e011      	b.n	800f3b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	429a      	cmp	r2, r3
 800f396:	d108      	bne.n	800f3aa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f39e:	68f8      	ldr	r0, [r7, #12]
 800f3a0:	f7fe ffc6 	bl	800e330 <tcp_abort>
      pcb = next;
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	60fb      	str	r3, [r7, #12]
 800f3a8:	e002      	b.n	800f3b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d1ea      	bne.n	800f38c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f3b6:	bf00      	nop
 800f3b8:	bf00      	nop
 800f3ba:	3710      	adds	r7, #16
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	08018a58 	.word	0x08018a58
 800f3c4:	0801918c 	.word	0x0801918c
 800f3c8:	08018a9c 	.word	0x08018a9c

0800f3cc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d02a      	beq.n	800f432 <tcp_netif_ip_addr_changed+0x66>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d026      	beq.n	800f432 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f3e4:	4b15      	ldr	r3, [pc, #84]	; (800f43c <tcp_netif_ip_addr_changed+0x70>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7ff ffbc 	bl	800f368 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f3f0:	4b13      	ldr	r3, [pc, #76]	; (800f440 <tcp_netif_ip_addr_changed+0x74>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f7ff ffb6 	bl	800f368 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d017      	beq.n	800f432 <tcp_netif_ip_addr_changed+0x66>
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d013      	beq.n	800f432 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f40a:	4b0e      	ldr	r3, [pc, #56]	; (800f444 <tcp_netif_ip_addr_changed+0x78>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	60fb      	str	r3, [r7, #12]
 800f410:	e00c      	b.n	800f42c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681a      	ldr	r2, [r3, #0]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d103      	bne.n	800f426 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	60fb      	str	r3, [r7, #12]
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d1ef      	bne.n	800f412 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f432:	bf00      	nop
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	bf00      	nop
 800f43c:	20008fd4 	.word	0x20008fd4
 800f440:	20008fcc 	.word	0x20008fcc
 800f444:	20008fd0 	.word	0x20008fd0

0800f448 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f454:	2b00      	cmp	r3, #0
 800f456:	d007      	beq.n	800f468 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7ff fc3d 	bl	800ecdc <tcp_segs_free>
    pcb->ooseq = NULL;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2200      	movs	r2, #0
 800f466:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f468:	bf00      	nop
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f470:	b590      	push	{r4, r7, lr}
 800f472:	b08d      	sub	sp, #52	; 0x34
 800f474:	af04      	add	r7, sp, #16
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d105      	bne.n	800f48c <tcp_input+0x1c>
 800f480:	4b9b      	ldr	r3, [pc, #620]	; (800f6f0 <tcp_input+0x280>)
 800f482:	2283      	movs	r2, #131	; 0x83
 800f484:	499b      	ldr	r1, [pc, #620]	; (800f6f4 <tcp_input+0x284>)
 800f486:	489c      	ldr	r0, [pc, #624]	; (800f6f8 <tcp_input+0x288>)
 800f488:	f007 fdf8 	bl	801707c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	4a9a      	ldr	r2, [pc, #616]	; (800f6fc <tcp_input+0x28c>)
 800f492:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	895b      	ldrh	r3, [r3, #10]
 800f498:	2b13      	cmp	r3, #19
 800f49a:	f240 83d1 	bls.w	800fc40 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f49e:	4b98      	ldr	r3, [pc, #608]	; (800f700 <tcp_input+0x290>)
 800f4a0:	695b      	ldr	r3, [r3, #20]
 800f4a2:	4a97      	ldr	r2, [pc, #604]	; (800f700 <tcp_input+0x290>)
 800f4a4:	6812      	ldr	r2, [r2, #0]
 800f4a6:	4611      	mov	r1, r2
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f005 ffd1 	bl	8015450 <ip4_addr_isbroadcast_u32>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	f040 83c7 	bne.w	800fc44 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f4b6:	4b92      	ldr	r3, [pc, #584]	; (800f700 <tcp_input+0x290>)
 800f4b8:	695b      	ldr	r3, [r3, #20]
 800f4ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f4be:	2be0      	cmp	r3, #224	; 0xe0
 800f4c0:	f000 83c0 	beq.w	800fc44 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f4c4:	4b8d      	ldr	r3, [pc, #564]	; (800f6fc <tcp_input+0x28c>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	899b      	ldrh	r3, [r3, #12]
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7fc fda7 	bl	800c020 <lwip_htons>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	0b1b      	lsrs	r3, r3, #12
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f4de:	7cbb      	ldrb	r3, [r7, #18]
 800f4e0:	2b13      	cmp	r3, #19
 800f4e2:	f240 83b1 	bls.w	800fc48 <tcp_input+0x7d8>
 800f4e6:	7cbb      	ldrb	r3, [r7, #18]
 800f4e8:	b29a      	uxth	r2, r3
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	891b      	ldrh	r3, [r3, #8]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	f200 83aa 	bhi.w	800fc48 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f4f4:	7cbb      	ldrb	r3, [r7, #18]
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	3b14      	subs	r3, #20
 800f4fa:	b29a      	uxth	r2, r3
 800f4fc:	4b81      	ldr	r3, [pc, #516]	; (800f704 <tcp_input+0x294>)
 800f4fe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f500:	4b81      	ldr	r3, [pc, #516]	; (800f708 <tcp_input+0x298>)
 800f502:	2200      	movs	r2, #0
 800f504:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	895a      	ldrh	r2, [r3, #10]
 800f50a:	7cbb      	ldrb	r3, [r7, #18]
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	429a      	cmp	r2, r3
 800f510:	d309      	bcc.n	800f526 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f512:	4b7c      	ldr	r3, [pc, #496]	; (800f704 <tcp_input+0x294>)
 800f514:	881a      	ldrh	r2, [r3, #0]
 800f516:	4b7d      	ldr	r3, [pc, #500]	; (800f70c <tcp_input+0x29c>)
 800f518:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f51a:	7cbb      	ldrb	r3, [r7, #18]
 800f51c:	4619      	mov	r1, r3
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f7fe f856 	bl	800d5d0 <pbuf_remove_header>
 800f524:	e04e      	b.n	800f5c4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d105      	bne.n	800f53a <tcp_input+0xca>
 800f52e:	4b70      	ldr	r3, [pc, #448]	; (800f6f0 <tcp_input+0x280>)
 800f530:	22c2      	movs	r2, #194	; 0xc2
 800f532:	4977      	ldr	r1, [pc, #476]	; (800f710 <tcp_input+0x2a0>)
 800f534:	4870      	ldr	r0, [pc, #448]	; (800f6f8 <tcp_input+0x288>)
 800f536:	f007 fda1 	bl	801707c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f53a:	2114      	movs	r1, #20
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f7fe f847 	bl	800d5d0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	895a      	ldrh	r2, [r3, #10]
 800f546:	4b71      	ldr	r3, [pc, #452]	; (800f70c <tcp_input+0x29c>)
 800f548:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f54a:	4b6e      	ldr	r3, [pc, #440]	; (800f704 <tcp_input+0x294>)
 800f54c:	881a      	ldrh	r2, [r3, #0]
 800f54e:	4b6f      	ldr	r3, [pc, #444]	; (800f70c <tcp_input+0x29c>)
 800f550:	881b      	ldrh	r3, [r3, #0]
 800f552:	1ad3      	subs	r3, r2, r3
 800f554:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f556:	4b6d      	ldr	r3, [pc, #436]	; (800f70c <tcp_input+0x29c>)
 800f558:	881b      	ldrh	r3, [r3, #0]
 800f55a:	4619      	mov	r1, r3
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f7fe f837 	bl	800d5d0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	895b      	ldrh	r3, [r3, #10]
 800f568:	8a3a      	ldrh	r2, [r7, #16]
 800f56a:	429a      	cmp	r2, r3
 800f56c:	f200 836e 	bhi.w	800fc4c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	4a64      	ldr	r2, [pc, #400]	; (800f708 <tcp_input+0x298>)
 800f578:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	8a3a      	ldrh	r2, [r7, #16]
 800f580:	4611      	mov	r1, r2
 800f582:	4618      	mov	r0, r3
 800f584:	f7fe f824 	bl	800d5d0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	891a      	ldrh	r2, [r3, #8]
 800f58c:	8a3b      	ldrh	r3, [r7, #16]
 800f58e:	1ad3      	subs	r3, r2, r3
 800f590:	b29a      	uxth	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	895b      	ldrh	r3, [r3, #10]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d005      	beq.n	800f5aa <tcp_input+0x13a>
 800f59e:	4b54      	ldr	r3, [pc, #336]	; (800f6f0 <tcp_input+0x280>)
 800f5a0:	22df      	movs	r2, #223	; 0xdf
 800f5a2:	495c      	ldr	r1, [pc, #368]	; (800f714 <tcp_input+0x2a4>)
 800f5a4:	4854      	ldr	r0, [pc, #336]	; (800f6f8 <tcp_input+0x288>)
 800f5a6:	f007 fd69 	bl	801707c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	891a      	ldrh	r2, [r3, #8]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	891b      	ldrh	r3, [r3, #8]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d005      	beq.n	800f5c4 <tcp_input+0x154>
 800f5b8:	4b4d      	ldr	r3, [pc, #308]	; (800f6f0 <tcp_input+0x280>)
 800f5ba:	22e0      	movs	r2, #224	; 0xe0
 800f5bc:	4956      	ldr	r1, [pc, #344]	; (800f718 <tcp_input+0x2a8>)
 800f5be:	484e      	ldr	r0, [pc, #312]	; (800f6f8 <tcp_input+0x288>)
 800f5c0:	f007 fd5c 	bl	801707c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f5c4:	4b4d      	ldr	r3, [pc, #308]	; (800f6fc <tcp_input+0x28c>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	881b      	ldrh	r3, [r3, #0]
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	4a4b      	ldr	r2, [pc, #300]	; (800f6fc <tcp_input+0x28c>)
 800f5ce:	6814      	ldr	r4, [r2, #0]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7fc fd25 	bl	800c020 <lwip_htons>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f5da:	4b48      	ldr	r3, [pc, #288]	; (800f6fc <tcp_input+0x28c>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	885b      	ldrh	r3, [r3, #2]
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	4a46      	ldr	r2, [pc, #280]	; (800f6fc <tcp_input+0x28c>)
 800f5e4:	6814      	ldr	r4, [r2, #0]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fc fd1a 	bl	800c020 <lwip_htons>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f5f0:	4b42      	ldr	r3, [pc, #264]	; (800f6fc <tcp_input+0x28c>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	4a41      	ldr	r2, [pc, #260]	; (800f6fc <tcp_input+0x28c>)
 800f5f8:	6814      	ldr	r4, [r2, #0]
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fc fd25 	bl	800c04a <lwip_htonl>
 800f600:	4603      	mov	r3, r0
 800f602:	6063      	str	r3, [r4, #4]
 800f604:	6863      	ldr	r3, [r4, #4]
 800f606:	4a45      	ldr	r2, [pc, #276]	; (800f71c <tcp_input+0x2ac>)
 800f608:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f60a:	4b3c      	ldr	r3, [pc, #240]	; (800f6fc <tcp_input+0x28c>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	689b      	ldr	r3, [r3, #8]
 800f610:	4a3a      	ldr	r2, [pc, #232]	; (800f6fc <tcp_input+0x28c>)
 800f612:	6814      	ldr	r4, [r2, #0]
 800f614:	4618      	mov	r0, r3
 800f616:	f7fc fd18 	bl	800c04a <lwip_htonl>
 800f61a:	4603      	mov	r3, r0
 800f61c:	60a3      	str	r3, [r4, #8]
 800f61e:	68a3      	ldr	r3, [r4, #8]
 800f620:	4a3f      	ldr	r2, [pc, #252]	; (800f720 <tcp_input+0x2b0>)
 800f622:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f624:	4b35      	ldr	r3, [pc, #212]	; (800f6fc <tcp_input+0x28c>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	89db      	ldrh	r3, [r3, #14]
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	4a33      	ldr	r2, [pc, #204]	; (800f6fc <tcp_input+0x28c>)
 800f62e:	6814      	ldr	r4, [r2, #0]
 800f630:	4618      	mov	r0, r3
 800f632:	f7fc fcf5 	bl	800c020 <lwip_htons>
 800f636:	4603      	mov	r3, r0
 800f638:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f63a:	4b30      	ldr	r3, [pc, #192]	; (800f6fc <tcp_input+0x28c>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	899b      	ldrh	r3, [r3, #12]
 800f640:	b29b      	uxth	r3, r3
 800f642:	4618      	mov	r0, r3
 800f644:	f7fc fcec 	bl	800c020 <lwip_htons>
 800f648:	4603      	mov	r3, r0
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f650:	b2da      	uxtb	r2, r3
 800f652:	4b34      	ldr	r3, [pc, #208]	; (800f724 <tcp_input+0x2b4>)
 800f654:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	891a      	ldrh	r2, [r3, #8]
 800f65a:	4b33      	ldr	r3, [pc, #204]	; (800f728 <tcp_input+0x2b8>)
 800f65c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f65e:	4b31      	ldr	r3, [pc, #196]	; (800f724 <tcp_input+0x2b4>)
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	f003 0303 	and.w	r3, r3, #3
 800f666:	2b00      	cmp	r3, #0
 800f668:	d00c      	beq.n	800f684 <tcp_input+0x214>
    tcplen++;
 800f66a:	4b2f      	ldr	r3, [pc, #188]	; (800f728 <tcp_input+0x2b8>)
 800f66c:	881b      	ldrh	r3, [r3, #0]
 800f66e:	3301      	adds	r3, #1
 800f670:	b29a      	uxth	r2, r3
 800f672:	4b2d      	ldr	r3, [pc, #180]	; (800f728 <tcp_input+0x2b8>)
 800f674:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	891a      	ldrh	r2, [r3, #8]
 800f67a:	4b2b      	ldr	r3, [pc, #172]	; (800f728 <tcp_input+0x2b8>)
 800f67c:	881b      	ldrh	r3, [r3, #0]
 800f67e:	429a      	cmp	r2, r3
 800f680:	f200 82e6 	bhi.w	800fc50 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f684:	2300      	movs	r3, #0
 800f686:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f688:	4b28      	ldr	r3, [pc, #160]	; (800f72c <tcp_input+0x2bc>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	61fb      	str	r3, [r7, #28]
 800f68e:	e09d      	b.n	800f7cc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	7d1b      	ldrb	r3, [r3, #20]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d105      	bne.n	800f6a4 <tcp_input+0x234>
 800f698:	4b15      	ldr	r3, [pc, #84]	; (800f6f0 <tcp_input+0x280>)
 800f69a:	22fb      	movs	r2, #251	; 0xfb
 800f69c:	4924      	ldr	r1, [pc, #144]	; (800f730 <tcp_input+0x2c0>)
 800f69e:	4816      	ldr	r0, [pc, #88]	; (800f6f8 <tcp_input+0x288>)
 800f6a0:	f007 fcec 	bl	801707c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	7d1b      	ldrb	r3, [r3, #20]
 800f6a8:	2b0a      	cmp	r3, #10
 800f6aa:	d105      	bne.n	800f6b8 <tcp_input+0x248>
 800f6ac:	4b10      	ldr	r3, [pc, #64]	; (800f6f0 <tcp_input+0x280>)
 800f6ae:	22fc      	movs	r2, #252	; 0xfc
 800f6b0:	4920      	ldr	r1, [pc, #128]	; (800f734 <tcp_input+0x2c4>)
 800f6b2:	4811      	ldr	r0, [pc, #68]	; (800f6f8 <tcp_input+0x288>)
 800f6b4:	f007 fce2 	bl	801707c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	7d1b      	ldrb	r3, [r3, #20]
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d105      	bne.n	800f6cc <tcp_input+0x25c>
 800f6c0:	4b0b      	ldr	r3, [pc, #44]	; (800f6f0 <tcp_input+0x280>)
 800f6c2:	22fd      	movs	r2, #253	; 0xfd
 800f6c4:	491c      	ldr	r1, [pc, #112]	; (800f738 <tcp_input+0x2c8>)
 800f6c6:	480c      	ldr	r0, [pc, #48]	; (800f6f8 <tcp_input+0x288>)
 800f6c8:	f007 fcd8 	bl	801707c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	7a1b      	ldrb	r3, [r3, #8]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d033      	beq.n	800f73c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	7a1a      	ldrb	r2, [r3, #8]
 800f6d8:	4b09      	ldr	r3, [pc, #36]	; (800f700 <tcp_input+0x290>)
 800f6da:	685b      	ldr	r3, [r3, #4]
 800f6dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d029      	beq.n	800f73c <tcp_input+0x2cc>
      prev = pcb;
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	61bb      	str	r3, [r7, #24]
      continue;
 800f6ec:	e06b      	b.n	800f7c6 <tcp_input+0x356>
 800f6ee:	bf00      	nop
 800f6f0:	080191c0 	.word	0x080191c0
 800f6f4:	080191f4 	.word	0x080191f4
 800f6f8:	0801920c 	.word	0x0801920c
 800f6fc:	20008ff0 	.word	0x20008ff0
 800f700:	20005a58 	.word	0x20005a58
 800f704:	20008ff4 	.word	0x20008ff4
 800f708:	20008ff8 	.word	0x20008ff8
 800f70c:	20008ff6 	.word	0x20008ff6
 800f710:	08019234 	.word	0x08019234
 800f714:	08019244 	.word	0x08019244
 800f718:	08019250 	.word	0x08019250
 800f71c:	20009000 	.word	0x20009000
 800f720:	20009004 	.word	0x20009004
 800f724:	2000900c 	.word	0x2000900c
 800f728:	2000900a 	.word	0x2000900a
 800f72c:	20008fd4 	.word	0x20008fd4
 800f730:	08019270 	.word	0x08019270
 800f734:	08019298 	.word	0x08019298
 800f738:	080192c4 	.word	0x080192c4
    }

    if (pcb->remote_port == tcphdr->src &&
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	8b1a      	ldrh	r2, [r3, #24]
 800f740:	4b72      	ldr	r3, [pc, #456]	; (800f90c <tcp_input+0x49c>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	881b      	ldrh	r3, [r3, #0]
 800f746:	b29b      	uxth	r3, r3
 800f748:	429a      	cmp	r2, r3
 800f74a:	d13a      	bne.n	800f7c2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	8ada      	ldrh	r2, [r3, #22]
 800f750:	4b6e      	ldr	r3, [pc, #440]	; (800f90c <tcp_input+0x49c>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	885b      	ldrh	r3, [r3, #2]
 800f756:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f758:	429a      	cmp	r2, r3
 800f75a:	d132      	bne.n	800f7c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	685a      	ldr	r2, [r3, #4]
 800f760:	4b6b      	ldr	r3, [pc, #428]	; (800f910 <tcp_input+0x4a0>)
 800f762:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f764:	429a      	cmp	r2, r3
 800f766:	d12c      	bne.n	800f7c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f768:	69fb      	ldr	r3, [r7, #28]
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	4b68      	ldr	r3, [pc, #416]	; (800f910 <tcp_input+0x4a0>)
 800f76e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f770:	429a      	cmp	r2, r3
 800f772:	d126      	bne.n	800f7c2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	69fa      	ldr	r2, [r7, #28]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d106      	bne.n	800f78c <tcp_input+0x31c>
 800f77e:	4b65      	ldr	r3, [pc, #404]	; (800f914 <tcp_input+0x4a4>)
 800f780:	f240 120d 	movw	r2, #269	; 0x10d
 800f784:	4964      	ldr	r1, [pc, #400]	; (800f918 <tcp_input+0x4a8>)
 800f786:	4865      	ldr	r0, [pc, #404]	; (800f91c <tcp_input+0x4ac>)
 800f788:	f007 fc78 	bl	801707c <iprintf>
      if (prev != NULL) {
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d00a      	beq.n	800f7a8 <tcp_input+0x338>
        prev->next = pcb->next;
 800f792:	69fb      	ldr	r3, [r7, #28]
 800f794:	68da      	ldr	r2, [r3, #12]
 800f796:	69bb      	ldr	r3, [r7, #24]
 800f798:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f79a:	4b61      	ldr	r3, [pc, #388]	; (800f920 <tcp_input+0x4b0>)
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f7a2:	4a5f      	ldr	r2, [pc, #380]	; (800f920 <tcp_input+0x4b0>)
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	69fa      	ldr	r2, [r7, #28]
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d111      	bne.n	800f7d6 <tcp_input+0x366>
 800f7b2:	4b58      	ldr	r3, [pc, #352]	; (800f914 <tcp_input+0x4a4>)
 800f7b4:	f240 1215 	movw	r2, #277	; 0x115
 800f7b8:	495a      	ldr	r1, [pc, #360]	; (800f924 <tcp_input+0x4b4>)
 800f7ba:	4858      	ldr	r0, [pc, #352]	; (800f91c <tcp_input+0x4ac>)
 800f7bc:	f007 fc5e 	bl	801707c <iprintf>
      break;
 800f7c0:	e009      	b.n	800f7d6 <tcp_input+0x366>
    }
    prev = pcb;
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	61fb      	str	r3, [r7, #28]
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f47f af5e 	bne.w	800f690 <tcp_input+0x220>
 800f7d4:	e000      	b.n	800f7d8 <tcp_input+0x368>
      break;
 800f7d6:	bf00      	nop
  }

  if (pcb == NULL) {
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	f040 80aa 	bne.w	800f934 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7e0:	4b51      	ldr	r3, [pc, #324]	; (800f928 <tcp_input+0x4b8>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	61fb      	str	r3, [r7, #28]
 800f7e6:	e03f      	b.n	800f868 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	7d1b      	ldrb	r3, [r3, #20]
 800f7ec:	2b0a      	cmp	r3, #10
 800f7ee:	d006      	beq.n	800f7fe <tcp_input+0x38e>
 800f7f0:	4b48      	ldr	r3, [pc, #288]	; (800f914 <tcp_input+0x4a4>)
 800f7f2:	f240 121f 	movw	r2, #287	; 0x11f
 800f7f6:	494d      	ldr	r1, [pc, #308]	; (800f92c <tcp_input+0x4bc>)
 800f7f8:	4848      	ldr	r0, [pc, #288]	; (800f91c <tcp_input+0x4ac>)
 800f7fa:	f007 fc3f 	bl	801707c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	7a1b      	ldrb	r3, [r3, #8]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d009      	beq.n	800f81a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f806:	69fb      	ldr	r3, [r7, #28]
 800f808:	7a1a      	ldrb	r2, [r3, #8]
 800f80a:	4b41      	ldr	r3, [pc, #260]	; (800f910 <tcp_input+0x4a0>)
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f812:	3301      	adds	r3, #1
 800f814:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f816:	429a      	cmp	r2, r3
 800f818:	d122      	bne.n	800f860 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	8b1a      	ldrh	r2, [r3, #24]
 800f81e:	4b3b      	ldr	r3, [pc, #236]	; (800f90c <tcp_input+0x49c>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	881b      	ldrh	r3, [r3, #0]
 800f824:	b29b      	uxth	r3, r3
 800f826:	429a      	cmp	r2, r3
 800f828:	d11b      	bne.n	800f862 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	8ada      	ldrh	r2, [r3, #22]
 800f82e:	4b37      	ldr	r3, [pc, #220]	; (800f90c <tcp_input+0x49c>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	885b      	ldrh	r3, [r3, #2]
 800f834:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f836:	429a      	cmp	r2, r3
 800f838:	d113      	bne.n	800f862 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f83a:	69fb      	ldr	r3, [r7, #28]
 800f83c:	685a      	ldr	r2, [r3, #4]
 800f83e:	4b34      	ldr	r3, [pc, #208]	; (800f910 <tcp_input+0x4a0>)
 800f840:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f842:	429a      	cmp	r2, r3
 800f844:	d10d      	bne.n	800f862 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	4b31      	ldr	r3, [pc, #196]	; (800f910 <tcp_input+0x4a0>)
 800f84c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f84e:	429a      	cmp	r2, r3
 800f850:	d107      	bne.n	800f862 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f852:	69f8      	ldr	r0, [r7, #28]
 800f854:	f000 fb56 	bl	800ff04 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f7fd ff3f 	bl	800d6dc <pbuf_free>
        return;
 800f85e:	e1fd      	b.n	800fc5c <tcp_input+0x7ec>
        continue;
 800f860:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	68db      	ldr	r3, [r3, #12]
 800f866:	61fb      	str	r3, [r7, #28]
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d1bc      	bne.n	800f7e8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f86e:	2300      	movs	r3, #0
 800f870:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f872:	4b2f      	ldr	r3, [pc, #188]	; (800f930 <tcp_input+0x4c0>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	617b      	str	r3, [r7, #20]
 800f878:	e02a      	b.n	800f8d0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	7a1b      	ldrb	r3, [r3, #8]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d00c      	beq.n	800f89c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	7a1a      	ldrb	r2, [r3, #8]
 800f886:	4b22      	ldr	r3, [pc, #136]	; (800f910 <tcp_input+0x4a0>)
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f88e:	3301      	adds	r3, #1
 800f890:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f892:	429a      	cmp	r2, r3
 800f894:	d002      	beq.n	800f89c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	61bb      	str	r3, [r7, #24]
        continue;
 800f89a:	e016      	b.n	800f8ca <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	8ada      	ldrh	r2, [r3, #22]
 800f8a0:	4b1a      	ldr	r3, [pc, #104]	; (800f90c <tcp_input+0x49c>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	885b      	ldrh	r3, [r3, #2]
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d10c      	bne.n	800f8c6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	4b17      	ldr	r3, [pc, #92]	; (800f910 <tcp_input+0x4a0>)
 800f8b2:	695b      	ldr	r3, [r3, #20]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d00f      	beq.n	800f8d8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d00d      	beq.n	800f8da <tcp_input+0x46a>
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d009      	beq.n	800f8da <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f8c6:	697b      	ldr	r3, [r7, #20]
 800f8c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	68db      	ldr	r3, [r3, #12]
 800f8ce:	617b      	str	r3, [r7, #20]
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1d1      	bne.n	800f87a <tcp_input+0x40a>
 800f8d6:	e000      	b.n	800f8da <tcp_input+0x46a>
            break;
 800f8d8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d029      	beq.n	800f934 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f8e0:	69bb      	ldr	r3, [r7, #24]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d00a      	beq.n	800f8fc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	68da      	ldr	r2, [r3, #12]
 800f8ea:	69bb      	ldr	r3, [r7, #24]
 800f8ec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f8ee:	4b10      	ldr	r3, [pc, #64]	; (800f930 <tcp_input+0x4c0>)
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f8f6:	4a0e      	ldr	r2, [pc, #56]	; (800f930 <tcp_input+0x4c0>)
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f8fc:	6978      	ldr	r0, [r7, #20]
 800f8fe:	f000 fa03 	bl	800fd08 <tcp_listen_input>
      }
      pbuf_free(p);
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f7fd feea 	bl	800d6dc <pbuf_free>
      return;
 800f908:	e1a8      	b.n	800fc5c <tcp_input+0x7ec>
 800f90a:	bf00      	nop
 800f90c:	20008ff0 	.word	0x20008ff0
 800f910:	20005a58 	.word	0x20005a58
 800f914:	080191c0 	.word	0x080191c0
 800f918:	080192ec 	.word	0x080192ec
 800f91c:	0801920c 	.word	0x0801920c
 800f920:	20008fd4 	.word	0x20008fd4
 800f924:	08019318 	.word	0x08019318
 800f928:	20008fd8 	.word	0x20008fd8
 800f92c:	08019344 	.word	0x08019344
 800f930:	20008fd0 	.word	0x20008fd0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	2b00      	cmp	r3, #0
 800f938:	f000 8158 	beq.w	800fbec <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f93c:	4b95      	ldr	r3, [pc, #596]	; (800fb94 <tcp_input+0x724>)
 800f93e:	2200      	movs	r2, #0
 800f940:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	891a      	ldrh	r2, [r3, #8]
 800f946:	4b93      	ldr	r3, [pc, #588]	; (800fb94 <tcp_input+0x724>)
 800f948:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f94a:	4a92      	ldr	r2, [pc, #584]	; (800fb94 <tcp_input+0x724>)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f950:	4b91      	ldr	r3, [pc, #580]	; (800fb98 <tcp_input+0x728>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	4a8f      	ldr	r2, [pc, #572]	; (800fb94 <tcp_input+0x724>)
 800f956:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f958:	4b90      	ldr	r3, [pc, #576]	; (800fb9c <tcp_input+0x72c>)
 800f95a:	2200      	movs	r2, #0
 800f95c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f95e:	4b90      	ldr	r3, [pc, #576]	; (800fba0 <tcp_input+0x730>)
 800f960:	2200      	movs	r2, #0
 800f962:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f964:	4b8f      	ldr	r3, [pc, #572]	; (800fba4 <tcp_input+0x734>)
 800f966:	2200      	movs	r2, #0
 800f968:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f96a:	4b8f      	ldr	r3, [pc, #572]	; (800fba8 <tcp_input+0x738>)
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	f003 0308 	and.w	r3, r3, #8
 800f972:	2b00      	cmp	r3, #0
 800f974:	d006      	beq.n	800f984 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	7b5b      	ldrb	r3, [r3, #13]
 800f97a:	f043 0301 	orr.w	r3, r3, #1
 800f97e:	b2da      	uxtb	r2, r3
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d017      	beq.n	800f9bc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f98c:	69f8      	ldr	r0, [r7, #28]
 800f98e:	f7ff f929 	bl	800ebe4 <tcp_process_refused_data>
 800f992:	4603      	mov	r3, r0
 800f994:	f113 0f0d 	cmn.w	r3, #13
 800f998:	d007      	beq.n	800f9aa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f99a:	69fb      	ldr	r3, [r7, #28]
 800f99c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d00c      	beq.n	800f9bc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f9a2:	4b82      	ldr	r3, [pc, #520]	; (800fbac <tcp_input+0x73c>)
 800f9a4:	881b      	ldrh	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d008      	beq.n	800f9bc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f9aa:	69fb      	ldr	r3, [r7, #28]
 800f9ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	f040 80e3 	bne.w	800fb7a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f9b4:	69f8      	ldr	r0, [r7, #28]
 800f9b6:	f003 f9ad 	bl	8012d14 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f9ba:	e0de      	b.n	800fb7a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f9bc:	4a7c      	ldr	r2, [pc, #496]	; (800fbb0 <tcp_input+0x740>)
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f9c2:	69f8      	ldr	r0, [r7, #28]
 800f9c4:	f000 fb18 	bl	800fff8 <tcp_process>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f9cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9d0:	f113 0f0d 	cmn.w	r3, #13
 800f9d4:	f000 80d3 	beq.w	800fb7e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f9d8:	4b71      	ldr	r3, [pc, #452]	; (800fba0 <tcp_input+0x730>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	f003 0308 	and.w	r3, r3, #8
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d015      	beq.n	800fa10 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d008      	beq.n	800fa00 <tcp_input+0x590>
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9f4:	69fa      	ldr	r2, [r7, #28]
 800f9f6:	6912      	ldr	r2, [r2, #16]
 800f9f8:	f06f 010d 	mvn.w	r1, #13
 800f9fc:	4610      	mov	r0, r2
 800f9fe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fa00:	69f9      	ldr	r1, [r7, #28]
 800fa02:	486c      	ldr	r0, [pc, #432]	; (800fbb4 <tcp_input+0x744>)
 800fa04:	f7ff fbbc 	bl	800f180 <tcp_pcb_remove>
        tcp_free(pcb);
 800fa08:	69f8      	ldr	r0, [r7, #28]
 800fa0a:	f7fe f9a9 	bl	800dd60 <tcp_free>
 800fa0e:	e0da      	b.n	800fbc6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fa10:	2300      	movs	r3, #0
 800fa12:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fa14:	4b63      	ldr	r3, [pc, #396]	; (800fba4 <tcp_input+0x734>)
 800fa16:	881b      	ldrh	r3, [r3, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d01d      	beq.n	800fa58 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fa1c:	4b61      	ldr	r3, [pc, #388]	; (800fba4 <tcp_input+0x734>)
 800fa1e:	881b      	ldrh	r3, [r3, #0]
 800fa20:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d00a      	beq.n	800fa42 <tcp_input+0x5d2>
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa32:	69fa      	ldr	r2, [r7, #28]
 800fa34:	6910      	ldr	r0, [r2, #16]
 800fa36:	89fa      	ldrh	r2, [r7, #14]
 800fa38:	69f9      	ldr	r1, [r7, #28]
 800fa3a:	4798      	blx	r3
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	74fb      	strb	r3, [r7, #19]
 800fa40:	e001      	b.n	800fa46 <tcp_input+0x5d6>
 800fa42:	2300      	movs	r3, #0
 800fa44:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fa46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa4a:	f113 0f0d 	cmn.w	r3, #13
 800fa4e:	f000 8098 	beq.w	800fb82 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fa52:	4b54      	ldr	r3, [pc, #336]	; (800fba4 <tcp_input+0x734>)
 800fa54:	2200      	movs	r2, #0
 800fa56:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fa58:	69f8      	ldr	r0, [r7, #28]
 800fa5a:	f000 f915 	bl	800fc88 <tcp_input_delayed_close>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	f040 8090 	bne.w	800fb86 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fa66:	4b4d      	ldr	r3, [pc, #308]	; (800fb9c <tcp_input+0x72c>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d041      	beq.n	800faf2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d006      	beq.n	800fa84 <tcp_input+0x614>
 800fa76:	4b50      	ldr	r3, [pc, #320]	; (800fbb8 <tcp_input+0x748>)
 800fa78:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fa7c:	494f      	ldr	r1, [pc, #316]	; (800fbbc <tcp_input+0x74c>)
 800fa7e:	4850      	ldr	r0, [pc, #320]	; (800fbc0 <tcp_input+0x750>)
 800fa80:	f007 fafc 	bl	801707c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fa84:	69fb      	ldr	r3, [r7, #28]
 800fa86:	8b5b      	ldrh	r3, [r3, #26]
 800fa88:	f003 0310 	and.w	r3, r3, #16
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d008      	beq.n	800faa2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fa90:	4b42      	ldr	r3, [pc, #264]	; (800fb9c <tcp_input+0x72c>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7fd fe21 	bl	800d6dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fa9a:	69f8      	ldr	r0, [r7, #28]
 800fa9c:	f7fe fc48 	bl	800e330 <tcp_abort>
            goto aborted;
 800faa0:	e091      	b.n	800fbc6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d00c      	beq.n	800fac6 <tcp_input+0x656>
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	6918      	ldr	r0, [r3, #16]
 800fab6:	4b39      	ldr	r3, [pc, #228]	; (800fb9c <tcp_input+0x72c>)
 800fab8:	681a      	ldr	r2, [r3, #0]
 800faba:	2300      	movs	r3, #0
 800fabc:	69f9      	ldr	r1, [r7, #28]
 800fabe:	47a0      	blx	r4
 800fac0:	4603      	mov	r3, r0
 800fac2:	74fb      	strb	r3, [r7, #19]
 800fac4:	e008      	b.n	800fad8 <tcp_input+0x668>
 800fac6:	4b35      	ldr	r3, [pc, #212]	; (800fb9c <tcp_input+0x72c>)
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	2300      	movs	r3, #0
 800facc:	69f9      	ldr	r1, [r7, #28]
 800face:	2000      	movs	r0, #0
 800fad0:	f7ff f95e 	bl	800ed90 <tcp_recv_null>
 800fad4:	4603      	mov	r3, r0
 800fad6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fad8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fadc:	f113 0f0d 	cmn.w	r3, #13
 800fae0:	d053      	beq.n	800fb8a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fae2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d003      	beq.n	800faf2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800faea:	4b2c      	ldr	r3, [pc, #176]	; (800fb9c <tcp_input+0x72c>)
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800faf2:	4b2b      	ldr	r3, [pc, #172]	; (800fba0 <tcp_input+0x730>)
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	f003 0320 	and.w	r3, r3, #32
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d030      	beq.n	800fb60 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fafe:	69fb      	ldr	r3, [r7, #28]
 800fb00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d009      	beq.n	800fb1a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fb06:	69fb      	ldr	r3, [r7, #28]
 800fb08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb0a:	7b5a      	ldrb	r2, [r3, #13]
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb10:	f042 0220 	orr.w	r2, r2, #32
 800fb14:	b2d2      	uxtb	r2, r2
 800fb16:	735a      	strb	r2, [r3, #13]
 800fb18:	e022      	b.n	800fb60 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb1e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fb22:	d005      	beq.n	800fb30 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb28:	3301      	adds	r3, #1
 800fb2a:	b29a      	uxth	r2, r3
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d00b      	beq.n	800fb52 <tcp_input+0x6e2>
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	6918      	ldr	r0, [r3, #16]
 800fb44:	2300      	movs	r3, #0
 800fb46:	2200      	movs	r2, #0
 800fb48:	69f9      	ldr	r1, [r7, #28]
 800fb4a:	47a0      	blx	r4
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	74fb      	strb	r3, [r7, #19]
 800fb50:	e001      	b.n	800fb56 <tcp_input+0x6e6>
 800fb52:	2300      	movs	r3, #0
 800fb54:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fb56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb5a:	f113 0f0d 	cmn.w	r3, #13
 800fb5e:	d016      	beq.n	800fb8e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fb60:	4b13      	ldr	r3, [pc, #76]	; (800fbb0 <tcp_input+0x740>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fb66:	69f8      	ldr	r0, [r7, #28]
 800fb68:	f000 f88e 	bl	800fc88 <tcp_input_delayed_close>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d128      	bne.n	800fbc4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fb72:	69f8      	ldr	r0, [r7, #28]
 800fb74:	f002 fac8 	bl	8012108 <tcp_output>
 800fb78:	e025      	b.n	800fbc6 <tcp_input+0x756>
        goto aborted;
 800fb7a:	bf00      	nop
 800fb7c:	e023      	b.n	800fbc6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fb7e:	bf00      	nop
 800fb80:	e021      	b.n	800fbc6 <tcp_input+0x756>
              goto aborted;
 800fb82:	bf00      	nop
 800fb84:	e01f      	b.n	800fbc6 <tcp_input+0x756>
          goto aborted;
 800fb86:	bf00      	nop
 800fb88:	e01d      	b.n	800fbc6 <tcp_input+0x756>
            goto aborted;
 800fb8a:	bf00      	nop
 800fb8c:	e01b      	b.n	800fbc6 <tcp_input+0x756>
              goto aborted;
 800fb8e:	bf00      	nop
 800fb90:	e019      	b.n	800fbc6 <tcp_input+0x756>
 800fb92:	bf00      	nop
 800fb94:	20008fe0 	.word	0x20008fe0
 800fb98:	20008ff0 	.word	0x20008ff0
 800fb9c:	20009010 	.word	0x20009010
 800fba0:	2000900d 	.word	0x2000900d
 800fba4:	20009008 	.word	0x20009008
 800fba8:	2000900c 	.word	0x2000900c
 800fbac:	2000900a 	.word	0x2000900a
 800fbb0:	20009014 	.word	0x20009014
 800fbb4:	20008fd4 	.word	0x20008fd4
 800fbb8:	080191c0 	.word	0x080191c0
 800fbbc:	08019374 	.word	0x08019374
 800fbc0:	0801920c 	.word	0x0801920c
          goto aborted;
 800fbc4:	bf00      	nop
    tcp_input_pcb = NULL;
 800fbc6:	4b27      	ldr	r3, [pc, #156]	; (800fc64 <tcp_input+0x7f4>)
 800fbc8:	2200      	movs	r2, #0
 800fbca:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fbcc:	4b26      	ldr	r3, [pc, #152]	; (800fc68 <tcp_input+0x7f8>)
 800fbce:	2200      	movs	r2, #0
 800fbd0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fbd2:	4b26      	ldr	r3, [pc, #152]	; (800fc6c <tcp_input+0x7fc>)
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d03f      	beq.n	800fc5a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fbda:	4b24      	ldr	r3, [pc, #144]	; (800fc6c <tcp_input+0x7fc>)
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fd fd7c 	bl	800d6dc <pbuf_free>
      inseg.p = NULL;
 800fbe4:	4b21      	ldr	r3, [pc, #132]	; (800fc6c <tcp_input+0x7fc>)
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fbea:	e036      	b.n	800fc5a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fbec:	4b20      	ldr	r3, [pc, #128]	; (800fc70 <tcp_input+0x800>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	899b      	ldrh	r3, [r3, #12]
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fc fa13 	bl	800c020 <lwip_htons>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	f003 0304 	and.w	r3, r3, #4
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d118      	bne.n	800fc38 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc06:	4b1b      	ldr	r3, [pc, #108]	; (800fc74 <tcp_input+0x804>)
 800fc08:	6819      	ldr	r1, [r3, #0]
 800fc0a:	4b1b      	ldr	r3, [pc, #108]	; (800fc78 <tcp_input+0x808>)
 800fc0c:	881b      	ldrh	r3, [r3, #0]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	4b1a      	ldr	r3, [pc, #104]	; (800fc7c <tcp_input+0x80c>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc16:	4b16      	ldr	r3, [pc, #88]	; (800fc70 <tcp_input+0x800>)
 800fc18:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc1a:	885b      	ldrh	r3, [r3, #2]
 800fc1c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc1e:	4a14      	ldr	r2, [pc, #80]	; (800fc70 <tcp_input+0x800>)
 800fc20:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc22:	8812      	ldrh	r2, [r2, #0]
 800fc24:	b292      	uxth	r2, r2
 800fc26:	9202      	str	r2, [sp, #8]
 800fc28:	9301      	str	r3, [sp, #4]
 800fc2a:	4b15      	ldr	r3, [pc, #84]	; (800fc80 <tcp_input+0x810>)
 800fc2c:	9300      	str	r3, [sp, #0]
 800fc2e:	4b15      	ldr	r3, [pc, #84]	; (800fc84 <tcp_input+0x814>)
 800fc30:	4602      	mov	r2, r0
 800fc32:	2000      	movs	r0, #0
 800fc34:	f003 f81c 	bl	8012c70 <tcp_rst>
    pbuf_free(p);
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f7fd fd4f 	bl	800d6dc <pbuf_free>
  return;
 800fc3e:	e00c      	b.n	800fc5a <tcp_input+0x7ea>
    goto dropped;
 800fc40:	bf00      	nop
 800fc42:	e006      	b.n	800fc52 <tcp_input+0x7e2>
    goto dropped;
 800fc44:	bf00      	nop
 800fc46:	e004      	b.n	800fc52 <tcp_input+0x7e2>
    goto dropped;
 800fc48:	bf00      	nop
 800fc4a:	e002      	b.n	800fc52 <tcp_input+0x7e2>
      goto dropped;
 800fc4c:	bf00      	nop
 800fc4e:	e000      	b.n	800fc52 <tcp_input+0x7e2>
      goto dropped;
 800fc50:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f7fd fd42 	bl	800d6dc <pbuf_free>
 800fc58:	e000      	b.n	800fc5c <tcp_input+0x7ec>
  return;
 800fc5a:	bf00      	nop
}
 800fc5c:	3724      	adds	r7, #36	; 0x24
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd90      	pop	{r4, r7, pc}
 800fc62:	bf00      	nop
 800fc64:	20009014 	.word	0x20009014
 800fc68:	20009010 	.word	0x20009010
 800fc6c:	20008fe0 	.word	0x20008fe0
 800fc70:	20008ff0 	.word	0x20008ff0
 800fc74:	20009004 	.word	0x20009004
 800fc78:	2000900a 	.word	0x2000900a
 800fc7c:	20009000 	.word	0x20009000
 800fc80:	20005a68 	.word	0x20005a68
 800fc84:	20005a6c 	.word	0x20005a6c

0800fc88 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d106      	bne.n	800fca4 <tcp_input_delayed_close+0x1c>
 800fc96:	4b17      	ldr	r3, [pc, #92]	; (800fcf4 <tcp_input_delayed_close+0x6c>)
 800fc98:	f240 225a 	movw	r2, #602	; 0x25a
 800fc9c:	4916      	ldr	r1, [pc, #88]	; (800fcf8 <tcp_input_delayed_close+0x70>)
 800fc9e:	4817      	ldr	r0, [pc, #92]	; (800fcfc <tcp_input_delayed_close+0x74>)
 800fca0:	f007 f9ec 	bl	801707c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fca4:	4b16      	ldr	r3, [pc, #88]	; (800fd00 <tcp_input_delayed_close+0x78>)
 800fca6:	781b      	ldrb	r3, [r3, #0]
 800fca8:	f003 0310 	and.w	r3, r3, #16
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d01c      	beq.n	800fcea <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	8b5b      	ldrh	r3, [r3, #26]
 800fcb4:	f003 0310 	and.w	r3, r3, #16
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d10d      	bne.n	800fcd8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d008      	beq.n	800fcd8 <tcp_input_delayed_close+0x50>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	6912      	ldr	r2, [r2, #16]
 800fcd0:	f06f 010e 	mvn.w	r1, #14
 800fcd4:	4610      	mov	r0, r2
 800fcd6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fcd8:	6879      	ldr	r1, [r7, #4]
 800fcda:	480a      	ldr	r0, [pc, #40]	; (800fd04 <tcp_input_delayed_close+0x7c>)
 800fcdc:	f7ff fa50 	bl	800f180 <tcp_pcb_remove>
    tcp_free(pcb);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7fe f83d 	bl	800dd60 <tcp_free>
    return 1;
 800fce6:	2301      	movs	r3, #1
 800fce8:	e000      	b.n	800fcec <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	080191c0 	.word	0x080191c0
 800fcf8:	08019390 	.word	0x08019390
 800fcfc:	0801920c 	.word	0x0801920c
 800fd00:	2000900d 	.word	0x2000900d
 800fd04:	20008fd4 	.word	0x20008fd4

0800fd08 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fd08:	b590      	push	{r4, r7, lr}
 800fd0a:	b08b      	sub	sp, #44	; 0x2c
 800fd0c:	af04      	add	r7, sp, #16
 800fd0e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fd10:	4b6f      	ldr	r3, [pc, #444]	; (800fed0 <tcp_listen_input+0x1c8>)
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	f003 0304 	and.w	r3, r3, #4
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	f040 80d2 	bne.w	800fec2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d106      	bne.n	800fd32 <tcp_listen_input+0x2a>
 800fd24:	4b6b      	ldr	r3, [pc, #428]	; (800fed4 <tcp_listen_input+0x1cc>)
 800fd26:	f240 2281 	movw	r2, #641	; 0x281
 800fd2a:	496b      	ldr	r1, [pc, #428]	; (800fed8 <tcp_listen_input+0x1d0>)
 800fd2c:	486b      	ldr	r0, [pc, #428]	; (800fedc <tcp_listen_input+0x1d4>)
 800fd2e:	f007 f9a5 	bl	801707c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fd32:	4b67      	ldr	r3, [pc, #412]	; (800fed0 <tcp_listen_input+0x1c8>)
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	f003 0310 	and.w	r3, r3, #16
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d019      	beq.n	800fd72 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd3e:	4b68      	ldr	r3, [pc, #416]	; (800fee0 <tcp_listen_input+0x1d8>)
 800fd40:	6819      	ldr	r1, [r3, #0]
 800fd42:	4b68      	ldr	r3, [pc, #416]	; (800fee4 <tcp_listen_input+0x1dc>)
 800fd44:	881b      	ldrh	r3, [r3, #0]
 800fd46:	461a      	mov	r2, r3
 800fd48:	4b67      	ldr	r3, [pc, #412]	; (800fee8 <tcp_listen_input+0x1e0>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd4e:	4b67      	ldr	r3, [pc, #412]	; (800feec <tcp_listen_input+0x1e4>)
 800fd50:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd52:	885b      	ldrh	r3, [r3, #2]
 800fd54:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd56:	4a65      	ldr	r2, [pc, #404]	; (800feec <tcp_listen_input+0x1e4>)
 800fd58:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd5a:	8812      	ldrh	r2, [r2, #0]
 800fd5c:	b292      	uxth	r2, r2
 800fd5e:	9202      	str	r2, [sp, #8]
 800fd60:	9301      	str	r3, [sp, #4]
 800fd62:	4b63      	ldr	r3, [pc, #396]	; (800fef0 <tcp_listen_input+0x1e8>)
 800fd64:	9300      	str	r3, [sp, #0]
 800fd66:	4b63      	ldr	r3, [pc, #396]	; (800fef4 <tcp_listen_input+0x1ec>)
 800fd68:	4602      	mov	r2, r0
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f002 ff80 	bl	8012c70 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fd70:	e0a9      	b.n	800fec6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fd72:	4b57      	ldr	r3, [pc, #348]	; (800fed0 <tcp_listen_input+0x1c8>)
 800fd74:	781b      	ldrb	r3, [r3, #0]
 800fd76:	f003 0302 	and.w	r3, r3, #2
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	f000 80a3 	beq.w	800fec6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	7d5b      	ldrb	r3, [r3, #21]
 800fd84:	4618      	mov	r0, r3
 800fd86:	f7ff f927 	bl	800efd8 <tcp_alloc>
 800fd8a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d111      	bne.n	800fdb6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	699b      	ldr	r3, [r3, #24]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d00a      	beq.n	800fdb0 <tcp_listen_input+0xa8>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	699b      	ldr	r3, [r3, #24]
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	6910      	ldr	r0, [r2, #16]
 800fda2:	f04f 32ff 	mov.w	r2, #4294967295
 800fda6:	2100      	movs	r1, #0
 800fda8:	4798      	blx	r3
 800fdaa:	4603      	mov	r3, r0
 800fdac:	73bb      	strb	r3, [r7, #14]
      return;
 800fdae:	e08b      	b.n	800fec8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fdb0:	23f0      	movs	r3, #240	; 0xf0
 800fdb2:	73bb      	strb	r3, [r7, #14]
      return;
 800fdb4:	e088      	b.n	800fec8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fdb6:	4b50      	ldr	r3, [pc, #320]	; (800fef8 <tcp_listen_input+0x1f0>)
 800fdb8:	695a      	ldr	r2, [r3, #20]
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fdbe:	4b4e      	ldr	r3, [pc, #312]	; (800fef8 <tcp_listen_input+0x1f0>)
 800fdc0:	691a      	ldr	r2, [r3, #16]
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	8ada      	ldrh	r2, [r3, #22]
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fdce:	4b47      	ldr	r3, [pc, #284]	; (800feec <tcp_listen_input+0x1e4>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	881b      	ldrh	r3, [r3, #0]
 800fdd4:	b29a      	uxth	r2, r3
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	2203      	movs	r2, #3
 800fdde:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fde0:	4b41      	ldr	r3, [pc, #260]	; (800fee8 <tcp_listen_input+0x1e0>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	1c5a      	adds	r2, r3, #1
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fdf2:	6978      	ldr	r0, [r7, #20]
 800fdf4:	f7ff fa58 	bl	800f2a8 <tcp_next_iss>
 800fdf8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	693a      	ldr	r2, [r7, #16]
 800fdfe:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	693a      	ldr	r2, [r7, #16]
 800fe04:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fe06:	697b      	ldr	r3, [r7, #20]
 800fe08:	693a      	ldr	r2, [r7, #16]
 800fe0a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	693a      	ldr	r2, [r7, #16]
 800fe10:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fe12:	4b35      	ldr	r3, [pc, #212]	; (800fee8 <tcp_listen_input+0x1e0>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	1e5a      	subs	r2, r3, #1
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	691a      	ldr	r2, [r3, #16]
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	7a5b      	ldrb	r3, [r3, #9]
 800fe2e:	f003 030c 	and.w	r3, r3, #12
 800fe32:	b2da      	uxtb	r2, r3
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	7a1a      	ldrb	r2, [r3, #8]
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fe40:	4b2e      	ldr	r3, [pc, #184]	; (800fefc <tcp_listen_input+0x1f4>)
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	60da      	str	r2, [r3, #12]
 800fe48:	4a2c      	ldr	r2, [pc, #176]	; (800fefc <tcp_listen_input+0x1f4>)
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	6013      	str	r3, [r2, #0]
 800fe4e:	f003 f8d1 	bl	8012ff4 <tcp_timer_needed>
 800fe52:	4b2b      	ldr	r3, [pc, #172]	; (800ff00 <tcp_listen_input+0x1f8>)
 800fe54:	2201      	movs	r2, #1
 800fe56:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fe58:	6978      	ldr	r0, [r7, #20]
 800fe5a:	f001 fd8f 	bl	801197c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fe5e:	4b23      	ldr	r3, [pc, #140]	; (800feec <tcp_listen_input+0x1e4>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	89db      	ldrh	r3, [r3, #14]
 800fe64:	b29a      	uxth	r2, r3
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fe78:	697b      	ldr	r3, [r7, #20]
 800fe7a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	3304      	adds	r3, #4
 800fe80:	4618      	mov	r0, r3
 800fe82:	f005 f84f 	bl	8014f24 <ip4_route>
 800fe86:	4601      	mov	r1, r0
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	3304      	adds	r3, #4
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f7ff fa30 	bl	800f2f4 <tcp_eff_send_mss_netif>
 800fe94:	4603      	mov	r3, r0
 800fe96:	461a      	mov	r2, r3
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fe9c:	2112      	movs	r1, #18
 800fe9e:	6978      	ldr	r0, [r7, #20]
 800fea0:	f002 f844 	bl	8011f2c <tcp_enqueue_flags>
 800fea4:	4603      	mov	r3, r0
 800fea6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d004      	beq.n	800feba <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800feb0:	2100      	movs	r1, #0
 800feb2:	6978      	ldr	r0, [r7, #20]
 800feb4:	f7fe f97e 	bl	800e1b4 <tcp_abandon>
      return;
 800feb8:	e006      	b.n	800fec8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800feba:	6978      	ldr	r0, [r7, #20]
 800febc:	f002 f924 	bl	8012108 <tcp_output>
  return;
 800fec0:	e001      	b.n	800fec6 <tcp_listen_input+0x1be>
    return;
 800fec2:	bf00      	nop
 800fec4:	e000      	b.n	800fec8 <tcp_listen_input+0x1c0>
  return;
 800fec6:	bf00      	nop
}
 800fec8:	371c      	adds	r7, #28
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd90      	pop	{r4, r7, pc}
 800fece:	bf00      	nop
 800fed0:	2000900c 	.word	0x2000900c
 800fed4:	080191c0 	.word	0x080191c0
 800fed8:	080193b8 	.word	0x080193b8
 800fedc:	0801920c 	.word	0x0801920c
 800fee0:	20009004 	.word	0x20009004
 800fee4:	2000900a 	.word	0x2000900a
 800fee8:	20009000 	.word	0x20009000
 800feec:	20008ff0 	.word	0x20008ff0
 800fef0:	20005a68 	.word	0x20005a68
 800fef4:	20005a6c 	.word	0x20005a6c
 800fef8:	20005a58 	.word	0x20005a58
 800fefc:	20008fd4 	.word	0x20008fd4
 800ff00:	20008fdc 	.word	0x20008fdc

0800ff04 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b086      	sub	sp, #24
 800ff08:	af04      	add	r7, sp, #16
 800ff0a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ff0c:	4b2f      	ldr	r3, [pc, #188]	; (800ffcc <tcp_timewait_input+0xc8>)
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	f003 0304 	and.w	r3, r3, #4
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d153      	bne.n	800ffc0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d106      	bne.n	800ff2c <tcp_timewait_input+0x28>
 800ff1e:	4b2c      	ldr	r3, [pc, #176]	; (800ffd0 <tcp_timewait_input+0xcc>)
 800ff20:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ff24:	492b      	ldr	r1, [pc, #172]	; (800ffd4 <tcp_timewait_input+0xd0>)
 800ff26:	482c      	ldr	r0, [pc, #176]	; (800ffd8 <tcp_timewait_input+0xd4>)
 800ff28:	f007 f8a8 	bl	801707c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ff2c:	4b27      	ldr	r3, [pc, #156]	; (800ffcc <tcp_timewait_input+0xc8>)
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	f003 0302 	and.w	r3, r3, #2
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d02a      	beq.n	800ff8e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ff38:	4b28      	ldr	r3, [pc, #160]	; (800ffdc <tcp_timewait_input+0xd8>)
 800ff3a:	681a      	ldr	r2, [r3, #0]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff40:	1ad3      	subs	r3, r2, r3
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	db2d      	blt.n	800ffa2 <tcp_timewait_input+0x9e>
 800ff46:	4b25      	ldr	r3, [pc, #148]	; (800ffdc <tcp_timewait_input+0xd8>)
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4e:	6879      	ldr	r1, [r7, #4]
 800ff50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff52:	440b      	add	r3, r1
 800ff54:	1ad3      	subs	r3, r2, r3
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	dc23      	bgt.n	800ffa2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff5a:	4b21      	ldr	r3, [pc, #132]	; (800ffe0 <tcp_timewait_input+0xdc>)
 800ff5c:	6819      	ldr	r1, [r3, #0]
 800ff5e:	4b21      	ldr	r3, [pc, #132]	; (800ffe4 <tcp_timewait_input+0xe0>)
 800ff60:	881b      	ldrh	r3, [r3, #0]
 800ff62:	461a      	mov	r2, r3
 800ff64:	4b1d      	ldr	r3, [pc, #116]	; (800ffdc <tcp_timewait_input+0xd8>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff6a:	4b1f      	ldr	r3, [pc, #124]	; (800ffe8 <tcp_timewait_input+0xe4>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff6e:	885b      	ldrh	r3, [r3, #2]
 800ff70:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff72:	4a1d      	ldr	r2, [pc, #116]	; (800ffe8 <tcp_timewait_input+0xe4>)
 800ff74:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff76:	8812      	ldrh	r2, [r2, #0]
 800ff78:	b292      	uxth	r2, r2
 800ff7a:	9202      	str	r2, [sp, #8]
 800ff7c:	9301      	str	r3, [sp, #4]
 800ff7e:	4b1b      	ldr	r3, [pc, #108]	; (800ffec <tcp_timewait_input+0xe8>)
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	4b1b      	ldr	r3, [pc, #108]	; (800fff0 <tcp_timewait_input+0xec>)
 800ff84:	4602      	mov	r2, r0
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f002 fe72 	bl	8012c70 <tcp_rst>
      return;
 800ff8c:	e01b      	b.n	800ffc6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ff8e:	4b0f      	ldr	r3, [pc, #60]	; (800ffcc <tcp_timewait_input+0xc8>)
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	f003 0301 	and.w	r3, r3, #1
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d003      	beq.n	800ffa2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ff9a:	4b16      	ldr	r3, [pc, #88]	; (800fff4 <tcp_timewait_input+0xf0>)
 800ff9c:	681a      	ldr	r2, [r3, #0]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ffa2:	4b10      	ldr	r3, [pc, #64]	; (800ffe4 <tcp_timewait_input+0xe0>)
 800ffa4:	881b      	ldrh	r3, [r3, #0]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d00c      	beq.n	800ffc4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	8b5b      	ldrh	r3, [r3, #26]
 800ffae:	f043 0302 	orr.w	r3, r3, #2
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f002 f8a5 	bl	8012108 <tcp_output>
  }
  return;
 800ffbe:	e001      	b.n	800ffc4 <tcp_timewait_input+0xc0>
    return;
 800ffc0:	bf00      	nop
 800ffc2:	e000      	b.n	800ffc6 <tcp_timewait_input+0xc2>
  return;
 800ffc4:	bf00      	nop
}
 800ffc6:	3708      	adds	r7, #8
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bd80      	pop	{r7, pc}
 800ffcc:	2000900c 	.word	0x2000900c
 800ffd0:	080191c0 	.word	0x080191c0
 800ffd4:	080193d8 	.word	0x080193d8
 800ffd8:	0801920c 	.word	0x0801920c
 800ffdc:	20009000 	.word	0x20009000
 800ffe0:	20009004 	.word	0x20009004
 800ffe4:	2000900a 	.word	0x2000900a
 800ffe8:	20008ff0 	.word	0x20008ff0
 800ffec:	20005a68 	.word	0x20005a68
 800fff0:	20005a6c 	.word	0x20005a6c
 800fff4:	20008fc8 	.word	0x20008fc8

0800fff8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fff8:	b590      	push	{r4, r7, lr}
 800fffa:	b08d      	sub	sp, #52	; 0x34
 800fffc:	af04      	add	r7, sp, #16
 800fffe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010000:	2300      	movs	r3, #0
 8010002:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010004:	2300      	movs	r3, #0
 8010006:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d106      	bne.n	801001c <tcp_process+0x24>
 801000e:	4b9d      	ldr	r3, [pc, #628]	; (8010284 <tcp_process+0x28c>)
 8010010:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010014:	499c      	ldr	r1, [pc, #624]	; (8010288 <tcp_process+0x290>)
 8010016:	489d      	ldr	r0, [pc, #628]	; (801028c <tcp_process+0x294>)
 8010018:	f007 f830 	bl	801707c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801001c:	4b9c      	ldr	r3, [pc, #624]	; (8010290 <tcp_process+0x298>)
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	f003 0304 	and.w	r3, r3, #4
 8010024:	2b00      	cmp	r3, #0
 8010026:	d04e      	beq.n	80100c6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	7d1b      	ldrb	r3, [r3, #20]
 801002c:	2b02      	cmp	r3, #2
 801002e:	d108      	bne.n	8010042 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010034:	4b97      	ldr	r3, [pc, #604]	; (8010294 <tcp_process+0x29c>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	429a      	cmp	r2, r3
 801003a:	d123      	bne.n	8010084 <tcp_process+0x8c>
        acceptable = 1;
 801003c:	2301      	movs	r3, #1
 801003e:	76fb      	strb	r3, [r7, #27]
 8010040:	e020      	b.n	8010084 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010046:	4b94      	ldr	r3, [pc, #592]	; (8010298 <tcp_process+0x2a0>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	429a      	cmp	r2, r3
 801004c:	d102      	bne.n	8010054 <tcp_process+0x5c>
        acceptable = 1;
 801004e:	2301      	movs	r3, #1
 8010050:	76fb      	strb	r3, [r7, #27]
 8010052:	e017      	b.n	8010084 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010054:	4b90      	ldr	r3, [pc, #576]	; (8010298 <tcp_process+0x2a0>)
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801005c:	1ad3      	subs	r3, r2, r3
 801005e:	2b00      	cmp	r3, #0
 8010060:	db10      	blt.n	8010084 <tcp_process+0x8c>
 8010062:	4b8d      	ldr	r3, [pc, #564]	; (8010298 <tcp_process+0x2a0>)
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801006a:	6879      	ldr	r1, [r7, #4]
 801006c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801006e:	440b      	add	r3, r1
 8010070:	1ad3      	subs	r3, r2, r3
 8010072:	2b00      	cmp	r3, #0
 8010074:	dc06      	bgt.n	8010084 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	8b5b      	ldrh	r3, [r3, #26]
 801007a:	f043 0302 	orr.w	r3, r3, #2
 801007e:	b29a      	uxth	r2, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010084:	7efb      	ldrb	r3, [r7, #27]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d01b      	beq.n	80100c2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	7d1b      	ldrb	r3, [r3, #20]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d106      	bne.n	80100a0 <tcp_process+0xa8>
 8010092:	4b7c      	ldr	r3, [pc, #496]	; (8010284 <tcp_process+0x28c>)
 8010094:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010098:	4980      	ldr	r1, [pc, #512]	; (801029c <tcp_process+0x2a4>)
 801009a:	487c      	ldr	r0, [pc, #496]	; (801028c <tcp_process+0x294>)
 801009c:	f006 ffee 	bl	801707c <iprintf>
      recv_flags |= TF_RESET;
 80100a0:	4b7f      	ldr	r3, [pc, #508]	; (80102a0 <tcp_process+0x2a8>)
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	f043 0308 	orr.w	r3, r3, #8
 80100a8:	b2da      	uxtb	r2, r3
 80100aa:	4b7d      	ldr	r3, [pc, #500]	; (80102a0 <tcp_process+0x2a8>)
 80100ac:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	8b5b      	ldrh	r3, [r3, #26]
 80100b2:	f023 0301 	bic.w	r3, r3, #1
 80100b6:	b29a      	uxth	r2, r3
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80100bc:	f06f 030d 	mvn.w	r3, #13
 80100c0:	e37a      	b.n	80107b8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80100c2:	2300      	movs	r3, #0
 80100c4:	e378      	b.n	80107b8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80100c6:	4b72      	ldr	r3, [pc, #456]	; (8010290 <tcp_process+0x298>)
 80100c8:	781b      	ldrb	r3, [r3, #0]
 80100ca:	f003 0302 	and.w	r3, r3, #2
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d010      	beq.n	80100f4 <tcp_process+0xfc>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	7d1b      	ldrb	r3, [r3, #20]
 80100d6:	2b02      	cmp	r3, #2
 80100d8:	d00c      	beq.n	80100f4 <tcp_process+0xfc>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	7d1b      	ldrb	r3, [r3, #20]
 80100de:	2b03      	cmp	r3, #3
 80100e0:	d008      	beq.n	80100f4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	8b5b      	ldrh	r3, [r3, #26]
 80100e6:	f043 0302 	orr.w	r3, r3, #2
 80100ea:	b29a      	uxth	r2, r3
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80100f0:	2300      	movs	r3, #0
 80100f2:	e361      	b.n	80107b8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	8b5b      	ldrh	r3, [r3, #26]
 80100f8:	f003 0310 	and.w	r3, r3, #16
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d103      	bne.n	8010108 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010100:	4b68      	ldr	r3, [pc, #416]	; (80102a4 <tcp_process+0x2ac>)
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2200      	movs	r2, #0
 801010c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2200      	movs	r2, #0
 8010114:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f001 fc2f 	bl	801197c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	7d1b      	ldrb	r3, [r3, #20]
 8010122:	3b02      	subs	r3, #2
 8010124:	2b07      	cmp	r3, #7
 8010126:	f200 8337 	bhi.w	8010798 <tcp_process+0x7a0>
 801012a:	a201      	add	r2, pc, #4	; (adr r2, 8010130 <tcp_process+0x138>)
 801012c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010130:	08010151 	.word	0x08010151
 8010134:	08010381 	.word	0x08010381
 8010138:	080104f9 	.word	0x080104f9
 801013c:	08010523 	.word	0x08010523
 8010140:	08010647 	.word	0x08010647
 8010144:	080104f9 	.word	0x080104f9
 8010148:	080106d3 	.word	0x080106d3
 801014c:	08010763 	.word	0x08010763
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010150:	4b4f      	ldr	r3, [pc, #316]	; (8010290 <tcp_process+0x298>)
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	f003 0310 	and.w	r3, r3, #16
 8010158:	2b00      	cmp	r3, #0
 801015a:	f000 80e4 	beq.w	8010326 <tcp_process+0x32e>
 801015e:	4b4c      	ldr	r3, [pc, #304]	; (8010290 <tcp_process+0x298>)
 8010160:	781b      	ldrb	r3, [r3, #0]
 8010162:	f003 0302 	and.w	r3, r3, #2
 8010166:	2b00      	cmp	r3, #0
 8010168:	f000 80dd 	beq.w	8010326 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010170:	1c5a      	adds	r2, r3, #1
 8010172:	4b48      	ldr	r3, [pc, #288]	; (8010294 <tcp_process+0x29c>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	429a      	cmp	r2, r3
 8010178:	f040 80d5 	bne.w	8010326 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801017c:	4b46      	ldr	r3, [pc, #280]	; (8010298 <tcp_process+0x2a0>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	1c5a      	adds	r2, r3, #1
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801018e:	4b41      	ldr	r3, [pc, #260]	; (8010294 <tcp_process+0x29c>)
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010196:	4b44      	ldr	r3, [pc, #272]	; (80102a8 <tcp_process+0x2b0>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	89db      	ldrh	r3, [r3, #14]
 801019c:	b29a      	uxth	r2, r3
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80101b0:	4b39      	ldr	r3, [pc, #228]	; (8010298 <tcp_process+0x2a0>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	1e5a      	subs	r2, r3, #1
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2204      	movs	r2, #4
 80101be:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	3304      	adds	r3, #4
 80101c8:	4618      	mov	r0, r3
 80101ca:	f004 feab 	bl	8014f24 <ip4_route>
 80101ce:	4601      	mov	r1, r0
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	3304      	adds	r3, #4
 80101d4:	461a      	mov	r2, r3
 80101d6:	4620      	mov	r0, r4
 80101d8:	f7ff f88c 	bl	800f2f4 <tcp_eff_send_mss_netif>
 80101dc:	4603      	mov	r3, r0
 80101de:	461a      	mov	r2, r3
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101e8:	009a      	lsls	r2, r3, #2
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80101ee:	005b      	lsls	r3, r3, #1
 80101f0:	f241 111c 	movw	r1, #4380	; 0x111c
 80101f4:	428b      	cmp	r3, r1
 80101f6:	bf38      	it	cc
 80101f8:	460b      	movcc	r3, r1
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d204      	bcs.n	8010208 <tcp_process+0x210>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	b29b      	uxth	r3, r3
 8010206:	e00d      	b.n	8010224 <tcp_process+0x22c>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801020c:	005b      	lsls	r3, r3, #1
 801020e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010212:	4293      	cmp	r3, r2
 8010214:	d904      	bls.n	8010220 <tcp_process+0x228>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801021a:	005b      	lsls	r3, r3, #1
 801021c:	b29b      	uxth	r3, r3
 801021e:	e001      	b.n	8010224 <tcp_process+0x22c>
 8010220:	f241 131c 	movw	r3, #4380	; 0x111c
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010230:	2b00      	cmp	r3, #0
 8010232:	d106      	bne.n	8010242 <tcp_process+0x24a>
 8010234:	4b13      	ldr	r3, [pc, #76]	; (8010284 <tcp_process+0x28c>)
 8010236:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801023a:	491c      	ldr	r1, [pc, #112]	; (80102ac <tcp_process+0x2b4>)
 801023c:	4813      	ldr	r0, [pc, #76]	; (801028c <tcp_process+0x294>)
 801023e:	f006 ff1d 	bl	801707c <iprintf>
        --pcb->snd_queuelen;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010248:	3b01      	subs	r3, #1
 801024a:	b29a      	uxth	r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010256:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d12a      	bne.n	80102b4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010262:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d106      	bne.n	8010278 <tcp_process+0x280>
 801026a:	4b06      	ldr	r3, [pc, #24]	; (8010284 <tcp_process+0x28c>)
 801026c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010270:	490f      	ldr	r1, [pc, #60]	; (80102b0 <tcp_process+0x2b8>)
 8010272:	4806      	ldr	r0, [pc, #24]	; (801028c <tcp_process+0x294>)
 8010274:	f006 ff02 	bl	801707c <iprintf>
          pcb->unsent = rseg->next;
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	681a      	ldr	r2, [r3, #0]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	66da      	str	r2, [r3, #108]	; 0x6c
 8010280:	e01c      	b.n	80102bc <tcp_process+0x2c4>
 8010282:	bf00      	nop
 8010284:	080191c0 	.word	0x080191c0
 8010288:	080193f8 	.word	0x080193f8
 801028c:	0801920c 	.word	0x0801920c
 8010290:	2000900c 	.word	0x2000900c
 8010294:	20009004 	.word	0x20009004
 8010298:	20009000 	.word	0x20009000
 801029c:	08019414 	.word	0x08019414
 80102a0:	2000900d 	.word	0x2000900d
 80102a4:	20008fc8 	.word	0x20008fc8
 80102a8:	20008ff0 	.word	0x20008ff0
 80102ac:	08019434 	.word	0x08019434
 80102b0:	0801944c 	.word	0x0801944c
        } else {
          pcb->unacked = rseg->next;
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80102bc:	69f8      	ldr	r0, [r7, #28]
 80102be:	f7fe fd22 	bl	800ed06 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d104      	bne.n	80102d4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102d0:	861a      	strh	r2, [r3, #48]	; 0x30
 80102d2:	e006      	b.n	80102e2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2200      	movs	r2, #0
 80102de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d00a      	beq.n	8010302 <tcp_process+0x30a>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102f2:	687a      	ldr	r2, [r7, #4]
 80102f4:	6910      	ldr	r0, [r2, #16]
 80102f6:	2200      	movs	r2, #0
 80102f8:	6879      	ldr	r1, [r7, #4]
 80102fa:	4798      	blx	r3
 80102fc:	4603      	mov	r3, r0
 80102fe:	76bb      	strb	r3, [r7, #26]
 8010300:	e001      	b.n	8010306 <tcp_process+0x30e>
 8010302:	2300      	movs	r3, #0
 8010304:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010306:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801030a:	f113 0f0d 	cmn.w	r3, #13
 801030e:	d102      	bne.n	8010316 <tcp_process+0x31e>
          return ERR_ABRT;
 8010310:	f06f 030c 	mvn.w	r3, #12
 8010314:	e250      	b.n	80107b8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	8b5b      	ldrh	r3, [r3, #26]
 801031a:	f043 0302 	orr.w	r3, r3, #2
 801031e:	b29a      	uxth	r2, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010324:	e23a      	b.n	801079c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010326:	4b98      	ldr	r3, [pc, #608]	; (8010588 <tcp_process+0x590>)
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	f003 0310 	and.w	r3, r3, #16
 801032e:	2b00      	cmp	r3, #0
 8010330:	f000 8234 	beq.w	801079c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010334:	4b95      	ldr	r3, [pc, #596]	; (801058c <tcp_process+0x594>)
 8010336:	6819      	ldr	r1, [r3, #0]
 8010338:	4b95      	ldr	r3, [pc, #596]	; (8010590 <tcp_process+0x598>)
 801033a:	881b      	ldrh	r3, [r3, #0]
 801033c:	461a      	mov	r2, r3
 801033e:	4b95      	ldr	r3, [pc, #596]	; (8010594 <tcp_process+0x59c>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010344:	4b94      	ldr	r3, [pc, #592]	; (8010598 <tcp_process+0x5a0>)
 8010346:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010348:	885b      	ldrh	r3, [r3, #2]
 801034a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801034c:	4a92      	ldr	r2, [pc, #584]	; (8010598 <tcp_process+0x5a0>)
 801034e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010350:	8812      	ldrh	r2, [r2, #0]
 8010352:	b292      	uxth	r2, r2
 8010354:	9202      	str	r2, [sp, #8]
 8010356:	9301      	str	r3, [sp, #4]
 8010358:	4b90      	ldr	r3, [pc, #576]	; (801059c <tcp_process+0x5a4>)
 801035a:	9300      	str	r3, [sp, #0]
 801035c:	4b90      	ldr	r3, [pc, #576]	; (80105a0 <tcp_process+0x5a8>)
 801035e:	4602      	mov	r2, r0
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f002 fc85 	bl	8012c70 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801036c:	2b05      	cmp	r3, #5
 801036e:	f200 8215 	bhi.w	801079c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2200      	movs	r2, #0
 8010376:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f002 fa4f 	bl	801281c <tcp_rexmit_rto>
      break;
 801037e:	e20d      	b.n	801079c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010380:	4b81      	ldr	r3, [pc, #516]	; (8010588 <tcp_process+0x590>)
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	f003 0310 	and.w	r3, r3, #16
 8010388:	2b00      	cmp	r3, #0
 801038a:	f000 80a1 	beq.w	80104d0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801038e:	4b7f      	ldr	r3, [pc, #508]	; (801058c <tcp_process+0x594>)
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010396:	1ad3      	subs	r3, r2, r3
 8010398:	3b01      	subs	r3, #1
 801039a:	2b00      	cmp	r3, #0
 801039c:	db7e      	blt.n	801049c <tcp_process+0x4a4>
 801039e:	4b7b      	ldr	r3, [pc, #492]	; (801058c <tcp_process+0x594>)
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103a6:	1ad3      	subs	r3, r2, r3
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	dc77      	bgt.n	801049c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2204      	movs	r2, #4
 80103b0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d102      	bne.n	80103c0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80103ba:	23fa      	movs	r3, #250	; 0xfa
 80103bc:	76bb      	strb	r3, [r7, #26]
 80103be:	e01d      	b.n	80103fc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103c4:	699b      	ldr	r3, [r3, #24]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d106      	bne.n	80103d8 <tcp_process+0x3e0>
 80103ca:	4b76      	ldr	r3, [pc, #472]	; (80105a4 <tcp_process+0x5ac>)
 80103cc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80103d0:	4975      	ldr	r1, [pc, #468]	; (80105a8 <tcp_process+0x5b0>)
 80103d2:	4876      	ldr	r0, [pc, #472]	; (80105ac <tcp_process+0x5b4>)
 80103d4:	f006 fe52 	bl	801707c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103dc:	699b      	ldr	r3, [r3, #24]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d00a      	beq.n	80103f8 <tcp_process+0x400>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103e6:	699b      	ldr	r3, [r3, #24]
 80103e8:	687a      	ldr	r2, [r7, #4]
 80103ea:	6910      	ldr	r0, [r2, #16]
 80103ec:	2200      	movs	r2, #0
 80103ee:	6879      	ldr	r1, [r7, #4]
 80103f0:	4798      	blx	r3
 80103f2:	4603      	mov	r3, r0
 80103f4:	76bb      	strb	r3, [r7, #26]
 80103f6:	e001      	b.n	80103fc <tcp_process+0x404>
 80103f8:	23f0      	movs	r3, #240	; 0xf0
 80103fa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80103fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d00a      	beq.n	801041a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010404:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010408:	f113 0f0d 	cmn.w	r3, #13
 801040c:	d002      	beq.n	8010414 <tcp_process+0x41c>
              tcp_abort(pcb);
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f7fd ff8e 	bl	800e330 <tcp_abort>
            }
            return ERR_ABRT;
 8010414:	f06f 030c 	mvn.w	r3, #12
 8010418:	e1ce      	b.n	80107b8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 fae0 	bl	80109e0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010420:	4b63      	ldr	r3, [pc, #396]	; (80105b0 <tcp_process+0x5b8>)
 8010422:	881b      	ldrh	r3, [r3, #0]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d005      	beq.n	8010434 <tcp_process+0x43c>
            recv_acked--;
 8010428:	4b61      	ldr	r3, [pc, #388]	; (80105b0 <tcp_process+0x5b8>)
 801042a:	881b      	ldrh	r3, [r3, #0]
 801042c:	3b01      	subs	r3, #1
 801042e:	b29a      	uxth	r2, r3
 8010430:	4b5f      	ldr	r3, [pc, #380]	; (80105b0 <tcp_process+0x5b8>)
 8010432:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010438:	009a      	lsls	r2, r3, #2
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801043e:	005b      	lsls	r3, r3, #1
 8010440:	f241 111c 	movw	r1, #4380	; 0x111c
 8010444:	428b      	cmp	r3, r1
 8010446:	bf38      	it	cc
 8010448:	460b      	movcc	r3, r1
 801044a:	429a      	cmp	r2, r3
 801044c:	d204      	bcs.n	8010458 <tcp_process+0x460>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010452:	009b      	lsls	r3, r3, #2
 8010454:	b29b      	uxth	r3, r3
 8010456:	e00d      	b.n	8010474 <tcp_process+0x47c>
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801045c:	005b      	lsls	r3, r3, #1
 801045e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010462:	4293      	cmp	r3, r2
 8010464:	d904      	bls.n	8010470 <tcp_process+0x478>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801046a:	005b      	lsls	r3, r3, #1
 801046c:	b29b      	uxth	r3, r3
 801046e:	e001      	b.n	8010474 <tcp_process+0x47c>
 8010470:	f241 131c 	movw	r3, #4380	; 0x111c
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801047a:	4b4e      	ldr	r3, [pc, #312]	; (80105b4 <tcp_process+0x5bc>)
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	f003 0320 	and.w	r3, r3, #32
 8010482:	2b00      	cmp	r3, #0
 8010484:	d037      	beq.n	80104f6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	8b5b      	ldrh	r3, [r3, #26]
 801048a:	f043 0302 	orr.w	r3, r3, #2
 801048e:	b29a      	uxth	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2207      	movs	r2, #7
 8010498:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801049a:	e02c      	b.n	80104f6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801049c:	4b3b      	ldr	r3, [pc, #236]	; (801058c <tcp_process+0x594>)
 801049e:	6819      	ldr	r1, [r3, #0]
 80104a0:	4b3b      	ldr	r3, [pc, #236]	; (8010590 <tcp_process+0x598>)
 80104a2:	881b      	ldrh	r3, [r3, #0]
 80104a4:	461a      	mov	r2, r3
 80104a6:	4b3b      	ldr	r3, [pc, #236]	; (8010594 <tcp_process+0x59c>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104ac:	4b3a      	ldr	r3, [pc, #232]	; (8010598 <tcp_process+0x5a0>)
 80104ae:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104b0:	885b      	ldrh	r3, [r3, #2]
 80104b2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104b4:	4a38      	ldr	r2, [pc, #224]	; (8010598 <tcp_process+0x5a0>)
 80104b6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104b8:	8812      	ldrh	r2, [r2, #0]
 80104ba:	b292      	uxth	r2, r2
 80104bc:	9202      	str	r2, [sp, #8]
 80104be:	9301      	str	r3, [sp, #4]
 80104c0:	4b36      	ldr	r3, [pc, #216]	; (801059c <tcp_process+0x5a4>)
 80104c2:	9300      	str	r3, [sp, #0]
 80104c4:	4b36      	ldr	r3, [pc, #216]	; (80105a0 <tcp_process+0x5a8>)
 80104c6:	4602      	mov	r2, r0
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f002 fbd1 	bl	8012c70 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80104ce:	e167      	b.n	80107a0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80104d0:	4b2d      	ldr	r3, [pc, #180]	; (8010588 <tcp_process+0x590>)
 80104d2:	781b      	ldrb	r3, [r3, #0]
 80104d4:	f003 0302 	and.w	r3, r3, #2
 80104d8:	2b00      	cmp	r3, #0
 80104da:	f000 8161 	beq.w	80107a0 <tcp_process+0x7a8>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e2:	1e5a      	subs	r2, r3, #1
 80104e4:	4b2b      	ldr	r3, [pc, #172]	; (8010594 <tcp_process+0x59c>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	f040 8159 	bne.w	80107a0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f002 f9b6 	bl	8012860 <tcp_rexmit>
      break;
 80104f4:	e154      	b.n	80107a0 <tcp_process+0x7a8>
 80104f6:	e153      	b.n	80107a0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f000 fa71 	bl	80109e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80104fe:	4b2d      	ldr	r3, [pc, #180]	; (80105b4 <tcp_process+0x5bc>)
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	f003 0320 	and.w	r3, r3, #32
 8010506:	2b00      	cmp	r3, #0
 8010508:	f000 814c 	beq.w	80107a4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	8b5b      	ldrh	r3, [r3, #26]
 8010510:	f043 0302 	orr.w	r3, r3, #2
 8010514:	b29a      	uxth	r2, r3
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2207      	movs	r2, #7
 801051e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010520:	e140      	b.n	80107a4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	f000 fa5c 	bl	80109e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010528:	4b22      	ldr	r3, [pc, #136]	; (80105b4 <tcp_process+0x5bc>)
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	f003 0320 	and.w	r3, r3, #32
 8010530:	2b00      	cmp	r3, #0
 8010532:	d071      	beq.n	8010618 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010534:	4b14      	ldr	r3, [pc, #80]	; (8010588 <tcp_process+0x590>)
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	f003 0310 	and.w	r3, r3, #16
 801053c:	2b00      	cmp	r3, #0
 801053e:	d060      	beq.n	8010602 <tcp_process+0x60a>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010544:	4b11      	ldr	r3, [pc, #68]	; (801058c <tcp_process+0x594>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	429a      	cmp	r2, r3
 801054a:	d15a      	bne.n	8010602 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010550:	2b00      	cmp	r3, #0
 8010552:	d156      	bne.n	8010602 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	8b5b      	ldrh	r3, [r3, #26]
 8010558:	f043 0302 	orr.w	r3, r3, #2
 801055c:	b29a      	uxth	r2, r3
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f7fe fdbc 	bl	800f0e0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010568:	4b13      	ldr	r3, [pc, #76]	; (80105b8 <tcp_process+0x5c0>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	687a      	ldr	r2, [r7, #4]
 801056e:	429a      	cmp	r2, r3
 8010570:	d105      	bne.n	801057e <tcp_process+0x586>
 8010572:	4b11      	ldr	r3, [pc, #68]	; (80105b8 <tcp_process+0x5c0>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	4a0f      	ldr	r2, [pc, #60]	; (80105b8 <tcp_process+0x5c0>)
 801057a:	6013      	str	r3, [r2, #0]
 801057c:	e02e      	b.n	80105dc <tcp_process+0x5e4>
 801057e:	4b0e      	ldr	r3, [pc, #56]	; (80105b8 <tcp_process+0x5c0>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	617b      	str	r3, [r7, #20]
 8010584:	e027      	b.n	80105d6 <tcp_process+0x5de>
 8010586:	bf00      	nop
 8010588:	2000900c 	.word	0x2000900c
 801058c:	20009004 	.word	0x20009004
 8010590:	2000900a 	.word	0x2000900a
 8010594:	20009000 	.word	0x20009000
 8010598:	20008ff0 	.word	0x20008ff0
 801059c:	20005a68 	.word	0x20005a68
 80105a0:	20005a6c 	.word	0x20005a6c
 80105a4:	080191c0 	.word	0x080191c0
 80105a8:	08019460 	.word	0x08019460
 80105ac:	0801920c 	.word	0x0801920c
 80105b0:	20009008 	.word	0x20009008
 80105b4:	2000900d 	.word	0x2000900d
 80105b8:	20008fd4 	.word	0x20008fd4
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	687a      	ldr	r2, [r7, #4]
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d104      	bne.n	80105d0 <tcp_process+0x5d8>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	68da      	ldr	r2, [r3, #12]
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	60da      	str	r2, [r3, #12]
 80105ce:	e005      	b.n	80105dc <tcp_process+0x5e4>
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	617b      	str	r3, [r7, #20]
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d1ef      	bne.n	80105bc <tcp_process+0x5c4>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	60da      	str	r2, [r3, #12]
 80105e2:	4b77      	ldr	r3, [pc, #476]	; (80107c0 <tcp_process+0x7c8>)
 80105e4:	2201      	movs	r2, #1
 80105e6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	220a      	movs	r2, #10
 80105ec:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80105ee:	4b75      	ldr	r3, [pc, #468]	; (80107c4 <tcp_process+0x7cc>)
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	60da      	str	r2, [r3, #12]
 80105f6:	4a73      	ldr	r2, [pc, #460]	; (80107c4 <tcp_process+0x7cc>)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6013      	str	r3, [r2, #0]
 80105fc:	f002 fcfa 	bl	8012ff4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010600:	e0d2      	b.n	80107a8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	8b5b      	ldrh	r3, [r3, #26]
 8010606:	f043 0302 	orr.w	r3, r3, #2
 801060a:	b29a      	uxth	r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2208      	movs	r2, #8
 8010614:	751a      	strb	r2, [r3, #20]
      break;
 8010616:	e0c7      	b.n	80107a8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010618:	4b6b      	ldr	r3, [pc, #428]	; (80107c8 <tcp_process+0x7d0>)
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	f003 0310 	and.w	r3, r3, #16
 8010620:	2b00      	cmp	r3, #0
 8010622:	f000 80c1 	beq.w	80107a8 <tcp_process+0x7b0>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801062a:	4b68      	ldr	r3, [pc, #416]	; (80107cc <tcp_process+0x7d4>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	429a      	cmp	r2, r3
 8010630:	f040 80ba 	bne.w	80107a8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010638:	2b00      	cmp	r3, #0
 801063a:	f040 80b5 	bne.w	80107a8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2206      	movs	r2, #6
 8010642:	751a      	strb	r2, [r3, #20]
      break;
 8010644:	e0b0      	b.n	80107a8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 f9ca 	bl	80109e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801064c:	4b60      	ldr	r3, [pc, #384]	; (80107d0 <tcp_process+0x7d8>)
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	f003 0320 	and.w	r3, r3, #32
 8010654:	2b00      	cmp	r3, #0
 8010656:	f000 80a9 	beq.w	80107ac <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	8b5b      	ldrh	r3, [r3, #26]
 801065e:	f043 0302 	orr.w	r3, r3, #2
 8010662:	b29a      	uxth	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7fe fd39 	bl	800f0e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801066e:	4b59      	ldr	r3, [pc, #356]	; (80107d4 <tcp_process+0x7dc>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	429a      	cmp	r2, r3
 8010676:	d105      	bne.n	8010684 <tcp_process+0x68c>
 8010678:	4b56      	ldr	r3, [pc, #344]	; (80107d4 <tcp_process+0x7dc>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	4a55      	ldr	r2, [pc, #340]	; (80107d4 <tcp_process+0x7dc>)
 8010680:	6013      	str	r3, [r2, #0]
 8010682:	e013      	b.n	80106ac <tcp_process+0x6b4>
 8010684:	4b53      	ldr	r3, [pc, #332]	; (80107d4 <tcp_process+0x7dc>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	613b      	str	r3, [r7, #16]
 801068a:	e00c      	b.n	80106a6 <tcp_process+0x6ae>
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	429a      	cmp	r2, r3
 8010694:	d104      	bne.n	80106a0 <tcp_process+0x6a8>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	68da      	ldr	r2, [r3, #12]
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	60da      	str	r2, [r3, #12]
 801069e:	e005      	b.n	80106ac <tcp_process+0x6b4>
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	613b      	str	r3, [r7, #16]
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d1ef      	bne.n	801068c <tcp_process+0x694>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2200      	movs	r2, #0
 80106b0:	60da      	str	r2, [r3, #12]
 80106b2:	4b43      	ldr	r3, [pc, #268]	; (80107c0 <tcp_process+0x7c8>)
 80106b4:	2201      	movs	r2, #1
 80106b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	220a      	movs	r2, #10
 80106bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80106be:	4b41      	ldr	r3, [pc, #260]	; (80107c4 <tcp_process+0x7cc>)
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	60da      	str	r2, [r3, #12]
 80106c6:	4a3f      	ldr	r2, [pc, #252]	; (80107c4 <tcp_process+0x7cc>)
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6013      	str	r3, [r2, #0]
 80106cc:	f002 fc92 	bl	8012ff4 <tcp_timer_needed>
      }
      break;
 80106d0:	e06c      	b.n	80107ac <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 f984 	bl	80109e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80106d8:	4b3b      	ldr	r3, [pc, #236]	; (80107c8 <tcp_process+0x7d0>)
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	f003 0310 	and.w	r3, r3, #16
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d065      	beq.n	80107b0 <tcp_process+0x7b8>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106e8:	4b38      	ldr	r3, [pc, #224]	; (80107cc <tcp_process+0x7d4>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d15f      	bne.n	80107b0 <tcp_process+0x7b8>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d15b      	bne.n	80107b0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f7fe fcf1 	bl	800f0e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80106fe:	4b35      	ldr	r3, [pc, #212]	; (80107d4 <tcp_process+0x7dc>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	687a      	ldr	r2, [r7, #4]
 8010704:	429a      	cmp	r2, r3
 8010706:	d105      	bne.n	8010714 <tcp_process+0x71c>
 8010708:	4b32      	ldr	r3, [pc, #200]	; (80107d4 <tcp_process+0x7dc>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	68db      	ldr	r3, [r3, #12]
 801070e:	4a31      	ldr	r2, [pc, #196]	; (80107d4 <tcp_process+0x7dc>)
 8010710:	6013      	str	r3, [r2, #0]
 8010712:	e013      	b.n	801073c <tcp_process+0x744>
 8010714:	4b2f      	ldr	r3, [pc, #188]	; (80107d4 <tcp_process+0x7dc>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	60fb      	str	r3, [r7, #12]
 801071a:	e00c      	b.n	8010736 <tcp_process+0x73e>
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	687a      	ldr	r2, [r7, #4]
 8010722:	429a      	cmp	r2, r3
 8010724:	d104      	bne.n	8010730 <tcp_process+0x738>
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	68da      	ldr	r2, [r3, #12]
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	60da      	str	r2, [r3, #12]
 801072e:	e005      	b.n	801073c <tcp_process+0x744>
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	60fb      	str	r3, [r7, #12]
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d1ef      	bne.n	801071c <tcp_process+0x724>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	60da      	str	r2, [r3, #12]
 8010742:	4b1f      	ldr	r3, [pc, #124]	; (80107c0 <tcp_process+0x7c8>)
 8010744:	2201      	movs	r2, #1
 8010746:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	220a      	movs	r2, #10
 801074c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801074e:	4b1d      	ldr	r3, [pc, #116]	; (80107c4 <tcp_process+0x7cc>)
 8010750:	681a      	ldr	r2, [r3, #0]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	60da      	str	r2, [r3, #12]
 8010756:	4a1b      	ldr	r2, [pc, #108]	; (80107c4 <tcp_process+0x7cc>)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6013      	str	r3, [r2, #0]
 801075c:	f002 fc4a 	bl	8012ff4 <tcp_timer_needed>
      }
      break;
 8010760:	e026      	b.n	80107b0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f000 f93c 	bl	80109e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010768:	4b17      	ldr	r3, [pc, #92]	; (80107c8 <tcp_process+0x7d0>)
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	f003 0310 	and.w	r3, r3, #16
 8010770:	2b00      	cmp	r3, #0
 8010772:	d01f      	beq.n	80107b4 <tcp_process+0x7bc>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010778:	4b14      	ldr	r3, [pc, #80]	; (80107cc <tcp_process+0x7d4>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	429a      	cmp	r2, r3
 801077e:	d119      	bne.n	80107b4 <tcp_process+0x7bc>
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010784:	2b00      	cmp	r3, #0
 8010786:	d115      	bne.n	80107b4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010788:	4b11      	ldr	r3, [pc, #68]	; (80107d0 <tcp_process+0x7d8>)
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	f043 0310 	orr.w	r3, r3, #16
 8010790:	b2da      	uxtb	r2, r3
 8010792:	4b0f      	ldr	r3, [pc, #60]	; (80107d0 <tcp_process+0x7d8>)
 8010794:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010796:	e00d      	b.n	80107b4 <tcp_process+0x7bc>
    default:
      break;
 8010798:	bf00      	nop
 801079a:	e00c      	b.n	80107b6 <tcp_process+0x7be>
      break;
 801079c:	bf00      	nop
 801079e:	e00a      	b.n	80107b6 <tcp_process+0x7be>
      break;
 80107a0:	bf00      	nop
 80107a2:	e008      	b.n	80107b6 <tcp_process+0x7be>
      break;
 80107a4:	bf00      	nop
 80107a6:	e006      	b.n	80107b6 <tcp_process+0x7be>
      break;
 80107a8:	bf00      	nop
 80107aa:	e004      	b.n	80107b6 <tcp_process+0x7be>
      break;
 80107ac:	bf00      	nop
 80107ae:	e002      	b.n	80107b6 <tcp_process+0x7be>
      break;
 80107b0:	bf00      	nop
 80107b2:	e000      	b.n	80107b6 <tcp_process+0x7be>
      break;
 80107b4:	bf00      	nop
  }
  return ERR_OK;
 80107b6:	2300      	movs	r3, #0
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3724      	adds	r7, #36	; 0x24
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd90      	pop	{r4, r7, pc}
 80107c0:	20008fdc 	.word	0x20008fdc
 80107c4:	20008fd8 	.word	0x20008fd8
 80107c8:	2000900c 	.word	0x2000900c
 80107cc:	20009004 	.word	0x20009004
 80107d0:	2000900d 	.word	0x2000900d
 80107d4:	20008fd4 	.word	0x20008fd4

080107d8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80107d8:	b590      	push	{r4, r7, lr}
 80107da:	b085      	sub	sp, #20
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d106      	bne.n	80107f6 <tcp_oos_insert_segment+0x1e>
 80107e8:	4b3b      	ldr	r3, [pc, #236]	; (80108d8 <tcp_oos_insert_segment+0x100>)
 80107ea:	f240 421f 	movw	r2, #1055	; 0x41f
 80107ee:	493b      	ldr	r1, [pc, #236]	; (80108dc <tcp_oos_insert_segment+0x104>)
 80107f0:	483b      	ldr	r0, [pc, #236]	; (80108e0 <tcp_oos_insert_segment+0x108>)
 80107f2:	f006 fc43 	bl	801707c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	68db      	ldr	r3, [r3, #12]
 80107fa:	899b      	ldrh	r3, [r3, #12]
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	4618      	mov	r0, r3
 8010800:	f7fb fc0e 	bl	800c020 <lwip_htons>
 8010804:	4603      	mov	r3, r0
 8010806:	b2db      	uxtb	r3, r3
 8010808:	f003 0301 	and.w	r3, r3, #1
 801080c:	2b00      	cmp	r3, #0
 801080e:	d028      	beq.n	8010862 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010810:	6838      	ldr	r0, [r7, #0]
 8010812:	f7fe fa63 	bl	800ecdc <tcp_segs_free>
    next = NULL;
 8010816:	2300      	movs	r3, #0
 8010818:	603b      	str	r3, [r7, #0]
 801081a:	e056      	b.n	80108ca <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	68db      	ldr	r3, [r3, #12]
 8010820:	899b      	ldrh	r3, [r3, #12]
 8010822:	b29b      	uxth	r3, r3
 8010824:	4618      	mov	r0, r3
 8010826:	f7fb fbfb 	bl	800c020 <lwip_htons>
 801082a:	4603      	mov	r3, r0
 801082c:	b2db      	uxtb	r3, r3
 801082e:	f003 0301 	and.w	r3, r3, #1
 8010832:	2b00      	cmp	r3, #0
 8010834:	d00d      	beq.n	8010852 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	68db      	ldr	r3, [r3, #12]
 801083a:	899b      	ldrh	r3, [r3, #12]
 801083c:	b29c      	uxth	r4, r3
 801083e:	2001      	movs	r0, #1
 8010840:	f7fb fbee 	bl	800c020 <lwip_htons>
 8010844:	4603      	mov	r3, r0
 8010846:	461a      	mov	r2, r3
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	68db      	ldr	r3, [r3, #12]
 801084c:	4322      	orrs	r2, r4
 801084e:	b292      	uxth	r2, r2
 8010850:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801085c:	68f8      	ldr	r0, [r7, #12]
 801085e:	f7fe fa52 	bl	800ed06 <tcp_seg_free>
    while (next &&
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d00e      	beq.n	8010886 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	891b      	ldrh	r3, [r3, #8]
 801086c:	461a      	mov	r2, r3
 801086e:	4b1d      	ldr	r3, [pc, #116]	; (80108e4 <tcp_oos_insert_segment+0x10c>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	441a      	add	r2, r3
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	68db      	ldr	r3, [r3, #12]
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	6839      	ldr	r1, [r7, #0]
 801087c:	8909      	ldrh	r1, [r1, #8]
 801087e:	440b      	add	r3, r1
 8010880:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010882:	2b00      	cmp	r3, #0
 8010884:	daca      	bge.n	801081c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d01e      	beq.n	80108ca <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	891b      	ldrh	r3, [r3, #8]
 8010890:	461a      	mov	r2, r3
 8010892:	4b14      	ldr	r3, [pc, #80]	; (80108e4 <tcp_oos_insert_segment+0x10c>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	441a      	add	r2, r3
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	68db      	ldr	r3, [r3, #12]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	1ad3      	subs	r3, r2, r3
    if (next &&
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	dd12      	ble.n	80108ca <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	68db      	ldr	r3, [r3, #12]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	b29a      	uxth	r2, r3
 80108ac:	4b0d      	ldr	r3, [pc, #52]	; (80108e4 <tcp_oos_insert_segment+0x10c>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	1ad3      	subs	r3, r2, r3
 80108b4:	b29a      	uxth	r2, r3
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	685a      	ldr	r2, [r3, #4]
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	891b      	ldrh	r3, [r3, #8]
 80108c2:	4619      	mov	r1, r3
 80108c4:	4610      	mov	r0, r2
 80108c6:	f7fc fd83 	bl	800d3d0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	683a      	ldr	r2, [r7, #0]
 80108ce:	601a      	str	r2, [r3, #0]
}
 80108d0:	bf00      	nop
 80108d2:	3714      	adds	r7, #20
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd90      	pop	{r4, r7, pc}
 80108d8:	080191c0 	.word	0x080191c0
 80108dc:	08019480 	.word	0x08019480
 80108e0:	0801920c 	.word	0x0801920c
 80108e4:	20009000 	.word	0x20009000

080108e8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80108e8:	b5b0      	push	{r4, r5, r7, lr}
 80108ea:	b086      	sub	sp, #24
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	60f8      	str	r0, [r7, #12]
 80108f0:	60b9      	str	r1, [r7, #8]
 80108f2:	607a      	str	r2, [r7, #4]
 80108f4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80108f6:	e03e      	b.n	8010976 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	4618      	mov	r0, r3
 8010908:	f7fc ff70 	bl	800d7ec <pbuf_clen>
 801090c:	4603      	mov	r3, r0
 801090e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010916:	8a7a      	ldrh	r2, [r7, #18]
 8010918:	429a      	cmp	r2, r3
 801091a:	d906      	bls.n	801092a <tcp_free_acked_segments+0x42>
 801091c:	4b2a      	ldr	r3, [pc, #168]	; (80109c8 <tcp_free_acked_segments+0xe0>)
 801091e:	f240 4257 	movw	r2, #1111	; 0x457
 8010922:	492a      	ldr	r1, [pc, #168]	; (80109cc <tcp_free_acked_segments+0xe4>)
 8010924:	482a      	ldr	r0, [pc, #168]	; (80109d0 <tcp_free_acked_segments+0xe8>)
 8010926:	f006 fba9 	bl	801707c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010930:	8a7b      	ldrh	r3, [r7, #18]
 8010932:	1ad3      	subs	r3, r2, r3
 8010934:	b29a      	uxth	r2, r3
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	891a      	ldrh	r2, [r3, #8]
 8010940:	4b24      	ldr	r3, [pc, #144]	; (80109d4 <tcp_free_acked_segments+0xec>)
 8010942:	881b      	ldrh	r3, [r3, #0]
 8010944:	4413      	add	r3, r2
 8010946:	b29a      	uxth	r2, r3
 8010948:	4b22      	ldr	r3, [pc, #136]	; (80109d4 <tcp_free_acked_segments+0xec>)
 801094a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801094c:	6978      	ldr	r0, [r7, #20]
 801094e:	f7fe f9da 	bl	800ed06 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010958:	2b00      	cmp	r3, #0
 801095a:	d00c      	beq.n	8010976 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d109      	bne.n	8010976 <tcp_free_acked_segments+0x8e>
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d106      	bne.n	8010976 <tcp_free_acked_segments+0x8e>
 8010968:	4b17      	ldr	r3, [pc, #92]	; (80109c8 <tcp_free_acked_segments+0xe0>)
 801096a:	f240 4261 	movw	r2, #1121	; 0x461
 801096e:	491a      	ldr	r1, [pc, #104]	; (80109d8 <tcp_free_acked_segments+0xf0>)
 8010970:	4817      	ldr	r0, [pc, #92]	; (80109d0 <tcp_free_acked_segments+0xe8>)
 8010972:	f006 fb83 	bl	801707c <iprintf>
  while (seg_list != NULL &&
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d020      	beq.n	80109be <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	68db      	ldr	r3, [r3, #12]
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	4618      	mov	r0, r3
 8010984:	f7fb fb61 	bl	800c04a <lwip_htonl>
 8010988:	4604      	mov	r4, r0
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	891b      	ldrh	r3, [r3, #8]
 801098e:	461d      	mov	r5, r3
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	68db      	ldr	r3, [r3, #12]
 8010994:	899b      	ldrh	r3, [r3, #12]
 8010996:	b29b      	uxth	r3, r3
 8010998:	4618      	mov	r0, r3
 801099a:	f7fb fb41 	bl	800c020 <lwip_htons>
 801099e:	4603      	mov	r3, r0
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	f003 0303 	and.w	r3, r3, #3
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d001      	beq.n	80109ae <tcp_free_acked_segments+0xc6>
 80109aa:	2301      	movs	r3, #1
 80109ac:	e000      	b.n	80109b0 <tcp_free_acked_segments+0xc8>
 80109ae:	2300      	movs	r3, #0
 80109b0:	442b      	add	r3, r5
 80109b2:	18e2      	adds	r2, r4, r3
 80109b4:	4b09      	ldr	r3, [pc, #36]	; (80109dc <tcp_free_acked_segments+0xf4>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	dd9c      	ble.n	80108f8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80109be:	68bb      	ldr	r3, [r7, #8]
}
 80109c0:	4618      	mov	r0, r3
 80109c2:	3718      	adds	r7, #24
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bdb0      	pop	{r4, r5, r7, pc}
 80109c8:	080191c0 	.word	0x080191c0
 80109cc:	080194a8 	.word	0x080194a8
 80109d0:	0801920c 	.word	0x0801920c
 80109d4:	20009008 	.word	0x20009008
 80109d8:	080194d0 	.word	0x080194d0
 80109dc:	20009004 	.word	0x20009004

080109e0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80109e0:	b5b0      	push	{r4, r5, r7, lr}
 80109e2:	b094      	sub	sp, #80	; 0x50
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80109e8:	2300      	movs	r3, #0
 80109ea:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d106      	bne.n	8010a00 <tcp_receive+0x20>
 80109f2:	4b91      	ldr	r3, [pc, #580]	; (8010c38 <tcp_receive+0x258>)
 80109f4:	f240 427b 	movw	r2, #1147	; 0x47b
 80109f8:	4990      	ldr	r1, [pc, #576]	; (8010c3c <tcp_receive+0x25c>)
 80109fa:	4891      	ldr	r0, [pc, #580]	; (8010c40 <tcp_receive+0x260>)
 80109fc:	f006 fb3e 	bl	801707c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	7d1b      	ldrb	r3, [r3, #20]
 8010a04:	2b03      	cmp	r3, #3
 8010a06:	d806      	bhi.n	8010a16 <tcp_receive+0x36>
 8010a08:	4b8b      	ldr	r3, [pc, #556]	; (8010c38 <tcp_receive+0x258>)
 8010a0a:	f240 427c 	movw	r2, #1148	; 0x47c
 8010a0e:	498d      	ldr	r1, [pc, #564]	; (8010c44 <tcp_receive+0x264>)
 8010a10:	488b      	ldr	r0, [pc, #556]	; (8010c40 <tcp_receive+0x260>)
 8010a12:	f006 fb33 	bl	801707c <iprintf>

  if (flags & TCP_ACK) {
 8010a16:	4b8c      	ldr	r3, [pc, #560]	; (8010c48 <tcp_receive+0x268>)
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	f003 0310 	and.w	r3, r3, #16
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	f000 8264 	beq.w	8010eec <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a30:	4413      	add	r3, r2
 8010a32:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a38:	4b84      	ldr	r3, [pc, #528]	; (8010c4c <tcp_receive+0x26c>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	1ad3      	subs	r3, r2, r3
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	db1b      	blt.n	8010a7a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a46:	4b81      	ldr	r3, [pc, #516]	; (8010c4c <tcp_receive+0x26c>)
 8010a48:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d106      	bne.n	8010a5c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010a52:	4b7f      	ldr	r3, [pc, #508]	; (8010c50 <tcp_receive+0x270>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	1ad3      	subs	r3, r2, r3
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	db0e      	blt.n	8010a7a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010a60:	4b7b      	ldr	r3, [pc, #492]	; (8010c50 <tcp_receive+0x270>)
 8010a62:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d125      	bne.n	8010ab4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010a68:	4b7a      	ldr	r3, [pc, #488]	; (8010c54 <tcp_receive+0x274>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	89db      	ldrh	r3, [r3, #14]
 8010a6e:	b29a      	uxth	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d91c      	bls.n	8010ab4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010a7a:	4b76      	ldr	r3, [pc, #472]	; (8010c54 <tcp_receive+0x274>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	89db      	ldrh	r3, [r3, #14]
 8010a80:	b29a      	uxth	r2, r3
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d205      	bcs.n	8010aa4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010aa4:	4b69      	ldr	r3, [pc, #420]	; (8010c4c <tcp_receive+0x26c>)
 8010aa6:	681a      	ldr	r2, [r3, #0]
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010aac:	4b68      	ldr	r3, [pc, #416]	; (8010c50 <tcp_receive+0x270>)
 8010aae:	681a      	ldr	r2, [r3, #0]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010ab4:	4b66      	ldr	r3, [pc, #408]	; (8010c50 <tcp_receive+0x270>)
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010abc:	1ad3      	subs	r3, r2, r3
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	dc58      	bgt.n	8010b74 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010ac2:	4b65      	ldr	r3, [pc, #404]	; (8010c58 <tcp_receive+0x278>)
 8010ac4:	881b      	ldrh	r3, [r3, #0]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d14b      	bne.n	8010b62 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010ad4:	4413      	add	r3, r2
 8010ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d142      	bne.n	8010b62 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	db3d      	blt.n	8010b62 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010aea:	4b59      	ldr	r3, [pc, #356]	; (8010c50 <tcp_receive+0x270>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d137      	bne.n	8010b62 <tcp_receive+0x182>
              found_dupack = 1;
 8010af2:	2301      	movs	r3, #1
 8010af4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010afc:	2bff      	cmp	r3, #255	; 0xff
 8010afe:	d007      	beq.n	8010b10 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b06:	3301      	adds	r3, #1
 8010b08:	b2da      	uxtb	r2, r3
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b16:	2b03      	cmp	r3, #3
 8010b18:	d91b      	bls.n	8010b52 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b24:	4413      	add	r3, r2
 8010b26:	b29a      	uxth	r2, r3
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d30a      	bcc.n	8010b48 <tcp_receive+0x168>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b3c:	4413      	add	r3, r2
 8010b3e:	b29a      	uxth	r2, r3
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010b46:	e004      	b.n	8010b52 <tcp_receive+0x172>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b58:	2b02      	cmp	r3, #2
 8010b5a:	d902      	bls.n	8010b62 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f001 feeb 	bl	8012938 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	f040 8161 	bne.w	8010e2c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010b72:	e15b      	b.n	8010e2c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b74:	4b36      	ldr	r3, [pc, #216]	; (8010c50 <tcp_receive+0x270>)
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b7c:	1ad3      	subs	r3, r2, r3
 8010b7e:	3b01      	subs	r3, #1
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	f2c0 814e 	blt.w	8010e22 <tcp_receive+0x442>
 8010b86:	4b32      	ldr	r3, [pc, #200]	; (8010c50 <tcp_receive+0x270>)
 8010b88:	681a      	ldr	r2, [r3, #0]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b8e:	1ad3      	subs	r3, r2, r3
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	f300 8146 	bgt.w	8010e22 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	8b5b      	ldrh	r3, [r3, #26]
 8010b9a:	f003 0304 	and.w	r3, r3, #4
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d010      	beq.n	8010bc4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	8b5b      	ldrh	r3, [r3, #26]
 8010ba6:	f023 0304 	bic.w	r3, r3, #4
 8010baa:	b29a      	uxth	r2, r3
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010bd2:	10db      	asrs	r3, r3, #3
 8010bd4:	b21b      	sxth	r3, r3
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	4413      	add	r3, r2
 8010be2:	b29b      	uxth	r3, r3
 8010be4:	b21a      	sxth	r2, r3
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010bec:	4b18      	ldr	r3, [pc, #96]	; (8010c50 <tcp_receive+0x270>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	b29a      	uxth	r2, r3
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	1ad3      	subs	r3, r2, r3
 8010bfa:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010c04:	4b12      	ldr	r3, [pc, #72]	; (8010c50 <tcp_receive+0x270>)
 8010c06:	681a      	ldr	r2, [r3, #0]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	7d1b      	ldrb	r3, [r3, #20]
 8010c10:	2b03      	cmp	r3, #3
 8010c12:	f240 8097 	bls.w	8010d44 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010c22:	429a      	cmp	r2, r3
 8010c24:	d245      	bcs.n	8010cb2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	8b5b      	ldrh	r3, [r3, #26]
 8010c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d014      	beq.n	8010c5c <tcp_receive+0x27c>
 8010c32:	2301      	movs	r3, #1
 8010c34:	e013      	b.n	8010c5e <tcp_receive+0x27e>
 8010c36:	bf00      	nop
 8010c38:	080191c0 	.word	0x080191c0
 8010c3c:	080194f0 	.word	0x080194f0
 8010c40:	0801920c 	.word	0x0801920c
 8010c44:	0801950c 	.word	0x0801950c
 8010c48:	2000900c 	.word	0x2000900c
 8010c4c:	20009000 	.word	0x20009000
 8010c50:	20009004 	.word	0x20009004
 8010c54:	20008ff0 	.word	0x20008ff0
 8010c58:	2000900a 	.word	0x2000900a
 8010c5c:	2302      	movs	r3, #2
 8010c5e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010c62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010c66:	b29a      	uxth	r2, r3
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c6c:	fb12 f303 	smulbb	r3, r2, r3
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c74:	4293      	cmp	r3, r2
 8010c76:	bf28      	it	cs
 8010c78:	4613      	movcs	r3, r2
 8010c7a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c84:	4413      	add	r3, r2
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d309      	bcc.n	8010ca6 <tcp_receive+0x2c6>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010c9a:	4413      	add	r3, r2
 8010c9c:	b29a      	uxth	r2, r3
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ca4:	e04e      	b.n	8010d44 <tcp_receive+0x364>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010cb0:	e048      	b.n	8010d44 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010cb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010cba:	4413      	add	r3, r2
 8010cbc:	b29a      	uxth	r2, r3
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d309      	bcc.n	8010cdc <tcp_receive+0x2fc>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010cce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010cd0:	4413      	add	r3, r2
 8010cd2:	b29a      	uxth	r2, r3
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010cda:	e004      	b.n	8010ce6 <tcp_receive+0x306>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ce2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d326      	bcc.n	8010d44 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d02:	1ad3      	subs	r3, r2, r3
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d16:	4413      	add	r3, r2
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d30a      	bcc.n	8010d3a <tcp_receive+0x35a>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d2e:	4413      	add	r3, r2
 8010d30:	b29a      	uxth	r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d38:	e004      	b.n	8010d44 <tcp_receive+0x364>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d4c:	4a98      	ldr	r2, [pc, #608]	; (8010fb0 <tcp_receive+0x5d0>)
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f7ff fdca 	bl	80108e8 <tcp_free_acked_segments>
 8010d54:	4602      	mov	r2, r0
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d62:	4a94      	ldr	r2, [pc, #592]	; (8010fb4 <tcp_receive+0x5d4>)
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f7ff fdbf 	bl	80108e8 <tcp_free_acked_segments>
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d104      	bne.n	8010d82 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d7e:	861a      	strh	r2, [r3, #48]	; 0x30
 8010d80:	e002      	b.n	8010d88 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2200      	movs	r2, #0
 8010d86:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d103      	bne.n	8010d9e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010da4:	4b84      	ldr	r3, [pc, #528]	; (8010fb8 <tcp_receive+0x5d8>)
 8010da6:	881b      	ldrh	r3, [r3, #0]
 8010da8:	4413      	add	r3, r2
 8010daa:	b29a      	uxth	r2, r3
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	8b5b      	ldrh	r3, [r3, #26]
 8010db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d035      	beq.n	8010e2a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d118      	bne.n	8010df8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d00c      	beq.n	8010de8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fb f935 	bl	800c04a <lwip_htonl>
 8010de0:	4603      	mov	r3, r0
 8010de2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	dc20      	bgt.n	8010e2a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	8b5b      	ldrh	r3, [r3, #26]
 8010dec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010df6:	e018      	b.n	8010e2a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e00:	68db      	ldr	r3, [r3, #12]
 8010e02:	685b      	ldr	r3, [r3, #4]
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7fb f920 	bl	800c04a <lwip_htonl>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	1ae3      	subs	r3, r4, r3
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	dc0b      	bgt.n	8010e2a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	8b5b      	ldrh	r3, [r3, #26]
 8010e16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e20:	e003      	b.n	8010e2a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f001 ff76 	bl	8012d14 <tcp_send_empty_ack>
 8010e28:	e000      	b.n	8010e2c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e2a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d05b      	beq.n	8010eec <tcp_receive+0x50c>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e38:	4b60      	ldr	r3, [pc, #384]	; (8010fbc <tcp_receive+0x5dc>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	1ad3      	subs	r3, r2, r3
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	da54      	bge.n	8010eec <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010e42:	4b5f      	ldr	r3, [pc, #380]	; (8010fc0 <tcp_receive+0x5e0>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	b29a      	uxth	r2, r3
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	1ad3      	subs	r3, r2, r3
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010e56:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e60:	10db      	asrs	r3, r3, #3
 8010e62:	b21b      	sxth	r3, r3
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e7a:	4413      	add	r3, r2
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	b21a      	sxth	r2, r3
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010e84:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	da05      	bge.n	8010e98 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010e8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e90:	425b      	negs	r3, r3
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010e98:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010ea2:	109b      	asrs	r3, r3, #2
 8010ea4:	b21b      	sxth	r3, r3
 8010ea6:	b29b      	uxth	r3, r3
 8010ea8:	1ad3      	subs	r3, r2, r3
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010eb6:	b29a      	uxth	r2, r3
 8010eb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010ebc:	4413      	add	r3, r2
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	b21a      	sxth	r2, r3
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ecc:	10db      	asrs	r3, r3, #3
 8010ece:	b21b      	sxth	r3, r3
 8010ed0:	b29a      	uxth	r2, r3
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	4413      	add	r3, r2
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	b21a      	sxth	r2, r3
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010eec:	4b35      	ldr	r3, [pc, #212]	; (8010fc4 <tcp_receive+0x5e4>)
 8010eee:	881b      	ldrh	r3, [r3, #0]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	f000 84e2 	beq.w	80118ba <tcp_receive+0xeda>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	7d1b      	ldrb	r3, [r3, #20]
 8010efa:	2b06      	cmp	r3, #6
 8010efc:	f200 84dd 	bhi.w	80118ba <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f04:	4b30      	ldr	r3, [pc, #192]	; (8010fc8 <tcp_receive+0x5e8>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	1ad3      	subs	r3, r2, r3
 8010f0a:	3b01      	subs	r3, #1
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	f2c0 808f 	blt.w	8011030 <tcp_receive+0x650>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f16:	4b2b      	ldr	r3, [pc, #172]	; (8010fc4 <tcp_receive+0x5e4>)
 8010f18:	881b      	ldrh	r3, [r3, #0]
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	4b2a      	ldr	r3, [pc, #168]	; (8010fc8 <tcp_receive+0x5e8>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	440b      	add	r3, r1
 8010f22:	1ad3      	subs	r3, r2, r3
 8010f24:	3301      	adds	r3, #1
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	f300 8082 	bgt.w	8011030 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010f2c:	4b27      	ldr	r3, [pc, #156]	; (8010fcc <tcp_receive+0x5ec>)
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f36:	4b24      	ldr	r3, [pc, #144]	; (8010fc8 <tcp_receive+0x5e8>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	1ad3      	subs	r3, r2, r3
 8010f3c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010f3e:	4b23      	ldr	r3, [pc, #140]	; (8010fcc <tcp_receive+0x5ec>)
 8010f40:	685b      	ldr	r3, [r3, #4]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d106      	bne.n	8010f54 <tcp_receive+0x574>
 8010f46:	4b22      	ldr	r3, [pc, #136]	; (8010fd0 <tcp_receive+0x5f0>)
 8010f48:	f240 5294 	movw	r2, #1428	; 0x594
 8010f4c:	4921      	ldr	r1, [pc, #132]	; (8010fd4 <tcp_receive+0x5f4>)
 8010f4e:	4822      	ldr	r0, [pc, #136]	; (8010fd8 <tcp_receive+0x5f8>)
 8010f50:	f006 f894 	bl	801707c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d906      	bls.n	8010f6c <tcp_receive+0x58c>
 8010f5e:	4b1c      	ldr	r3, [pc, #112]	; (8010fd0 <tcp_receive+0x5f0>)
 8010f60:	f240 5295 	movw	r2, #1429	; 0x595
 8010f64:	491d      	ldr	r1, [pc, #116]	; (8010fdc <tcp_receive+0x5fc>)
 8010f66:	481c      	ldr	r0, [pc, #112]	; (8010fd8 <tcp_receive+0x5f8>)
 8010f68:	f006 f888 	bl	801707c <iprintf>
      off = (u16_t)off32;
 8010f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010f72:	4b16      	ldr	r3, [pc, #88]	; (8010fcc <tcp_receive+0x5ec>)
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	891b      	ldrh	r3, [r3, #8]
 8010f78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d906      	bls.n	8010f8e <tcp_receive+0x5ae>
 8010f80:	4b13      	ldr	r3, [pc, #76]	; (8010fd0 <tcp_receive+0x5f0>)
 8010f82:	f240 5297 	movw	r2, #1431	; 0x597
 8010f86:	4916      	ldr	r1, [pc, #88]	; (8010fe0 <tcp_receive+0x600>)
 8010f88:	4813      	ldr	r0, [pc, #76]	; (8010fd8 <tcp_receive+0x5f8>)
 8010f8a:	f006 f877 	bl	801707c <iprintf>
      inseg.len -= off;
 8010f8e:	4b0f      	ldr	r3, [pc, #60]	; (8010fcc <tcp_receive+0x5ec>)
 8010f90:	891a      	ldrh	r2, [r3, #8]
 8010f92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f96:	1ad3      	subs	r3, r2, r3
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	4b0c      	ldr	r3, [pc, #48]	; (8010fcc <tcp_receive+0x5ec>)
 8010f9c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010f9e:	4b0b      	ldr	r3, [pc, #44]	; (8010fcc <tcp_receive+0x5ec>)
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	891a      	ldrh	r2, [r3, #8]
 8010fa4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fa8:	1ad3      	subs	r3, r2, r3
 8010faa:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010fac:	e02a      	b.n	8011004 <tcp_receive+0x624>
 8010fae:	bf00      	nop
 8010fb0:	08019528 	.word	0x08019528
 8010fb4:	08019530 	.word	0x08019530
 8010fb8:	20009008 	.word	0x20009008
 8010fbc:	20009004 	.word	0x20009004
 8010fc0:	20008fc8 	.word	0x20008fc8
 8010fc4:	2000900a 	.word	0x2000900a
 8010fc8:	20009000 	.word	0x20009000
 8010fcc:	20008fe0 	.word	0x20008fe0
 8010fd0:	080191c0 	.word	0x080191c0
 8010fd4:	08019538 	.word	0x08019538
 8010fd8:	0801920c 	.word	0x0801920c
 8010fdc:	08019548 	.word	0x08019548
 8010fe0:	08019558 	.word	0x08019558
        off -= p->len;
 8010fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fe6:	895b      	ldrh	r3, [r3, #10]
 8010fe8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010fec:	1ad3      	subs	r3, r2, r3
 8010fee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ff4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010ff6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011006:	895b      	ldrh	r3, [r3, #10]
 8011008:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801100c:	429a      	cmp	r2, r3
 801100e:	d8e9      	bhi.n	8010fe4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011010:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011014:	4619      	mov	r1, r3
 8011016:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011018:	f7fc fada 	bl	800d5d0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011020:	4a91      	ldr	r2, [pc, #580]	; (8011268 <tcp_receive+0x888>)
 8011022:	6013      	str	r3, [r2, #0]
 8011024:	4b91      	ldr	r3, [pc, #580]	; (801126c <tcp_receive+0x88c>)
 8011026:	68db      	ldr	r3, [r3, #12]
 8011028:	4a8f      	ldr	r2, [pc, #572]	; (8011268 <tcp_receive+0x888>)
 801102a:	6812      	ldr	r2, [r2, #0]
 801102c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801102e:	e00d      	b.n	801104c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011030:	4b8d      	ldr	r3, [pc, #564]	; (8011268 <tcp_receive+0x888>)
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011038:	1ad3      	subs	r3, r2, r3
 801103a:	2b00      	cmp	r3, #0
 801103c:	da06      	bge.n	801104c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	8b5b      	ldrh	r3, [r3, #26]
 8011042:	f043 0302 	orr.w	r3, r3, #2
 8011046:	b29a      	uxth	r2, r3
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801104c:	4b86      	ldr	r3, [pc, #536]	; (8011268 <tcp_receive+0x888>)
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011054:	1ad3      	subs	r3, r2, r3
 8011056:	2b00      	cmp	r3, #0
 8011058:	f2c0 842a 	blt.w	80118b0 <tcp_receive+0xed0>
 801105c:	4b82      	ldr	r3, [pc, #520]	; (8011268 <tcp_receive+0x888>)
 801105e:	681a      	ldr	r2, [r3, #0]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011064:	6879      	ldr	r1, [r7, #4]
 8011066:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011068:	440b      	add	r3, r1
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	3301      	adds	r3, #1
 801106e:	2b00      	cmp	r3, #0
 8011070:	f300 841e 	bgt.w	80118b0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011078:	4b7b      	ldr	r3, [pc, #492]	; (8011268 <tcp_receive+0x888>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	429a      	cmp	r2, r3
 801107e:	f040 829a 	bne.w	80115b6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011082:	4b7a      	ldr	r3, [pc, #488]	; (801126c <tcp_receive+0x88c>)
 8011084:	891c      	ldrh	r4, [r3, #8]
 8011086:	4b79      	ldr	r3, [pc, #484]	; (801126c <tcp_receive+0x88c>)
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	899b      	ldrh	r3, [r3, #12]
 801108c:	b29b      	uxth	r3, r3
 801108e:	4618      	mov	r0, r3
 8011090:	f7fa ffc6 	bl	800c020 <lwip_htons>
 8011094:	4603      	mov	r3, r0
 8011096:	b2db      	uxtb	r3, r3
 8011098:	f003 0303 	and.w	r3, r3, #3
 801109c:	2b00      	cmp	r3, #0
 801109e:	d001      	beq.n	80110a4 <tcp_receive+0x6c4>
 80110a0:	2301      	movs	r3, #1
 80110a2:	e000      	b.n	80110a6 <tcp_receive+0x6c6>
 80110a4:	2300      	movs	r3, #0
 80110a6:	4423      	add	r3, r4
 80110a8:	b29a      	uxth	r2, r3
 80110aa:	4b71      	ldr	r3, [pc, #452]	; (8011270 <tcp_receive+0x890>)
 80110ac:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110b2:	4b6f      	ldr	r3, [pc, #444]	; (8011270 <tcp_receive+0x890>)
 80110b4:	881b      	ldrh	r3, [r3, #0]
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d275      	bcs.n	80111a6 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80110ba:	4b6c      	ldr	r3, [pc, #432]	; (801126c <tcp_receive+0x88c>)
 80110bc:	68db      	ldr	r3, [r3, #12]
 80110be:	899b      	ldrh	r3, [r3, #12]
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fa ffac 	bl	800c020 <lwip_htons>
 80110c8:	4603      	mov	r3, r0
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	f003 0301 	and.w	r3, r3, #1
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d01f      	beq.n	8011114 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80110d4:	4b65      	ldr	r3, [pc, #404]	; (801126c <tcp_receive+0x88c>)
 80110d6:	68db      	ldr	r3, [r3, #12]
 80110d8:	899b      	ldrh	r3, [r3, #12]
 80110da:	b29b      	uxth	r3, r3
 80110dc:	b21b      	sxth	r3, r3
 80110de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80110e2:	b21c      	sxth	r4, r3
 80110e4:	4b61      	ldr	r3, [pc, #388]	; (801126c <tcp_receive+0x88c>)
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	899b      	ldrh	r3, [r3, #12]
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	4618      	mov	r0, r3
 80110ee:	f7fa ff97 	bl	800c020 <lwip_htons>
 80110f2:	4603      	mov	r3, r0
 80110f4:	b2db      	uxtb	r3, r3
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	4618      	mov	r0, r3
 8011100:	f7fa ff8e 	bl	800c020 <lwip_htons>
 8011104:	4603      	mov	r3, r0
 8011106:	b21b      	sxth	r3, r3
 8011108:	4323      	orrs	r3, r4
 801110a:	b21a      	sxth	r2, r3
 801110c:	4b57      	ldr	r3, [pc, #348]	; (801126c <tcp_receive+0x88c>)
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	b292      	uxth	r2, r2
 8011112:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011118:	4b54      	ldr	r3, [pc, #336]	; (801126c <tcp_receive+0x88c>)
 801111a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801111c:	4b53      	ldr	r3, [pc, #332]	; (801126c <tcp_receive+0x88c>)
 801111e:	68db      	ldr	r3, [r3, #12]
 8011120:	899b      	ldrh	r3, [r3, #12]
 8011122:	b29b      	uxth	r3, r3
 8011124:	4618      	mov	r0, r3
 8011126:	f7fa ff7b 	bl	800c020 <lwip_htons>
 801112a:	4603      	mov	r3, r0
 801112c:	b2db      	uxtb	r3, r3
 801112e:	f003 0302 	and.w	r3, r3, #2
 8011132:	2b00      	cmp	r3, #0
 8011134:	d005      	beq.n	8011142 <tcp_receive+0x762>
            inseg.len -= 1;
 8011136:	4b4d      	ldr	r3, [pc, #308]	; (801126c <tcp_receive+0x88c>)
 8011138:	891b      	ldrh	r3, [r3, #8]
 801113a:	3b01      	subs	r3, #1
 801113c:	b29a      	uxth	r2, r3
 801113e:	4b4b      	ldr	r3, [pc, #300]	; (801126c <tcp_receive+0x88c>)
 8011140:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011142:	4b4a      	ldr	r3, [pc, #296]	; (801126c <tcp_receive+0x88c>)
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	4a49      	ldr	r2, [pc, #292]	; (801126c <tcp_receive+0x88c>)
 8011148:	8912      	ldrh	r2, [r2, #8]
 801114a:	4611      	mov	r1, r2
 801114c:	4618      	mov	r0, r3
 801114e:	f7fc f93f 	bl	800d3d0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011152:	4b46      	ldr	r3, [pc, #280]	; (801126c <tcp_receive+0x88c>)
 8011154:	891c      	ldrh	r4, [r3, #8]
 8011156:	4b45      	ldr	r3, [pc, #276]	; (801126c <tcp_receive+0x88c>)
 8011158:	68db      	ldr	r3, [r3, #12]
 801115a:	899b      	ldrh	r3, [r3, #12]
 801115c:	b29b      	uxth	r3, r3
 801115e:	4618      	mov	r0, r3
 8011160:	f7fa ff5e 	bl	800c020 <lwip_htons>
 8011164:	4603      	mov	r3, r0
 8011166:	b2db      	uxtb	r3, r3
 8011168:	f003 0303 	and.w	r3, r3, #3
 801116c:	2b00      	cmp	r3, #0
 801116e:	d001      	beq.n	8011174 <tcp_receive+0x794>
 8011170:	2301      	movs	r3, #1
 8011172:	e000      	b.n	8011176 <tcp_receive+0x796>
 8011174:	2300      	movs	r3, #0
 8011176:	4423      	add	r3, r4
 8011178:	b29a      	uxth	r2, r3
 801117a:	4b3d      	ldr	r3, [pc, #244]	; (8011270 <tcp_receive+0x890>)
 801117c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801117e:	4b3c      	ldr	r3, [pc, #240]	; (8011270 <tcp_receive+0x890>)
 8011180:	881b      	ldrh	r3, [r3, #0]
 8011182:	461a      	mov	r2, r3
 8011184:	4b38      	ldr	r3, [pc, #224]	; (8011268 <tcp_receive+0x888>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	441a      	add	r2, r3
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801118e:	6879      	ldr	r1, [r7, #4]
 8011190:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011192:	440b      	add	r3, r1
 8011194:	429a      	cmp	r2, r3
 8011196:	d006      	beq.n	80111a6 <tcp_receive+0x7c6>
 8011198:	4b36      	ldr	r3, [pc, #216]	; (8011274 <tcp_receive+0x894>)
 801119a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801119e:	4936      	ldr	r1, [pc, #216]	; (8011278 <tcp_receive+0x898>)
 80111a0:	4836      	ldr	r0, [pc, #216]	; (801127c <tcp_receive+0x89c>)
 80111a2:	f005 ff6b 	bl	801707c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f000 80e7 	beq.w	801137e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80111b0:	4b2e      	ldr	r3, [pc, #184]	; (801126c <tcp_receive+0x88c>)
 80111b2:	68db      	ldr	r3, [r3, #12]
 80111b4:	899b      	ldrh	r3, [r3, #12]
 80111b6:	b29b      	uxth	r3, r3
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7fa ff31 	bl	800c020 <lwip_htons>
 80111be:	4603      	mov	r3, r0
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	f003 0301 	and.w	r3, r3, #1
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d010      	beq.n	80111ec <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80111ca:	e00a      	b.n	80111e2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111d0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80111dc:	68f8      	ldr	r0, [r7, #12]
 80111de:	f7fd fd92 	bl	800ed06 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d1f0      	bne.n	80111cc <tcp_receive+0x7ec>
 80111ea:	e0c8      	b.n	801137e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80111f2:	e052      	b.n	801129a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80111f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	899b      	ldrh	r3, [r3, #12]
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7fa ff0f 	bl	800c020 <lwip_htons>
 8011202:	4603      	mov	r3, r0
 8011204:	b2db      	uxtb	r3, r3
 8011206:	f003 0301 	and.w	r3, r3, #1
 801120a:	2b00      	cmp	r3, #0
 801120c:	d03d      	beq.n	801128a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801120e:	4b17      	ldr	r3, [pc, #92]	; (801126c <tcp_receive+0x88c>)
 8011210:	68db      	ldr	r3, [r3, #12]
 8011212:	899b      	ldrh	r3, [r3, #12]
 8011214:	b29b      	uxth	r3, r3
 8011216:	4618      	mov	r0, r3
 8011218:	f7fa ff02 	bl	800c020 <lwip_htons>
 801121c:	4603      	mov	r3, r0
 801121e:	b2db      	uxtb	r3, r3
 8011220:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011224:	2b00      	cmp	r3, #0
 8011226:	d130      	bne.n	801128a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011228:	4b10      	ldr	r3, [pc, #64]	; (801126c <tcp_receive+0x88c>)
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	899b      	ldrh	r3, [r3, #12]
 801122e:	b29c      	uxth	r4, r3
 8011230:	2001      	movs	r0, #1
 8011232:	f7fa fef5 	bl	800c020 <lwip_htons>
 8011236:	4603      	mov	r3, r0
 8011238:	461a      	mov	r2, r3
 801123a:	4b0c      	ldr	r3, [pc, #48]	; (801126c <tcp_receive+0x88c>)
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	4322      	orrs	r2, r4
 8011240:	b292      	uxth	r2, r2
 8011242:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011244:	4b09      	ldr	r3, [pc, #36]	; (801126c <tcp_receive+0x88c>)
 8011246:	891c      	ldrh	r4, [r3, #8]
 8011248:	4b08      	ldr	r3, [pc, #32]	; (801126c <tcp_receive+0x88c>)
 801124a:	68db      	ldr	r3, [r3, #12]
 801124c:	899b      	ldrh	r3, [r3, #12]
 801124e:	b29b      	uxth	r3, r3
 8011250:	4618      	mov	r0, r3
 8011252:	f7fa fee5 	bl	800c020 <lwip_htons>
 8011256:	4603      	mov	r3, r0
 8011258:	b2db      	uxtb	r3, r3
 801125a:	f003 0303 	and.w	r3, r3, #3
 801125e:	2b00      	cmp	r3, #0
 8011260:	d00e      	beq.n	8011280 <tcp_receive+0x8a0>
 8011262:	2301      	movs	r3, #1
 8011264:	e00d      	b.n	8011282 <tcp_receive+0x8a2>
 8011266:	bf00      	nop
 8011268:	20009000 	.word	0x20009000
 801126c:	20008fe0 	.word	0x20008fe0
 8011270:	2000900a 	.word	0x2000900a
 8011274:	080191c0 	.word	0x080191c0
 8011278:	08019568 	.word	0x08019568
 801127c:	0801920c 	.word	0x0801920c
 8011280:	2300      	movs	r3, #0
 8011282:	4423      	add	r3, r4
 8011284:	b29a      	uxth	r2, r3
 8011286:	4b98      	ldr	r3, [pc, #608]	; (80114e8 <tcp_receive+0xb08>)
 8011288:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801128a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801128c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801128e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011294:	6938      	ldr	r0, [r7, #16]
 8011296:	f7fd fd36 	bl	800ed06 <tcp_seg_free>
            while (next &&
 801129a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801129c:	2b00      	cmp	r3, #0
 801129e:	d00e      	beq.n	80112be <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80112a0:	4b91      	ldr	r3, [pc, #580]	; (80114e8 <tcp_receive+0xb08>)
 80112a2:	881b      	ldrh	r3, [r3, #0]
 80112a4:	461a      	mov	r2, r3
 80112a6:	4b91      	ldr	r3, [pc, #580]	; (80114ec <tcp_receive+0xb0c>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	441a      	add	r2, r3
 80112ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80112b4:	8909      	ldrh	r1, [r1, #8]
 80112b6:	440b      	add	r3, r1
 80112b8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	da9a      	bge.n	80111f4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80112be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d059      	beq.n	8011378 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80112c4:	4b88      	ldr	r3, [pc, #544]	; (80114e8 <tcp_receive+0xb08>)
 80112c6:	881b      	ldrh	r3, [r3, #0]
 80112c8:	461a      	mov	r2, r3
 80112ca:	4b88      	ldr	r3, [pc, #544]	; (80114ec <tcp_receive+0xb0c>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	441a      	add	r2, r3
 80112d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80112d8:	2b00      	cmp	r3, #0
 80112da:	dd4d      	ble.n	8011378 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80112dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	685b      	ldr	r3, [r3, #4]
 80112e2:	b29a      	uxth	r2, r3
 80112e4:	4b81      	ldr	r3, [pc, #516]	; (80114ec <tcp_receive+0xb0c>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	1ad3      	subs	r3, r2, r3
 80112ec:	b29a      	uxth	r2, r3
 80112ee:	4b80      	ldr	r3, [pc, #512]	; (80114f0 <tcp_receive+0xb10>)
 80112f0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80112f2:	4b7f      	ldr	r3, [pc, #508]	; (80114f0 <tcp_receive+0xb10>)
 80112f4:	68db      	ldr	r3, [r3, #12]
 80112f6:	899b      	ldrh	r3, [r3, #12]
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	4618      	mov	r0, r3
 80112fc:	f7fa fe90 	bl	800c020 <lwip_htons>
 8011300:	4603      	mov	r3, r0
 8011302:	b2db      	uxtb	r3, r3
 8011304:	f003 0302 	and.w	r3, r3, #2
 8011308:	2b00      	cmp	r3, #0
 801130a:	d005      	beq.n	8011318 <tcp_receive+0x938>
                inseg.len -= 1;
 801130c:	4b78      	ldr	r3, [pc, #480]	; (80114f0 <tcp_receive+0xb10>)
 801130e:	891b      	ldrh	r3, [r3, #8]
 8011310:	3b01      	subs	r3, #1
 8011312:	b29a      	uxth	r2, r3
 8011314:	4b76      	ldr	r3, [pc, #472]	; (80114f0 <tcp_receive+0xb10>)
 8011316:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011318:	4b75      	ldr	r3, [pc, #468]	; (80114f0 <tcp_receive+0xb10>)
 801131a:	685b      	ldr	r3, [r3, #4]
 801131c:	4a74      	ldr	r2, [pc, #464]	; (80114f0 <tcp_receive+0xb10>)
 801131e:	8912      	ldrh	r2, [r2, #8]
 8011320:	4611      	mov	r1, r2
 8011322:	4618      	mov	r0, r3
 8011324:	f7fc f854 	bl	800d3d0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011328:	4b71      	ldr	r3, [pc, #452]	; (80114f0 <tcp_receive+0xb10>)
 801132a:	891c      	ldrh	r4, [r3, #8]
 801132c:	4b70      	ldr	r3, [pc, #448]	; (80114f0 <tcp_receive+0xb10>)
 801132e:	68db      	ldr	r3, [r3, #12]
 8011330:	899b      	ldrh	r3, [r3, #12]
 8011332:	b29b      	uxth	r3, r3
 8011334:	4618      	mov	r0, r3
 8011336:	f7fa fe73 	bl	800c020 <lwip_htons>
 801133a:	4603      	mov	r3, r0
 801133c:	b2db      	uxtb	r3, r3
 801133e:	f003 0303 	and.w	r3, r3, #3
 8011342:	2b00      	cmp	r3, #0
 8011344:	d001      	beq.n	801134a <tcp_receive+0x96a>
 8011346:	2301      	movs	r3, #1
 8011348:	e000      	b.n	801134c <tcp_receive+0x96c>
 801134a:	2300      	movs	r3, #0
 801134c:	4423      	add	r3, r4
 801134e:	b29a      	uxth	r2, r3
 8011350:	4b65      	ldr	r3, [pc, #404]	; (80114e8 <tcp_receive+0xb08>)
 8011352:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011354:	4b64      	ldr	r3, [pc, #400]	; (80114e8 <tcp_receive+0xb08>)
 8011356:	881b      	ldrh	r3, [r3, #0]
 8011358:	461a      	mov	r2, r3
 801135a:	4b64      	ldr	r3, [pc, #400]	; (80114ec <tcp_receive+0xb0c>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	441a      	add	r2, r3
 8011360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	685b      	ldr	r3, [r3, #4]
 8011366:	429a      	cmp	r2, r3
 8011368:	d006      	beq.n	8011378 <tcp_receive+0x998>
 801136a:	4b62      	ldr	r3, [pc, #392]	; (80114f4 <tcp_receive+0xb14>)
 801136c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011370:	4961      	ldr	r1, [pc, #388]	; (80114f8 <tcp_receive+0xb18>)
 8011372:	4862      	ldr	r0, [pc, #392]	; (80114fc <tcp_receive+0xb1c>)
 8011374:	f005 fe82 	bl	801707c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801137c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801137e:	4b5a      	ldr	r3, [pc, #360]	; (80114e8 <tcp_receive+0xb08>)
 8011380:	881b      	ldrh	r3, [r3, #0]
 8011382:	461a      	mov	r2, r3
 8011384:	4b59      	ldr	r3, [pc, #356]	; (80114ec <tcp_receive+0xb0c>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	441a      	add	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011392:	4b55      	ldr	r3, [pc, #340]	; (80114e8 <tcp_receive+0xb08>)
 8011394:	881b      	ldrh	r3, [r3, #0]
 8011396:	429a      	cmp	r2, r3
 8011398:	d206      	bcs.n	80113a8 <tcp_receive+0x9c8>
 801139a:	4b56      	ldr	r3, [pc, #344]	; (80114f4 <tcp_receive+0xb14>)
 801139c:	f240 6207 	movw	r2, #1543	; 0x607
 80113a0:	4957      	ldr	r1, [pc, #348]	; (8011500 <tcp_receive+0xb20>)
 80113a2:	4856      	ldr	r0, [pc, #344]	; (80114fc <tcp_receive+0xb1c>)
 80113a4:	f005 fe6a 	bl	801707c <iprintf>
        pcb->rcv_wnd -= tcplen;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80113ac:	4b4e      	ldr	r3, [pc, #312]	; (80114e8 <tcp_receive+0xb08>)
 80113ae:	881b      	ldrh	r3, [r3, #0]
 80113b0:	1ad3      	subs	r3, r2, r3
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f7fc ffc5 	bl	800e348 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80113be:	4b4c      	ldr	r3, [pc, #304]	; (80114f0 <tcp_receive+0xb10>)
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	891b      	ldrh	r3, [r3, #8]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d006      	beq.n	80113d6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80113c8:	4b49      	ldr	r3, [pc, #292]	; (80114f0 <tcp_receive+0xb10>)
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	4a4d      	ldr	r2, [pc, #308]	; (8011504 <tcp_receive+0xb24>)
 80113ce:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80113d0:	4b47      	ldr	r3, [pc, #284]	; (80114f0 <tcp_receive+0xb10>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80113d6:	4b46      	ldr	r3, [pc, #280]	; (80114f0 <tcp_receive+0xb10>)
 80113d8:	68db      	ldr	r3, [r3, #12]
 80113da:	899b      	ldrh	r3, [r3, #12]
 80113dc:	b29b      	uxth	r3, r3
 80113de:	4618      	mov	r0, r3
 80113e0:	f7fa fe1e 	bl	800c020 <lwip_htons>
 80113e4:	4603      	mov	r3, r0
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	f003 0301 	and.w	r3, r3, #1
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	f000 80b8 	beq.w	8011562 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80113f2:	4b45      	ldr	r3, [pc, #276]	; (8011508 <tcp_receive+0xb28>)
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	f043 0320 	orr.w	r3, r3, #32
 80113fa:	b2da      	uxtb	r2, r3
 80113fc:	4b42      	ldr	r3, [pc, #264]	; (8011508 <tcp_receive+0xb28>)
 80113fe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011400:	e0af      	b.n	8011562 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011406:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801140c:	68db      	ldr	r3, [r3, #12]
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	4a36      	ldr	r2, [pc, #216]	; (80114ec <tcp_receive+0xb0c>)
 8011412:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011414:	68bb      	ldr	r3, [r7, #8]
 8011416:	891b      	ldrh	r3, [r3, #8]
 8011418:	461c      	mov	r4, r3
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	899b      	ldrh	r3, [r3, #12]
 8011420:	b29b      	uxth	r3, r3
 8011422:	4618      	mov	r0, r3
 8011424:	f7fa fdfc 	bl	800c020 <lwip_htons>
 8011428:	4603      	mov	r3, r0
 801142a:	b2db      	uxtb	r3, r3
 801142c:	f003 0303 	and.w	r3, r3, #3
 8011430:	2b00      	cmp	r3, #0
 8011432:	d001      	beq.n	8011438 <tcp_receive+0xa58>
 8011434:	2301      	movs	r3, #1
 8011436:	e000      	b.n	801143a <tcp_receive+0xa5a>
 8011438:	2300      	movs	r3, #0
 801143a:	191a      	adds	r2, r3, r4
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011440:	441a      	add	r2, r3
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801144a:	461c      	mov	r4, r3
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	891b      	ldrh	r3, [r3, #8]
 8011450:	461d      	mov	r5, r3
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	899b      	ldrh	r3, [r3, #12]
 8011458:	b29b      	uxth	r3, r3
 801145a:	4618      	mov	r0, r3
 801145c:	f7fa fde0 	bl	800c020 <lwip_htons>
 8011460:	4603      	mov	r3, r0
 8011462:	b2db      	uxtb	r3, r3
 8011464:	f003 0303 	and.w	r3, r3, #3
 8011468:	2b00      	cmp	r3, #0
 801146a:	d001      	beq.n	8011470 <tcp_receive+0xa90>
 801146c:	2301      	movs	r3, #1
 801146e:	e000      	b.n	8011472 <tcp_receive+0xa92>
 8011470:	2300      	movs	r3, #0
 8011472:	442b      	add	r3, r5
 8011474:	429c      	cmp	r4, r3
 8011476:	d206      	bcs.n	8011486 <tcp_receive+0xaa6>
 8011478:	4b1e      	ldr	r3, [pc, #120]	; (80114f4 <tcp_receive+0xb14>)
 801147a:	f240 622b 	movw	r2, #1579	; 0x62b
 801147e:	4923      	ldr	r1, [pc, #140]	; (801150c <tcp_receive+0xb2c>)
 8011480:	481e      	ldr	r0, [pc, #120]	; (80114fc <tcp_receive+0xb1c>)
 8011482:	f005 fdfb 	bl	801707c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	891b      	ldrh	r3, [r3, #8]
 801148a:	461c      	mov	r4, r3
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	68db      	ldr	r3, [r3, #12]
 8011490:	899b      	ldrh	r3, [r3, #12]
 8011492:	b29b      	uxth	r3, r3
 8011494:	4618      	mov	r0, r3
 8011496:	f7fa fdc3 	bl	800c020 <lwip_htons>
 801149a:	4603      	mov	r3, r0
 801149c:	b2db      	uxtb	r3, r3
 801149e:	f003 0303 	and.w	r3, r3, #3
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d001      	beq.n	80114aa <tcp_receive+0xaca>
 80114a6:	2301      	movs	r3, #1
 80114a8:	e000      	b.n	80114ac <tcp_receive+0xacc>
 80114aa:	2300      	movs	r3, #0
 80114ac:	1919      	adds	r1, r3, r4
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80114b2:	b28b      	uxth	r3, r1
 80114b4:	1ad3      	subs	r3, r2, r3
 80114b6:	b29a      	uxth	r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	f7fc ff43 	bl	800e348 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	891b      	ldrh	r3, [r3, #8]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d028      	beq.n	801151e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80114cc:	4b0d      	ldr	r3, [pc, #52]	; (8011504 <tcp_receive+0xb24>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d01d      	beq.n	8011510 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80114d4:	4b0b      	ldr	r3, [pc, #44]	; (8011504 <tcp_receive+0xb24>)
 80114d6:	681a      	ldr	r2, [r3, #0]
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	4619      	mov	r1, r3
 80114de:	4610      	mov	r0, r2
 80114e0:	f7fc f9be 	bl	800d860 <pbuf_cat>
 80114e4:	e018      	b.n	8011518 <tcp_receive+0xb38>
 80114e6:	bf00      	nop
 80114e8:	2000900a 	.word	0x2000900a
 80114ec:	20009000 	.word	0x20009000
 80114f0:	20008fe0 	.word	0x20008fe0
 80114f4:	080191c0 	.word	0x080191c0
 80114f8:	080195a0 	.word	0x080195a0
 80114fc:	0801920c 	.word	0x0801920c
 8011500:	080195dc 	.word	0x080195dc
 8011504:	20009010 	.word	0x20009010
 8011508:	2000900d 	.word	0x2000900d
 801150c:	080195fc 	.word	0x080195fc
            } else {
              recv_data = cseg->p;
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	4a70      	ldr	r2, [pc, #448]	; (80116d8 <tcp_receive+0xcf8>)
 8011516:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	2200      	movs	r2, #0
 801151c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	899b      	ldrh	r3, [r3, #12]
 8011524:	b29b      	uxth	r3, r3
 8011526:	4618      	mov	r0, r3
 8011528:	f7fa fd7a 	bl	800c020 <lwip_htons>
 801152c:	4603      	mov	r3, r0
 801152e:	b2db      	uxtb	r3, r3
 8011530:	f003 0301 	and.w	r3, r3, #1
 8011534:	2b00      	cmp	r3, #0
 8011536:	d00d      	beq.n	8011554 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011538:	4b68      	ldr	r3, [pc, #416]	; (80116dc <tcp_receive+0xcfc>)
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	f043 0320 	orr.w	r3, r3, #32
 8011540:	b2da      	uxtb	r2, r3
 8011542:	4b66      	ldr	r3, [pc, #408]	; (80116dc <tcp_receive+0xcfc>)
 8011544:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	7d1b      	ldrb	r3, [r3, #20]
 801154a:	2b04      	cmp	r3, #4
 801154c:	d102      	bne.n	8011554 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2207      	movs	r2, #7
 8011552:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	681a      	ldr	r2, [r3, #0]
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801155c:	68b8      	ldr	r0, [r7, #8]
 801155e:	f7fd fbd2 	bl	800ed06 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011566:	2b00      	cmp	r3, #0
 8011568:	d008      	beq.n	801157c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	685a      	ldr	r2, [r3, #4]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011576:	429a      	cmp	r2, r3
 8011578:	f43f af43 	beq.w	8011402 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	8b5b      	ldrh	r3, [r3, #26]
 8011580:	f003 0301 	and.w	r3, r3, #1
 8011584:	2b00      	cmp	r3, #0
 8011586:	d00e      	beq.n	80115a6 <tcp_receive+0xbc6>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	8b5b      	ldrh	r3, [r3, #26]
 801158c:	f023 0301 	bic.w	r3, r3, #1
 8011590:	b29a      	uxth	r2, r3
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	835a      	strh	r2, [r3, #26]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	8b5b      	ldrh	r3, [r3, #26]
 801159a:	f043 0302 	orr.w	r3, r3, #2
 801159e:	b29a      	uxth	r2, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80115a4:	e188      	b.n	80118b8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	8b5b      	ldrh	r3, [r3, #26]
 80115aa:	f043 0301 	orr.w	r3, r3, #1
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80115b4:	e180      	b.n	80118b8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d106      	bne.n	80115cc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80115be:	4848      	ldr	r0, [pc, #288]	; (80116e0 <tcp_receive+0xd00>)
 80115c0:	f7fd fbba 	bl	800ed38 <tcp_seg_copy>
 80115c4:	4602      	mov	r2, r0
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	675a      	str	r2, [r3, #116]	; 0x74
 80115ca:	e16d      	b.n	80118a8 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80115cc:	2300      	movs	r3, #0
 80115ce:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80115d6:	e157      	b.n	8011888 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80115d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	685a      	ldr	r2, [r3, #4]
 80115de:	4b41      	ldr	r3, [pc, #260]	; (80116e4 <tcp_receive+0xd04>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d11d      	bne.n	8011622 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80115e6:	4b3e      	ldr	r3, [pc, #248]	; (80116e0 <tcp_receive+0xd00>)
 80115e8:	891a      	ldrh	r2, [r3, #8]
 80115ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ec:	891b      	ldrh	r3, [r3, #8]
 80115ee:	429a      	cmp	r2, r3
 80115f0:	f240 814f 	bls.w	8011892 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80115f4:	483a      	ldr	r0, [pc, #232]	; (80116e0 <tcp_receive+0xd00>)
 80115f6:	f7fd fb9f 	bl	800ed38 <tcp_seg_copy>
 80115fa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	f000 8149 	beq.w	8011896 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011606:	2b00      	cmp	r3, #0
 8011608:	d003      	beq.n	8011612 <tcp_receive+0xc32>
                    prev->next = cseg;
 801160a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801160c:	697a      	ldr	r2, [r7, #20]
 801160e:	601a      	str	r2, [r3, #0]
 8011610:	e002      	b.n	8011618 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	697a      	ldr	r2, [r7, #20]
 8011616:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011618:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801161a:	6978      	ldr	r0, [r7, #20]
 801161c:	f7ff f8dc 	bl	80107d8 <tcp_oos_insert_segment>
                }
                break;
 8011620:	e139      	b.n	8011896 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011624:	2b00      	cmp	r3, #0
 8011626:	d117      	bne.n	8011658 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011628:	4b2e      	ldr	r3, [pc, #184]	; (80116e4 <tcp_receive+0xd04>)
 801162a:	681a      	ldr	r2, [r3, #0]
 801162c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	1ad3      	subs	r3, r2, r3
 8011634:	2b00      	cmp	r3, #0
 8011636:	da57      	bge.n	80116e8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011638:	4829      	ldr	r0, [pc, #164]	; (80116e0 <tcp_receive+0xd00>)
 801163a:	f7fd fb7d 	bl	800ed38 <tcp_seg_copy>
 801163e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	2b00      	cmp	r3, #0
 8011644:	f000 8129 	beq.w	801189a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	69ba      	ldr	r2, [r7, #24]
 801164c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801164e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011650:	69b8      	ldr	r0, [r7, #24]
 8011652:	f7ff f8c1 	bl	80107d8 <tcp_oos_insert_segment>
                  }
                  break;
 8011656:	e120      	b.n	801189a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011658:	4b22      	ldr	r3, [pc, #136]	; (80116e4 <tcp_receive+0xd04>)
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	1ad3      	subs	r3, r2, r3
 8011664:	3b01      	subs	r3, #1
 8011666:	2b00      	cmp	r3, #0
 8011668:	db3e      	blt.n	80116e8 <tcp_receive+0xd08>
 801166a:	4b1e      	ldr	r3, [pc, #120]	; (80116e4 <tcp_receive+0xd04>)
 801166c:	681a      	ldr	r2, [r3, #0]
 801166e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	1ad3      	subs	r3, r2, r3
 8011676:	3301      	adds	r3, #1
 8011678:	2b00      	cmp	r3, #0
 801167a:	dc35      	bgt.n	80116e8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801167c:	4818      	ldr	r0, [pc, #96]	; (80116e0 <tcp_receive+0xd00>)
 801167e:	f7fd fb5b 	bl	800ed38 <tcp_seg_copy>
 8011682:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	2b00      	cmp	r3, #0
 8011688:	f000 8109 	beq.w	801189e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801168c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801168e:	68db      	ldr	r3, [r3, #12]
 8011690:	685b      	ldr	r3, [r3, #4]
 8011692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011694:	8912      	ldrh	r2, [r2, #8]
 8011696:	441a      	add	r2, r3
 8011698:	4b12      	ldr	r3, [pc, #72]	; (80116e4 <tcp_receive+0xd04>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	1ad3      	subs	r3, r2, r3
 801169e:	2b00      	cmp	r3, #0
 80116a0:	dd12      	ble.n	80116c8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80116a2:	4b10      	ldr	r3, [pc, #64]	; (80116e4 <tcp_receive+0xd04>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	b29a      	uxth	r2, r3
 80116a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116aa:	68db      	ldr	r3, [r3, #12]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	b29b      	uxth	r3, r3
 80116b0:	1ad3      	subs	r3, r2, r3
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80116b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ba:	685a      	ldr	r2, [r3, #4]
 80116bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116be:	891b      	ldrh	r3, [r3, #8]
 80116c0:	4619      	mov	r1, r3
 80116c2:	4610      	mov	r0, r2
 80116c4:	f7fb fe84 	bl	800d3d0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80116c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ca:	69fa      	ldr	r2, [r7, #28]
 80116cc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80116ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116d0:	69f8      	ldr	r0, [r7, #28]
 80116d2:	f7ff f881 	bl	80107d8 <tcp_oos_insert_segment>
                  }
                  break;
 80116d6:	e0e2      	b.n	801189e <tcp_receive+0xebe>
 80116d8:	20009010 	.word	0x20009010
 80116dc:	2000900d 	.word	0x2000900d
 80116e0:	20008fe0 	.word	0x20008fe0
 80116e4:	20009000 	.word	0x20009000
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80116e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ea:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80116ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	f040 80c6 	bne.w	8011882 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80116f6:	4b80      	ldr	r3, [pc, #512]	; (80118f8 <tcp_receive+0xf18>)
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	685b      	ldr	r3, [r3, #4]
 8011700:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011702:	2b00      	cmp	r3, #0
 8011704:	f340 80bd 	ble.w	8011882 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	899b      	ldrh	r3, [r3, #12]
 801170e:	b29b      	uxth	r3, r3
 8011710:	4618      	mov	r0, r3
 8011712:	f7fa fc85 	bl	800c020 <lwip_htons>
 8011716:	4603      	mov	r3, r0
 8011718:	b2db      	uxtb	r3, r3
 801171a:	f003 0301 	and.w	r3, r3, #1
 801171e:	2b00      	cmp	r3, #0
 8011720:	f040 80bf 	bne.w	80118a2 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011724:	4875      	ldr	r0, [pc, #468]	; (80118fc <tcp_receive+0xf1c>)
 8011726:	f7fd fb07 	bl	800ed38 <tcp_seg_copy>
 801172a:	4602      	mov	r2, r0
 801172c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801172e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	f000 80b6 	beq.w	80118a6 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801173a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173c:	68db      	ldr	r3, [r3, #12]
 801173e:	685b      	ldr	r3, [r3, #4]
 8011740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011742:	8912      	ldrh	r2, [r2, #8]
 8011744:	441a      	add	r2, r3
 8011746:	4b6c      	ldr	r3, [pc, #432]	; (80118f8 <tcp_receive+0xf18>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	1ad3      	subs	r3, r2, r3
 801174c:	2b00      	cmp	r3, #0
 801174e:	dd12      	ble.n	8011776 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011750:	4b69      	ldr	r3, [pc, #420]	; (80118f8 <tcp_receive+0xf18>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	b29a      	uxth	r2, r3
 8011756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011758:	68db      	ldr	r3, [r3, #12]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	b29b      	uxth	r3, r3
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	b29a      	uxth	r2, r3
 8011762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011764:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011768:	685a      	ldr	r2, [r3, #4]
 801176a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801176c:	891b      	ldrh	r3, [r3, #8]
 801176e:	4619      	mov	r1, r3
 8011770:	4610      	mov	r0, r2
 8011772:	f7fb fe2d 	bl	800d3d0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011776:	4b62      	ldr	r3, [pc, #392]	; (8011900 <tcp_receive+0xf20>)
 8011778:	881b      	ldrh	r3, [r3, #0]
 801177a:	461a      	mov	r2, r3
 801177c:	4b5e      	ldr	r3, [pc, #376]	; (80118f8 <tcp_receive+0xf18>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	441a      	add	r2, r3
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011786:	6879      	ldr	r1, [r7, #4]
 8011788:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801178a:	440b      	add	r3, r1
 801178c:	1ad3      	subs	r3, r2, r3
 801178e:	2b00      	cmp	r3, #0
 8011790:	f340 8089 	ble.w	80118a6 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	899b      	ldrh	r3, [r3, #12]
 801179c:	b29b      	uxth	r3, r3
 801179e:	4618      	mov	r0, r3
 80117a0:	f7fa fc3e 	bl	800c020 <lwip_htons>
 80117a4:	4603      	mov	r3, r0
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	f003 0301 	and.w	r3, r3, #1
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d022      	beq.n	80117f6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80117b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	68db      	ldr	r3, [r3, #12]
 80117b6:	899b      	ldrh	r3, [r3, #12]
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	b21b      	sxth	r3, r3
 80117bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80117c0:	b21c      	sxth	r4, r3
 80117c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	899b      	ldrh	r3, [r3, #12]
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7fa fc27 	bl	800c020 <lwip_htons>
 80117d2:	4603      	mov	r3, r0
 80117d4:	b2db      	uxtb	r3, r3
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80117dc:	b29b      	uxth	r3, r3
 80117de:	4618      	mov	r0, r3
 80117e0:	f7fa fc1e 	bl	800c020 <lwip_htons>
 80117e4:	4603      	mov	r3, r0
 80117e6:	b21b      	sxth	r3, r3
 80117e8:	4323      	orrs	r3, r4
 80117ea:	b21a      	sxth	r2, r3
 80117ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	68db      	ldr	r3, [r3, #12]
 80117f2:	b292      	uxth	r2, r2
 80117f4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011800:	4413      	add	r3, r2
 8011802:	b299      	uxth	r1, r3
 8011804:	4b3c      	ldr	r3, [pc, #240]	; (80118f8 <tcp_receive+0xf18>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	b29a      	uxth	r2, r3
 801180a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	1a8a      	subs	r2, r1, r2
 8011810:	b292      	uxth	r2, r2
 8011812:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	685a      	ldr	r2, [r3, #4]
 801181a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	891b      	ldrh	r3, [r3, #8]
 8011820:	4619      	mov	r1, r3
 8011822:	4610      	mov	r0, r2
 8011824:	f7fb fdd4 	bl	800d3d0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	891c      	ldrh	r4, [r3, #8]
 801182e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	899b      	ldrh	r3, [r3, #12]
 8011836:	b29b      	uxth	r3, r3
 8011838:	4618      	mov	r0, r3
 801183a:	f7fa fbf1 	bl	800c020 <lwip_htons>
 801183e:	4603      	mov	r3, r0
 8011840:	b2db      	uxtb	r3, r3
 8011842:	f003 0303 	and.w	r3, r3, #3
 8011846:	2b00      	cmp	r3, #0
 8011848:	d001      	beq.n	801184e <tcp_receive+0xe6e>
 801184a:	2301      	movs	r3, #1
 801184c:	e000      	b.n	8011850 <tcp_receive+0xe70>
 801184e:	2300      	movs	r3, #0
 8011850:	4423      	add	r3, r4
 8011852:	b29a      	uxth	r2, r3
 8011854:	4b2a      	ldr	r3, [pc, #168]	; (8011900 <tcp_receive+0xf20>)
 8011856:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011858:	4b29      	ldr	r3, [pc, #164]	; (8011900 <tcp_receive+0xf20>)
 801185a:	881b      	ldrh	r3, [r3, #0]
 801185c:	461a      	mov	r2, r3
 801185e:	4b26      	ldr	r3, [pc, #152]	; (80118f8 <tcp_receive+0xf18>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	441a      	add	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011868:	6879      	ldr	r1, [r7, #4]
 801186a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801186c:	440b      	add	r3, r1
 801186e:	429a      	cmp	r2, r3
 8011870:	d019      	beq.n	80118a6 <tcp_receive+0xec6>
 8011872:	4b24      	ldr	r3, [pc, #144]	; (8011904 <tcp_receive+0xf24>)
 8011874:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011878:	4923      	ldr	r1, [pc, #140]	; (8011908 <tcp_receive+0xf28>)
 801187a:	4824      	ldr	r0, [pc, #144]	; (801190c <tcp_receive+0xf2c>)
 801187c:	f005 fbfe 	bl	801707c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011880:	e011      	b.n	80118a6 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	63bb      	str	r3, [r7, #56]	; 0x38
 8011888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188a:	2b00      	cmp	r3, #0
 801188c:	f47f aea4 	bne.w	80115d8 <tcp_receive+0xbf8>
 8011890:	e00a      	b.n	80118a8 <tcp_receive+0xec8>
                break;
 8011892:	bf00      	nop
 8011894:	e008      	b.n	80118a8 <tcp_receive+0xec8>
                break;
 8011896:	bf00      	nop
 8011898:	e006      	b.n	80118a8 <tcp_receive+0xec8>
                  break;
 801189a:	bf00      	nop
 801189c:	e004      	b.n	80118a8 <tcp_receive+0xec8>
                  break;
 801189e:	bf00      	nop
 80118a0:	e002      	b.n	80118a8 <tcp_receive+0xec8>
                  break;
 80118a2:	bf00      	nop
 80118a4:	e000      	b.n	80118a8 <tcp_receive+0xec8>
                break;
 80118a6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f001 fa33 	bl	8012d14 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80118ae:	e003      	b.n	80118b8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f001 fa2f 	bl	8012d14 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80118b6:	e01a      	b.n	80118ee <tcp_receive+0xf0e>
 80118b8:	e019      	b.n	80118ee <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80118ba:	4b0f      	ldr	r3, [pc, #60]	; (80118f8 <tcp_receive+0xf18>)
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118c2:	1ad3      	subs	r3, r2, r3
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	db0a      	blt.n	80118de <tcp_receive+0xefe>
 80118c8:	4b0b      	ldr	r3, [pc, #44]	; (80118f8 <tcp_receive+0xf18>)
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d0:	6879      	ldr	r1, [r7, #4]
 80118d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80118d4:	440b      	add	r3, r1
 80118d6:	1ad3      	subs	r3, r2, r3
 80118d8:	3301      	adds	r3, #1
 80118da:	2b00      	cmp	r3, #0
 80118dc:	dd07      	ble.n	80118ee <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	8b5b      	ldrh	r3, [r3, #26]
 80118e2:	f043 0302 	orr.w	r3, r3, #2
 80118e6:	b29a      	uxth	r2, r3
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80118ec:	e7ff      	b.n	80118ee <tcp_receive+0xf0e>
 80118ee:	bf00      	nop
 80118f0:	3750      	adds	r7, #80	; 0x50
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bdb0      	pop	{r4, r5, r7, pc}
 80118f6:	bf00      	nop
 80118f8:	20009000 	.word	0x20009000
 80118fc:	20008fe0 	.word	0x20008fe0
 8011900:	2000900a 	.word	0x2000900a
 8011904:	080191c0 	.word	0x080191c0
 8011908:	08019568 	.word	0x08019568
 801190c:	0801920c 	.word	0x0801920c

08011910 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011910:	b480      	push	{r7}
 8011912:	b083      	sub	sp, #12
 8011914:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011916:	4b15      	ldr	r3, [pc, #84]	; (801196c <tcp_get_next_optbyte+0x5c>)
 8011918:	881b      	ldrh	r3, [r3, #0]
 801191a:	1c5a      	adds	r2, r3, #1
 801191c:	b291      	uxth	r1, r2
 801191e:	4a13      	ldr	r2, [pc, #76]	; (801196c <tcp_get_next_optbyte+0x5c>)
 8011920:	8011      	strh	r1, [r2, #0]
 8011922:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011924:	4b12      	ldr	r3, [pc, #72]	; (8011970 <tcp_get_next_optbyte+0x60>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d004      	beq.n	8011936 <tcp_get_next_optbyte+0x26>
 801192c:	4b11      	ldr	r3, [pc, #68]	; (8011974 <tcp_get_next_optbyte+0x64>)
 801192e:	881b      	ldrh	r3, [r3, #0]
 8011930:	88fa      	ldrh	r2, [r7, #6]
 8011932:	429a      	cmp	r2, r3
 8011934:	d208      	bcs.n	8011948 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011936:	4b10      	ldr	r3, [pc, #64]	; (8011978 <tcp_get_next_optbyte+0x68>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	3314      	adds	r3, #20
 801193c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801193e:	88fb      	ldrh	r3, [r7, #6]
 8011940:	683a      	ldr	r2, [r7, #0]
 8011942:	4413      	add	r3, r2
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	e00b      	b.n	8011960 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011948:	88fb      	ldrh	r3, [r7, #6]
 801194a:	b2da      	uxtb	r2, r3
 801194c:	4b09      	ldr	r3, [pc, #36]	; (8011974 <tcp_get_next_optbyte+0x64>)
 801194e:	881b      	ldrh	r3, [r3, #0]
 8011950:	b2db      	uxtb	r3, r3
 8011952:	1ad3      	subs	r3, r2, r3
 8011954:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011956:	4b06      	ldr	r3, [pc, #24]	; (8011970 <tcp_get_next_optbyte+0x60>)
 8011958:	681a      	ldr	r2, [r3, #0]
 801195a:	797b      	ldrb	r3, [r7, #5]
 801195c:	4413      	add	r3, r2
 801195e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011960:	4618      	mov	r0, r3
 8011962:	370c      	adds	r7, #12
 8011964:	46bd      	mov	sp, r7
 8011966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196a:	4770      	bx	lr
 801196c:	20008ffc 	.word	0x20008ffc
 8011970:	20008ff8 	.word	0x20008ff8
 8011974:	20008ff6 	.word	0x20008ff6
 8011978:	20008ff0 	.word	0x20008ff0

0801197c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b084      	sub	sp, #16
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d106      	bne.n	8011998 <tcp_parseopt+0x1c>
 801198a:	4b32      	ldr	r3, [pc, #200]	; (8011a54 <tcp_parseopt+0xd8>)
 801198c:	f240 727d 	movw	r2, #1917	; 0x77d
 8011990:	4931      	ldr	r1, [pc, #196]	; (8011a58 <tcp_parseopt+0xdc>)
 8011992:	4832      	ldr	r0, [pc, #200]	; (8011a5c <tcp_parseopt+0xe0>)
 8011994:	f005 fb72 	bl	801707c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011998:	4b31      	ldr	r3, [pc, #196]	; (8011a60 <tcp_parseopt+0xe4>)
 801199a:	881b      	ldrh	r3, [r3, #0]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d055      	beq.n	8011a4c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80119a0:	4b30      	ldr	r3, [pc, #192]	; (8011a64 <tcp_parseopt+0xe8>)
 80119a2:	2200      	movs	r2, #0
 80119a4:	801a      	strh	r2, [r3, #0]
 80119a6:	e045      	b.n	8011a34 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80119a8:	f7ff ffb2 	bl	8011910 <tcp_get_next_optbyte>
 80119ac:	4603      	mov	r3, r0
 80119ae:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80119b0:	7bfb      	ldrb	r3, [r7, #15]
 80119b2:	2b02      	cmp	r3, #2
 80119b4:	d006      	beq.n	80119c4 <tcp_parseopt+0x48>
 80119b6:	2b02      	cmp	r3, #2
 80119b8:	dc2b      	bgt.n	8011a12 <tcp_parseopt+0x96>
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d041      	beq.n	8011a42 <tcp_parseopt+0xc6>
 80119be:	2b01      	cmp	r3, #1
 80119c0:	d127      	bne.n	8011a12 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80119c2:	e037      	b.n	8011a34 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80119c4:	f7ff ffa4 	bl	8011910 <tcp_get_next_optbyte>
 80119c8:	4603      	mov	r3, r0
 80119ca:	2b04      	cmp	r3, #4
 80119cc:	d13b      	bne.n	8011a46 <tcp_parseopt+0xca>
 80119ce:	4b25      	ldr	r3, [pc, #148]	; (8011a64 <tcp_parseopt+0xe8>)
 80119d0:	881b      	ldrh	r3, [r3, #0]
 80119d2:	3301      	adds	r3, #1
 80119d4:	4a22      	ldr	r2, [pc, #136]	; (8011a60 <tcp_parseopt+0xe4>)
 80119d6:	8812      	ldrh	r2, [r2, #0]
 80119d8:	4293      	cmp	r3, r2
 80119da:	da34      	bge.n	8011a46 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80119dc:	f7ff ff98 	bl	8011910 <tcp_get_next_optbyte>
 80119e0:	4603      	mov	r3, r0
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	021b      	lsls	r3, r3, #8
 80119e6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80119e8:	f7ff ff92 	bl	8011910 <tcp_get_next_optbyte>
 80119ec:	4603      	mov	r3, r0
 80119ee:	b29a      	uxth	r2, r3
 80119f0:	89bb      	ldrh	r3, [r7, #12]
 80119f2:	4313      	orrs	r3, r2
 80119f4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80119f6:	89bb      	ldrh	r3, [r7, #12]
 80119f8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80119fc:	d804      	bhi.n	8011a08 <tcp_parseopt+0x8c>
 80119fe:	89bb      	ldrh	r3, [r7, #12]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d001      	beq.n	8011a08 <tcp_parseopt+0x8c>
 8011a04:	89ba      	ldrh	r2, [r7, #12]
 8011a06:	e001      	b.n	8011a0c <tcp_parseopt+0x90>
 8011a08:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011a10:	e010      	b.n	8011a34 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011a12:	f7ff ff7d 	bl	8011910 <tcp_get_next_optbyte>
 8011a16:	4603      	mov	r3, r0
 8011a18:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011a1a:	7afb      	ldrb	r3, [r7, #11]
 8011a1c:	2b01      	cmp	r3, #1
 8011a1e:	d914      	bls.n	8011a4a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011a20:	7afb      	ldrb	r3, [r7, #11]
 8011a22:	b29a      	uxth	r2, r3
 8011a24:	4b0f      	ldr	r3, [pc, #60]	; (8011a64 <tcp_parseopt+0xe8>)
 8011a26:	881b      	ldrh	r3, [r3, #0]
 8011a28:	4413      	add	r3, r2
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	3b02      	subs	r3, #2
 8011a2e:	b29a      	uxth	r2, r3
 8011a30:	4b0c      	ldr	r3, [pc, #48]	; (8011a64 <tcp_parseopt+0xe8>)
 8011a32:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a34:	4b0b      	ldr	r3, [pc, #44]	; (8011a64 <tcp_parseopt+0xe8>)
 8011a36:	881a      	ldrh	r2, [r3, #0]
 8011a38:	4b09      	ldr	r3, [pc, #36]	; (8011a60 <tcp_parseopt+0xe4>)
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d3b3      	bcc.n	80119a8 <tcp_parseopt+0x2c>
 8011a40:	e004      	b.n	8011a4c <tcp_parseopt+0xd0>
          return;
 8011a42:	bf00      	nop
 8011a44:	e002      	b.n	8011a4c <tcp_parseopt+0xd0>
            return;
 8011a46:	bf00      	nop
 8011a48:	e000      	b.n	8011a4c <tcp_parseopt+0xd0>
            return;
 8011a4a:	bf00      	nop
      }
    }
  }
}
 8011a4c:	3710      	adds	r7, #16
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
 8011a52:	bf00      	nop
 8011a54:	080191c0 	.word	0x080191c0
 8011a58:	08019624 	.word	0x08019624
 8011a5c:	0801920c 	.word	0x0801920c
 8011a60:	20008ff4 	.word	0x20008ff4
 8011a64:	20008ffc 	.word	0x20008ffc

08011a68 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011a68:	b480      	push	{r7}
 8011a6a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011a6c:	4b05      	ldr	r3, [pc, #20]	; (8011a84 <tcp_trigger_input_pcb_close+0x1c>)
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	f043 0310 	orr.w	r3, r3, #16
 8011a74:	b2da      	uxtb	r2, r3
 8011a76:	4b03      	ldr	r3, [pc, #12]	; (8011a84 <tcp_trigger_input_pcb_close+0x1c>)
 8011a78:	701a      	strb	r2, [r3, #0]
}
 8011a7a:	bf00      	nop
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr
 8011a84:	2000900d 	.word	0x2000900d

08011a88 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b084      	sub	sp, #16
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	60f8      	str	r0, [r7, #12]
 8011a90:	60b9      	str	r1, [r7, #8]
 8011a92:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d00a      	beq.n	8011ab0 <tcp_route+0x28>
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	7a1b      	ldrb	r3, [r3, #8]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d006      	beq.n	8011ab0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	7a1b      	ldrb	r3, [r3, #8]
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7fb fab8 	bl	800d01c <netif_get_by_index>
 8011aac:	4603      	mov	r3, r0
 8011aae:	e003      	b.n	8011ab8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f003 fa37 	bl	8014f24 <ip4_route>
 8011ab6:	4603      	mov	r3, r0
  }
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3710      	adds	r7, #16
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011ac0:	b590      	push	{r4, r7, lr}
 8011ac2:	b087      	sub	sp, #28
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	60f8      	str	r0, [r7, #12]
 8011ac8:	60b9      	str	r1, [r7, #8]
 8011aca:	603b      	str	r3, [r7, #0]
 8011acc:	4613      	mov	r3, r2
 8011ace:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d105      	bne.n	8011ae2 <tcp_create_segment+0x22>
 8011ad6:	4b44      	ldr	r3, [pc, #272]	; (8011be8 <tcp_create_segment+0x128>)
 8011ad8:	22a3      	movs	r2, #163	; 0xa3
 8011ada:	4944      	ldr	r1, [pc, #272]	; (8011bec <tcp_create_segment+0x12c>)
 8011adc:	4844      	ldr	r0, [pc, #272]	; (8011bf0 <tcp_create_segment+0x130>)
 8011ade:	f005 facd 	bl	801707c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d105      	bne.n	8011af4 <tcp_create_segment+0x34>
 8011ae8:	4b3f      	ldr	r3, [pc, #252]	; (8011be8 <tcp_create_segment+0x128>)
 8011aea:	22a4      	movs	r2, #164	; 0xa4
 8011aec:	4941      	ldr	r1, [pc, #260]	; (8011bf4 <tcp_create_segment+0x134>)
 8011aee:	4840      	ldr	r0, [pc, #256]	; (8011bf0 <tcp_create_segment+0x130>)
 8011af0:	f005 fac4 	bl	801707c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011af4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011af8:	009b      	lsls	r3, r3, #2
 8011afa:	b2db      	uxtb	r3, r3
 8011afc:	f003 0304 	and.w	r3, r3, #4
 8011b00:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011b02:	2003      	movs	r0, #3
 8011b04:	f7fa ff04 	bl	800c910 <memp_malloc>
 8011b08:	6138      	str	r0, [r7, #16]
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d104      	bne.n	8011b1a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011b10:	68b8      	ldr	r0, [r7, #8]
 8011b12:	f7fb fde3 	bl	800d6dc <pbuf_free>
    return NULL;
 8011b16:	2300      	movs	r3, #0
 8011b18:	e061      	b.n	8011bde <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011b20:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	2200      	movs	r2, #0
 8011b26:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	68ba      	ldr	r2, [r7, #8]
 8011b2c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011b2e:	68bb      	ldr	r3, [r7, #8]
 8011b30:	891a      	ldrh	r2, [r3, #8]
 8011b32:	7dfb      	ldrb	r3, [r7, #23]
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d205      	bcs.n	8011b46 <tcp_create_segment+0x86>
 8011b3a:	4b2b      	ldr	r3, [pc, #172]	; (8011be8 <tcp_create_segment+0x128>)
 8011b3c:	22b0      	movs	r2, #176	; 0xb0
 8011b3e:	492e      	ldr	r1, [pc, #184]	; (8011bf8 <tcp_create_segment+0x138>)
 8011b40:	482b      	ldr	r0, [pc, #172]	; (8011bf0 <tcp_create_segment+0x130>)
 8011b42:	f005 fa9b 	bl	801707c <iprintf>
  seg->len = p->tot_len - optlen;
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	891a      	ldrh	r2, [r3, #8]
 8011b4a:	7dfb      	ldrb	r3, [r7, #23]
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	1ad3      	subs	r3, r2, r3
 8011b50:	b29a      	uxth	r2, r3
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011b56:	2114      	movs	r1, #20
 8011b58:	68b8      	ldr	r0, [r7, #8]
 8011b5a:	f7fb fd29 	bl	800d5b0 <pbuf_add_header>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d004      	beq.n	8011b6e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011b64:	6938      	ldr	r0, [r7, #16]
 8011b66:	f7fd f8ce 	bl	800ed06 <tcp_seg_free>
    return NULL;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	e037      	b.n	8011bde <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	685b      	ldr	r3, [r3, #4]
 8011b72:	685a      	ldr	r2, [r3, #4]
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	8ada      	ldrh	r2, [r3, #22]
 8011b7c:	693b      	ldr	r3, [r7, #16]
 8011b7e:	68dc      	ldr	r4, [r3, #12]
 8011b80:	4610      	mov	r0, r2
 8011b82:	f7fa fa4d 	bl	800c020 <lwip_htons>
 8011b86:	4603      	mov	r3, r0
 8011b88:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	8b1a      	ldrh	r2, [r3, #24]
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	68dc      	ldr	r4, [r3, #12]
 8011b92:	4610      	mov	r0, r2
 8011b94:	f7fa fa44 	bl	800c020 <lwip_htons>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	68dc      	ldr	r4, [r3, #12]
 8011ba0:	6838      	ldr	r0, [r7, #0]
 8011ba2:	f7fa fa52 	bl	800c04a <lwip_htonl>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011baa:	7dfb      	ldrb	r3, [r7, #23]
 8011bac:	089b      	lsrs	r3, r3, #2
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	b29b      	uxth	r3, r3
 8011bb2:	3305      	adds	r3, #5
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	031b      	lsls	r3, r3, #12
 8011bb8:	b29a      	uxth	r2, r3
 8011bba:	79fb      	ldrb	r3, [r7, #7]
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	4313      	orrs	r3, r2
 8011bc0:	b29a      	uxth	r2, r3
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	68dc      	ldr	r4, [r3, #12]
 8011bc6:	4610      	mov	r0, r2
 8011bc8:	f7fa fa2a 	bl	800c020 <lwip_htons>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	68db      	ldr	r3, [r3, #12]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	749a      	strb	r2, [r3, #18]
 8011bd8:	2200      	movs	r2, #0
 8011bda:	74da      	strb	r2, [r3, #19]
  return seg;
 8011bdc:	693b      	ldr	r3, [r7, #16]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	371c      	adds	r7, #28
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd90      	pop	{r4, r7, pc}
 8011be6:	bf00      	nop
 8011be8:	08019640 	.word	0x08019640
 8011bec:	08019674 	.word	0x08019674
 8011bf0:	08019694 	.word	0x08019694
 8011bf4:	080196bc 	.word	0x080196bc
 8011bf8:	080196e0 	.word	0x080196e0

08011bfc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011bfc:	b590      	push	{r4, r7, lr}
 8011bfe:	b08b      	sub	sp, #44	; 0x2c
 8011c00:	af02      	add	r7, sp, #8
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	460b      	mov	r3, r1
 8011c06:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	61fb      	str	r3, [r7, #28]
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011c10:	2300      	movs	r3, #0
 8011c12:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d106      	bne.n	8011c28 <tcp_split_unsent_seg+0x2c>
 8011c1a:	4b95      	ldr	r3, [pc, #596]	; (8011e70 <tcp_split_unsent_seg+0x274>)
 8011c1c:	f240 324b 	movw	r2, #843	; 0x34b
 8011c20:	4994      	ldr	r1, [pc, #592]	; (8011e74 <tcp_split_unsent_seg+0x278>)
 8011c22:	4895      	ldr	r0, [pc, #596]	; (8011e78 <tcp_split_unsent_seg+0x27c>)
 8011c24:	f005 fa2a 	bl	801707c <iprintf>

  useg = pcb->unsent;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c2c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d102      	bne.n	8011c3a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011c34:	f04f 33ff 	mov.w	r3, #4294967295
 8011c38:	e116      	b.n	8011e68 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011c3a:	887b      	ldrh	r3, [r7, #2]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d109      	bne.n	8011c54 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011c40:	4b8b      	ldr	r3, [pc, #556]	; (8011e70 <tcp_split_unsent_seg+0x274>)
 8011c42:	f240 3253 	movw	r2, #851	; 0x353
 8011c46:	498d      	ldr	r1, [pc, #564]	; (8011e7c <tcp_split_unsent_seg+0x280>)
 8011c48:	488b      	ldr	r0, [pc, #556]	; (8011e78 <tcp_split_unsent_seg+0x27c>)
 8011c4a:	f005 fa17 	bl	801707c <iprintf>
    return ERR_VAL;
 8011c4e:	f06f 0305 	mvn.w	r3, #5
 8011c52:	e109      	b.n	8011e68 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	891b      	ldrh	r3, [r3, #8]
 8011c58:	887a      	ldrh	r2, [r7, #2]
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d301      	bcc.n	8011c62 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	e102      	b.n	8011e68 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c66:	887a      	ldrh	r2, [r7, #2]
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d906      	bls.n	8011c7a <tcp_split_unsent_seg+0x7e>
 8011c6c:	4b80      	ldr	r3, [pc, #512]	; (8011e70 <tcp_split_unsent_seg+0x274>)
 8011c6e:	f240 325b 	movw	r2, #859	; 0x35b
 8011c72:	4983      	ldr	r1, [pc, #524]	; (8011e80 <tcp_split_unsent_seg+0x284>)
 8011c74:	4880      	ldr	r0, [pc, #512]	; (8011e78 <tcp_split_unsent_seg+0x27c>)
 8011c76:	f005 fa01 	bl	801707c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	891b      	ldrh	r3, [r3, #8]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d106      	bne.n	8011c90 <tcp_split_unsent_seg+0x94>
 8011c82:	4b7b      	ldr	r3, [pc, #492]	; (8011e70 <tcp_split_unsent_seg+0x274>)
 8011c84:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011c88:	497e      	ldr	r1, [pc, #504]	; (8011e84 <tcp_split_unsent_seg+0x288>)
 8011c8a:	487b      	ldr	r0, [pc, #492]	; (8011e78 <tcp_split_unsent_seg+0x27c>)
 8011c8c:	f005 f9f6 	bl	801707c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	7a9b      	ldrb	r3, [r3, #10]
 8011c94:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011c96:	7bfb      	ldrb	r3, [r7, #15]
 8011c98:	009b      	lsls	r3, r3, #2
 8011c9a:	b2db      	uxtb	r3, r3
 8011c9c:	f003 0304 	and.w	r3, r3, #4
 8011ca0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	891a      	ldrh	r2, [r3, #8]
 8011ca6:	887b      	ldrh	r3, [r7, #2]
 8011ca8:	1ad3      	subs	r3, r2, r3
 8011caa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011cac:	7bbb      	ldrb	r3, [r7, #14]
 8011cae:	b29a      	uxth	r2, r3
 8011cb0:	89bb      	ldrh	r3, [r7, #12]
 8011cb2:	4413      	add	r3, r2
 8011cb4:	b29b      	uxth	r3, r3
 8011cb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011cba:	4619      	mov	r1, r3
 8011cbc:	2036      	movs	r0, #54	; 0x36
 8011cbe:	f7fb fa29 	bl	800d114 <pbuf_alloc>
 8011cc2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	f000 80b7 	beq.w	8011e3a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	891a      	ldrh	r2, [r3, #8]
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	891b      	ldrh	r3, [r3, #8]
 8011cd6:	1ad3      	subs	r3, r2, r3
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	887b      	ldrh	r3, [r7, #2]
 8011cdc:	4413      	add	r3, r2
 8011cde:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011ce0:	697b      	ldr	r3, [r7, #20]
 8011ce2:	6858      	ldr	r0, [r3, #4]
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	685a      	ldr	r2, [r3, #4]
 8011ce8:	7bbb      	ldrb	r3, [r7, #14]
 8011cea:	18d1      	adds	r1, r2, r3
 8011cec:	897b      	ldrh	r3, [r7, #10]
 8011cee:	89ba      	ldrh	r2, [r7, #12]
 8011cf0:	f7fb feee 	bl	800dad0 <pbuf_copy_partial>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	89bb      	ldrh	r3, [r7, #12]
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	f040 809f 	bne.w	8011e3e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	68db      	ldr	r3, [r3, #12]
 8011d04:	899b      	ldrh	r3, [r3, #12]
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7fa f989 	bl	800c020 <lwip_htons>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	b2db      	uxtb	r3, r3
 8011d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011d16:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011d18:	2300      	movs	r3, #0
 8011d1a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011d1c:	7efb      	ldrb	r3, [r7, #27]
 8011d1e:	f003 0308 	and.w	r3, r3, #8
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d007      	beq.n	8011d36 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011d26:	7efb      	ldrb	r3, [r7, #27]
 8011d28:	f023 0308 	bic.w	r3, r3, #8
 8011d2c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011d2e:	7ebb      	ldrb	r3, [r7, #26]
 8011d30:	f043 0308 	orr.w	r3, r3, #8
 8011d34:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011d36:	7efb      	ldrb	r3, [r7, #27]
 8011d38:	f003 0301 	and.w	r3, r3, #1
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d007      	beq.n	8011d50 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011d40:	7efb      	ldrb	r3, [r7, #27]
 8011d42:	f023 0301 	bic.w	r3, r3, #1
 8011d46:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011d48:	7ebb      	ldrb	r3, [r7, #26]
 8011d4a:	f043 0301 	orr.w	r3, r3, #1
 8011d4e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fa f977 	bl	800c04a <lwip_htonl>
 8011d5c:	4602      	mov	r2, r0
 8011d5e:	887b      	ldrh	r3, [r7, #2]
 8011d60:	18d1      	adds	r1, r2, r3
 8011d62:	7eba      	ldrb	r2, [r7, #26]
 8011d64:	7bfb      	ldrb	r3, [r7, #15]
 8011d66:	9300      	str	r3, [sp, #0]
 8011d68:	460b      	mov	r3, r1
 8011d6a:	6939      	ldr	r1, [r7, #16]
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f7ff fea7 	bl	8011ac0 <tcp_create_segment>
 8011d72:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011d74:	69fb      	ldr	r3, [r7, #28]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d063      	beq.n	8011e42 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7fb fd34 	bl	800d7ec <pbuf_clen>
 8011d84:	4603      	mov	r3, r0
 8011d86:	461a      	mov	r2, r3
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d8e:	1a9b      	subs	r3, r3, r2
 8011d90:	b29a      	uxth	r2, r3
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	6858      	ldr	r0, [r3, #4]
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	685b      	ldr	r3, [r3, #4]
 8011da0:	891a      	ldrh	r2, [r3, #8]
 8011da2:	89bb      	ldrh	r3, [r7, #12]
 8011da4:	1ad3      	subs	r3, r2, r3
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	4619      	mov	r1, r3
 8011daa:	f7fb fb11 	bl	800d3d0 <pbuf_realloc>
  useg->len -= remainder;
 8011dae:	697b      	ldr	r3, [r7, #20]
 8011db0:	891a      	ldrh	r2, [r3, #8]
 8011db2:	89bb      	ldrh	r3, [r7, #12]
 8011db4:	1ad3      	subs	r3, r2, r3
 8011db6:	b29a      	uxth	r2, r3
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011dbc:	697b      	ldr	r3, [r7, #20]
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	899b      	ldrh	r3, [r3, #12]
 8011dc2:	b29c      	uxth	r4, r3
 8011dc4:	7efb      	ldrb	r3, [r7, #27]
 8011dc6:	b29b      	uxth	r3, r3
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7fa f929 	bl	800c020 <lwip_htons>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	461a      	mov	r2, r3
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	68db      	ldr	r3, [r3, #12]
 8011dd6:	4322      	orrs	r2, r4
 8011dd8:	b292      	uxth	r2, r2
 8011dda:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	685b      	ldr	r3, [r3, #4]
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7fb fd03 	bl	800d7ec <pbuf_clen>
 8011de6:	4603      	mov	r3, r0
 8011de8:	461a      	mov	r2, r3
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011df0:	4413      	add	r3, r2
 8011df2:	b29a      	uxth	r2, r3
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011dfa:	69fb      	ldr	r3, [r7, #28]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7fb fcf4 	bl	800d7ec <pbuf_clen>
 8011e04:	4603      	mov	r3, r0
 8011e06:	461a      	mov	r2, r3
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e0e:	4413      	add	r3, r2
 8011e10:	b29a      	uxth	r2, r3
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011e18:	697b      	ldr	r3, [r7, #20]
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	69fa      	ldr	r2, [r7, #28]
 8011e24:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011e26:	69fb      	ldr	r3, [r7, #28]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d103      	bne.n	8011e36 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	2200      	movs	r2, #0
 8011e32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011e36:	2300      	movs	r3, #0
 8011e38:	e016      	b.n	8011e68 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011e3a:	bf00      	nop
 8011e3c:	e002      	b.n	8011e44 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011e3e:	bf00      	nop
 8011e40:	e000      	b.n	8011e44 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011e42:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011e44:	69fb      	ldr	r3, [r7, #28]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d006      	beq.n	8011e58 <tcp_split_unsent_seg+0x25c>
 8011e4a:	4b09      	ldr	r3, [pc, #36]	; (8011e70 <tcp_split_unsent_seg+0x274>)
 8011e4c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011e50:	490d      	ldr	r1, [pc, #52]	; (8011e88 <tcp_split_unsent_seg+0x28c>)
 8011e52:	4809      	ldr	r0, [pc, #36]	; (8011e78 <tcp_split_unsent_seg+0x27c>)
 8011e54:	f005 f912 	bl	801707c <iprintf>
  if (p != NULL) {
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d002      	beq.n	8011e64 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011e5e:	6938      	ldr	r0, [r7, #16]
 8011e60:	f7fb fc3c 	bl	800d6dc <pbuf_free>
  }

  return ERR_MEM;
 8011e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3724      	adds	r7, #36	; 0x24
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd90      	pop	{r4, r7, pc}
 8011e70:	08019640 	.word	0x08019640
 8011e74:	080199d4 	.word	0x080199d4
 8011e78:	08019694 	.word	0x08019694
 8011e7c:	080199f8 	.word	0x080199f8
 8011e80:	08019a1c 	.word	0x08019a1c
 8011e84:	08019a2c 	.word	0x08019a2c
 8011e88:	08019a3c 	.word	0x08019a3c

08011e8c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011e8c:	b590      	push	{r4, r7, lr}
 8011e8e:	b085      	sub	sp, #20
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d106      	bne.n	8011ea8 <tcp_send_fin+0x1c>
 8011e9a:	4b21      	ldr	r3, [pc, #132]	; (8011f20 <tcp_send_fin+0x94>)
 8011e9c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011ea0:	4920      	ldr	r1, [pc, #128]	; (8011f24 <tcp_send_fin+0x98>)
 8011ea2:	4821      	ldr	r0, [pc, #132]	; (8011f28 <tcp_send_fin+0x9c>)
 8011ea4:	f005 f8ea 	bl	801707c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d02e      	beq.n	8011f0e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eb4:	60fb      	str	r3, [r7, #12]
 8011eb6:	e002      	b.n	8011ebe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d1f8      	bne.n	8011eb8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	68db      	ldr	r3, [r3, #12]
 8011eca:	899b      	ldrh	r3, [r3, #12]
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7fa f8a6 	bl	800c020 <lwip_htons>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	f003 0307 	and.w	r3, r3, #7
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d116      	bne.n	8011f0e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	899b      	ldrh	r3, [r3, #12]
 8011ee6:	b29c      	uxth	r4, r3
 8011ee8:	2001      	movs	r0, #1
 8011eea:	f7fa f899 	bl	800c020 <lwip_htons>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	461a      	mov	r2, r3
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	4322      	orrs	r2, r4
 8011ef8:	b292      	uxth	r2, r2
 8011efa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	8b5b      	ldrh	r3, [r3, #26]
 8011f00:	f043 0320 	orr.w	r3, r3, #32
 8011f04:	b29a      	uxth	r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	e004      	b.n	8011f18 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011f0e:	2101      	movs	r1, #1
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f000 f80b 	bl	8011f2c <tcp_enqueue_flags>
 8011f16:	4603      	mov	r3, r0
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3714      	adds	r7, #20
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd90      	pop	{r4, r7, pc}
 8011f20:	08019640 	.word	0x08019640
 8011f24:	08019a48 	.word	0x08019a48
 8011f28:	08019694 	.word	0x08019694

08011f2c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b08a      	sub	sp, #40	; 0x28
 8011f30:	af02      	add	r7, sp, #8
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	460b      	mov	r3, r1
 8011f36:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011f40:	78fb      	ldrb	r3, [r7, #3]
 8011f42:	f003 0303 	and.w	r3, r3, #3
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d106      	bne.n	8011f58 <tcp_enqueue_flags+0x2c>
 8011f4a:	4b67      	ldr	r3, [pc, #412]	; (80120e8 <tcp_enqueue_flags+0x1bc>)
 8011f4c:	f240 4211 	movw	r2, #1041	; 0x411
 8011f50:	4966      	ldr	r1, [pc, #408]	; (80120ec <tcp_enqueue_flags+0x1c0>)
 8011f52:	4867      	ldr	r0, [pc, #412]	; (80120f0 <tcp_enqueue_flags+0x1c4>)
 8011f54:	f005 f892 	bl	801707c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d106      	bne.n	8011f6c <tcp_enqueue_flags+0x40>
 8011f5e:	4b62      	ldr	r3, [pc, #392]	; (80120e8 <tcp_enqueue_flags+0x1bc>)
 8011f60:	f240 4213 	movw	r2, #1043	; 0x413
 8011f64:	4963      	ldr	r1, [pc, #396]	; (80120f4 <tcp_enqueue_flags+0x1c8>)
 8011f66:	4862      	ldr	r0, [pc, #392]	; (80120f0 <tcp_enqueue_flags+0x1c4>)
 8011f68:	f005 f888 	bl	801707c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011f6c:	78fb      	ldrb	r3, [r7, #3]
 8011f6e:	f003 0302 	and.w	r3, r3, #2
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d001      	beq.n	8011f7a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011f76:	2301      	movs	r3, #1
 8011f78:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011f7a:	7ffb      	ldrb	r3, [r7, #31]
 8011f7c:	009b      	lsls	r3, r3, #2
 8011f7e:	b2db      	uxtb	r3, r3
 8011f80:	f003 0304 	and.w	r3, r3, #4
 8011f84:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011f86:	7dfb      	ldrb	r3, [r7, #23]
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f8e:	4619      	mov	r1, r3
 8011f90:	2036      	movs	r0, #54	; 0x36
 8011f92:	f7fb f8bf 	bl	800d114 <pbuf_alloc>
 8011f96:	6138      	str	r0, [r7, #16]
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d109      	bne.n	8011fb2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	8b5b      	ldrh	r3, [r3, #26]
 8011fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fa6:	b29a      	uxth	r2, r3
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011fac:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb0:	e095      	b.n	80120de <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011fb2:	693b      	ldr	r3, [r7, #16]
 8011fb4:	895a      	ldrh	r2, [r3, #10]
 8011fb6:	7dfb      	ldrb	r3, [r7, #23]
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d206      	bcs.n	8011fcc <tcp_enqueue_flags+0xa0>
 8011fbe:	4b4a      	ldr	r3, [pc, #296]	; (80120e8 <tcp_enqueue_flags+0x1bc>)
 8011fc0:	f240 4239 	movw	r2, #1081	; 0x439
 8011fc4:	494c      	ldr	r1, [pc, #304]	; (80120f8 <tcp_enqueue_flags+0x1cc>)
 8011fc6:	484a      	ldr	r0, [pc, #296]	; (80120f0 <tcp_enqueue_flags+0x1c4>)
 8011fc8:	f005 f858 	bl	801707c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011fd0:	78fa      	ldrb	r2, [r7, #3]
 8011fd2:	7ffb      	ldrb	r3, [r7, #31]
 8011fd4:	9300      	str	r3, [sp, #0]
 8011fd6:	460b      	mov	r3, r1
 8011fd8:	6939      	ldr	r1, [r7, #16]
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7ff fd70 	bl	8011ac0 <tcp_create_segment>
 8011fe0:	60f8      	str	r0, [r7, #12]
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d109      	bne.n	8011ffc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	8b5b      	ldrh	r3, [r3, #26]
 8011fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ff0:	b29a      	uxth	r2, r3
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8011ffa:	e070      	b.n	80120de <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	f003 0303 	and.w	r3, r3, #3
 8012004:	2b00      	cmp	r3, #0
 8012006:	d006      	beq.n	8012016 <tcp_enqueue_flags+0xea>
 8012008:	4b37      	ldr	r3, [pc, #220]	; (80120e8 <tcp_enqueue_flags+0x1bc>)
 801200a:	f240 4242 	movw	r2, #1090	; 0x442
 801200e:	493b      	ldr	r1, [pc, #236]	; (80120fc <tcp_enqueue_flags+0x1d0>)
 8012010:	4837      	ldr	r0, [pc, #220]	; (80120f0 <tcp_enqueue_flags+0x1c4>)
 8012012:	f005 f833 	bl	801707c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	891b      	ldrh	r3, [r3, #8]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d006      	beq.n	801202c <tcp_enqueue_flags+0x100>
 801201e:	4b32      	ldr	r3, [pc, #200]	; (80120e8 <tcp_enqueue_flags+0x1bc>)
 8012020:	f240 4243 	movw	r2, #1091	; 0x443
 8012024:	4936      	ldr	r1, [pc, #216]	; (8012100 <tcp_enqueue_flags+0x1d4>)
 8012026:	4832      	ldr	r0, [pc, #200]	; (80120f0 <tcp_enqueue_flags+0x1c4>)
 8012028:	f005 f828 	bl	801707c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012030:	2b00      	cmp	r3, #0
 8012032:	d103      	bne.n	801203c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	68fa      	ldr	r2, [r7, #12]
 8012038:	66da      	str	r2, [r3, #108]	; 0x6c
 801203a:	e00d      	b.n	8012058 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012040:	61bb      	str	r3, [r7, #24]
 8012042:	e002      	b.n	801204a <tcp_enqueue_flags+0x11e>
 8012044:	69bb      	ldr	r3, [r7, #24]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	61bb      	str	r3, [r7, #24]
 801204a:	69bb      	ldr	r3, [r7, #24]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d1f8      	bne.n	8012044 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012052:	69bb      	ldr	r3, [r7, #24]
 8012054:	68fa      	ldr	r2, [r7, #12]
 8012056:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2200      	movs	r2, #0
 801205c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012060:	78fb      	ldrb	r3, [r7, #3]
 8012062:	f003 0302 	and.w	r3, r3, #2
 8012066:	2b00      	cmp	r3, #0
 8012068:	d104      	bne.n	8012074 <tcp_enqueue_flags+0x148>
 801206a:	78fb      	ldrb	r3, [r7, #3]
 801206c:	f003 0301 	and.w	r3, r3, #1
 8012070:	2b00      	cmp	r3, #0
 8012072:	d004      	beq.n	801207e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012078:	1c5a      	adds	r2, r3, #1
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801207e:	78fb      	ldrb	r3, [r7, #3]
 8012080:	f003 0301 	and.w	r3, r3, #1
 8012084:	2b00      	cmp	r3, #0
 8012086:	d006      	beq.n	8012096 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	8b5b      	ldrh	r3, [r3, #26]
 801208c:	f043 0320 	orr.w	r3, r3, #32
 8012090:	b29a      	uxth	r2, r3
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	685b      	ldr	r3, [r3, #4]
 801209a:	4618      	mov	r0, r3
 801209c:	f7fb fba6 	bl	800d7ec <pbuf_clen>
 80120a0:	4603      	mov	r3, r0
 80120a2:	461a      	mov	r2, r3
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120aa:	4413      	add	r3, r2
 80120ac:	b29a      	uxth	r2, r3
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d00e      	beq.n	80120dc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d10a      	bne.n	80120dc <tcp_enqueue_flags+0x1b0>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d106      	bne.n	80120dc <tcp_enqueue_flags+0x1b0>
 80120ce:	4b06      	ldr	r3, [pc, #24]	; (80120e8 <tcp_enqueue_flags+0x1bc>)
 80120d0:	f240 4265 	movw	r2, #1125	; 0x465
 80120d4:	490b      	ldr	r1, [pc, #44]	; (8012104 <tcp_enqueue_flags+0x1d8>)
 80120d6:	4806      	ldr	r0, [pc, #24]	; (80120f0 <tcp_enqueue_flags+0x1c4>)
 80120d8:	f004 ffd0 	bl	801707c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80120dc:	2300      	movs	r3, #0
}
 80120de:	4618      	mov	r0, r3
 80120e0:	3720      	adds	r7, #32
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	08019640 	.word	0x08019640
 80120ec:	08019a64 	.word	0x08019a64
 80120f0:	08019694 	.word	0x08019694
 80120f4:	08019abc 	.word	0x08019abc
 80120f8:	08019adc 	.word	0x08019adc
 80120fc:	08019b18 	.word	0x08019b18
 8012100:	08019b30 	.word	0x08019b30
 8012104:	08019b5c 	.word	0x08019b5c

08012108 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012108:	b5b0      	push	{r4, r5, r7, lr}
 801210a:	b08a      	sub	sp, #40	; 0x28
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d106      	bne.n	8012124 <tcp_output+0x1c>
 8012116:	4b8a      	ldr	r3, [pc, #552]	; (8012340 <tcp_output+0x238>)
 8012118:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801211c:	4989      	ldr	r1, [pc, #548]	; (8012344 <tcp_output+0x23c>)
 801211e:	488a      	ldr	r0, [pc, #552]	; (8012348 <tcp_output+0x240>)
 8012120:	f004 ffac 	bl	801707c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	7d1b      	ldrb	r3, [r3, #20]
 8012128:	2b01      	cmp	r3, #1
 801212a:	d106      	bne.n	801213a <tcp_output+0x32>
 801212c:	4b84      	ldr	r3, [pc, #528]	; (8012340 <tcp_output+0x238>)
 801212e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012132:	4986      	ldr	r1, [pc, #536]	; (801234c <tcp_output+0x244>)
 8012134:	4884      	ldr	r0, [pc, #528]	; (8012348 <tcp_output+0x240>)
 8012136:	f004 ffa1 	bl	801707c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801213a:	4b85      	ldr	r3, [pc, #532]	; (8012350 <tcp_output+0x248>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	687a      	ldr	r2, [r7, #4]
 8012140:	429a      	cmp	r2, r3
 8012142:	d101      	bne.n	8012148 <tcp_output+0x40>
    return ERR_OK;
 8012144:	2300      	movs	r3, #0
 8012146:	e1ce      	b.n	80124e6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012154:	4293      	cmp	r3, r2
 8012156:	bf28      	it	cs
 8012158:	4613      	movcs	r3, r2
 801215a:	b29b      	uxth	r3, r3
 801215c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012162:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012166:	2b00      	cmp	r3, #0
 8012168:	d10b      	bne.n	8012182 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	8b5b      	ldrh	r3, [r3, #26]
 801216e:	f003 0302 	and.w	r3, r3, #2
 8012172:	2b00      	cmp	r3, #0
 8012174:	f000 81aa 	beq.w	80124cc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f000 fdcb 	bl	8012d14 <tcp_send_empty_ack>
 801217e:	4603      	mov	r3, r0
 8012180:	e1b1      	b.n	80124e6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012182:	6879      	ldr	r1, [r7, #4]
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	3304      	adds	r3, #4
 8012188:	461a      	mov	r2, r3
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f7ff fc7c 	bl	8011a88 <tcp_route>
 8012190:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d102      	bne.n	801219e <tcp_output+0x96>
    return ERR_RTE;
 8012198:	f06f 0303 	mvn.w	r3, #3
 801219c:	e1a3      	b.n	80124e6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d003      	beq.n	80121ac <tcp_output+0xa4>
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d111      	bne.n	80121d0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d002      	beq.n	80121b8 <tcp_output+0xb0>
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	3304      	adds	r3, #4
 80121b6:	e000      	b.n	80121ba <tcp_output+0xb2>
 80121b8:	2300      	movs	r3, #0
 80121ba:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d102      	bne.n	80121c8 <tcp_output+0xc0>
      return ERR_RTE;
 80121c2:	f06f 0303 	mvn.w	r3, #3
 80121c6:	e18e      	b.n	80124e6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80121c8:	693b      	ldr	r3, [r7, #16]
 80121ca:	681a      	ldr	r2, [r3, #0]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80121d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d2:	68db      	ldr	r3, [r3, #12]
 80121d4:	685b      	ldr	r3, [r3, #4]
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7f9 ff37 	bl	800c04a <lwip_htonl>
 80121dc:	4602      	mov	r2, r0
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121e2:	1ad3      	subs	r3, r2, r3
 80121e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121e6:	8912      	ldrh	r2, [r2, #8]
 80121e8:	4413      	add	r3, r2
 80121ea:	69ba      	ldr	r2, [r7, #24]
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d227      	bcs.n	8012240 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80121f6:	461a      	mov	r2, r3
 80121f8:	69bb      	ldr	r3, [r7, #24]
 80121fa:	4293      	cmp	r3, r2
 80121fc:	d114      	bne.n	8012228 <tcp_output+0x120>
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012202:	2b00      	cmp	r3, #0
 8012204:	d110      	bne.n	8012228 <tcp_output+0x120>
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801220c:	2b00      	cmp	r3, #0
 801220e:	d10b      	bne.n	8012228 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2200      	movs	r2, #0
 8012214:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2201      	movs	r2, #1
 801221c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2200      	movs	r2, #0
 8012224:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	8b5b      	ldrh	r3, [r3, #26]
 801222c:	f003 0302 	and.w	r3, r3, #2
 8012230:	2b00      	cmp	r3, #0
 8012232:	f000 814d 	beq.w	80124d0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f000 fd6c 	bl	8012d14 <tcp_send_empty_ack>
 801223c:	4603      	mov	r3, r0
 801223e:	e152      	b.n	80124e6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2200      	movs	r2, #0
 8012244:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801224c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801224e:	6a3b      	ldr	r3, [r7, #32]
 8012250:	2b00      	cmp	r3, #0
 8012252:	f000 811c 	beq.w	801248e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012256:	e002      	b.n	801225e <tcp_output+0x156>
 8012258:	6a3b      	ldr	r3, [r7, #32]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	623b      	str	r3, [r7, #32]
 801225e:	6a3b      	ldr	r3, [r7, #32]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d1f8      	bne.n	8012258 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012266:	e112      	b.n	801248e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801226a:	68db      	ldr	r3, [r3, #12]
 801226c:	899b      	ldrh	r3, [r3, #12]
 801226e:	b29b      	uxth	r3, r3
 8012270:	4618      	mov	r0, r3
 8012272:	f7f9 fed5 	bl	800c020 <lwip_htons>
 8012276:	4603      	mov	r3, r0
 8012278:	b2db      	uxtb	r3, r3
 801227a:	f003 0304 	and.w	r3, r3, #4
 801227e:	2b00      	cmp	r3, #0
 8012280:	d006      	beq.n	8012290 <tcp_output+0x188>
 8012282:	4b2f      	ldr	r3, [pc, #188]	; (8012340 <tcp_output+0x238>)
 8012284:	f240 5236 	movw	r2, #1334	; 0x536
 8012288:	4932      	ldr	r1, [pc, #200]	; (8012354 <tcp_output+0x24c>)
 801228a:	482f      	ldr	r0, [pc, #188]	; (8012348 <tcp_output+0x240>)
 801228c:	f004 fef6 	bl	801707c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012294:	2b00      	cmp	r3, #0
 8012296:	d01f      	beq.n	80122d8 <tcp_output+0x1d0>
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	8b5b      	ldrh	r3, [r3, #26]
 801229c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d119      	bne.n	80122d8 <tcp_output+0x1d0>
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d00b      	beq.n	80122c4 <tcp_output+0x1bc>
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d110      	bne.n	80122d8 <tcp_output+0x1d0>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122ba:	891a      	ldrh	r2, [r3, #8]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d209      	bcs.n	80122d8 <tcp_output+0x1d0>
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d004      	beq.n	80122d8 <tcp_output+0x1d0>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122d4:	2b08      	cmp	r3, #8
 80122d6:	d901      	bls.n	80122dc <tcp_output+0x1d4>
 80122d8:	2301      	movs	r3, #1
 80122da:	e000      	b.n	80122de <tcp_output+0x1d6>
 80122dc:	2300      	movs	r3, #0
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d106      	bne.n	80122f0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	8b5b      	ldrh	r3, [r3, #26]
 80122e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	f000 80e4 	beq.w	80124b8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	7d1b      	ldrb	r3, [r3, #20]
 80122f4:	2b02      	cmp	r3, #2
 80122f6:	d00d      	beq.n	8012314 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80122f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fa:	68db      	ldr	r3, [r3, #12]
 80122fc:	899b      	ldrh	r3, [r3, #12]
 80122fe:	b29c      	uxth	r4, r3
 8012300:	2010      	movs	r0, #16
 8012302:	f7f9 fe8d 	bl	800c020 <lwip_htons>
 8012306:	4603      	mov	r3, r0
 8012308:	461a      	mov	r2, r3
 801230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	4322      	orrs	r2, r4
 8012310:	b292      	uxth	r2, r2
 8012312:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012314:	697a      	ldr	r2, [r7, #20]
 8012316:	6879      	ldr	r1, [r7, #4]
 8012318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801231a:	f000 f909 	bl	8012530 <tcp_output_segment>
 801231e:	4603      	mov	r3, r0
 8012320:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d016      	beq.n	8012358 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	8b5b      	ldrh	r3, [r3, #26]
 801232e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012332:	b29a      	uxth	r2, r3
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	835a      	strh	r2, [r3, #26]
      return err;
 8012338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801233c:	e0d3      	b.n	80124e6 <tcp_output+0x3de>
 801233e:	bf00      	nop
 8012340:	08019640 	.word	0x08019640
 8012344:	08019b84 	.word	0x08019b84
 8012348:	08019694 	.word	0x08019694
 801234c:	08019b9c 	.word	0x08019b9c
 8012350:	20009014 	.word	0x20009014
 8012354:	08019bc4 	.word	0x08019bc4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235a:	681a      	ldr	r2, [r3, #0]
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	7d1b      	ldrb	r3, [r3, #20]
 8012364:	2b02      	cmp	r3, #2
 8012366:	d006      	beq.n	8012376 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	8b5b      	ldrh	r3, [r3, #26]
 801236c:	f023 0303 	bic.w	r3, r3, #3
 8012370:	b29a      	uxth	r2, r3
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012378:	68db      	ldr	r3, [r3, #12]
 801237a:	685b      	ldr	r3, [r3, #4]
 801237c:	4618      	mov	r0, r3
 801237e:	f7f9 fe64 	bl	800c04a <lwip_htonl>
 8012382:	4604      	mov	r4, r0
 8012384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012386:	891b      	ldrh	r3, [r3, #8]
 8012388:	461d      	mov	r5, r3
 801238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238c:	68db      	ldr	r3, [r3, #12]
 801238e:	899b      	ldrh	r3, [r3, #12]
 8012390:	b29b      	uxth	r3, r3
 8012392:	4618      	mov	r0, r3
 8012394:	f7f9 fe44 	bl	800c020 <lwip_htons>
 8012398:	4603      	mov	r3, r0
 801239a:	b2db      	uxtb	r3, r3
 801239c:	f003 0303 	and.w	r3, r3, #3
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d001      	beq.n	80123a8 <tcp_output+0x2a0>
 80123a4:	2301      	movs	r3, #1
 80123a6:	e000      	b.n	80123aa <tcp_output+0x2a2>
 80123a8:	2300      	movs	r3, #0
 80123aa:	442b      	add	r3, r5
 80123ac:	4423      	add	r3, r4
 80123ae:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	1ad3      	subs	r3, r2, r3
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	da02      	bge.n	80123c2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	68ba      	ldr	r2, [r7, #8]
 80123c0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80123c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c4:	891b      	ldrh	r3, [r3, #8]
 80123c6:	461c      	mov	r4, r3
 80123c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ca:	68db      	ldr	r3, [r3, #12]
 80123cc:	899b      	ldrh	r3, [r3, #12]
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7f9 fe25 	bl	800c020 <lwip_htons>
 80123d6:	4603      	mov	r3, r0
 80123d8:	b2db      	uxtb	r3, r3
 80123da:	f003 0303 	and.w	r3, r3, #3
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d001      	beq.n	80123e6 <tcp_output+0x2de>
 80123e2:	2301      	movs	r3, #1
 80123e4:	e000      	b.n	80123e8 <tcp_output+0x2e0>
 80123e6:	2300      	movs	r3, #0
 80123e8:	4423      	add	r3, r4
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d049      	beq.n	8012482 <tcp_output+0x37a>
      seg->next = NULL;
 80123ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f0:	2200      	movs	r2, #0
 80123f2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d105      	bne.n	8012408 <tcp_output+0x300>
        pcb->unacked = seg;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012400:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012404:	623b      	str	r3, [r7, #32]
 8012406:	e03f      	b.n	8012488 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	4618      	mov	r0, r3
 8012410:	f7f9 fe1b 	bl	800c04a <lwip_htonl>
 8012414:	4604      	mov	r4, r0
 8012416:	6a3b      	ldr	r3, [r7, #32]
 8012418:	68db      	ldr	r3, [r3, #12]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	4618      	mov	r0, r3
 801241e:	f7f9 fe14 	bl	800c04a <lwip_htonl>
 8012422:	4603      	mov	r3, r0
 8012424:	1ae3      	subs	r3, r4, r3
 8012426:	2b00      	cmp	r3, #0
 8012428:	da24      	bge.n	8012474 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	3370      	adds	r3, #112	; 0x70
 801242e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012430:	e002      	b.n	8012438 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012432:	69fb      	ldr	r3, [r7, #28]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012438:	69fb      	ldr	r3, [r7, #28]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d011      	beq.n	8012464 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	68db      	ldr	r3, [r3, #12]
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	4618      	mov	r0, r3
 801244a:	f7f9 fdfe 	bl	800c04a <lwip_htonl>
 801244e:	4604      	mov	r4, r0
 8012450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012452:	68db      	ldr	r3, [r3, #12]
 8012454:	685b      	ldr	r3, [r3, #4]
 8012456:	4618      	mov	r0, r3
 8012458:	f7f9 fdf7 	bl	800c04a <lwip_htonl>
 801245c:	4603      	mov	r3, r0
 801245e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012460:	2b00      	cmp	r3, #0
 8012462:	dbe6      	blt.n	8012432 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012470:	601a      	str	r2, [r3, #0]
 8012472:	e009      	b.n	8012488 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012474:	6a3b      	ldr	r3, [r7, #32]
 8012476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012478:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801247a:	6a3b      	ldr	r3, [r7, #32]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	623b      	str	r3, [r7, #32]
 8012480:	e002      	b.n	8012488 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012484:	f7fc fc3f 	bl	800ed06 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801248c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012490:	2b00      	cmp	r3, #0
 8012492:	d012      	beq.n	80124ba <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	685b      	ldr	r3, [r3, #4]
 801249a:	4618      	mov	r0, r3
 801249c:	f7f9 fdd5 	bl	800c04a <lwip_htonl>
 80124a0:	4602      	mov	r2, r0
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80124a6:	1ad3      	subs	r3, r2, r3
 80124a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124aa:	8912      	ldrh	r2, [r2, #8]
 80124ac:	4413      	add	r3, r2
  while (seg != NULL &&
 80124ae:	69ba      	ldr	r2, [r7, #24]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	f4bf aed9 	bcs.w	8012268 <tcp_output+0x160>
 80124b6:	e000      	b.n	80124ba <tcp_output+0x3b2>
      break;
 80124b8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d108      	bne.n	80124d4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2200      	movs	r2, #0
 80124c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80124ca:	e004      	b.n	80124d6 <tcp_output+0x3ce>
    goto output_done;
 80124cc:	bf00      	nop
 80124ce:	e002      	b.n	80124d6 <tcp_output+0x3ce>
    goto output_done;
 80124d0:	bf00      	nop
 80124d2:	e000      	b.n	80124d6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80124d4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	8b5b      	ldrh	r3, [r3, #26]
 80124da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80124de:	b29a      	uxth	r2, r3
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80124e4:	2300      	movs	r3, #0
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3728      	adds	r7, #40	; 0x28
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bdb0      	pop	{r4, r5, r7, pc}
 80124ee:	bf00      	nop

080124f0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b082      	sub	sp, #8
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d106      	bne.n	801250c <tcp_output_segment_busy+0x1c>
 80124fe:	4b09      	ldr	r3, [pc, #36]	; (8012524 <tcp_output_segment_busy+0x34>)
 8012500:	f240 529a 	movw	r2, #1434	; 0x59a
 8012504:	4908      	ldr	r1, [pc, #32]	; (8012528 <tcp_output_segment_busy+0x38>)
 8012506:	4809      	ldr	r0, [pc, #36]	; (801252c <tcp_output_segment_busy+0x3c>)
 8012508:	f004 fdb8 	bl	801707c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	7b9b      	ldrb	r3, [r3, #14]
 8012512:	2b01      	cmp	r3, #1
 8012514:	d001      	beq.n	801251a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012516:	2301      	movs	r3, #1
 8012518:	e000      	b.n	801251c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801251a:	2300      	movs	r3, #0
}
 801251c:	4618      	mov	r0, r3
 801251e:	3708      	adds	r7, #8
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}
 8012524:	08019640 	.word	0x08019640
 8012528:	08019bdc 	.word	0x08019bdc
 801252c:	08019694 	.word	0x08019694

08012530 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012530:	b5b0      	push	{r4, r5, r7, lr}
 8012532:	b08c      	sub	sp, #48	; 0x30
 8012534:	af04      	add	r7, sp, #16
 8012536:	60f8      	str	r0, [r7, #12]
 8012538:	60b9      	str	r1, [r7, #8]
 801253a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d106      	bne.n	8012550 <tcp_output_segment+0x20>
 8012542:	4b63      	ldr	r3, [pc, #396]	; (80126d0 <tcp_output_segment+0x1a0>)
 8012544:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012548:	4962      	ldr	r1, [pc, #392]	; (80126d4 <tcp_output_segment+0x1a4>)
 801254a:	4863      	ldr	r0, [pc, #396]	; (80126d8 <tcp_output_segment+0x1a8>)
 801254c:	f004 fd96 	bl	801707c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d106      	bne.n	8012564 <tcp_output_segment+0x34>
 8012556:	4b5e      	ldr	r3, [pc, #376]	; (80126d0 <tcp_output_segment+0x1a0>)
 8012558:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801255c:	495f      	ldr	r1, [pc, #380]	; (80126dc <tcp_output_segment+0x1ac>)
 801255e:	485e      	ldr	r0, [pc, #376]	; (80126d8 <tcp_output_segment+0x1a8>)
 8012560:	f004 fd8c 	bl	801707c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d106      	bne.n	8012578 <tcp_output_segment+0x48>
 801256a:	4b59      	ldr	r3, [pc, #356]	; (80126d0 <tcp_output_segment+0x1a0>)
 801256c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012570:	495b      	ldr	r1, [pc, #364]	; (80126e0 <tcp_output_segment+0x1b0>)
 8012572:	4859      	ldr	r0, [pc, #356]	; (80126d8 <tcp_output_segment+0x1a8>)
 8012574:	f004 fd82 	bl	801707c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012578:	68f8      	ldr	r0, [r7, #12]
 801257a:	f7ff ffb9 	bl	80124f0 <tcp_output_segment_busy>
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d001      	beq.n	8012588 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012584:	2300      	movs	r3, #0
 8012586:	e09f      	b.n	80126c8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	68dc      	ldr	r4, [r3, #12]
 8012590:	4610      	mov	r0, r2
 8012592:	f7f9 fd5a 	bl	800c04a <lwip_htonl>
 8012596:	4603      	mov	r3, r0
 8012598:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	68dc      	ldr	r4, [r3, #12]
 80125a2:	4610      	mov	r0, r2
 80125a4:	f7f9 fd3c 	bl	800c020 <lwip_htons>
 80125a8:	4603      	mov	r3, r0
 80125aa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125b0:	68ba      	ldr	r2, [r7, #8]
 80125b2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80125b4:	441a      	add	r2, r3
 80125b6:	68bb      	ldr	r3, [r7, #8]
 80125b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	68db      	ldr	r3, [r3, #12]
 80125be:	3314      	adds	r3, #20
 80125c0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	7a9b      	ldrb	r3, [r3, #10]
 80125c6:	f003 0301 	and.w	r3, r3, #1
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d015      	beq.n	80125fa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	3304      	adds	r3, #4
 80125d2:	461a      	mov	r2, r3
 80125d4:	6879      	ldr	r1, [r7, #4]
 80125d6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80125da:	f7fc fe8b 	bl	800f2f4 <tcp_eff_send_mss_netif>
 80125de:	4603      	mov	r3, r0
 80125e0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80125e2:	8b7b      	ldrh	r3, [r7, #26]
 80125e4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7f9 fd2e 	bl	800c04a <lwip_htonl>
 80125ee:	4602      	mov	r2, r0
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80125f4:	69fb      	ldr	r3, [r7, #28]
 80125f6:	3304      	adds	r3, #4
 80125f8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012600:	2b00      	cmp	r3, #0
 8012602:	da02      	bge.n	801260a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012604:	68bb      	ldr	r3, [r7, #8]
 8012606:	2200      	movs	r2, #0
 8012608:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801260e:	2b00      	cmp	r3, #0
 8012610:	d10c      	bne.n	801262c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012612:	4b34      	ldr	r3, [pc, #208]	; (80126e4 <tcp_output_segment+0x1b4>)
 8012614:	681a      	ldr	r2, [r3, #0]
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	685b      	ldr	r3, [r3, #4]
 8012620:	4618      	mov	r0, r3
 8012622:	f7f9 fd12 	bl	800c04a <lwip_htonl>
 8012626:	4602      	mov	r2, r0
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	68da      	ldr	r2, [r3, #12]
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	1ad3      	subs	r3, r2, r3
 8012638:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	8959      	ldrh	r1, [r3, #10]
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	685b      	ldr	r3, [r3, #4]
 8012644:	8b3a      	ldrh	r2, [r7, #24]
 8012646:	1a8a      	subs	r2, r1, r2
 8012648:	b292      	uxth	r2, r2
 801264a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	685b      	ldr	r3, [r3, #4]
 8012650:	8919      	ldrh	r1, [r3, #8]
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	8b3a      	ldrh	r2, [r7, #24]
 8012658:	1a8a      	subs	r2, r1, r2
 801265a:	b292      	uxth	r2, r2
 801265c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	68fa      	ldr	r2, [r7, #12]
 8012664:	68d2      	ldr	r2, [r2, #12]
 8012666:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	2200      	movs	r2, #0
 801266e:	741a      	strb	r2, [r3, #16]
 8012670:	2200      	movs	r2, #0
 8012672:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	68db      	ldr	r3, [r3, #12]
 8012678:	f103 0214 	add.w	r2, r3, #20
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	7a9b      	ldrb	r3, [r3, #10]
 8012680:	009b      	lsls	r3, r3, #2
 8012682:	f003 0304 	and.w	r3, r3, #4
 8012686:	4413      	add	r3, r2
 8012688:	69fa      	ldr	r2, [r7, #28]
 801268a:	429a      	cmp	r2, r3
 801268c:	d006      	beq.n	801269c <tcp_output_segment+0x16c>
 801268e:	4b10      	ldr	r3, [pc, #64]	; (80126d0 <tcp_output_segment+0x1a0>)
 8012690:	f240 621c 	movw	r2, #1564	; 0x61c
 8012694:	4914      	ldr	r1, [pc, #80]	; (80126e8 <tcp_output_segment+0x1b8>)
 8012696:	4810      	ldr	r0, [pc, #64]	; (80126d8 <tcp_output_segment+0x1a8>)
 8012698:	f004 fcf0 	bl	801707c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	6858      	ldr	r0, [r3, #4]
 80126a0:	68b9      	ldr	r1, [r7, #8]
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	1d1c      	adds	r4, r3, #4
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	7add      	ldrb	r5, [r3, #11]
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	7a9b      	ldrb	r3, [r3, #10]
 80126ae:	687a      	ldr	r2, [r7, #4]
 80126b0:	9202      	str	r2, [sp, #8]
 80126b2:	2206      	movs	r2, #6
 80126b4:	9201      	str	r2, [sp, #4]
 80126b6:	9300      	str	r3, [sp, #0]
 80126b8:	462b      	mov	r3, r5
 80126ba:	4622      	mov	r2, r4
 80126bc:	f002 fdf0 	bl	80152a0 <ip4_output_if>
 80126c0:	4603      	mov	r3, r0
 80126c2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80126c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3720      	adds	r7, #32
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bdb0      	pop	{r4, r5, r7, pc}
 80126d0:	08019640 	.word	0x08019640
 80126d4:	08019c04 	.word	0x08019c04
 80126d8:	08019694 	.word	0x08019694
 80126dc:	08019c24 	.word	0x08019c24
 80126e0:	08019c44 	.word	0x08019c44
 80126e4:	20008fc8 	.word	0x20008fc8
 80126e8:	08019c68 	.word	0x08019c68

080126ec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80126ec:	b5b0      	push	{r4, r5, r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d106      	bne.n	8012708 <tcp_rexmit_rto_prepare+0x1c>
 80126fa:	4b31      	ldr	r3, [pc, #196]	; (80127c0 <tcp_rexmit_rto_prepare+0xd4>)
 80126fc:	f240 6263 	movw	r2, #1635	; 0x663
 8012700:	4930      	ldr	r1, [pc, #192]	; (80127c4 <tcp_rexmit_rto_prepare+0xd8>)
 8012702:	4831      	ldr	r0, [pc, #196]	; (80127c8 <tcp_rexmit_rto_prepare+0xdc>)
 8012704:	f004 fcba 	bl	801707c <iprintf>

  if (pcb->unacked == NULL) {
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801270c:	2b00      	cmp	r3, #0
 801270e:	d102      	bne.n	8012716 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012710:	f06f 0305 	mvn.w	r3, #5
 8012714:	e050      	b.n	80127b8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801271a:	60fb      	str	r3, [r7, #12]
 801271c:	e00b      	b.n	8012736 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801271e:	68f8      	ldr	r0, [r7, #12]
 8012720:	f7ff fee6 	bl	80124f0 <tcp_output_segment_busy>
 8012724:	4603      	mov	r3, r0
 8012726:	2b00      	cmp	r3, #0
 8012728:	d002      	beq.n	8012730 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801272a:	f06f 0305 	mvn.w	r3, #5
 801272e:	e043      	b.n	80127b8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	60fb      	str	r3, [r7, #12]
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d1ef      	bne.n	801271e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801273e:	68f8      	ldr	r0, [r7, #12]
 8012740:	f7ff fed6 	bl	80124f0 <tcp_output_segment_busy>
 8012744:	4603      	mov	r3, r0
 8012746:	2b00      	cmp	r3, #0
 8012748:	d002      	beq.n	8012750 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801274a:	f06f 0305 	mvn.w	r3, #5
 801274e:	e033      	b.n	80127b8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	2200      	movs	r2, #0
 8012764:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	8b5b      	ldrh	r3, [r3, #26]
 801276a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801276e:	b29a      	uxth	r2, r3
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	68db      	ldr	r3, [r3, #12]
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	4618      	mov	r0, r3
 801277c:	f7f9 fc65 	bl	800c04a <lwip_htonl>
 8012780:	4604      	mov	r4, r0
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	891b      	ldrh	r3, [r3, #8]
 8012786:	461d      	mov	r5, r3
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	68db      	ldr	r3, [r3, #12]
 801278c:	899b      	ldrh	r3, [r3, #12]
 801278e:	b29b      	uxth	r3, r3
 8012790:	4618      	mov	r0, r3
 8012792:	f7f9 fc45 	bl	800c020 <lwip_htons>
 8012796:	4603      	mov	r3, r0
 8012798:	b2db      	uxtb	r3, r3
 801279a:	f003 0303 	and.w	r3, r3, #3
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d001      	beq.n	80127a6 <tcp_rexmit_rto_prepare+0xba>
 80127a2:	2301      	movs	r3, #1
 80127a4:	e000      	b.n	80127a8 <tcp_rexmit_rto_prepare+0xbc>
 80127a6:	2300      	movs	r3, #0
 80127a8:	442b      	add	r3, r5
 80127aa:	18e2      	adds	r2, r4, r3
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2200      	movs	r2, #0
 80127b4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80127b6:	2300      	movs	r3, #0
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	3710      	adds	r7, #16
 80127bc:	46bd      	mov	sp, r7
 80127be:	bdb0      	pop	{r4, r5, r7, pc}
 80127c0:	08019640 	.word	0x08019640
 80127c4:	08019c7c 	.word	0x08019c7c
 80127c8:	08019694 	.word	0x08019694

080127cc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d106      	bne.n	80127e8 <tcp_rexmit_rto_commit+0x1c>
 80127da:	4b0d      	ldr	r3, [pc, #52]	; (8012810 <tcp_rexmit_rto_commit+0x44>)
 80127dc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80127e0:	490c      	ldr	r1, [pc, #48]	; (8012814 <tcp_rexmit_rto_commit+0x48>)
 80127e2:	480d      	ldr	r0, [pc, #52]	; (8012818 <tcp_rexmit_rto_commit+0x4c>)
 80127e4:	f004 fc4a 	bl	801707c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127ee:	2bff      	cmp	r3, #255	; 0xff
 80127f0:	d007      	beq.n	8012802 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127f8:	3301      	adds	r3, #1
 80127fa:	b2da      	uxtb	r2, r3
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f7ff fc80 	bl	8012108 <tcp_output>
}
 8012808:	bf00      	nop
 801280a:	3708      	adds	r7, #8
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}
 8012810:	08019640 	.word	0x08019640
 8012814:	08019ca0 	.word	0x08019ca0
 8012818:	08019694 	.word	0x08019694

0801281c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b082      	sub	sp, #8
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d106      	bne.n	8012838 <tcp_rexmit_rto+0x1c>
 801282a:	4b0a      	ldr	r3, [pc, #40]	; (8012854 <tcp_rexmit_rto+0x38>)
 801282c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012830:	4909      	ldr	r1, [pc, #36]	; (8012858 <tcp_rexmit_rto+0x3c>)
 8012832:	480a      	ldr	r0, [pc, #40]	; (801285c <tcp_rexmit_rto+0x40>)
 8012834:	f004 fc22 	bl	801707c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012838:	6878      	ldr	r0, [r7, #4]
 801283a:	f7ff ff57 	bl	80126ec <tcp_rexmit_rto_prepare>
 801283e:	4603      	mov	r3, r0
 8012840:	2b00      	cmp	r3, #0
 8012842:	d102      	bne.n	801284a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f7ff ffc1 	bl	80127cc <tcp_rexmit_rto_commit>
  }
}
 801284a:	bf00      	nop
 801284c:	3708      	adds	r7, #8
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}
 8012852:	bf00      	nop
 8012854:	08019640 	.word	0x08019640
 8012858:	08019cc4 	.word	0x08019cc4
 801285c:	08019694 	.word	0x08019694

08012860 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012860:	b590      	push	{r4, r7, lr}
 8012862:	b085      	sub	sp, #20
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d106      	bne.n	801287c <tcp_rexmit+0x1c>
 801286e:	4b2f      	ldr	r3, [pc, #188]	; (801292c <tcp_rexmit+0xcc>)
 8012870:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012874:	492e      	ldr	r1, [pc, #184]	; (8012930 <tcp_rexmit+0xd0>)
 8012876:	482f      	ldr	r0, [pc, #188]	; (8012934 <tcp_rexmit+0xd4>)
 8012878:	f004 fc00 	bl	801707c <iprintf>

  if (pcb->unacked == NULL) {
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012880:	2b00      	cmp	r3, #0
 8012882:	d102      	bne.n	801288a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012884:	f06f 0305 	mvn.w	r3, #5
 8012888:	e04c      	b.n	8012924 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801288e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012890:	68b8      	ldr	r0, [r7, #8]
 8012892:	f7ff fe2d 	bl	80124f0 <tcp_output_segment_busy>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d002      	beq.n	80128a2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801289c:	f06f 0305 	mvn.w	r3, #5
 80128a0:	e040      	b.n	8012924 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	681a      	ldr	r2, [r3, #0]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	336c      	adds	r3, #108	; 0x6c
 80128ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80128b0:	e002      	b.n	80128b8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d011      	beq.n	80128e4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	68db      	ldr	r3, [r3, #12]
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	4618      	mov	r0, r3
 80128ca:	f7f9 fbbe 	bl	800c04a <lwip_htonl>
 80128ce:	4604      	mov	r4, r0
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	68db      	ldr	r3, [r3, #12]
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7f9 fbb7 	bl	800c04a <lwip_htonl>
 80128dc:	4603      	mov	r3, r0
 80128de:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	dbe6      	blt.n	80128b2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	681a      	ldr	r2, [r3, #0]
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	68ba      	ldr	r2, [r7, #8]
 80128f0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d103      	bne.n	8012902 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2200      	movs	r2, #0
 80128fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012908:	2bff      	cmp	r3, #255	; 0xff
 801290a:	d007      	beq.n	801291c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012912:	3301      	adds	r3, #1
 8012914:	b2da      	uxtb	r2, r3
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2200      	movs	r2, #0
 8012920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012922:	2300      	movs	r3, #0
}
 8012924:	4618      	mov	r0, r3
 8012926:	3714      	adds	r7, #20
 8012928:	46bd      	mov	sp, r7
 801292a:	bd90      	pop	{r4, r7, pc}
 801292c:	08019640 	.word	0x08019640
 8012930:	08019ce0 	.word	0x08019ce0
 8012934:	08019694 	.word	0x08019694

08012938 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d106      	bne.n	8012954 <tcp_rexmit_fast+0x1c>
 8012946:	4b2a      	ldr	r3, [pc, #168]	; (80129f0 <tcp_rexmit_fast+0xb8>)
 8012948:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801294c:	4929      	ldr	r1, [pc, #164]	; (80129f4 <tcp_rexmit_fast+0xbc>)
 801294e:	482a      	ldr	r0, [pc, #168]	; (80129f8 <tcp_rexmit_fast+0xc0>)
 8012950:	f004 fb94 	bl	801707c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012958:	2b00      	cmp	r3, #0
 801295a:	d045      	beq.n	80129e8 <tcp_rexmit_fast+0xb0>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	8b5b      	ldrh	r3, [r3, #26]
 8012960:	f003 0304 	and.w	r3, r3, #4
 8012964:	2b00      	cmp	r3, #0
 8012966:	d13f      	bne.n	80129e8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f7ff ff79 	bl	8012860 <tcp_rexmit>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d139      	bne.n	80129e8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012980:	4293      	cmp	r3, r2
 8012982:	bf28      	it	cs
 8012984:	4613      	movcs	r3, r2
 8012986:	b29b      	uxth	r3, r3
 8012988:	2b00      	cmp	r3, #0
 801298a:	da00      	bge.n	801298e <tcp_rexmit_fast+0x56>
 801298c:	3301      	adds	r3, #1
 801298e:	105b      	asrs	r3, r3, #1
 8012990:	b29a      	uxth	r2, r3
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801299e:	461a      	mov	r2, r3
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129a4:	005b      	lsls	r3, r3, #1
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d206      	bcs.n	80129b8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129ae:	005b      	lsls	r3, r3, #1
 80129b0:	b29a      	uxth	r2, r3
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129c2:	4619      	mov	r1, r3
 80129c4:	0049      	lsls	r1, r1, #1
 80129c6:	440b      	add	r3, r1
 80129c8:	b29b      	uxth	r3, r3
 80129ca:	4413      	add	r3, r2
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	8b5b      	ldrh	r3, [r3, #26]
 80129d8:	f043 0304 	orr.w	r3, r3, #4
 80129dc:	b29a      	uxth	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	2200      	movs	r2, #0
 80129e6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80129e8:	bf00      	nop
 80129ea:	3708      	adds	r7, #8
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}
 80129f0:	08019640 	.word	0x08019640
 80129f4:	08019cf8 	.word	0x08019cf8
 80129f8:	08019694 	.word	0x08019694

080129fc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b086      	sub	sp, #24
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	60f8      	str	r0, [r7, #12]
 8012a04:	607b      	str	r3, [r7, #4]
 8012a06:	460b      	mov	r3, r1
 8012a08:	817b      	strh	r3, [r7, #10]
 8012a0a:	4613      	mov	r3, r2
 8012a0c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012a0e:	897a      	ldrh	r2, [r7, #10]
 8012a10:	893b      	ldrh	r3, [r7, #8]
 8012a12:	4413      	add	r3, r2
 8012a14:	b29b      	uxth	r3, r3
 8012a16:	3314      	adds	r3, #20
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a1e:	4619      	mov	r1, r3
 8012a20:	2022      	movs	r0, #34	; 0x22
 8012a22:	f7fa fb77 	bl	800d114 <pbuf_alloc>
 8012a26:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d04d      	beq.n	8012aca <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012a2e:	897b      	ldrh	r3, [r7, #10]
 8012a30:	3313      	adds	r3, #19
 8012a32:	697a      	ldr	r2, [r7, #20]
 8012a34:	8952      	ldrh	r2, [r2, #10]
 8012a36:	4293      	cmp	r3, r2
 8012a38:	db06      	blt.n	8012a48 <tcp_output_alloc_header_common+0x4c>
 8012a3a:	4b26      	ldr	r3, [pc, #152]	; (8012ad4 <tcp_output_alloc_header_common+0xd8>)
 8012a3c:	f240 7223 	movw	r2, #1827	; 0x723
 8012a40:	4925      	ldr	r1, [pc, #148]	; (8012ad8 <tcp_output_alloc_header_common+0xdc>)
 8012a42:	4826      	ldr	r0, [pc, #152]	; (8012adc <tcp_output_alloc_header_common+0xe0>)
 8012a44:	f004 fb1a 	bl	801707c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	685b      	ldr	r3, [r3, #4]
 8012a4c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012a4e:	8c3b      	ldrh	r3, [r7, #32]
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7f9 fae5 	bl	800c020 <lwip_htons>
 8012a56:	4603      	mov	r3, r0
 8012a58:	461a      	mov	r2, r3
 8012a5a:	693b      	ldr	r3, [r7, #16]
 8012a5c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7f9 fadd 	bl	800c020 <lwip_htons>
 8012a66:	4603      	mov	r3, r0
 8012a68:	461a      	mov	r2, r3
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012a6e:	693b      	ldr	r3, [r7, #16]
 8012a70:	687a      	ldr	r2, [r7, #4]
 8012a72:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012a74:	68f8      	ldr	r0, [r7, #12]
 8012a76:	f7f9 fae8 	bl	800c04a <lwip_htonl>
 8012a7a:	4602      	mov	r2, r0
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012a80:	897b      	ldrh	r3, [r7, #10]
 8012a82:	089b      	lsrs	r3, r3, #2
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	3305      	adds	r3, #5
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	031b      	lsls	r3, r3, #12
 8012a8c:	b29a      	uxth	r2, r3
 8012a8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	4313      	orrs	r3, r2
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7f9 fac1 	bl	800c020 <lwip_htons>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	693b      	ldr	r3, [r7, #16]
 8012aa4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012aa6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f7f9 fab9 	bl	800c020 <lwip_htons>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012ab6:	693b      	ldr	r3, [r7, #16]
 8012ab8:	2200      	movs	r2, #0
 8012aba:	741a      	strb	r2, [r3, #16]
 8012abc:	2200      	movs	r2, #0
 8012abe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	749a      	strb	r2, [r3, #18]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012aca:	697b      	ldr	r3, [r7, #20]
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3718      	adds	r7, #24
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}
 8012ad4:	08019640 	.word	0x08019640
 8012ad8:	08019d18 	.word	0x08019d18
 8012adc:	08019694 	.word	0x08019694

08012ae0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012ae0:	b5b0      	push	{r4, r5, r7, lr}
 8012ae2:	b08a      	sub	sp, #40	; 0x28
 8012ae4:	af04      	add	r7, sp, #16
 8012ae6:	60f8      	str	r0, [r7, #12]
 8012ae8:	607b      	str	r3, [r7, #4]
 8012aea:	460b      	mov	r3, r1
 8012aec:	817b      	strh	r3, [r7, #10]
 8012aee:	4613      	mov	r3, r2
 8012af0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d106      	bne.n	8012b06 <tcp_output_alloc_header+0x26>
 8012af8:	4b15      	ldr	r3, [pc, #84]	; (8012b50 <tcp_output_alloc_header+0x70>)
 8012afa:	f240 7242 	movw	r2, #1858	; 0x742
 8012afe:	4915      	ldr	r1, [pc, #84]	; (8012b54 <tcp_output_alloc_header+0x74>)
 8012b00:	4815      	ldr	r0, [pc, #84]	; (8012b58 <tcp_output_alloc_header+0x78>)
 8012b02:	f004 fabb 	bl	801707c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	8adb      	ldrh	r3, [r3, #22]
 8012b0e:	68fa      	ldr	r2, [r7, #12]
 8012b10:	8b12      	ldrh	r2, [r2, #24]
 8012b12:	68f9      	ldr	r1, [r7, #12]
 8012b14:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012b16:	893d      	ldrh	r5, [r7, #8]
 8012b18:	897c      	ldrh	r4, [r7, #10]
 8012b1a:	9103      	str	r1, [sp, #12]
 8012b1c:	2110      	movs	r1, #16
 8012b1e:	9102      	str	r1, [sp, #8]
 8012b20:	9201      	str	r2, [sp, #4]
 8012b22:	9300      	str	r3, [sp, #0]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	462a      	mov	r2, r5
 8012b28:	4621      	mov	r1, r4
 8012b2a:	f7ff ff67 	bl	80129fc <tcp_output_alloc_header_common>
 8012b2e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d006      	beq.n	8012b44 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012b3e:	441a      	add	r2, r3
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012b44:	697b      	ldr	r3, [r7, #20]
}
 8012b46:	4618      	mov	r0, r3
 8012b48:	3718      	adds	r7, #24
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8012b4e:	bf00      	nop
 8012b50:	08019640 	.word	0x08019640
 8012b54:	08019d48 	.word	0x08019d48
 8012b58:	08019694 	.word	0x08019694

08012b5c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b088      	sub	sp, #32
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	60f8      	str	r0, [r7, #12]
 8012b64:	60b9      	str	r1, [r7, #8]
 8012b66:	4611      	mov	r1, r2
 8012b68:	461a      	mov	r2, r3
 8012b6a:	460b      	mov	r3, r1
 8012b6c:	71fb      	strb	r3, [r7, #7]
 8012b6e:	4613      	mov	r3, r2
 8012b70:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012b72:	2300      	movs	r3, #0
 8012b74:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d106      	bne.n	8012b8a <tcp_output_fill_options+0x2e>
 8012b7c:	4b13      	ldr	r3, [pc, #76]	; (8012bcc <tcp_output_fill_options+0x70>)
 8012b7e:	f240 7256 	movw	r2, #1878	; 0x756
 8012b82:	4913      	ldr	r1, [pc, #76]	; (8012bd0 <tcp_output_fill_options+0x74>)
 8012b84:	4813      	ldr	r0, [pc, #76]	; (8012bd4 <tcp_output_fill_options+0x78>)
 8012b86:	f004 fa79 	bl	801707c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	3314      	adds	r3, #20
 8012b94:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012b96:	69bb      	ldr	r3, [r7, #24]
 8012b98:	f103 0214 	add.w	r2, r3, #20
 8012b9c:	8bfb      	ldrh	r3, [r7, #30]
 8012b9e:	009b      	lsls	r3, r3, #2
 8012ba0:	4619      	mov	r1, r3
 8012ba2:	79fb      	ldrb	r3, [r7, #7]
 8012ba4:	009b      	lsls	r3, r3, #2
 8012ba6:	f003 0304 	and.w	r3, r3, #4
 8012baa:	440b      	add	r3, r1
 8012bac:	4413      	add	r3, r2
 8012bae:	697a      	ldr	r2, [r7, #20]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d006      	beq.n	8012bc2 <tcp_output_fill_options+0x66>
 8012bb4:	4b05      	ldr	r3, [pc, #20]	; (8012bcc <tcp_output_fill_options+0x70>)
 8012bb6:	f240 7275 	movw	r2, #1909	; 0x775
 8012bba:	4907      	ldr	r1, [pc, #28]	; (8012bd8 <tcp_output_fill_options+0x7c>)
 8012bbc:	4805      	ldr	r0, [pc, #20]	; (8012bd4 <tcp_output_fill_options+0x78>)
 8012bbe:	f004 fa5d 	bl	801707c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012bc2:	bf00      	nop
 8012bc4:	3720      	adds	r7, #32
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	bd80      	pop	{r7, pc}
 8012bca:	bf00      	nop
 8012bcc:	08019640 	.word	0x08019640
 8012bd0:	08019d70 	.word	0x08019d70
 8012bd4:	08019694 	.word	0x08019694
 8012bd8:	08019c68 	.word	0x08019c68

08012bdc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b08a      	sub	sp, #40	; 0x28
 8012be0:	af04      	add	r7, sp, #16
 8012be2:	60f8      	str	r0, [r7, #12]
 8012be4:	60b9      	str	r1, [r7, #8]
 8012be6:	607a      	str	r2, [r7, #4]
 8012be8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d106      	bne.n	8012bfe <tcp_output_control_segment+0x22>
 8012bf0:	4b1c      	ldr	r3, [pc, #112]	; (8012c64 <tcp_output_control_segment+0x88>)
 8012bf2:	f240 7287 	movw	r2, #1927	; 0x787
 8012bf6:	491c      	ldr	r1, [pc, #112]	; (8012c68 <tcp_output_control_segment+0x8c>)
 8012bf8:	481c      	ldr	r0, [pc, #112]	; (8012c6c <tcp_output_control_segment+0x90>)
 8012bfa:	f004 fa3f 	bl	801707c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012bfe:	683a      	ldr	r2, [r7, #0]
 8012c00:	6879      	ldr	r1, [r7, #4]
 8012c02:	68f8      	ldr	r0, [r7, #12]
 8012c04:	f7fe ff40 	bl	8011a88 <tcp_route>
 8012c08:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d102      	bne.n	8012c16 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012c10:	23fc      	movs	r3, #252	; 0xfc
 8012c12:	75fb      	strb	r3, [r7, #23]
 8012c14:	e01c      	b.n	8012c50 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d006      	beq.n	8012c2a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	7adb      	ldrb	r3, [r3, #11]
 8012c20:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	7a9b      	ldrb	r3, [r3, #10]
 8012c26:	757b      	strb	r3, [r7, #21]
 8012c28:	e003      	b.n	8012c32 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012c2a:	23ff      	movs	r3, #255	; 0xff
 8012c2c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012c2e:	2300      	movs	r3, #0
 8012c30:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012c32:	7dba      	ldrb	r2, [r7, #22]
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	9302      	str	r3, [sp, #8]
 8012c38:	2306      	movs	r3, #6
 8012c3a:	9301      	str	r3, [sp, #4]
 8012c3c:	7d7b      	ldrb	r3, [r7, #21]
 8012c3e:	9300      	str	r3, [sp, #0]
 8012c40:	4613      	mov	r3, r2
 8012c42:	683a      	ldr	r2, [r7, #0]
 8012c44:	6879      	ldr	r1, [r7, #4]
 8012c46:	68b8      	ldr	r0, [r7, #8]
 8012c48:	f002 fb2a 	bl	80152a0 <ip4_output_if>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012c50:	68b8      	ldr	r0, [r7, #8]
 8012c52:	f7fa fd43 	bl	800d6dc <pbuf_free>
  return err;
 8012c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3718      	adds	r7, #24
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	08019640 	.word	0x08019640
 8012c68:	08019d98 	.word	0x08019d98
 8012c6c:	08019694 	.word	0x08019694

08012c70 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012c70:	b590      	push	{r4, r7, lr}
 8012c72:	b08b      	sub	sp, #44	; 0x2c
 8012c74:	af04      	add	r7, sp, #16
 8012c76:	60f8      	str	r0, [r7, #12]
 8012c78:	60b9      	str	r1, [r7, #8]
 8012c7a:	607a      	str	r2, [r7, #4]
 8012c7c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d106      	bne.n	8012c92 <tcp_rst+0x22>
 8012c84:	4b1f      	ldr	r3, [pc, #124]	; (8012d04 <tcp_rst+0x94>)
 8012c86:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012c8a:	491f      	ldr	r1, [pc, #124]	; (8012d08 <tcp_rst+0x98>)
 8012c8c:	481f      	ldr	r0, [pc, #124]	; (8012d0c <tcp_rst+0x9c>)
 8012c8e:	f004 f9f5 	bl	801707c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d106      	bne.n	8012ca6 <tcp_rst+0x36>
 8012c98:	4b1a      	ldr	r3, [pc, #104]	; (8012d04 <tcp_rst+0x94>)
 8012c9a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012c9e:	491c      	ldr	r1, [pc, #112]	; (8012d10 <tcp_rst+0xa0>)
 8012ca0:	481a      	ldr	r0, [pc, #104]	; (8012d0c <tcp_rst+0x9c>)
 8012ca2:	f004 f9eb 	bl	801707c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012caa:	f246 0308 	movw	r3, #24584	; 0x6008
 8012cae:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012cb0:	7dfb      	ldrb	r3, [r7, #23]
 8012cb2:	b29c      	uxth	r4, r3
 8012cb4:	68b8      	ldr	r0, [r7, #8]
 8012cb6:	f7f9 f9c8 	bl	800c04a <lwip_htonl>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	8abb      	ldrh	r3, [r7, #20]
 8012cbe:	9303      	str	r3, [sp, #12]
 8012cc0:	2314      	movs	r3, #20
 8012cc2:	9302      	str	r3, [sp, #8]
 8012cc4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012cc6:	9301      	str	r3, [sp, #4]
 8012cc8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012cca:	9300      	str	r3, [sp, #0]
 8012ccc:	4613      	mov	r3, r2
 8012cce:	2200      	movs	r2, #0
 8012cd0:	4621      	mov	r1, r4
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f7ff fe92 	bl	80129fc <tcp_output_alloc_header_common>
 8012cd8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012cda:	693b      	ldr	r3, [r7, #16]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d00c      	beq.n	8012cfa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ce0:	7dfb      	ldrb	r3, [r7, #23]
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	6939      	ldr	r1, [r7, #16]
 8012ce6:	68f8      	ldr	r0, [r7, #12]
 8012ce8:	f7ff ff38 	bl	8012b5c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cee:	683a      	ldr	r2, [r7, #0]
 8012cf0:	6939      	ldr	r1, [r7, #16]
 8012cf2:	68f8      	ldr	r0, [r7, #12]
 8012cf4:	f7ff ff72 	bl	8012bdc <tcp_output_control_segment>
 8012cf8:	e000      	b.n	8012cfc <tcp_rst+0x8c>
    return;
 8012cfa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012cfc:	371c      	adds	r7, #28
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd90      	pop	{r4, r7, pc}
 8012d02:	bf00      	nop
 8012d04:	08019640 	.word	0x08019640
 8012d08:	08019dc4 	.word	0x08019dc4
 8012d0c:	08019694 	.word	0x08019694
 8012d10:	08019de0 	.word	0x08019de0

08012d14 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012d14:	b590      	push	{r4, r7, lr}
 8012d16:	b087      	sub	sp, #28
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012d20:	2300      	movs	r3, #0
 8012d22:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d106      	bne.n	8012d38 <tcp_send_empty_ack+0x24>
 8012d2a:	4b28      	ldr	r3, [pc, #160]	; (8012dcc <tcp_send_empty_ack+0xb8>)
 8012d2c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012d30:	4927      	ldr	r1, [pc, #156]	; (8012dd0 <tcp_send_empty_ack+0xbc>)
 8012d32:	4828      	ldr	r0, [pc, #160]	; (8012dd4 <tcp_send_empty_ack+0xc0>)
 8012d34:	f004 f9a2 	bl	801707c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012d38:	7dfb      	ldrb	r3, [r7, #23]
 8012d3a:	009b      	lsls	r3, r3, #2
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	f003 0304 	and.w	r3, r3, #4
 8012d42:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012d44:	7d7b      	ldrb	r3, [r7, #21]
 8012d46:	b29c      	uxth	r4, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7f9 f97c 	bl	800c04a <lwip_htonl>
 8012d52:	4603      	mov	r3, r0
 8012d54:	2200      	movs	r2, #0
 8012d56:	4621      	mov	r1, r4
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f7ff fec1 	bl	8012ae0 <tcp_output_alloc_header>
 8012d5e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d109      	bne.n	8012d7a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	8b5b      	ldrh	r3, [r3, #26]
 8012d6a:	f043 0303 	orr.w	r3, r3, #3
 8012d6e:	b29a      	uxth	r2, r3
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012d74:	f06f 0301 	mvn.w	r3, #1
 8012d78:	e023      	b.n	8012dc2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012d7a:	7dbb      	ldrb	r3, [r7, #22]
 8012d7c:	7dfa      	ldrb	r2, [r7, #23]
 8012d7e:	6939      	ldr	r1, [r7, #16]
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7ff feeb 	bl	8012b5c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d86:	687a      	ldr	r2, [r7, #4]
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	3304      	adds	r3, #4
 8012d8c:	6939      	ldr	r1, [r7, #16]
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f7ff ff24 	bl	8012bdc <tcp_output_control_segment>
 8012d94:	4603      	mov	r3, r0
 8012d96:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d007      	beq.n	8012db0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	8b5b      	ldrh	r3, [r3, #26]
 8012da4:	f043 0303 	orr.w	r3, r3, #3
 8012da8:	b29a      	uxth	r2, r3
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	835a      	strh	r2, [r3, #26]
 8012dae:	e006      	b.n	8012dbe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	8b5b      	ldrh	r3, [r3, #26]
 8012db4:	f023 0303 	bic.w	r3, r3, #3
 8012db8:	b29a      	uxth	r2, r3
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	371c      	adds	r7, #28
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd90      	pop	{r4, r7, pc}
 8012dca:	bf00      	nop
 8012dcc:	08019640 	.word	0x08019640
 8012dd0:	08019dfc 	.word	0x08019dfc
 8012dd4:	08019694 	.word	0x08019694

08012dd8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012dd8:	b590      	push	{r4, r7, lr}
 8012dda:	b087      	sub	sp, #28
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012de0:	2300      	movs	r3, #0
 8012de2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d106      	bne.n	8012df8 <tcp_keepalive+0x20>
 8012dea:	4b18      	ldr	r3, [pc, #96]	; (8012e4c <tcp_keepalive+0x74>)
 8012dec:	f640 0224 	movw	r2, #2084	; 0x824
 8012df0:	4917      	ldr	r1, [pc, #92]	; (8012e50 <tcp_keepalive+0x78>)
 8012df2:	4818      	ldr	r0, [pc, #96]	; (8012e54 <tcp_keepalive+0x7c>)
 8012df4:	f004 f942 	bl	801707c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012df8:	7dfb      	ldrb	r3, [r7, #23]
 8012dfa:	b29c      	uxth	r4, r3
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e00:	3b01      	subs	r3, #1
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7f9 f921 	bl	800c04a <lwip_htonl>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	4621      	mov	r1, r4
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f7ff fe66 	bl	8012ae0 <tcp_output_alloc_header>
 8012e14:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d102      	bne.n	8012e22 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8012e20:	e010      	b.n	8012e44 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012e22:	7dfb      	ldrb	r3, [r7, #23]
 8012e24:	2200      	movs	r2, #0
 8012e26:	6939      	ldr	r1, [r7, #16]
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f7ff fe97 	bl	8012b5c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012e2e:	687a      	ldr	r2, [r7, #4]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	3304      	adds	r3, #4
 8012e34:	6939      	ldr	r1, [r7, #16]
 8012e36:	6878      	ldr	r0, [r7, #4]
 8012e38:	f7ff fed0 	bl	8012bdc <tcp_output_control_segment>
 8012e3c:	4603      	mov	r3, r0
 8012e3e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	371c      	adds	r7, #28
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd90      	pop	{r4, r7, pc}
 8012e4c:	08019640 	.word	0x08019640
 8012e50:	08019e1c 	.word	0x08019e1c
 8012e54:	08019694 	.word	0x08019694

08012e58 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012e58:	b590      	push	{r4, r7, lr}
 8012e5a:	b08b      	sub	sp, #44	; 0x2c
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012e60:	2300      	movs	r3, #0
 8012e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d106      	bne.n	8012e7a <tcp_zero_window_probe+0x22>
 8012e6c:	4b4c      	ldr	r3, [pc, #304]	; (8012fa0 <tcp_zero_window_probe+0x148>)
 8012e6e:	f640 024f 	movw	r2, #2127	; 0x84f
 8012e72:	494c      	ldr	r1, [pc, #304]	; (8012fa4 <tcp_zero_window_probe+0x14c>)
 8012e74:	484c      	ldr	r0, [pc, #304]	; (8012fa8 <tcp_zero_window_probe+0x150>)
 8012e76:	f004 f901 	bl	801707c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e7e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012e80:	6a3b      	ldr	r3, [r7, #32]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d101      	bne.n	8012e8a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012e86:	2300      	movs	r3, #0
 8012e88:	e086      	b.n	8012f98 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012e90:	2bff      	cmp	r3, #255	; 0xff
 8012e92:	d007      	beq.n	8012ea4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012e9a:	3301      	adds	r3, #1
 8012e9c:	b2da      	uxtb	r2, r3
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012ea4:	6a3b      	ldr	r3, [r7, #32]
 8012ea6:	68db      	ldr	r3, [r3, #12]
 8012ea8:	899b      	ldrh	r3, [r3, #12]
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7f9 f8b7 	bl	800c020 <lwip_htons>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	b2db      	uxtb	r3, r3
 8012eb6:	f003 0301 	and.w	r3, r3, #1
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d005      	beq.n	8012eca <tcp_zero_window_probe+0x72>
 8012ebe:	6a3b      	ldr	r3, [r7, #32]
 8012ec0:	891b      	ldrh	r3, [r3, #8]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d101      	bne.n	8012eca <tcp_zero_window_probe+0x72>
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	e000      	b.n	8012ecc <tcp_zero_window_probe+0x74>
 8012eca:	2300      	movs	r3, #0
 8012ecc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012ece:	7ffb      	ldrb	r3, [r7, #31]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	bf0c      	ite	eq
 8012ed4:	2301      	moveq	r3, #1
 8012ed6:	2300      	movne	r3, #0
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ee0:	b299      	uxth	r1, r3
 8012ee2:	6a3b      	ldr	r3, [r7, #32]
 8012ee4:	68db      	ldr	r3, [r3, #12]
 8012ee6:	685b      	ldr	r3, [r3, #4]
 8012ee8:	8bba      	ldrh	r2, [r7, #28]
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f7ff fdf8 	bl	8012ae0 <tcp_output_alloc_header>
 8012ef0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d102      	bne.n	8012efe <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8012efc:	e04c      	b.n	8012f98 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012f04:	7ffb      	ldrb	r3, [r7, #31]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d011      	beq.n	8012f2e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	899b      	ldrh	r3, [r3, #12]
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	b21b      	sxth	r3, r3
 8012f12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012f16:	b21c      	sxth	r4, r3
 8012f18:	2011      	movs	r0, #17
 8012f1a:	f7f9 f881 	bl	800c020 <lwip_htons>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	b21b      	sxth	r3, r3
 8012f22:	4323      	orrs	r3, r4
 8012f24:	b21b      	sxth	r3, r3
 8012f26:	b29a      	uxth	r2, r3
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	819a      	strh	r2, [r3, #12]
 8012f2c:	e010      	b.n	8012f50 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012f2e:	69bb      	ldr	r3, [r7, #24]
 8012f30:	685b      	ldr	r3, [r3, #4]
 8012f32:	3314      	adds	r3, #20
 8012f34:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012f36:	6a3b      	ldr	r3, [r7, #32]
 8012f38:	6858      	ldr	r0, [r3, #4]
 8012f3a:	6a3b      	ldr	r3, [r7, #32]
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	891a      	ldrh	r2, [r3, #8]
 8012f40:	6a3b      	ldr	r3, [r7, #32]
 8012f42:	891b      	ldrh	r3, [r3, #8]
 8012f44:	1ad3      	subs	r3, r2, r3
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	2201      	movs	r2, #1
 8012f4a:	6939      	ldr	r1, [r7, #16]
 8012f4c:	f7fa fdc0 	bl	800dad0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012f50:	6a3b      	ldr	r3, [r7, #32]
 8012f52:	68db      	ldr	r3, [r3, #12]
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7f9 f877 	bl	800c04a <lwip_htonl>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	3301      	adds	r3, #1
 8012f60:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	1ad3      	subs	r3, r2, r3
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	da02      	bge.n	8012f74 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	68fa      	ldr	r2, [r7, #12]
 8012f72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f78:	2200      	movs	r2, #0
 8012f7a:	69b9      	ldr	r1, [r7, #24]
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f7ff fded 	bl	8012b5c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012f82:	687a      	ldr	r2, [r7, #4]
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	3304      	adds	r3, #4
 8012f88:	69b9      	ldr	r1, [r7, #24]
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f7ff fe26 	bl	8012bdc <tcp_output_control_segment>
 8012f90:	4603      	mov	r3, r0
 8012f92:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012f94:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	372c      	adds	r7, #44	; 0x2c
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd90      	pop	{r4, r7, pc}
 8012fa0:	08019640 	.word	0x08019640
 8012fa4:	08019e38 	.word	0x08019e38
 8012fa8:	08019694 	.word	0x08019694

08012fac <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b082      	sub	sp, #8
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012fb4:	f7fa ff0c 	bl	800ddd0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012fb8:	4b0a      	ldr	r3, [pc, #40]	; (8012fe4 <tcpip_tcp_timer+0x38>)
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d103      	bne.n	8012fc8 <tcpip_tcp_timer+0x1c>
 8012fc0:	4b09      	ldr	r3, [pc, #36]	; (8012fe8 <tcpip_tcp_timer+0x3c>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d005      	beq.n	8012fd4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012fc8:	2200      	movs	r2, #0
 8012fca:	4908      	ldr	r1, [pc, #32]	; (8012fec <tcpip_tcp_timer+0x40>)
 8012fcc:	20fa      	movs	r0, #250	; 0xfa
 8012fce:	f000 f8f3 	bl	80131b8 <sys_timeout>
 8012fd2:	e003      	b.n	8012fdc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012fd4:	4b06      	ldr	r3, [pc, #24]	; (8012ff0 <tcpip_tcp_timer+0x44>)
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	601a      	str	r2, [r3, #0]
  }
}
 8012fda:	bf00      	nop
 8012fdc:	bf00      	nop
 8012fde:	3708      	adds	r7, #8
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}
 8012fe4:	20008fd4 	.word	0x20008fd4
 8012fe8:	20008fd8 	.word	0x20008fd8
 8012fec:	08012fad 	.word	0x08012fad
 8012ff0:	20009020 	.word	0x20009020

08012ff4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012ff8:	4b0a      	ldr	r3, [pc, #40]	; (8013024 <tcp_timer_needed+0x30>)
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d10f      	bne.n	8013020 <tcp_timer_needed+0x2c>
 8013000:	4b09      	ldr	r3, [pc, #36]	; (8013028 <tcp_timer_needed+0x34>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d103      	bne.n	8013010 <tcp_timer_needed+0x1c>
 8013008:	4b08      	ldr	r3, [pc, #32]	; (801302c <tcp_timer_needed+0x38>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d007      	beq.n	8013020 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013010:	4b04      	ldr	r3, [pc, #16]	; (8013024 <tcp_timer_needed+0x30>)
 8013012:	2201      	movs	r2, #1
 8013014:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013016:	2200      	movs	r2, #0
 8013018:	4905      	ldr	r1, [pc, #20]	; (8013030 <tcp_timer_needed+0x3c>)
 801301a:	20fa      	movs	r0, #250	; 0xfa
 801301c:	f000 f8cc 	bl	80131b8 <sys_timeout>
  }
}
 8013020:	bf00      	nop
 8013022:	bd80      	pop	{r7, pc}
 8013024:	20009020 	.word	0x20009020
 8013028:	20008fd4 	.word	0x20008fd4
 801302c:	20008fd8 	.word	0x20008fd8
 8013030:	08012fad 	.word	0x08012fad

08013034 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b086      	sub	sp, #24
 8013038:	af00      	add	r7, sp, #0
 801303a:	60f8      	str	r0, [r7, #12]
 801303c:	60b9      	str	r1, [r7, #8]
 801303e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013040:	2006      	movs	r0, #6
 8013042:	f7f9 fc65 	bl	800c910 <memp_malloc>
 8013046:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d109      	bne.n	8013062 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d151      	bne.n	80130f8 <sys_timeout_abs+0xc4>
 8013054:	4b2a      	ldr	r3, [pc, #168]	; (8013100 <sys_timeout_abs+0xcc>)
 8013056:	22be      	movs	r2, #190	; 0xbe
 8013058:	492a      	ldr	r1, [pc, #168]	; (8013104 <sys_timeout_abs+0xd0>)
 801305a:	482b      	ldr	r0, [pc, #172]	; (8013108 <sys_timeout_abs+0xd4>)
 801305c:	f004 f80e 	bl	801707c <iprintf>
    return;
 8013060:	e04a      	b.n	80130f8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	2200      	movs	r2, #0
 8013066:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	68ba      	ldr	r2, [r7, #8]
 801306c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	687a      	ldr	r2, [r7, #4]
 8013072:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	68fa      	ldr	r2, [r7, #12]
 8013078:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801307a:	4b24      	ldr	r3, [pc, #144]	; (801310c <sys_timeout_abs+0xd8>)
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d103      	bne.n	801308a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013082:	4a22      	ldr	r2, [pc, #136]	; (801310c <sys_timeout_abs+0xd8>)
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	6013      	str	r3, [r2, #0]
    return;
 8013088:	e037      	b.n	80130fa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	685a      	ldr	r2, [r3, #4]
 801308e:	4b1f      	ldr	r3, [pc, #124]	; (801310c <sys_timeout_abs+0xd8>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	685b      	ldr	r3, [r3, #4]
 8013094:	1ad3      	subs	r3, r2, r3
 8013096:	0fdb      	lsrs	r3, r3, #31
 8013098:	f003 0301 	and.w	r3, r3, #1
 801309c:	b2db      	uxtb	r3, r3
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d007      	beq.n	80130b2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80130a2:	4b1a      	ldr	r3, [pc, #104]	; (801310c <sys_timeout_abs+0xd8>)
 80130a4:	681a      	ldr	r2, [r3, #0]
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80130aa:	4a18      	ldr	r2, [pc, #96]	; (801310c <sys_timeout_abs+0xd8>)
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	6013      	str	r3, [r2, #0]
 80130b0:	e023      	b.n	80130fa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80130b2:	4b16      	ldr	r3, [pc, #88]	; (801310c <sys_timeout_abs+0xd8>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	617b      	str	r3, [r7, #20]
 80130b8:	e01a      	b.n	80130f0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d00b      	beq.n	80130da <sys_timeout_abs+0xa6>
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	685a      	ldr	r2, [r3, #4]
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	685b      	ldr	r3, [r3, #4]
 80130cc:	1ad3      	subs	r3, r2, r3
 80130ce:	0fdb      	lsrs	r3, r3, #31
 80130d0:	f003 0301 	and.w	r3, r3, #1
 80130d4:	b2db      	uxtb	r3, r3
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d007      	beq.n	80130ea <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	681a      	ldr	r2, [r3, #0]
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	693a      	ldr	r2, [r7, #16]
 80130e6:	601a      	str	r2, [r3, #0]
        break;
 80130e8:	e007      	b.n	80130fa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	617b      	str	r3, [r7, #20]
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d1e1      	bne.n	80130ba <sys_timeout_abs+0x86>
 80130f6:	e000      	b.n	80130fa <sys_timeout_abs+0xc6>
    return;
 80130f8:	bf00      	nop
      }
    }
  }
}
 80130fa:	3718      	adds	r7, #24
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}
 8013100:	08019e5c 	.word	0x08019e5c
 8013104:	08019e90 	.word	0x08019e90
 8013108:	08019ed0 	.word	0x08019ed0
 801310c:	20009018 	.word	0x20009018

08013110 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b086      	sub	sp, #24
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	4798      	blx	r3

  now = sys_now();
 8013122:	f7f8 fd69 	bl	800bbf8 <sys_now>
 8013126:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	681a      	ldr	r2, [r3, #0]
 801312c:	4b0f      	ldr	r3, [pc, #60]	; (801316c <lwip_cyclic_timer+0x5c>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	4413      	add	r3, r2
 8013132:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013134:	68fa      	ldr	r2, [r7, #12]
 8013136:	693b      	ldr	r3, [r7, #16]
 8013138:	1ad3      	subs	r3, r2, r3
 801313a:	0fdb      	lsrs	r3, r3, #31
 801313c:	f003 0301 	and.w	r3, r3, #1
 8013140:	b2db      	uxtb	r3, r3
 8013142:	2b00      	cmp	r3, #0
 8013144:	d009      	beq.n	801315a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	681a      	ldr	r2, [r3, #0]
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	4413      	add	r3, r2
 801314e:	687a      	ldr	r2, [r7, #4]
 8013150:	4907      	ldr	r1, [pc, #28]	; (8013170 <lwip_cyclic_timer+0x60>)
 8013152:	4618      	mov	r0, r3
 8013154:	f7ff ff6e 	bl	8013034 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013158:	e004      	b.n	8013164 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801315a:	687a      	ldr	r2, [r7, #4]
 801315c:	4904      	ldr	r1, [pc, #16]	; (8013170 <lwip_cyclic_timer+0x60>)
 801315e:	68f8      	ldr	r0, [r7, #12]
 8013160:	f7ff ff68 	bl	8013034 <sys_timeout_abs>
}
 8013164:	bf00      	nop
 8013166:	3718      	adds	r7, #24
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	2000901c 	.word	0x2000901c
 8013170:	08013111 	.word	0x08013111

08013174 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b082      	sub	sp, #8
 8013178:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801317a:	2301      	movs	r3, #1
 801317c:	607b      	str	r3, [r7, #4]
 801317e:	e00e      	b.n	801319e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013180:	4a0b      	ldr	r2, [pc, #44]	; (80131b0 <sys_timeouts_init+0x3c>)
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	00db      	lsls	r3, r3, #3
 801318c:	4a08      	ldr	r2, [pc, #32]	; (80131b0 <sys_timeouts_init+0x3c>)
 801318e:	4413      	add	r3, r2
 8013190:	461a      	mov	r2, r3
 8013192:	4908      	ldr	r1, [pc, #32]	; (80131b4 <sys_timeouts_init+0x40>)
 8013194:	f000 f810 	bl	80131b8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	3301      	adds	r3, #1
 801319c:	607b      	str	r3, [r7, #4]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2b02      	cmp	r3, #2
 80131a2:	d9ed      	bls.n	8013180 <sys_timeouts_init+0xc>
  }
}
 80131a4:	bf00      	nop
 80131a6:	bf00      	nop
 80131a8:	3708      	adds	r7, #8
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
 80131ae:	bf00      	nop
 80131b0:	0801aa50 	.word	0x0801aa50
 80131b4:	08013111 	.word	0x08013111

080131b8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b086      	sub	sp, #24
 80131bc:	af00      	add	r7, sp, #0
 80131be:	60f8      	str	r0, [r7, #12]
 80131c0:	60b9      	str	r1, [r7, #8]
 80131c2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80131ca:	d306      	bcc.n	80131da <sys_timeout+0x22>
 80131cc:	4b0a      	ldr	r3, [pc, #40]	; (80131f8 <sys_timeout+0x40>)
 80131ce:	f240 1229 	movw	r2, #297	; 0x129
 80131d2:	490a      	ldr	r1, [pc, #40]	; (80131fc <sys_timeout+0x44>)
 80131d4:	480a      	ldr	r0, [pc, #40]	; (8013200 <sys_timeout+0x48>)
 80131d6:	f003 ff51 	bl	801707c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80131da:	f7f8 fd0d 	bl	800bbf8 <sys_now>
 80131de:	4602      	mov	r2, r0
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	4413      	add	r3, r2
 80131e4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	68b9      	ldr	r1, [r7, #8]
 80131ea:	6978      	ldr	r0, [r7, #20]
 80131ec:	f7ff ff22 	bl	8013034 <sys_timeout_abs>
#endif
}
 80131f0:	bf00      	nop
 80131f2:	3718      	adds	r7, #24
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}
 80131f8:	08019e5c 	.word	0x08019e5c
 80131fc:	08019ef8 	.word	0x08019ef8
 8013200:	08019ed0 	.word	0x08019ed0

08013204 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b084      	sub	sp, #16
 8013208:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801320a:	f7f8 fcf5 	bl	800bbf8 <sys_now>
 801320e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013210:	4b1a      	ldr	r3, [pc, #104]	; (801327c <sys_check_timeouts+0x78>)
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	b2db      	uxtb	r3, r3
 8013216:	2b00      	cmp	r3, #0
 8013218:	d001      	beq.n	801321e <sys_check_timeouts+0x1a>
 801321a:	f7f9 ff25 	bl	800d068 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801321e:	4b18      	ldr	r3, [pc, #96]	; (8013280 <sys_check_timeouts+0x7c>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d022      	beq.n	8013270 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	685b      	ldr	r3, [r3, #4]
 801322e:	68fa      	ldr	r2, [r7, #12]
 8013230:	1ad3      	subs	r3, r2, r3
 8013232:	0fdb      	lsrs	r3, r3, #31
 8013234:	f003 0301 	and.w	r3, r3, #1
 8013238:	b2db      	uxtb	r3, r3
 801323a:	2b00      	cmp	r3, #0
 801323c:	d11a      	bne.n	8013274 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	4a0f      	ldr	r2, [pc, #60]	; (8013280 <sys_check_timeouts+0x7c>)
 8013244:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	689b      	ldr	r3, [r3, #8]
 801324a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	4a0b      	ldr	r2, [pc, #44]	; (8013284 <sys_check_timeouts+0x80>)
 8013258:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801325a:	68b9      	ldr	r1, [r7, #8]
 801325c:	2006      	movs	r0, #6
 801325e:	f7f9 fbc7 	bl	800c9f0 <memp_free>
    if (handler != NULL) {
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d0d3      	beq.n	8013210 <sys_check_timeouts+0xc>
      handler(arg);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	6838      	ldr	r0, [r7, #0]
 801326c:	4798      	blx	r3
  do {
 801326e:	e7cf      	b.n	8013210 <sys_check_timeouts+0xc>
      return;
 8013270:	bf00      	nop
 8013272:	e000      	b.n	8013276 <sys_check_timeouts+0x72>
      return;
 8013274:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013276:	3710      	adds	r7, #16
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}
 801327c:	20008fc5 	.word	0x20008fc5
 8013280:	20009018 	.word	0x20009018
 8013284:	2000901c 	.word	0x2000901c

08013288 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801328c:	f003 ff0e 	bl	80170ac <rand>
 8013290:	4603      	mov	r3, r0
 8013292:	b29b      	uxth	r3, r3
 8013294:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013298:	b29b      	uxth	r3, r3
 801329a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801329e:	b29a      	uxth	r2, r3
 80132a0:	4b01      	ldr	r3, [pc, #4]	; (80132a8 <udp_init+0x20>)
 80132a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80132a4:	bf00      	nop
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	20000028 	.word	0x20000028

080132ac <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80132ac:	b480      	push	{r7}
 80132ae:	b083      	sub	sp, #12
 80132b0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80132b2:	2300      	movs	r3, #0
 80132b4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80132b6:	4b17      	ldr	r3, [pc, #92]	; (8013314 <udp_new_port+0x68>)
 80132b8:	881b      	ldrh	r3, [r3, #0]
 80132ba:	1c5a      	adds	r2, r3, #1
 80132bc:	b291      	uxth	r1, r2
 80132be:	4a15      	ldr	r2, [pc, #84]	; (8013314 <udp_new_port+0x68>)
 80132c0:	8011      	strh	r1, [r2, #0]
 80132c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132c6:	4293      	cmp	r3, r2
 80132c8:	d103      	bne.n	80132d2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80132ca:	4b12      	ldr	r3, [pc, #72]	; (8013314 <udp_new_port+0x68>)
 80132cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80132d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80132d2:	4b11      	ldr	r3, [pc, #68]	; (8013318 <udp_new_port+0x6c>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	603b      	str	r3, [r7, #0]
 80132d8:	e011      	b.n	80132fe <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	8a5a      	ldrh	r2, [r3, #18]
 80132de:	4b0d      	ldr	r3, [pc, #52]	; (8013314 <udp_new_port+0x68>)
 80132e0:	881b      	ldrh	r3, [r3, #0]
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d108      	bne.n	80132f8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80132e6:	88fb      	ldrh	r3, [r7, #6]
 80132e8:	3301      	adds	r3, #1
 80132ea:	80fb      	strh	r3, [r7, #6]
 80132ec:	88fb      	ldrh	r3, [r7, #6]
 80132ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80132f2:	d3e0      	bcc.n	80132b6 <udp_new_port+0xa>
        return 0;
 80132f4:	2300      	movs	r3, #0
 80132f6:	e007      	b.n	8013308 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	68db      	ldr	r3, [r3, #12]
 80132fc:	603b      	str	r3, [r7, #0]
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d1ea      	bne.n	80132da <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013304:	4b03      	ldr	r3, [pc, #12]	; (8013314 <udp_new_port+0x68>)
 8013306:	881b      	ldrh	r3, [r3, #0]
}
 8013308:	4618      	mov	r0, r3
 801330a:	370c      	adds	r7, #12
 801330c:	46bd      	mov	sp, r7
 801330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013312:	4770      	bx	lr
 8013314:	20000028 	.word	0x20000028
 8013318:	20009024 	.word	0x20009024

0801331c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b084      	sub	sp, #16
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	4613      	mov	r3, r2
 8013328:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d105      	bne.n	801333c <udp_input_local_match+0x20>
 8013330:	4b27      	ldr	r3, [pc, #156]	; (80133d0 <udp_input_local_match+0xb4>)
 8013332:	2287      	movs	r2, #135	; 0x87
 8013334:	4927      	ldr	r1, [pc, #156]	; (80133d4 <udp_input_local_match+0xb8>)
 8013336:	4828      	ldr	r0, [pc, #160]	; (80133d8 <udp_input_local_match+0xbc>)
 8013338:	f003 fea0 	bl	801707c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d105      	bne.n	801334e <udp_input_local_match+0x32>
 8013342:	4b23      	ldr	r3, [pc, #140]	; (80133d0 <udp_input_local_match+0xb4>)
 8013344:	2288      	movs	r2, #136	; 0x88
 8013346:	4925      	ldr	r1, [pc, #148]	; (80133dc <udp_input_local_match+0xc0>)
 8013348:	4823      	ldr	r0, [pc, #140]	; (80133d8 <udp_input_local_match+0xbc>)
 801334a:	f003 fe97 	bl	801707c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	7a1b      	ldrb	r3, [r3, #8]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d00b      	beq.n	801336e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	7a1a      	ldrb	r2, [r3, #8]
 801335a:	4b21      	ldr	r3, [pc, #132]	; (80133e0 <udp_input_local_match+0xc4>)
 801335c:	685b      	ldr	r3, [r3, #4]
 801335e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013362:	3301      	adds	r3, #1
 8013364:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013366:	429a      	cmp	r2, r3
 8013368:	d001      	beq.n	801336e <udp_input_local_match+0x52>
    return 0;
 801336a:	2300      	movs	r3, #0
 801336c:	e02b      	b.n	80133c6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801336e:	79fb      	ldrb	r3, [r7, #7]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d018      	beq.n	80133a6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	2b00      	cmp	r3, #0
 8013378:	d013      	beq.n	80133a2 <udp_input_local_match+0x86>
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d00f      	beq.n	80133a2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013382:	4b17      	ldr	r3, [pc, #92]	; (80133e0 <udp_input_local_match+0xc4>)
 8013384:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013386:	f1b3 3fff 	cmp.w	r3, #4294967295
 801338a:	d00a      	beq.n	80133a2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	681a      	ldr	r2, [r3, #0]
 8013390:	4b13      	ldr	r3, [pc, #76]	; (80133e0 <udp_input_local_match+0xc4>)
 8013392:	695b      	ldr	r3, [r3, #20]
 8013394:	405a      	eors	r2, r3
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	3308      	adds	r3, #8
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d110      	bne.n	80133c4 <udp_input_local_match+0xa8>
          return 1;
 80133a2:	2301      	movs	r3, #1
 80133a4:	e00f      	b.n	80133c6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d009      	beq.n	80133c0 <udp_input_local_match+0xa4>
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d005      	beq.n	80133c0 <udp_input_local_match+0xa4>
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	681a      	ldr	r2, [r3, #0]
 80133b8:	4b09      	ldr	r3, [pc, #36]	; (80133e0 <udp_input_local_match+0xc4>)
 80133ba:	695b      	ldr	r3, [r3, #20]
 80133bc:	429a      	cmp	r2, r3
 80133be:	d101      	bne.n	80133c4 <udp_input_local_match+0xa8>
        return 1;
 80133c0:	2301      	movs	r3, #1
 80133c2:	e000      	b.n	80133c6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80133c4:	2300      	movs	r3, #0
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3710      	adds	r7, #16
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}
 80133ce:	bf00      	nop
 80133d0:	08019f44 	.word	0x08019f44
 80133d4:	08019f74 	.word	0x08019f74
 80133d8:	08019f98 	.word	0x08019f98
 80133dc:	08019fc0 	.word	0x08019fc0
 80133e0:	20005a58 	.word	0x20005a58

080133e4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80133e4:	b590      	push	{r4, r7, lr}
 80133e6:	b08d      	sub	sp, #52	; 0x34
 80133e8:	af02      	add	r7, sp, #8
 80133ea:	6078      	str	r0, [r7, #4]
 80133ec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80133ee:	2300      	movs	r3, #0
 80133f0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d105      	bne.n	8013404 <udp_input+0x20>
 80133f8:	4b7c      	ldr	r3, [pc, #496]	; (80135ec <udp_input+0x208>)
 80133fa:	22cf      	movs	r2, #207	; 0xcf
 80133fc:	497c      	ldr	r1, [pc, #496]	; (80135f0 <udp_input+0x20c>)
 80133fe:	487d      	ldr	r0, [pc, #500]	; (80135f4 <udp_input+0x210>)
 8013400:	f003 fe3c 	bl	801707c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d105      	bne.n	8013416 <udp_input+0x32>
 801340a:	4b78      	ldr	r3, [pc, #480]	; (80135ec <udp_input+0x208>)
 801340c:	22d0      	movs	r2, #208	; 0xd0
 801340e:	497a      	ldr	r1, [pc, #488]	; (80135f8 <udp_input+0x214>)
 8013410:	4878      	ldr	r0, [pc, #480]	; (80135f4 <udp_input+0x210>)
 8013412:	f003 fe33 	bl	801707c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	895b      	ldrh	r3, [r3, #10]
 801341a:	2b07      	cmp	r3, #7
 801341c:	d803      	bhi.n	8013426 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801341e:	6878      	ldr	r0, [r7, #4]
 8013420:	f7fa f95c 	bl	800d6dc <pbuf_free>
    goto end;
 8013424:	e0de      	b.n	80135e4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	685b      	ldr	r3, [r3, #4]
 801342a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801342c:	4b73      	ldr	r3, [pc, #460]	; (80135fc <udp_input+0x218>)
 801342e:	695b      	ldr	r3, [r3, #20]
 8013430:	4a72      	ldr	r2, [pc, #456]	; (80135fc <udp_input+0x218>)
 8013432:	6812      	ldr	r2, [r2, #0]
 8013434:	4611      	mov	r1, r2
 8013436:	4618      	mov	r0, r3
 8013438:	f002 f80a 	bl	8015450 <ip4_addr_isbroadcast_u32>
 801343c:	4603      	mov	r3, r0
 801343e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	881b      	ldrh	r3, [r3, #0]
 8013444:	b29b      	uxth	r3, r3
 8013446:	4618      	mov	r0, r3
 8013448:	f7f8 fdea 	bl	800c020 <lwip_htons>
 801344c:	4603      	mov	r3, r0
 801344e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	885b      	ldrh	r3, [r3, #2]
 8013454:	b29b      	uxth	r3, r3
 8013456:	4618      	mov	r0, r3
 8013458:	f7f8 fde2 	bl	800c020 <lwip_htons>
 801345c:	4603      	mov	r3, r0
 801345e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013460:	2300      	movs	r3, #0
 8013462:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013464:	2300      	movs	r3, #0
 8013466:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013468:	2300      	movs	r3, #0
 801346a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801346c:	4b64      	ldr	r3, [pc, #400]	; (8013600 <udp_input+0x21c>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	627b      	str	r3, [r7, #36]	; 0x24
 8013472:	e054      	b.n	801351e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013476:	8a5b      	ldrh	r3, [r3, #18]
 8013478:	89fa      	ldrh	r2, [r7, #14]
 801347a:	429a      	cmp	r2, r3
 801347c:	d14a      	bne.n	8013514 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801347e:	7cfb      	ldrb	r3, [r7, #19]
 8013480:	461a      	mov	r2, r3
 8013482:	6839      	ldr	r1, [r7, #0]
 8013484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013486:	f7ff ff49 	bl	801331c <udp_input_local_match>
 801348a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801348c:	2b00      	cmp	r3, #0
 801348e:	d041      	beq.n	8013514 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013492:	7c1b      	ldrb	r3, [r3, #16]
 8013494:	f003 0304 	and.w	r3, r3, #4
 8013498:	2b00      	cmp	r3, #0
 801349a:	d11d      	bne.n	80134d8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801349c:	69fb      	ldr	r3, [r7, #28]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d102      	bne.n	80134a8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80134a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a4:	61fb      	str	r3, [r7, #28]
 80134a6:	e017      	b.n	80134d8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80134a8:	7cfb      	ldrb	r3, [r7, #19]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d014      	beq.n	80134d8 <udp_input+0xf4>
 80134ae:	4b53      	ldr	r3, [pc, #332]	; (80135fc <udp_input+0x218>)
 80134b0:	695b      	ldr	r3, [r3, #20]
 80134b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134b6:	d10f      	bne.n	80134d8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80134b8:	69fb      	ldr	r3, [r7, #28]
 80134ba:	681a      	ldr	r2, [r3, #0]
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	3304      	adds	r3, #4
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d008      	beq.n	80134d8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80134c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c8:	681a      	ldr	r2, [r3, #0]
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	3304      	adds	r3, #4
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	429a      	cmp	r2, r3
 80134d2:	d101      	bne.n	80134d8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80134d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80134d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134da:	8a9b      	ldrh	r3, [r3, #20]
 80134dc:	8a3a      	ldrh	r2, [r7, #16]
 80134de:	429a      	cmp	r2, r3
 80134e0:	d118      	bne.n	8013514 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80134e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d005      	beq.n	80134f6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80134ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ec:	685a      	ldr	r2, [r3, #4]
 80134ee:	4b43      	ldr	r3, [pc, #268]	; (80135fc <udp_input+0x218>)
 80134f0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d10e      	bne.n	8013514 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80134f6:	6a3b      	ldr	r3, [r7, #32]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d014      	beq.n	8013526 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80134fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134fe:	68da      	ldr	r2, [r3, #12]
 8013500:	6a3b      	ldr	r3, [r7, #32]
 8013502:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013504:	4b3e      	ldr	r3, [pc, #248]	; (8013600 <udp_input+0x21c>)
 8013506:	681a      	ldr	r2, [r3, #0]
 8013508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801350a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801350c:	4a3c      	ldr	r2, [pc, #240]	; (8013600 <udp_input+0x21c>)
 801350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013510:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013512:	e008      	b.n	8013526 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013516:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801351a:	68db      	ldr	r3, [r3, #12]
 801351c:	627b      	str	r3, [r7, #36]	; 0x24
 801351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013520:	2b00      	cmp	r3, #0
 8013522:	d1a7      	bne.n	8013474 <udp_input+0x90>
 8013524:	e000      	b.n	8013528 <udp_input+0x144>
        break;
 8013526:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801352a:	2b00      	cmp	r3, #0
 801352c:	d101      	bne.n	8013532 <udp_input+0x14e>
    pcb = uncon_pcb;
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013534:	2b00      	cmp	r3, #0
 8013536:	d002      	beq.n	801353e <udp_input+0x15a>
    for_us = 1;
 8013538:	2301      	movs	r3, #1
 801353a:	76fb      	strb	r3, [r7, #27]
 801353c:	e00a      	b.n	8013554 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801353e:	683b      	ldr	r3, [r7, #0]
 8013540:	3304      	adds	r3, #4
 8013542:	681a      	ldr	r2, [r3, #0]
 8013544:	4b2d      	ldr	r3, [pc, #180]	; (80135fc <udp_input+0x218>)
 8013546:	695b      	ldr	r3, [r3, #20]
 8013548:	429a      	cmp	r2, r3
 801354a:	bf0c      	ite	eq
 801354c:	2301      	moveq	r3, #1
 801354e:	2300      	movne	r3, #0
 8013550:	b2db      	uxtb	r3, r3
 8013552:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013554:	7efb      	ldrb	r3, [r7, #27]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d041      	beq.n	80135de <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801355a:	2108      	movs	r1, #8
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f7fa f837 	bl	800d5d0 <pbuf_remove_header>
 8013562:	4603      	mov	r3, r0
 8013564:	2b00      	cmp	r3, #0
 8013566:	d00a      	beq.n	801357e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013568:	4b20      	ldr	r3, [pc, #128]	; (80135ec <udp_input+0x208>)
 801356a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801356e:	4925      	ldr	r1, [pc, #148]	; (8013604 <udp_input+0x220>)
 8013570:	4820      	ldr	r0, [pc, #128]	; (80135f4 <udp_input+0x210>)
 8013572:	f003 fd83 	bl	801707c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013576:	6878      	ldr	r0, [r7, #4]
 8013578:	f7fa f8b0 	bl	800d6dc <pbuf_free>
      goto end;
 801357c:	e032      	b.n	80135e4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013580:	2b00      	cmp	r3, #0
 8013582:	d012      	beq.n	80135aa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013586:	699b      	ldr	r3, [r3, #24]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d00a      	beq.n	80135a2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801358e:	699c      	ldr	r4, [r3, #24]
 8013590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013592:	69d8      	ldr	r0, [r3, #28]
 8013594:	8a3b      	ldrh	r3, [r7, #16]
 8013596:	9300      	str	r3, [sp, #0]
 8013598:	4b1b      	ldr	r3, [pc, #108]	; (8013608 <udp_input+0x224>)
 801359a:	687a      	ldr	r2, [r7, #4]
 801359c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801359e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80135a0:	e021      	b.n	80135e6 <udp_input+0x202>
        pbuf_free(p);
 80135a2:	6878      	ldr	r0, [r7, #4]
 80135a4:	f7fa f89a 	bl	800d6dc <pbuf_free>
        goto end;
 80135a8:	e01c      	b.n	80135e4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80135aa:	7cfb      	ldrb	r3, [r7, #19]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d112      	bne.n	80135d6 <udp_input+0x1f2>
 80135b0:	4b12      	ldr	r3, [pc, #72]	; (80135fc <udp_input+0x218>)
 80135b2:	695b      	ldr	r3, [r3, #20]
 80135b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80135b8:	2be0      	cmp	r3, #224	; 0xe0
 80135ba:	d00c      	beq.n	80135d6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80135bc:	4b0f      	ldr	r3, [pc, #60]	; (80135fc <udp_input+0x218>)
 80135be:	899b      	ldrh	r3, [r3, #12]
 80135c0:	3308      	adds	r3, #8
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	b21b      	sxth	r3, r3
 80135c6:	4619      	mov	r1, r3
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f7fa f874 	bl	800d6b6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80135ce:	2103      	movs	r1, #3
 80135d0:	6878      	ldr	r0, [r7, #4]
 80135d2:	f001 fc1d 	bl	8014e10 <icmp_dest_unreach>
      pbuf_free(p);
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f7fa f880 	bl	800d6dc <pbuf_free>
  return;
 80135dc:	e003      	b.n	80135e6 <udp_input+0x202>
    pbuf_free(p);
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f7fa f87c 	bl	800d6dc <pbuf_free>
  return;
 80135e4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80135e6:	372c      	adds	r7, #44	; 0x2c
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd90      	pop	{r4, r7, pc}
 80135ec:	08019f44 	.word	0x08019f44
 80135f0:	08019fe8 	.word	0x08019fe8
 80135f4:	08019f98 	.word	0x08019f98
 80135f8:	0801a000 	.word	0x0801a000
 80135fc:	20005a58 	.word	0x20005a58
 8013600:	20009024 	.word	0x20009024
 8013604:	0801a01c 	.word	0x0801a01c
 8013608:	20005a68 	.word	0x20005a68

0801360c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d109      	bne.n	8013630 <udp_send+0x24>
 801361c:	4b11      	ldr	r3, [pc, #68]	; (8013664 <udp_send+0x58>)
 801361e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8013622:	4911      	ldr	r1, [pc, #68]	; (8013668 <udp_send+0x5c>)
 8013624:	4811      	ldr	r0, [pc, #68]	; (801366c <udp_send+0x60>)
 8013626:	f003 fd29 	bl	801707c <iprintf>
 801362a:	f06f 030f 	mvn.w	r3, #15
 801362e:	e015      	b.n	801365c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d109      	bne.n	801364a <udp_send+0x3e>
 8013636:	4b0b      	ldr	r3, [pc, #44]	; (8013664 <udp_send+0x58>)
 8013638:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801363c:	490c      	ldr	r1, [pc, #48]	; (8013670 <udp_send+0x64>)
 801363e:	480b      	ldr	r0, [pc, #44]	; (801366c <udp_send+0x60>)
 8013640:	f003 fd1c 	bl	801707c <iprintf>
 8013644:	f06f 030f 	mvn.w	r3, #15
 8013648:	e008      	b.n	801365c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	1d1a      	adds	r2, r3, #4
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	8a9b      	ldrh	r3, [r3, #20]
 8013652:	6839      	ldr	r1, [r7, #0]
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f000 f80d 	bl	8013674 <udp_sendto>
 801365a:	4603      	mov	r3, r0
}
 801365c:	4618      	mov	r0, r3
 801365e:	3708      	adds	r7, #8
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}
 8013664:	08019f44 	.word	0x08019f44
 8013668:	0801a038 	.word	0x0801a038
 801366c:	08019f98 	.word	0x08019f98
 8013670:	0801a050 	.word	0x0801a050

08013674 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013674:	b580      	push	{r7, lr}
 8013676:	b088      	sub	sp, #32
 8013678:	af02      	add	r7, sp, #8
 801367a:	60f8      	str	r0, [r7, #12]
 801367c:	60b9      	str	r1, [r7, #8]
 801367e:	607a      	str	r2, [r7, #4]
 8013680:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d109      	bne.n	801369c <udp_sendto+0x28>
 8013688:	4b23      	ldr	r3, [pc, #140]	; (8013718 <udp_sendto+0xa4>)
 801368a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801368e:	4923      	ldr	r1, [pc, #140]	; (801371c <udp_sendto+0xa8>)
 8013690:	4823      	ldr	r0, [pc, #140]	; (8013720 <udp_sendto+0xac>)
 8013692:	f003 fcf3 	bl	801707c <iprintf>
 8013696:	f06f 030f 	mvn.w	r3, #15
 801369a:	e038      	b.n	801370e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d109      	bne.n	80136b6 <udp_sendto+0x42>
 80136a2:	4b1d      	ldr	r3, [pc, #116]	; (8013718 <udp_sendto+0xa4>)
 80136a4:	f240 2219 	movw	r2, #537	; 0x219
 80136a8:	491e      	ldr	r1, [pc, #120]	; (8013724 <udp_sendto+0xb0>)
 80136aa:	481d      	ldr	r0, [pc, #116]	; (8013720 <udp_sendto+0xac>)
 80136ac:	f003 fce6 	bl	801707c <iprintf>
 80136b0:	f06f 030f 	mvn.w	r3, #15
 80136b4:	e02b      	b.n	801370e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d109      	bne.n	80136d0 <udp_sendto+0x5c>
 80136bc:	4b16      	ldr	r3, [pc, #88]	; (8013718 <udp_sendto+0xa4>)
 80136be:	f240 221a 	movw	r2, #538	; 0x21a
 80136c2:	4919      	ldr	r1, [pc, #100]	; (8013728 <udp_sendto+0xb4>)
 80136c4:	4816      	ldr	r0, [pc, #88]	; (8013720 <udp_sendto+0xac>)
 80136c6:	f003 fcd9 	bl	801707c <iprintf>
 80136ca:	f06f 030f 	mvn.w	r3, #15
 80136ce:	e01e      	b.n	801370e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	7a1b      	ldrb	r3, [r3, #8]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d006      	beq.n	80136e6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	7a1b      	ldrb	r3, [r3, #8]
 80136dc:	4618      	mov	r0, r3
 80136de:	f7f9 fc9d 	bl	800d01c <netif_get_by_index>
 80136e2:	6178      	str	r0, [r7, #20]
 80136e4:	e003      	b.n	80136ee <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f001 fc1c 	bl	8014f24 <ip4_route>
 80136ec:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d102      	bne.n	80136fa <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80136f4:	f06f 0303 	mvn.w	r3, #3
 80136f8:	e009      	b.n	801370e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80136fa:	887a      	ldrh	r2, [r7, #2]
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	9300      	str	r3, [sp, #0]
 8013700:	4613      	mov	r3, r2
 8013702:	687a      	ldr	r2, [r7, #4]
 8013704:	68b9      	ldr	r1, [r7, #8]
 8013706:	68f8      	ldr	r0, [r7, #12]
 8013708:	f000 f810 	bl	801372c <udp_sendto_if>
 801370c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801370e:	4618      	mov	r0, r3
 8013710:	3718      	adds	r7, #24
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}
 8013716:	bf00      	nop
 8013718:	08019f44 	.word	0x08019f44
 801371c:	0801a068 	.word	0x0801a068
 8013720:	08019f98 	.word	0x08019f98
 8013724:	0801a080 	.word	0x0801a080
 8013728:	0801a09c 	.word	0x0801a09c

0801372c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b088      	sub	sp, #32
 8013730:	af02      	add	r7, sp, #8
 8013732:	60f8      	str	r0, [r7, #12]
 8013734:	60b9      	str	r1, [r7, #8]
 8013736:	607a      	str	r2, [r7, #4]
 8013738:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d109      	bne.n	8013754 <udp_sendto_if+0x28>
 8013740:	4b2e      	ldr	r3, [pc, #184]	; (80137fc <udp_sendto_if+0xd0>)
 8013742:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013746:	492e      	ldr	r1, [pc, #184]	; (8013800 <udp_sendto_if+0xd4>)
 8013748:	482e      	ldr	r0, [pc, #184]	; (8013804 <udp_sendto_if+0xd8>)
 801374a:	f003 fc97 	bl	801707c <iprintf>
 801374e:	f06f 030f 	mvn.w	r3, #15
 8013752:	e04f      	b.n	80137f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d109      	bne.n	801376e <udp_sendto_if+0x42>
 801375a:	4b28      	ldr	r3, [pc, #160]	; (80137fc <udp_sendto_if+0xd0>)
 801375c:	f240 2281 	movw	r2, #641	; 0x281
 8013760:	4929      	ldr	r1, [pc, #164]	; (8013808 <udp_sendto_if+0xdc>)
 8013762:	4828      	ldr	r0, [pc, #160]	; (8013804 <udp_sendto_if+0xd8>)
 8013764:	f003 fc8a 	bl	801707c <iprintf>
 8013768:	f06f 030f 	mvn.w	r3, #15
 801376c:	e042      	b.n	80137f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d109      	bne.n	8013788 <udp_sendto_if+0x5c>
 8013774:	4b21      	ldr	r3, [pc, #132]	; (80137fc <udp_sendto_if+0xd0>)
 8013776:	f240 2282 	movw	r2, #642	; 0x282
 801377a:	4924      	ldr	r1, [pc, #144]	; (801380c <udp_sendto_if+0xe0>)
 801377c:	4821      	ldr	r0, [pc, #132]	; (8013804 <udp_sendto_if+0xd8>)
 801377e:	f003 fc7d 	bl	801707c <iprintf>
 8013782:	f06f 030f 	mvn.w	r3, #15
 8013786:	e035      	b.n	80137f4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013788:	6a3b      	ldr	r3, [r7, #32]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d109      	bne.n	80137a2 <udp_sendto_if+0x76>
 801378e:	4b1b      	ldr	r3, [pc, #108]	; (80137fc <udp_sendto_if+0xd0>)
 8013790:	f240 2283 	movw	r2, #643	; 0x283
 8013794:	491e      	ldr	r1, [pc, #120]	; (8013810 <udp_sendto_if+0xe4>)
 8013796:	481b      	ldr	r0, [pc, #108]	; (8013804 <udp_sendto_if+0xd8>)
 8013798:	f003 fc70 	bl	801707c <iprintf>
 801379c:	f06f 030f 	mvn.w	r3, #15
 80137a0:	e028      	b.n	80137f4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d009      	beq.n	80137bc <udp_sendto_if+0x90>
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d005      	beq.n	80137bc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80137b8:	2be0      	cmp	r3, #224	; 0xe0
 80137ba:	d103      	bne.n	80137c4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80137bc:	6a3b      	ldr	r3, [r7, #32]
 80137be:	3304      	adds	r3, #4
 80137c0:	617b      	str	r3, [r7, #20]
 80137c2:	e00b      	b.n	80137dc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	681a      	ldr	r2, [r3, #0]
 80137c8:	6a3b      	ldr	r3, [r7, #32]
 80137ca:	3304      	adds	r3, #4
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d002      	beq.n	80137d8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80137d2:	f06f 0303 	mvn.w	r3, #3
 80137d6:	e00d      	b.n	80137f4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80137dc:	887a      	ldrh	r2, [r7, #2]
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	9301      	str	r3, [sp, #4]
 80137e2:	6a3b      	ldr	r3, [r7, #32]
 80137e4:	9300      	str	r3, [sp, #0]
 80137e6:	4613      	mov	r3, r2
 80137e8:	687a      	ldr	r2, [r7, #4]
 80137ea:	68b9      	ldr	r1, [r7, #8]
 80137ec:	68f8      	ldr	r0, [r7, #12]
 80137ee:	f000 f811 	bl	8013814 <udp_sendto_if_src>
 80137f2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80137f4:	4618      	mov	r0, r3
 80137f6:	3718      	adds	r7, #24
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}
 80137fc:	08019f44 	.word	0x08019f44
 8013800:	0801a0b8 	.word	0x0801a0b8
 8013804:	08019f98 	.word	0x08019f98
 8013808:	0801a0d4 	.word	0x0801a0d4
 801380c:	0801a0f0 	.word	0x0801a0f0
 8013810:	0801a110 	.word	0x0801a110

08013814 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b08c      	sub	sp, #48	; 0x30
 8013818:	af04      	add	r7, sp, #16
 801381a:	60f8      	str	r0, [r7, #12]
 801381c:	60b9      	str	r1, [r7, #8]
 801381e:	607a      	str	r2, [r7, #4]
 8013820:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d109      	bne.n	801383c <udp_sendto_if_src+0x28>
 8013828:	4b65      	ldr	r3, [pc, #404]	; (80139c0 <udp_sendto_if_src+0x1ac>)
 801382a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801382e:	4965      	ldr	r1, [pc, #404]	; (80139c4 <udp_sendto_if_src+0x1b0>)
 8013830:	4865      	ldr	r0, [pc, #404]	; (80139c8 <udp_sendto_if_src+0x1b4>)
 8013832:	f003 fc23 	bl	801707c <iprintf>
 8013836:	f06f 030f 	mvn.w	r3, #15
 801383a:	e0bc      	b.n	80139b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d109      	bne.n	8013856 <udp_sendto_if_src+0x42>
 8013842:	4b5f      	ldr	r3, [pc, #380]	; (80139c0 <udp_sendto_if_src+0x1ac>)
 8013844:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013848:	4960      	ldr	r1, [pc, #384]	; (80139cc <udp_sendto_if_src+0x1b8>)
 801384a:	485f      	ldr	r0, [pc, #380]	; (80139c8 <udp_sendto_if_src+0x1b4>)
 801384c:	f003 fc16 	bl	801707c <iprintf>
 8013850:	f06f 030f 	mvn.w	r3, #15
 8013854:	e0af      	b.n	80139b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d109      	bne.n	8013870 <udp_sendto_if_src+0x5c>
 801385c:	4b58      	ldr	r3, [pc, #352]	; (80139c0 <udp_sendto_if_src+0x1ac>)
 801385e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013862:	495b      	ldr	r1, [pc, #364]	; (80139d0 <udp_sendto_if_src+0x1bc>)
 8013864:	4858      	ldr	r0, [pc, #352]	; (80139c8 <udp_sendto_if_src+0x1b4>)
 8013866:	f003 fc09 	bl	801707c <iprintf>
 801386a:	f06f 030f 	mvn.w	r3, #15
 801386e:	e0a2      	b.n	80139b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013872:	2b00      	cmp	r3, #0
 8013874:	d109      	bne.n	801388a <udp_sendto_if_src+0x76>
 8013876:	4b52      	ldr	r3, [pc, #328]	; (80139c0 <udp_sendto_if_src+0x1ac>)
 8013878:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801387c:	4955      	ldr	r1, [pc, #340]	; (80139d4 <udp_sendto_if_src+0x1c0>)
 801387e:	4852      	ldr	r0, [pc, #328]	; (80139c8 <udp_sendto_if_src+0x1b4>)
 8013880:	f003 fbfc 	bl	801707c <iprintf>
 8013884:	f06f 030f 	mvn.w	r3, #15
 8013888:	e095      	b.n	80139b6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801388c:	2b00      	cmp	r3, #0
 801388e:	d109      	bne.n	80138a4 <udp_sendto_if_src+0x90>
 8013890:	4b4b      	ldr	r3, [pc, #300]	; (80139c0 <udp_sendto_if_src+0x1ac>)
 8013892:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013896:	4950      	ldr	r1, [pc, #320]	; (80139d8 <udp_sendto_if_src+0x1c4>)
 8013898:	484b      	ldr	r0, [pc, #300]	; (80139c8 <udp_sendto_if_src+0x1b4>)
 801389a:	f003 fbef 	bl	801707c <iprintf>
 801389e:	f06f 030f 	mvn.w	r3, #15
 80138a2:	e088      	b.n	80139b6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	8a5b      	ldrh	r3, [r3, #18]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d10f      	bne.n	80138cc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80138ac:	68f9      	ldr	r1, [r7, #12]
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	8a5b      	ldrh	r3, [r3, #18]
 80138b2:	461a      	mov	r2, r3
 80138b4:	68f8      	ldr	r0, [r7, #12]
 80138b6:	f000 f893 	bl	80139e0 <udp_bind>
 80138ba:	4603      	mov	r3, r0
 80138bc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80138be:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d002      	beq.n	80138cc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80138c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80138ca:	e074      	b.n	80139b6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	891b      	ldrh	r3, [r3, #8]
 80138d0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80138d4:	4293      	cmp	r3, r2
 80138d6:	d902      	bls.n	80138de <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80138d8:	f04f 33ff 	mov.w	r3, #4294967295
 80138dc:	e06b      	b.n	80139b6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80138de:	2108      	movs	r1, #8
 80138e0:	68b8      	ldr	r0, [r7, #8]
 80138e2:	f7f9 fe65 	bl	800d5b0 <pbuf_add_header>
 80138e6:	4603      	mov	r3, r0
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d015      	beq.n	8013918 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80138ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 80138f0:	2108      	movs	r1, #8
 80138f2:	2022      	movs	r0, #34	; 0x22
 80138f4:	f7f9 fc0e 	bl	800d114 <pbuf_alloc>
 80138f8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80138fa:	69fb      	ldr	r3, [r7, #28]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d102      	bne.n	8013906 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013900:	f04f 33ff 	mov.w	r3, #4294967295
 8013904:	e057      	b.n	80139b6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	891b      	ldrh	r3, [r3, #8]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d006      	beq.n	801391c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801390e:	68b9      	ldr	r1, [r7, #8]
 8013910:	69f8      	ldr	r0, [r7, #28]
 8013912:	f7f9 fffb 	bl	800d90c <pbuf_chain>
 8013916:	e001      	b.n	801391c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801391c:	69fb      	ldr	r3, [r7, #28]
 801391e:	895b      	ldrh	r3, [r3, #10]
 8013920:	2b07      	cmp	r3, #7
 8013922:	d806      	bhi.n	8013932 <udp_sendto_if_src+0x11e>
 8013924:	4b26      	ldr	r3, [pc, #152]	; (80139c0 <udp_sendto_if_src+0x1ac>)
 8013926:	f240 320d 	movw	r2, #781	; 0x30d
 801392a:	492c      	ldr	r1, [pc, #176]	; (80139dc <udp_sendto_if_src+0x1c8>)
 801392c:	4826      	ldr	r0, [pc, #152]	; (80139c8 <udp_sendto_if_src+0x1b4>)
 801392e:	f003 fba5 	bl	801707c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013932:	69fb      	ldr	r3, [r7, #28]
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	8a5b      	ldrh	r3, [r3, #18]
 801393c:	4618      	mov	r0, r3
 801393e:	f7f8 fb6f 	bl	800c020 <lwip_htons>
 8013942:	4603      	mov	r3, r0
 8013944:	461a      	mov	r2, r3
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801394a:	887b      	ldrh	r3, [r7, #2]
 801394c:	4618      	mov	r0, r3
 801394e:	f7f8 fb67 	bl	800c020 <lwip_htons>
 8013952:	4603      	mov	r3, r0
 8013954:	461a      	mov	r2, r3
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801395a:	697b      	ldr	r3, [r7, #20]
 801395c:	2200      	movs	r2, #0
 801395e:	719a      	strb	r2, [r3, #6]
 8013960:	2200      	movs	r2, #0
 8013962:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	891b      	ldrh	r3, [r3, #8]
 8013968:	4618      	mov	r0, r3
 801396a:	f7f8 fb59 	bl	800c020 <lwip_htons>
 801396e:	4603      	mov	r3, r0
 8013970:	461a      	mov	r2, r3
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013976:	2311      	movs	r3, #17
 8013978:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	7adb      	ldrb	r3, [r3, #11]
 801397e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	7a9b      	ldrb	r3, [r3, #10]
 8013984:	7cb9      	ldrb	r1, [r7, #18]
 8013986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013988:	9202      	str	r2, [sp, #8]
 801398a:	7cfa      	ldrb	r2, [r7, #19]
 801398c:	9201      	str	r2, [sp, #4]
 801398e:	9300      	str	r3, [sp, #0]
 8013990:	460b      	mov	r3, r1
 8013992:	687a      	ldr	r2, [r7, #4]
 8013994:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013996:	69f8      	ldr	r0, [r7, #28]
 8013998:	f001 fcac 	bl	80152f4 <ip4_output_if_src>
 801399c:	4603      	mov	r3, r0
 801399e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80139a0:	69fa      	ldr	r2, [r7, #28]
 80139a2:	68bb      	ldr	r3, [r7, #8]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d004      	beq.n	80139b2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80139a8:	69f8      	ldr	r0, [r7, #28]
 80139aa:	f7f9 fe97 	bl	800d6dc <pbuf_free>
    q = NULL;
 80139ae:	2300      	movs	r3, #0
 80139b0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80139b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3720      	adds	r7, #32
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}
 80139be:	bf00      	nop
 80139c0:	08019f44 	.word	0x08019f44
 80139c4:	0801a130 	.word	0x0801a130
 80139c8:	08019f98 	.word	0x08019f98
 80139cc:	0801a150 	.word	0x0801a150
 80139d0:	0801a170 	.word	0x0801a170
 80139d4:	0801a194 	.word	0x0801a194
 80139d8:	0801a1b8 	.word	0x0801a1b8
 80139dc:	0801a1dc 	.word	0x0801a1dc

080139e0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80139e0:	b580      	push	{r7, lr}
 80139e2:	b086      	sub	sp, #24
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	60f8      	str	r0, [r7, #12]
 80139e8:	60b9      	str	r1, [r7, #8]
 80139ea:	4613      	mov	r3, r2
 80139ec:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80139ee:	68bb      	ldr	r3, [r7, #8]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d101      	bne.n	80139f8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80139f4:	4b39      	ldr	r3, [pc, #228]	; (8013adc <udp_bind+0xfc>)
 80139f6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d109      	bne.n	8013a12 <udp_bind+0x32>
 80139fe:	4b38      	ldr	r3, [pc, #224]	; (8013ae0 <udp_bind+0x100>)
 8013a00:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013a04:	4937      	ldr	r1, [pc, #220]	; (8013ae4 <udp_bind+0x104>)
 8013a06:	4838      	ldr	r0, [pc, #224]	; (8013ae8 <udp_bind+0x108>)
 8013a08:	f003 fb38 	bl	801707c <iprintf>
 8013a0c:	f06f 030f 	mvn.w	r3, #15
 8013a10:	e060      	b.n	8013ad4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013a12:	2300      	movs	r3, #0
 8013a14:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013a16:	4b35      	ldr	r3, [pc, #212]	; (8013aec <udp_bind+0x10c>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	617b      	str	r3, [r7, #20]
 8013a1c:	e009      	b.n	8013a32 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013a1e:	68fa      	ldr	r2, [r7, #12]
 8013a20:	697b      	ldr	r3, [r7, #20]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d102      	bne.n	8013a2c <udp_bind+0x4c>
      rebind = 1;
 8013a26:	2301      	movs	r3, #1
 8013a28:	74fb      	strb	r3, [r7, #19]
      break;
 8013a2a:	e005      	b.n	8013a38 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	68db      	ldr	r3, [r3, #12]
 8013a30:	617b      	str	r3, [r7, #20]
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d1f2      	bne.n	8013a1e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013a38:	88fb      	ldrh	r3, [r7, #6]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d109      	bne.n	8013a52 <udp_bind+0x72>
    port = udp_new_port();
 8013a3e:	f7ff fc35 	bl	80132ac <udp_new_port>
 8013a42:	4603      	mov	r3, r0
 8013a44:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013a46:	88fb      	ldrh	r3, [r7, #6]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d12c      	bne.n	8013aa6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013a4c:	f06f 0307 	mvn.w	r3, #7
 8013a50:	e040      	b.n	8013ad4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013a52:	4b26      	ldr	r3, [pc, #152]	; (8013aec <udp_bind+0x10c>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	617b      	str	r3, [r7, #20]
 8013a58:	e022      	b.n	8013aa0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013a5a:	68fa      	ldr	r2, [r7, #12]
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	429a      	cmp	r2, r3
 8013a60:	d01b      	beq.n	8013a9a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	8a5b      	ldrh	r3, [r3, #18]
 8013a66:	88fa      	ldrh	r2, [r7, #6]
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d116      	bne.n	8013a9a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	681a      	ldr	r2, [r3, #0]
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d00d      	beq.n	8013a94 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d00a      	beq.n	8013a94 <udp_bind+0xb4>
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d006      	beq.n	8013a94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013a86:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d003      	beq.n	8013a94 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d102      	bne.n	8013a9a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013a94:	f06f 0307 	mvn.w	r3, #7
 8013a98:	e01c      	b.n	8013ad4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	617b      	str	r3, [r7, #20]
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d1d9      	bne.n	8013a5a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d002      	beq.n	8013ab2 <udp_bind+0xd2>
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	e000      	b.n	8013ab4 <udp_bind+0xd4>
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	88fa      	ldrh	r2, [r7, #6]
 8013abc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013abe:	7cfb      	ldrb	r3, [r7, #19]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d106      	bne.n	8013ad2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013ac4:	4b09      	ldr	r3, [pc, #36]	; (8013aec <udp_bind+0x10c>)
 8013ac6:	681a      	ldr	r2, [r3, #0]
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013acc:	4a07      	ldr	r2, [pc, #28]	; (8013aec <udp_bind+0x10c>)
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013ad2:	2300      	movs	r3, #0
}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	3718      	adds	r7, #24
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}
 8013adc:	0801aa68 	.word	0x0801aa68
 8013ae0:	08019f44 	.word	0x08019f44
 8013ae4:	0801a20c 	.word	0x0801a20c
 8013ae8:	08019f98 	.word	0x08019f98
 8013aec:	20009024 	.word	0x20009024

08013af0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b086      	sub	sp, #24
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	60f8      	str	r0, [r7, #12]
 8013af8:	60b9      	str	r1, [r7, #8]
 8013afa:	4613      	mov	r3, r2
 8013afc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d109      	bne.n	8013b18 <udp_connect+0x28>
 8013b04:	4b2c      	ldr	r3, [pc, #176]	; (8013bb8 <udp_connect+0xc8>)
 8013b06:	f240 4235 	movw	r2, #1077	; 0x435
 8013b0a:	492c      	ldr	r1, [pc, #176]	; (8013bbc <udp_connect+0xcc>)
 8013b0c:	482c      	ldr	r0, [pc, #176]	; (8013bc0 <udp_connect+0xd0>)
 8013b0e:	f003 fab5 	bl	801707c <iprintf>
 8013b12:	f06f 030f 	mvn.w	r3, #15
 8013b16:	e04b      	b.n	8013bb0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d109      	bne.n	8013b32 <udp_connect+0x42>
 8013b1e:	4b26      	ldr	r3, [pc, #152]	; (8013bb8 <udp_connect+0xc8>)
 8013b20:	f240 4236 	movw	r2, #1078	; 0x436
 8013b24:	4927      	ldr	r1, [pc, #156]	; (8013bc4 <udp_connect+0xd4>)
 8013b26:	4826      	ldr	r0, [pc, #152]	; (8013bc0 <udp_connect+0xd0>)
 8013b28:	f003 faa8 	bl	801707c <iprintf>
 8013b2c:	f06f 030f 	mvn.w	r3, #15
 8013b30:	e03e      	b.n	8013bb0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	8a5b      	ldrh	r3, [r3, #18]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d10f      	bne.n	8013b5a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013b3a:	68f9      	ldr	r1, [r7, #12]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	8a5b      	ldrh	r3, [r3, #18]
 8013b40:	461a      	mov	r2, r3
 8013b42:	68f8      	ldr	r0, [r7, #12]
 8013b44:	f7ff ff4c 	bl	80139e0 <udp_bind>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013b4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d002      	beq.n	8013b5a <udp_connect+0x6a>
      return err;
 8013b54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b58:	e02a      	b.n	8013bb0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d002      	beq.n	8013b66 <udp_connect+0x76>
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	e000      	b.n	8013b68 <udp_connect+0x78>
 8013b66:	2300      	movs	r3, #0
 8013b68:	68fa      	ldr	r2, [r7, #12]
 8013b6a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	88fa      	ldrh	r2, [r7, #6]
 8013b70:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	7c1b      	ldrb	r3, [r3, #16]
 8013b76:	f043 0304 	orr.w	r3, r3, #4
 8013b7a:	b2da      	uxtb	r2, r3
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b80:	4b11      	ldr	r3, [pc, #68]	; (8013bc8 <udp_connect+0xd8>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	617b      	str	r3, [r7, #20]
 8013b86:	e008      	b.n	8013b9a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013b88:	68fa      	ldr	r2, [r7, #12]
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d101      	bne.n	8013b94 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013b90:	2300      	movs	r3, #0
 8013b92:	e00d      	b.n	8013bb0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	68db      	ldr	r3, [r3, #12]
 8013b98:	617b      	str	r3, [r7, #20]
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d1f3      	bne.n	8013b88 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013ba0:	4b09      	ldr	r3, [pc, #36]	; (8013bc8 <udp_connect+0xd8>)
 8013ba2:	681a      	ldr	r2, [r3, #0]
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013ba8:	4a07      	ldr	r2, [pc, #28]	; (8013bc8 <udp_connect+0xd8>)
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013bae:	2300      	movs	r3, #0
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3718      	adds	r7, #24
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}
 8013bb8:	08019f44 	.word	0x08019f44
 8013bbc:	0801a224 	.word	0x0801a224
 8013bc0:	08019f98 	.word	0x08019f98
 8013bc4:	0801a240 	.word	0x0801a240
 8013bc8:	20009024 	.word	0x20009024

08013bcc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d107      	bne.n	8013bea <udp_disconnect+0x1e>
 8013bda:	4b0d      	ldr	r3, [pc, #52]	; (8013c10 <udp_disconnect+0x44>)
 8013bdc:	f240 426a 	movw	r2, #1130	; 0x46a
 8013be0:	490c      	ldr	r1, [pc, #48]	; (8013c14 <udp_disconnect+0x48>)
 8013be2:	480d      	ldr	r0, [pc, #52]	; (8013c18 <udp_disconnect+0x4c>)
 8013be4:	f003 fa4a 	bl	801707c <iprintf>
 8013be8:	e00f      	b.n	8013c0a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	2200      	movs	r2, #0
 8013bee:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	7c1b      	ldrb	r3, [r3, #16]
 8013c00:	f023 0304 	bic.w	r3, r3, #4
 8013c04:	b2da      	uxtb	r2, r3
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	741a      	strb	r2, [r3, #16]
}
 8013c0a:	3708      	adds	r7, #8
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}
 8013c10:	08019f44 	.word	0x08019f44
 8013c14:	0801a25c 	.word	0x0801a25c
 8013c18:	08019f98 	.word	0x08019f98

08013c1c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b084      	sub	sp, #16
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	60f8      	str	r0, [r7, #12]
 8013c24:	60b9      	str	r1, [r7, #8]
 8013c26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d107      	bne.n	8013c3e <udp_recv+0x22>
 8013c2e:	4b08      	ldr	r3, [pc, #32]	; (8013c50 <udp_recv+0x34>)
 8013c30:	f240 428a 	movw	r2, #1162	; 0x48a
 8013c34:	4907      	ldr	r1, [pc, #28]	; (8013c54 <udp_recv+0x38>)
 8013c36:	4808      	ldr	r0, [pc, #32]	; (8013c58 <udp_recv+0x3c>)
 8013c38:	f003 fa20 	bl	801707c <iprintf>
 8013c3c:	e005      	b.n	8013c4a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	68ba      	ldr	r2, [r7, #8]
 8013c42:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	687a      	ldr	r2, [r7, #4]
 8013c48:	61da      	str	r2, [r3, #28]
}
 8013c4a:	3710      	adds	r7, #16
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}
 8013c50:	08019f44 	.word	0x08019f44
 8013c54:	0801a278 	.word	0x0801a278
 8013c58:	08019f98 	.word	0x08019f98

08013c5c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b084      	sub	sp, #16
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d107      	bne.n	8013c7a <udp_remove+0x1e>
 8013c6a:	4b19      	ldr	r3, [pc, #100]	; (8013cd0 <udp_remove+0x74>)
 8013c6c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013c70:	4918      	ldr	r1, [pc, #96]	; (8013cd4 <udp_remove+0x78>)
 8013c72:	4819      	ldr	r0, [pc, #100]	; (8013cd8 <udp_remove+0x7c>)
 8013c74:	f003 fa02 	bl	801707c <iprintf>
 8013c78:	e026      	b.n	8013cc8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013c7a:	4b18      	ldr	r3, [pc, #96]	; (8013cdc <udp_remove+0x80>)
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	687a      	ldr	r2, [r7, #4]
 8013c80:	429a      	cmp	r2, r3
 8013c82:	d105      	bne.n	8013c90 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013c84:	4b15      	ldr	r3, [pc, #84]	; (8013cdc <udp_remove+0x80>)
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	68db      	ldr	r3, [r3, #12]
 8013c8a:	4a14      	ldr	r2, [pc, #80]	; (8013cdc <udp_remove+0x80>)
 8013c8c:	6013      	str	r3, [r2, #0]
 8013c8e:	e017      	b.n	8013cc0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013c90:	4b12      	ldr	r3, [pc, #72]	; (8013cdc <udp_remove+0x80>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	60fb      	str	r3, [r7, #12]
 8013c96:	e010      	b.n	8013cba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	68db      	ldr	r3, [r3, #12]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d009      	beq.n	8013cb4 <udp_remove+0x58>
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	68db      	ldr	r3, [r3, #12]
 8013ca4:	687a      	ldr	r2, [r7, #4]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d104      	bne.n	8013cb4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	68da      	ldr	r2, [r3, #12]
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	60da      	str	r2, [r3, #12]
        break;
 8013cb2:	e005      	b.n	8013cc0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	68db      	ldr	r3, [r3, #12]
 8013cb8:	60fb      	str	r3, [r7, #12]
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d1eb      	bne.n	8013c98 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013cc0:	6879      	ldr	r1, [r7, #4]
 8013cc2:	2000      	movs	r0, #0
 8013cc4:	f7f8 fe94 	bl	800c9f0 <memp_free>
}
 8013cc8:	3710      	adds	r7, #16
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}
 8013cce:	bf00      	nop
 8013cd0:	08019f44 	.word	0x08019f44
 8013cd4:	0801a290 	.word	0x0801a290
 8013cd8:	08019f98 	.word	0x08019f98
 8013cdc:	20009024 	.word	0x20009024

08013ce0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b082      	sub	sp, #8
 8013ce4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013ce6:	2000      	movs	r0, #0
 8013ce8:	f7f8 fe12 	bl	800c910 <memp_malloc>
 8013cec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d007      	beq.n	8013d04 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013cf4:	2220      	movs	r2, #32
 8013cf6:	2100      	movs	r1, #0
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f003 f8d7 	bl	8016eac <memset>
    pcb->ttl = UDP_TTL;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	22ff      	movs	r2, #255	; 0xff
 8013d02:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013d04:	687b      	ldr	r3, [r7, #4]
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3708      	adds	r7, #8
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}
	...

08013d10 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013d10:	b480      	push	{r7}
 8013d12:	b085      	sub	sp, #20
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	6078      	str	r0, [r7, #4]
 8013d18:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d01e      	beq.n	8013d5e <udp_netif_ip_addr_changed+0x4e>
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d01a      	beq.n	8013d5e <udp_netif_ip_addr_changed+0x4e>
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d017      	beq.n	8013d5e <udp_netif_ip_addr_changed+0x4e>
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d013      	beq.n	8013d5e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013d36:	4b0d      	ldr	r3, [pc, #52]	; (8013d6c <udp_netif_ip_addr_changed+0x5c>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	60fb      	str	r3, [r7, #12]
 8013d3c:	e00c      	b.n	8013d58 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	681a      	ldr	r2, [r3, #0]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	429a      	cmp	r2, r3
 8013d48:	d103      	bne.n	8013d52 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	681a      	ldr	r2, [r3, #0]
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	68db      	ldr	r3, [r3, #12]
 8013d56:	60fb      	str	r3, [r7, #12]
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d1ef      	bne.n	8013d3e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013d5e:	bf00      	nop
 8013d60:	3714      	adds	r7, #20
 8013d62:	46bd      	mov	sp, r7
 8013d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d68:	4770      	bx	lr
 8013d6a:	bf00      	nop
 8013d6c:	20009024 	.word	0x20009024

08013d70 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b082      	sub	sp, #8
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013d78:	4915      	ldr	r1, [pc, #84]	; (8013dd0 <etharp_free_entry+0x60>)
 8013d7a:	687a      	ldr	r2, [r7, #4]
 8013d7c:	4613      	mov	r3, r2
 8013d7e:	005b      	lsls	r3, r3, #1
 8013d80:	4413      	add	r3, r2
 8013d82:	00db      	lsls	r3, r3, #3
 8013d84:	440b      	add	r3, r1
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d013      	beq.n	8013db4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013d8c:	4910      	ldr	r1, [pc, #64]	; (8013dd0 <etharp_free_entry+0x60>)
 8013d8e:	687a      	ldr	r2, [r7, #4]
 8013d90:	4613      	mov	r3, r2
 8013d92:	005b      	lsls	r3, r3, #1
 8013d94:	4413      	add	r3, r2
 8013d96:	00db      	lsls	r3, r3, #3
 8013d98:	440b      	add	r3, r1
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7f9 fc9d 	bl	800d6dc <pbuf_free>
    arp_table[i].q = NULL;
 8013da2:	490b      	ldr	r1, [pc, #44]	; (8013dd0 <etharp_free_entry+0x60>)
 8013da4:	687a      	ldr	r2, [r7, #4]
 8013da6:	4613      	mov	r3, r2
 8013da8:	005b      	lsls	r3, r3, #1
 8013daa:	4413      	add	r3, r2
 8013dac:	00db      	lsls	r3, r3, #3
 8013dae:	440b      	add	r3, r1
 8013db0:	2200      	movs	r2, #0
 8013db2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013db4:	4906      	ldr	r1, [pc, #24]	; (8013dd0 <etharp_free_entry+0x60>)
 8013db6:	687a      	ldr	r2, [r7, #4]
 8013db8:	4613      	mov	r3, r2
 8013dba:	005b      	lsls	r3, r3, #1
 8013dbc:	4413      	add	r3, r2
 8013dbe:	00db      	lsls	r3, r3, #3
 8013dc0:	440b      	add	r3, r1
 8013dc2:	3314      	adds	r3, #20
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013dc8:	bf00      	nop
 8013dca:	3708      	adds	r7, #8
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}
 8013dd0:	20009028 	.word	0x20009028

08013dd4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b082      	sub	sp, #8
 8013dd8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013dda:	2300      	movs	r3, #0
 8013ddc:	607b      	str	r3, [r7, #4]
 8013dde:	e096      	b.n	8013f0e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013de0:	494f      	ldr	r1, [pc, #316]	; (8013f20 <etharp_tmr+0x14c>)
 8013de2:	687a      	ldr	r2, [r7, #4]
 8013de4:	4613      	mov	r3, r2
 8013de6:	005b      	lsls	r3, r3, #1
 8013de8:	4413      	add	r3, r2
 8013dea:	00db      	lsls	r3, r3, #3
 8013dec:	440b      	add	r3, r1
 8013dee:	3314      	adds	r3, #20
 8013df0:	781b      	ldrb	r3, [r3, #0]
 8013df2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013df4:	78fb      	ldrb	r3, [r7, #3]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	f000 8086 	beq.w	8013f08 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013dfc:	4948      	ldr	r1, [pc, #288]	; (8013f20 <etharp_tmr+0x14c>)
 8013dfe:	687a      	ldr	r2, [r7, #4]
 8013e00:	4613      	mov	r3, r2
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	4413      	add	r3, r2
 8013e06:	00db      	lsls	r3, r3, #3
 8013e08:	440b      	add	r3, r1
 8013e0a:	3312      	adds	r3, #18
 8013e0c:	881b      	ldrh	r3, [r3, #0]
 8013e0e:	3301      	adds	r3, #1
 8013e10:	b298      	uxth	r0, r3
 8013e12:	4943      	ldr	r1, [pc, #268]	; (8013f20 <etharp_tmr+0x14c>)
 8013e14:	687a      	ldr	r2, [r7, #4]
 8013e16:	4613      	mov	r3, r2
 8013e18:	005b      	lsls	r3, r3, #1
 8013e1a:	4413      	add	r3, r2
 8013e1c:	00db      	lsls	r3, r3, #3
 8013e1e:	440b      	add	r3, r1
 8013e20:	3312      	adds	r3, #18
 8013e22:	4602      	mov	r2, r0
 8013e24:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013e26:	493e      	ldr	r1, [pc, #248]	; (8013f20 <etharp_tmr+0x14c>)
 8013e28:	687a      	ldr	r2, [r7, #4]
 8013e2a:	4613      	mov	r3, r2
 8013e2c:	005b      	lsls	r3, r3, #1
 8013e2e:	4413      	add	r3, r2
 8013e30:	00db      	lsls	r3, r3, #3
 8013e32:	440b      	add	r3, r1
 8013e34:	3312      	adds	r3, #18
 8013e36:	881b      	ldrh	r3, [r3, #0]
 8013e38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013e3c:	d215      	bcs.n	8013e6a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013e3e:	4938      	ldr	r1, [pc, #224]	; (8013f20 <etharp_tmr+0x14c>)
 8013e40:	687a      	ldr	r2, [r7, #4]
 8013e42:	4613      	mov	r3, r2
 8013e44:	005b      	lsls	r3, r3, #1
 8013e46:	4413      	add	r3, r2
 8013e48:	00db      	lsls	r3, r3, #3
 8013e4a:	440b      	add	r3, r1
 8013e4c:	3314      	adds	r3, #20
 8013e4e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013e50:	2b01      	cmp	r3, #1
 8013e52:	d10e      	bne.n	8013e72 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013e54:	4932      	ldr	r1, [pc, #200]	; (8013f20 <etharp_tmr+0x14c>)
 8013e56:	687a      	ldr	r2, [r7, #4]
 8013e58:	4613      	mov	r3, r2
 8013e5a:	005b      	lsls	r3, r3, #1
 8013e5c:	4413      	add	r3, r2
 8013e5e:	00db      	lsls	r3, r3, #3
 8013e60:	440b      	add	r3, r1
 8013e62:	3312      	adds	r3, #18
 8013e64:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013e66:	2b04      	cmp	r3, #4
 8013e68:	d903      	bls.n	8013e72 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f7ff ff80 	bl	8013d70 <etharp_free_entry>
 8013e70:	e04a      	b.n	8013f08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013e72:	492b      	ldr	r1, [pc, #172]	; (8013f20 <etharp_tmr+0x14c>)
 8013e74:	687a      	ldr	r2, [r7, #4]
 8013e76:	4613      	mov	r3, r2
 8013e78:	005b      	lsls	r3, r3, #1
 8013e7a:	4413      	add	r3, r2
 8013e7c:	00db      	lsls	r3, r3, #3
 8013e7e:	440b      	add	r3, r1
 8013e80:	3314      	adds	r3, #20
 8013e82:	781b      	ldrb	r3, [r3, #0]
 8013e84:	2b03      	cmp	r3, #3
 8013e86:	d10a      	bne.n	8013e9e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013e88:	4925      	ldr	r1, [pc, #148]	; (8013f20 <etharp_tmr+0x14c>)
 8013e8a:	687a      	ldr	r2, [r7, #4]
 8013e8c:	4613      	mov	r3, r2
 8013e8e:	005b      	lsls	r3, r3, #1
 8013e90:	4413      	add	r3, r2
 8013e92:	00db      	lsls	r3, r3, #3
 8013e94:	440b      	add	r3, r1
 8013e96:	3314      	adds	r3, #20
 8013e98:	2204      	movs	r2, #4
 8013e9a:	701a      	strb	r2, [r3, #0]
 8013e9c:	e034      	b.n	8013f08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013e9e:	4920      	ldr	r1, [pc, #128]	; (8013f20 <etharp_tmr+0x14c>)
 8013ea0:	687a      	ldr	r2, [r7, #4]
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	005b      	lsls	r3, r3, #1
 8013ea6:	4413      	add	r3, r2
 8013ea8:	00db      	lsls	r3, r3, #3
 8013eaa:	440b      	add	r3, r1
 8013eac:	3314      	adds	r3, #20
 8013eae:	781b      	ldrb	r3, [r3, #0]
 8013eb0:	2b04      	cmp	r3, #4
 8013eb2:	d10a      	bne.n	8013eca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013eb4:	491a      	ldr	r1, [pc, #104]	; (8013f20 <etharp_tmr+0x14c>)
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	4613      	mov	r3, r2
 8013eba:	005b      	lsls	r3, r3, #1
 8013ebc:	4413      	add	r3, r2
 8013ebe:	00db      	lsls	r3, r3, #3
 8013ec0:	440b      	add	r3, r1
 8013ec2:	3314      	adds	r3, #20
 8013ec4:	2202      	movs	r2, #2
 8013ec6:	701a      	strb	r2, [r3, #0]
 8013ec8:	e01e      	b.n	8013f08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013eca:	4915      	ldr	r1, [pc, #84]	; (8013f20 <etharp_tmr+0x14c>)
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	4613      	mov	r3, r2
 8013ed0:	005b      	lsls	r3, r3, #1
 8013ed2:	4413      	add	r3, r2
 8013ed4:	00db      	lsls	r3, r3, #3
 8013ed6:	440b      	add	r3, r1
 8013ed8:	3314      	adds	r3, #20
 8013eda:	781b      	ldrb	r3, [r3, #0]
 8013edc:	2b01      	cmp	r3, #1
 8013ede:	d113      	bne.n	8013f08 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013ee0:	490f      	ldr	r1, [pc, #60]	; (8013f20 <etharp_tmr+0x14c>)
 8013ee2:	687a      	ldr	r2, [r7, #4]
 8013ee4:	4613      	mov	r3, r2
 8013ee6:	005b      	lsls	r3, r3, #1
 8013ee8:	4413      	add	r3, r2
 8013eea:	00db      	lsls	r3, r3, #3
 8013eec:	440b      	add	r3, r1
 8013eee:	3308      	adds	r3, #8
 8013ef0:	6818      	ldr	r0, [r3, #0]
 8013ef2:	687a      	ldr	r2, [r7, #4]
 8013ef4:	4613      	mov	r3, r2
 8013ef6:	005b      	lsls	r3, r3, #1
 8013ef8:	4413      	add	r3, r2
 8013efa:	00db      	lsls	r3, r3, #3
 8013efc:	4a08      	ldr	r2, [pc, #32]	; (8013f20 <etharp_tmr+0x14c>)
 8013efe:	4413      	add	r3, r2
 8013f00:	3304      	adds	r3, #4
 8013f02:	4619      	mov	r1, r3
 8013f04:	f000 fe6e 	bl	8014be4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	3301      	adds	r3, #1
 8013f0c:	607b      	str	r3, [r7, #4]
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	2b09      	cmp	r3, #9
 8013f12:	f77f af65 	ble.w	8013de0 <etharp_tmr+0xc>
      }
    }
  }
}
 8013f16:	bf00      	nop
 8013f18:	bf00      	nop
 8013f1a:	3708      	adds	r7, #8
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	20009028 	.word	0x20009028

08013f24 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b08a      	sub	sp, #40	; 0x28
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	60f8      	str	r0, [r7, #12]
 8013f2c:	460b      	mov	r3, r1
 8013f2e:	607a      	str	r2, [r7, #4]
 8013f30:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013f32:	230a      	movs	r3, #10
 8013f34:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013f36:	230a      	movs	r3, #10
 8013f38:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013f3a:	230a      	movs	r3, #10
 8013f3c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013f3e:	2300      	movs	r3, #0
 8013f40:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013f42:	230a      	movs	r3, #10
 8013f44:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013f46:	2300      	movs	r3, #0
 8013f48:	83bb      	strh	r3, [r7, #28]
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	837b      	strh	r3, [r7, #26]
 8013f4e:	2300      	movs	r3, #0
 8013f50:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013f52:	2300      	movs	r3, #0
 8013f54:	843b      	strh	r3, [r7, #32]
 8013f56:	e0ae      	b.n	80140b6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013f58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f5c:	49a6      	ldr	r1, [pc, #664]	; (80141f8 <etharp_find_entry+0x2d4>)
 8013f5e:	4613      	mov	r3, r2
 8013f60:	005b      	lsls	r3, r3, #1
 8013f62:	4413      	add	r3, r2
 8013f64:	00db      	lsls	r3, r3, #3
 8013f66:	440b      	add	r3, r1
 8013f68:	3314      	adds	r3, #20
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013f6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013f72:	2b0a      	cmp	r3, #10
 8013f74:	d105      	bne.n	8013f82 <etharp_find_entry+0x5e>
 8013f76:	7dfb      	ldrb	r3, [r7, #23]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d102      	bne.n	8013f82 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013f7c:	8c3b      	ldrh	r3, [r7, #32]
 8013f7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8013f80:	e095      	b.n	80140ae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013f82:	7dfb      	ldrb	r3, [r7, #23]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	f000 8092 	beq.w	80140ae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013f8a:	7dfb      	ldrb	r3, [r7, #23]
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d009      	beq.n	8013fa4 <etharp_find_entry+0x80>
 8013f90:	7dfb      	ldrb	r3, [r7, #23]
 8013f92:	2b01      	cmp	r3, #1
 8013f94:	d806      	bhi.n	8013fa4 <etharp_find_entry+0x80>
 8013f96:	4b99      	ldr	r3, [pc, #612]	; (80141fc <etharp_find_entry+0x2d8>)
 8013f98:	f240 1223 	movw	r2, #291	; 0x123
 8013f9c:	4998      	ldr	r1, [pc, #608]	; (8014200 <etharp_find_entry+0x2dc>)
 8013f9e:	4899      	ldr	r0, [pc, #612]	; (8014204 <etharp_find_entry+0x2e0>)
 8013fa0:	f003 f86c 	bl	801707c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d020      	beq.n	8013fec <etharp_find_entry+0xc8>
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	6819      	ldr	r1, [r3, #0]
 8013fae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fb2:	4891      	ldr	r0, [pc, #580]	; (80141f8 <etharp_find_entry+0x2d4>)
 8013fb4:	4613      	mov	r3, r2
 8013fb6:	005b      	lsls	r3, r3, #1
 8013fb8:	4413      	add	r3, r2
 8013fba:	00db      	lsls	r3, r3, #3
 8013fbc:	4403      	add	r3, r0
 8013fbe:	3304      	adds	r3, #4
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	4299      	cmp	r1, r3
 8013fc4:	d112      	bne.n	8013fec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d00c      	beq.n	8013fe6 <etharp_find_entry+0xc2>
 8013fcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fd0:	4989      	ldr	r1, [pc, #548]	; (80141f8 <etharp_find_entry+0x2d4>)
 8013fd2:	4613      	mov	r3, r2
 8013fd4:	005b      	lsls	r3, r3, #1
 8013fd6:	4413      	add	r3, r2
 8013fd8:	00db      	lsls	r3, r3, #3
 8013fda:	440b      	add	r3, r1
 8013fdc:	3308      	adds	r3, #8
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	687a      	ldr	r2, [r7, #4]
 8013fe2:	429a      	cmp	r2, r3
 8013fe4:	d102      	bne.n	8013fec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013fe6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013fea:	e100      	b.n	80141ee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013fec:	7dfb      	ldrb	r3, [r7, #23]
 8013fee:	2b01      	cmp	r3, #1
 8013ff0:	d140      	bne.n	8014074 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013ff2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ff6:	4980      	ldr	r1, [pc, #512]	; (80141f8 <etharp_find_entry+0x2d4>)
 8013ff8:	4613      	mov	r3, r2
 8013ffa:	005b      	lsls	r3, r3, #1
 8013ffc:	4413      	add	r3, r2
 8013ffe:	00db      	lsls	r3, r3, #3
 8014000:	440b      	add	r3, r1
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d01a      	beq.n	801403e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014008:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801400c:	497a      	ldr	r1, [pc, #488]	; (80141f8 <etharp_find_entry+0x2d4>)
 801400e:	4613      	mov	r3, r2
 8014010:	005b      	lsls	r3, r3, #1
 8014012:	4413      	add	r3, r2
 8014014:	00db      	lsls	r3, r3, #3
 8014016:	440b      	add	r3, r1
 8014018:	3312      	adds	r3, #18
 801401a:	881b      	ldrh	r3, [r3, #0]
 801401c:	8bba      	ldrh	r2, [r7, #28]
 801401e:	429a      	cmp	r2, r3
 8014020:	d845      	bhi.n	80140ae <etharp_find_entry+0x18a>
            old_queue = i;
 8014022:	8c3b      	ldrh	r3, [r7, #32]
 8014024:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014026:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801402a:	4973      	ldr	r1, [pc, #460]	; (80141f8 <etharp_find_entry+0x2d4>)
 801402c:	4613      	mov	r3, r2
 801402e:	005b      	lsls	r3, r3, #1
 8014030:	4413      	add	r3, r2
 8014032:	00db      	lsls	r3, r3, #3
 8014034:	440b      	add	r3, r1
 8014036:	3312      	adds	r3, #18
 8014038:	881b      	ldrh	r3, [r3, #0]
 801403a:	83bb      	strh	r3, [r7, #28]
 801403c:	e037      	b.n	80140ae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801403e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014042:	496d      	ldr	r1, [pc, #436]	; (80141f8 <etharp_find_entry+0x2d4>)
 8014044:	4613      	mov	r3, r2
 8014046:	005b      	lsls	r3, r3, #1
 8014048:	4413      	add	r3, r2
 801404a:	00db      	lsls	r3, r3, #3
 801404c:	440b      	add	r3, r1
 801404e:	3312      	adds	r3, #18
 8014050:	881b      	ldrh	r3, [r3, #0]
 8014052:	8b7a      	ldrh	r2, [r7, #26]
 8014054:	429a      	cmp	r2, r3
 8014056:	d82a      	bhi.n	80140ae <etharp_find_entry+0x18a>
            old_pending = i;
 8014058:	8c3b      	ldrh	r3, [r7, #32]
 801405a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801405c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014060:	4965      	ldr	r1, [pc, #404]	; (80141f8 <etharp_find_entry+0x2d4>)
 8014062:	4613      	mov	r3, r2
 8014064:	005b      	lsls	r3, r3, #1
 8014066:	4413      	add	r3, r2
 8014068:	00db      	lsls	r3, r3, #3
 801406a:	440b      	add	r3, r1
 801406c:	3312      	adds	r3, #18
 801406e:	881b      	ldrh	r3, [r3, #0]
 8014070:	837b      	strh	r3, [r7, #26]
 8014072:	e01c      	b.n	80140ae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014074:	7dfb      	ldrb	r3, [r7, #23]
 8014076:	2b01      	cmp	r3, #1
 8014078:	d919      	bls.n	80140ae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801407a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801407e:	495e      	ldr	r1, [pc, #376]	; (80141f8 <etharp_find_entry+0x2d4>)
 8014080:	4613      	mov	r3, r2
 8014082:	005b      	lsls	r3, r3, #1
 8014084:	4413      	add	r3, r2
 8014086:	00db      	lsls	r3, r3, #3
 8014088:	440b      	add	r3, r1
 801408a:	3312      	adds	r3, #18
 801408c:	881b      	ldrh	r3, [r3, #0]
 801408e:	8b3a      	ldrh	r2, [r7, #24]
 8014090:	429a      	cmp	r2, r3
 8014092:	d80c      	bhi.n	80140ae <etharp_find_entry+0x18a>
            old_stable = i;
 8014094:	8c3b      	ldrh	r3, [r7, #32]
 8014096:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014098:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801409c:	4956      	ldr	r1, [pc, #344]	; (80141f8 <etharp_find_entry+0x2d4>)
 801409e:	4613      	mov	r3, r2
 80140a0:	005b      	lsls	r3, r3, #1
 80140a2:	4413      	add	r3, r2
 80140a4:	00db      	lsls	r3, r3, #3
 80140a6:	440b      	add	r3, r1
 80140a8:	3312      	adds	r3, #18
 80140aa:	881b      	ldrh	r3, [r3, #0]
 80140ac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140ae:	8c3b      	ldrh	r3, [r7, #32]
 80140b0:	3301      	adds	r3, #1
 80140b2:	b29b      	uxth	r3, r3
 80140b4:	843b      	strh	r3, [r7, #32]
 80140b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140ba:	2b09      	cmp	r3, #9
 80140bc:	f77f af4c 	ble.w	8013f58 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80140c0:	7afb      	ldrb	r3, [r7, #11]
 80140c2:	f003 0302 	and.w	r3, r3, #2
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d108      	bne.n	80140dc <etharp_find_entry+0x1b8>
 80140ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80140ce:	2b0a      	cmp	r3, #10
 80140d0:	d107      	bne.n	80140e2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80140d2:	7afb      	ldrb	r3, [r7, #11]
 80140d4:	f003 0301 	and.w	r3, r3, #1
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d102      	bne.n	80140e2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80140dc:	f04f 33ff 	mov.w	r3, #4294967295
 80140e0:	e085      	b.n	80141ee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80140e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80140e6:	2b09      	cmp	r3, #9
 80140e8:	dc02      	bgt.n	80140f0 <etharp_find_entry+0x1cc>
    i = empty;
 80140ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140ec:	843b      	strh	r3, [r7, #32]
 80140ee:	e039      	b.n	8014164 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80140f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80140f4:	2b09      	cmp	r3, #9
 80140f6:	dc14      	bgt.n	8014122 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80140f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80140fa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80140fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014100:	493d      	ldr	r1, [pc, #244]	; (80141f8 <etharp_find_entry+0x2d4>)
 8014102:	4613      	mov	r3, r2
 8014104:	005b      	lsls	r3, r3, #1
 8014106:	4413      	add	r3, r2
 8014108:	00db      	lsls	r3, r3, #3
 801410a:	440b      	add	r3, r1
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d018      	beq.n	8014144 <etharp_find_entry+0x220>
 8014112:	4b3a      	ldr	r3, [pc, #232]	; (80141fc <etharp_find_entry+0x2d8>)
 8014114:	f240 126d 	movw	r2, #365	; 0x16d
 8014118:	493b      	ldr	r1, [pc, #236]	; (8014208 <etharp_find_entry+0x2e4>)
 801411a:	483a      	ldr	r0, [pc, #232]	; (8014204 <etharp_find_entry+0x2e0>)
 801411c:	f002 ffae 	bl	801707c <iprintf>
 8014120:	e010      	b.n	8014144 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014122:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014126:	2b09      	cmp	r3, #9
 8014128:	dc02      	bgt.n	8014130 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801412a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801412c:	843b      	strh	r3, [r7, #32]
 801412e:	e009      	b.n	8014144 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014130:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014134:	2b09      	cmp	r3, #9
 8014136:	dc02      	bgt.n	801413e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014138:	8bfb      	ldrh	r3, [r7, #30]
 801413a:	843b      	strh	r3, [r7, #32]
 801413c:	e002      	b.n	8014144 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801413e:	f04f 33ff 	mov.w	r3, #4294967295
 8014142:	e054      	b.n	80141ee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014144:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014148:	2b09      	cmp	r3, #9
 801414a:	dd06      	ble.n	801415a <etharp_find_entry+0x236>
 801414c:	4b2b      	ldr	r3, [pc, #172]	; (80141fc <etharp_find_entry+0x2d8>)
 801414e:	f240 127f 	movw	r2, #383	; 0x17f
 8014152:	492e      	ldr	r1, [pc, #184]	; (801420c <etharp_find_entry+0x2e8>)
 8014154:	482b      	ldr	r0, [pc, #172]	; (8014204 <etharp_find_entry+0x2e0>)
 8014156:	f002 ff91 	bl	801707c <iprintf>
    etharp_free_entry(i);
 801415a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801415e:	4618      	mov	r0, r3
 8014160:	f7ff fe06 	bl	8013d70 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014164:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014168:	2b09      	cmp	r3, #9
 801416a:	dd06      	ble.n	801417a <etharp_find_entry+0x256>
 801416c:	4b23      	ldr	r3, [pc, #140]	; (80141fc <etharp_find_entry+0x2d8>)
 801416e:	f240 1283 	movw	r2, #387	; 0x183
 8014172:	4926      	ldr	r1, [pc, #152]	; (801420c <etharp_find_entry+0x2e8>)
 8014174:	4823      	ldr	r0, [pc, #140]	; (8014204 <etharp_find_entry+0x2e0>)
 8014176:	f002 ff81 	bl	801707c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801417a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801417e:	491e      	ldr	r1, [pc, #120]	; (80141f8 <etharp_find_entry+0x2d4>)
 8014180:	4613      	mov	r3, r2
 8014182:	005b      	lsls	r3, r3, #1
 8014184:	4413      	add	r3, r2
 8014186:	00db      	lsls	r3, r3, #3
 8014188:	440b      	add	r3, r1
 801418a:	3314      	adds	r3, #20
 801418c:	781b      	ldrb	r3, [r3, #0]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d006      	beq.n	80141a0 <etharp_find_entry+0x27c>
 8014192:	4b1a      	ldr	r3, [pc, #104]	; (80141fc <etharp_find_entry+0x2d8>)
 8014194:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014198:	491d      	ldr	r1, [pc, #116]	; (8014210 <etharp_find_entry+0x2ec>)
 801419a:	481a      	ldr	r0, [pc, #104]	; (8014204 <etharp_find_entry+0x2e0>)
 801419c:	f002 ff6e 	bl	801707c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d00b      	beq.n	80141be <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80141a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	6819      	ldr	r1, [r3, #0]
 80141ae:	4812      	ldr	r0, [pc, #72]	; (80141f8 <etharp_find_entry+0x2d4>)
 80141b0:	4613      	mov	r3, r2
 80141b2:	005b      	lsls	r3, r3, #1
 80141b4:	4413      	add	r3, r2
 80141b6:	00db      	lsls	r3, r3, #3
 80141b8:	4403      	add	r3, r0
 80141ba:	3304      	adds	r3, #4
 80141bc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80141be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141c2:	490d      	ldr	r1, [pc, #52]	; (80141f8 <etharp_find_entry+0x2d4>)
 80141c4:	4613      	mov	r3, r2
 80141c6:	005b      	lsls	r3, r3, #1
 80141c8:	4413      	add	r3, r2
 80141ca:	00db      	lsls	r3, r3, #3
 80141cc:	440b      	add	r3, r1
 80141ce:	3312      	adds	r3, #18
 80141d0:	2200      	movs	r2, #0
 80141d2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80141d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141d8:	4907      	ldr	r1, [pc, #28]	; (80141f8 <etharp_find_entry+0x2d4>)
 80141da:	4613      	mov	r3, r2
 80141dc:	005b      	lsls	r3, r3, #1
 80141de:	4413      	add	r3, r2
 80141e0:	00db      	lsls	r3, r3, #3
 80141e2:	440b      	add	r3, r1
 80141e4:	3308      	adds	r3, #8
 80141e6:	687a      	ldr	r2, [r7, #4]
 80141e8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80141ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3728      	adds	r7, #40	; 0x28
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}
 80141f6:	bf00      	nop
 80141f8:	20009028 	.word	0x20009028
 80141fc:	0801a2a8 	.word	0x0801a2a8
 8014200:	0801a2e0 	.word	0x0801a2e0
 8014204:	0801a320 	.word	0x0801a320
 8014208:	0801a348 	.word	0x0801a348
 801420c:	0801a360 	.word	0x0801a360
 8014210:	0801a374 	.word	0x0801a374

08014214 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b088      	sub	sp, #32
 8014218:	af02      	add	r7, sp, #8
 801421a:	60f8      	str	r0, [r7, #12]
 801421c:	60b9      	str	r1, [r7, #8]
 801421e:	607a      	str	r2, [r7, #4]
 8014220:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014228:	2b06      	cmp	r3, #6
 801422a:	d006      	beq.n	801423a <etharp_update_arp_entry+0x26>
 801422c:	4b48      	ldr	r3, [pc, #288]	; (8014350 <etharp_update_arp_entry+0x13c>)
 801422e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014232:	4948      	ldr	r1, [pc, #288]	; (8014354 <etharp_update_arp_entry+0x140>)
 8014234:	4848      	ldr	r0, [pc, #288]	; (8014358 <etharp_update_arp_entry+0x144>)
 8014236:	f002 ff21 	bl	801707c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801423a:	68bb      	ldr	r3, [r7, #8]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d012      	beq.n	8014266 <etharp_update_arp_entry+0x52>
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d00e      	beq.n	8014266 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014248:	68bb      	ldr	r3, [r7, #8]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	68f9      	ldr	r1, [r7, #12]
 801424e:	4618      	mov	r0, r3
 8014250:	f001 f8fe 	bl	8015450 <ip4_addr_isbroadcast_u32>
 8014254:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014256:	2b00      	cmp	r3, #0
 8014258:	d105      	bne.n	8014266 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014262:	2be0      	cmp	r3, #224	; 0xe0
 8014264:	d102      	bne.n	801426c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014266:	f06f 030f 	mvn.w	r3, #15
 801426a:	e06c      	b.n	8014346 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801426c:	78fb      	ldrb	r3, [r7, #3]
 801426e:	68fa      	ldr	r2, [r7, #12]
 8014270:	4619      	mov	r1, r3
 8014272:	68b8      	ldr	r0, [r7, #8]
 8014274:	f7ff fe56 	bl	8013f24 <etharp_find_entry>
 8014278:	4603      	mov	r3, r0
 801427a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801427c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014280:	2b00      	cmp	r3, #0
 8014282:	da02      	bge.n	801428a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014284:	8afb      	ldrh	r3, [r7, #22]
 8014286:	b25b      	sxtb	r3, r3
 8014288:	e05d      	b.n	8014346 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801428a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801428e:	4933      	ldr	r1, [pc, #204]	; (801435c <etharp_update_arp_entry+0x148>)
 8014290:	4613      	mov	r3, r2
 8014292:	005b      	lsls	r3, r3, #1
 8014294:	4413      	add	r3, r2
 8014296:	00db      	lsls	r3, r3, #3
 8014298:	440b      	add	r3, r1
 801429a:	3314      	adds	r3, #20
 801429c:	2202      	movs	r2, #2
 801429e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80142a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80142a4:	492d      	ldr	r1, [pc, #180]	; (801435c <etharp_update_arp_entry+0x148>)
 80142a6:	4613      	mov	r3, r2
 80142a8:	005b      	lsls	r3, r3, #1
 80142aa:	4413      	add	r3, r2
 80142ac:	00db      	lsls	r3, r3, #3
 80142ae:	440b      	add	r3, r1
 80142b0:	3308      	adds	r3, #8
 80142b2:	68fa      	ldr	r2, [r7, #12]
 80142b4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80142b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80142ba:	4613      	mov	r3, r2
 80142bc:	005b      	lsls	r3, r3, #1
 80142be:	4413      	add	r3, r2
 80142c0:	00db      	lsls	r3, r3, #3
 80142c2:	3308      	adds	r3, #8
 80142c4:	4a25      	ldr	r2, [pc, #148]	; (801435c <etharp_update_arp_entry+0x148>)
 80142c6:	4413      	add	r3, r2
 80142c8:	3304      	adds	r3, #4
 80142ca:	2206      	movs	r2, #6
 80142cc:	6879      	ldr	r1, [r7, #4]
 80142ce:	4618      	mov	r0, r3
 80142d0:	f002 fdde 	bl	8016e90 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80142d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80142d8:	4920      	ldr	r1, [pc, #128]	; (801435c <etharp_update_arp_entry+0x148>)
 80142da:	4613      	mov	r3, r2
 80142dc:	005b      	lsls	r3, r3, #1
 80142de:	4413      	add	r3, r2
 80142e0:	00db      	lsls	r3, r3, #3
 80142e2:	440b      	add	r3, r1
 80142e4:	3312      	adds	r3, #18
 80142e6:	2200      	movs	r2, #0
 80142e8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80142ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80142ee:	491b      	ldr	r1, [pc, #108]	; (801435c <etharp_update_arp_entry+0x148>)
 80142f0:	4613      	mov	r3, r2
 80142f2:	005b      	lsls	r3, r3, #1
 80142f4:	4413      	add	r3, r2
 80142f6:	00db      	lsls	r3, r3, #3
 80142f8:	440b      	add	r3, r1
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d021      	beq.n	8014344 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014300:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014304:	4915      	ldr	r1, [pc, #84]	; (801435c <etharp_update_arp_entry+0x148>)
 8014306:	4613      	mov	r3, r2
 8014308:	005b      	lsls	r3, r3, #1
 801430a:	4413      	add	r3, r2
 801430c:	00db      	lsls	r3, r3, #3
 801430e:	440b      	add	r3, r1
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014314:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014318:	4910      	ldr	r1, [pc, #64]	; (801435c <etharp_update_arp_entry+0x148>)
 801431a:	4613      	mov	r3, r2
 801431c:	005b      	lsls	r3, r3, #1
 801431e:	4413      	add	r3, r2
 8014320:	00db      	lsls	r3, r3, #3
 8014322:	440b      	add	r3, r1
 8014324:	2200      	movs	r2, #0
 8014326:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801432e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014332:	9300      	str	r3, [sp, #0]
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6939      	ldr	r1, [r7, #16]
 8014338:	68f8      	ldr	r0, [r7, #12]
 801433a:	f001 ff97 	bl	801626c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801433e:	6938      	ldr	r0, [r7, #16]
 8014340:	f7f9 f9cc 	bl	800d6dc <pbuf_free>
  }
  return ERR_OK;
 8014344:	2300      	movs	r3, #0
}
 8014346:	4618      	mov	r0, r3
 8014348:	3718      	adds	r7, #24
 801434a:	46bd      	mov	sp, r7
 801434c:	bd80      	pop	{r7, pc}
 801434e:	bf00      	nop
 8014350:	0801a2a8 	.word	0x0801a2a8
 8014354:	0801a3a0 	.word	0x0801a3a0
 8014358:	0801a320 	.word	0x0801a320
 801435c:	20009028 	.word	0x20009028

08014360 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b084      	sub	sp, #16
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014368:	2300      	movs	r3, #0
 801436a:	60fb      	str	r3, [r7, #12]
 801436c:	e01e      	b.n	80143ac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801436e:	4913      	ldr	r1, [pc, #76]	; (80143bc <etharp_cleanup_netif+0x5c>)
 8014370:	68fa      	ldr	r2, [r7, #12]
 8014372:	4613      	mov	r3, r2
 8014374:	005b      	lsls	r3, r3, #1
 8014376:	4413      	add	r3, r2
 8014378:	00db      	lsls	r3, r3, #3
 801437a:	440b      	add	r3, r1
 801437c:	3314      	adds	r3, #20
 801437e:	781b      	ldrb	r3, [r3, #0]
 8014380:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014382:	7afb      	ldrb	r3, [r7, #11]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d00e      	beq.n	80143a6 <etharp_cleanup_netif+0x46>
 8014388:	490c      	ldr	r1, [pc, #48]	; (80143bc <etharp_cleanup_netif+0x5c>)
 801438a:	68fa      	ldr	r2, [r7, #12]
 801438c:	4613      	mov	r3, r2
 801438e:	005b      	lsls	r3, r3, #1
 8014390:	4413      	add	r3, r2
 8014392:	00db      	lsls	r3, r3, #3
 8014394:	440b      	add	r3, r1
 8014396:	3308      	adds	r3, #8
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	687a      	ldr	r2, [r7, #4]
 801439c:	429a      	cmp	r2, r3
 801439e:	d102      	bne.n	80143a6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80143a0:	68f8      	ldr	r0, [r7, #12]
 80143a2:	f7ff fce5 	bl	8013d70 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	3301      	adds	r3, #1
 80143aa:	60fb      	str	r3, [r7, #12]
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	2b09      	cmp	r3, #9
 80143b0:	dddd      	ble.n	801436e <etharp_cleanup_netif+0xe>
    }
  }
}
 80143b2:	bf00      	nop
 80143b4:	bf00      	nop
 80143b6:	3710      	adds	r7, #16
 80143b8:	46bd      	mov	sp, r7
 80143ba:	bd80      	pop	{r7, pc}
 80143bc:	20009028 	.word	0x20009028

080143c0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80143c0:	b5b0      	push	{r4, r5, r7, lr}
 80143c2:	b08a      	sub	sp, #40	; 0x28
 80143c4:	af04      	add	r7, sp, #16
 80143c6:	6078      	str	r0, [r7, #4]
 80143c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80143ca:	683b      	ldr	r3, [r7, #0]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d107      	bne.n	80143e0 <etharp_input+0x20>
 80143d0:	4b3d      	ldr	r3, [pc, #244]	; (80144c8 <etharp_input+0x108>)
 80143d2:	f240 228a 	movw	r2, #650	; 0x28a
 80143d6:	493d      	ldr	r1, [pc, #244]	; (80144cc <etharp_input+0x10c>)
 80143d8:	483d      	ldr	r0, [pc, #244]	; (80144d0 <etharp_input+0x110>)
 80143da:	f002 fe4f 	bl	801707c <iprintf>
 80143de:	e06f      	b.n	80144c0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	685b      	ldr	r3, [r3, #4]
 80143e4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80143e6:	693b      	ldr	r3, [r7, #16]
 80143e8:	881b      	ldrh	r3, [r3, #0]
 80143ea:	b29b      	uxth	r3, r3
 80143ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80143f0:	d10c      	bne.n	801440c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80143f6:	2b06      	cmp	r3, #6
 80143f8:	d108      	bne.n	801440c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80143fa:	693b      	ldr	r3, [r7, #16]
 80143fc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80143fe:	2b04      	cmp	r3, #4
 8014400:	d104      	bne.n	801440c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014402:	693b      	ldr	r3, [r7, #16]
 8014404:	885b      	ldrh	r3, [r3, #2]
 8014406:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014408:	2b08      	cmp	r3, #8
 801440a:	d003      	beq.n	8014414 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f7f9 f965 	bl	800d6dc <pbuf_free>
    return;
 8014412:	e055      	b.n	80144c0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014414:	693b      	ldr	r3, [r7, #16]
 8014416:	330e      	adds	r3, #14
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	3318      	adds	r3, #24
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	3304      	adds	r3, #4
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d102      	bne.n	8014434 <etharp_input+0x74>
    for_us = 0;
 801442e:	2300      	movs	r3, #0
 8014430:	75fb      	strb	r3, [r7, #23]
 8014432:	e009      	b.n	8014448 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014434:	68ba      	ldr	r2, [r7, #8]
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	3304      	adds	r3, #4
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	429a      	cmp	r2, r3
 801443e:	bf0c      	ite	eq
 8014440:	2301      	moveq	r3, #1
 8014442:	2300      	movne	r3, #0
 8014444:	b2db      	uxtb	r3, r3
 8014446:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	f103 0208 	add.w	r2, r3, #8
 801444e:	7dfb      	ldrb	r3, [r7, #23]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d001      	beq.n	8014458 <etharp_input+0x98>
 8014454:	2301      	movs	r3, #1
 8014456:	e000      	b.n	801445a <etharp_input+0x9a>
 8014458:	2302      	movs	r3, #2
 801445a:	f107 010c 	add.w	r1, r7, #12
 801445e:	6838      	ldr	r0, [r7, #0]
 8014460:	f7ff fed8 	bl	8014214 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014464:	693b      	ldr	r3, [r7, #16]
 8014466:	88db      	ldrh	r3, [r3, #6]
 8014468:	b29b      	uxth	r3, r3
 801446a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801446e:	d003      	beq.n	8014478 <etharp_input+0xb8>
 8014470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014474:	d01e      	beq.n	80144b4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014476:	e020      	b.n	80144ba <etharp_input+0xfa>
      if (for_us) {
 8014478:	7dfb      	ldrb	r3, [r7, #23]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d01c      	beq.n	80144b8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014484:	693b      	ldr	r3, [r7, #16]
 8014486:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014494:	693a      	ldr	r2, [r7, #16]
 8014496:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014498:	2102      	movs	r1, #2
 801449a:	9103      	str	r1, [sp, #12]
 801449c:	f107 010c 	add.w	r1, r7, #12
 80144a0:	9102      	str	r1, [sp, #8]
 80144a2:	9201      	str	r2, [sp, #4]
 80144a4:	9300      	str	r3, [sp, #0]
 80144a6:	462b      	mov	r3, r5
 80144a8:	4622      	mov	r2, r4
 80144aa:	4601      	mov	r1, r0
 80144ac:	6838      	ldr	r0, [r7, #0]
 80144ae:	f000 faeb 	bl	8014a88 <etharp_raw>
      break;
 80144b2:	e001      	b.n	80144b8 <etharp_input+0xf8>
      break;
 80144b4:	bf00      	nop
 80144b6:	e000      	b.n	80144ba <etharp_input+0xfa>
      break;
 80144b8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f7f9 f90e 	bl	800d6dc <pbuf_free>
}
 80144c0:	3718      	adds	r7, #24
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bdb0      	pop	{r4, r5, r7, pc}
 80144c6:	bf00      	nop
 80144c8:	0801a2a8 	.word	0x0801a2a8
 80144cc:	0801a3f8 	.word	0x0801a3f8
 80144d0:	0801a320 	.word	0x0801a320

080144d4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b086      	sub	sp, #24
 80144d8:	af02      	add	r7, sp, #8
 80144da:	60f8      	str	r0, [r7, #12]
 80144dc:	60b9      	str	r1, [r7, #8]
 80144de:	4613      	mov	r3, r2
 80144e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80144e2:	79fa      	ldrb	r2, [r7, #7]
 80144e4:	4944      	ldr	r1, [pc, #272]	; (80145f8 <etharp_output_to_arp_index+0x124>)
 80144e6:	4613      	mov	r3, r2
 80144e8:	005b      	lsls	r3, r3, #1
 80144ea:	4413      	add	r3, r2
 80144ec:	00db      	lsls	r3, r3, #3
 80144ee:	440b      	add	r3, r1
 80144f0:	3314      	adds	r3, #20
 80144f2:	781b      	ldrb	r3, [r3, #0]
 80144f4:	2b01      	cmp	r3, #1
 80144f6:	d806      	bhi.n	8014506 <etharp_output_to_arp_index+0x32>
 80144f8:	4b40      	ldr	r3, [pc, #256]	; (80145fc <etharp_output_to_arp_index+0x128>)
 80144fa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80144fe:	4940      	ldr	r1, [pc, #256]	; (8014600 <etharp_output_to_arp_index+0x12c>)
 8014500:	4840      	ldr	r0, [pc, #256]	; (8014604 <etharp_output_to_arp_index+0x130>)
 8014502:	f002 fdbb 	bl	801707c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014506:	79fa      	ldrb	r2, [r7, #7]
 8014508:	493b      	ldr	r1, [pc, #236]	; (80145f8 <etharp_output_to_arp_index+0x124>)
 801450a:	4613      	mov	r3, r2
 801450c:	005b      	lsls	r3, r3, #1
 801450e:	4413      	add	r3, r2
 8014510:	00db      	lsls	r3, r3, #3
 8014512:	440b      	add	r3, r1
 8014514:	3314      	adds	r3, #20
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	2b02      	cmp	r3, #2
 801451a:	d153      	bne.n	80145c4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801451c:	79fa      	ldrb	r2, [r7, #7]
 801451e:	4936      	ldr	r1, [pc, #216]	; (80145f8 <etharp_output_to_arp_index+0x124>)
 8014520:	4613      	mov	r3, r2
 8014522:	005b      	lsls	r3, r3, #1
 8014524:	4413      	add	r3, r2
 8014526:	00db      	lsls	r3, r3, #3
 8014528:	440b      	add	r3, r1
 801452a:	3312      	adds	r3, #18
 801452c:	881b      	ldrh	r3, [r3, #0]
 801452e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014532:	d919      	bls.n	8014568 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014534:	79fa      	ldrb	r2, [r7, #7]
 8014536:	4613      	mov	r3, r2
 8014538:	005b      	lsls	r3, r3, #1
 801453a:	4413      	add	r3, r2
 801453c:	00db      	lsls	r3, r3, #3
 801453e:	4a2e      	ldr	r2, [pc, #184]	; (80145f8 <etharp_output_to_arp_index+0x124>)
 8014540:	4413      	add	r3, r2
 8014542:	3304      	adds	r3, #4
 8014544:	4619      	mov	r1, r3
 8014546:	68f8      	ldr	r0, [r7, #12]
 8014548:	f000 fb4c 	bl	8014be4 <etharp_request>
 801454c:	4603      	mov	r3, r0
 801454e:	2b00      	cmp	r3, #0
 8014550:	d138      	bne.n	80145c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014552:	79fa      	ldrb	r2, [r7, #7]
 8014554:	4928      	ldr	r1, [pc, #160]	; (80145f8 <etharp_output_to_arp_index+0x124>)
 8014556:	4613      	mov	r3, r2
 8014558:	005b      	lsls	r3, r3, #1
 801455a:	4413      	add	r3, r2
 801455c:	00db      	lsls	r3, r3, #3
 801455e:	440b      	add	r3, r1
 8014560:	3314      	adds	r3, #20
 8014562:	2203      	movs	r2, #3
 8014564:	701a      	strb	r2, [r3, #0]
 8014566:	e02d      	b.n	80145c4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014568:	79fa      	ldrb	r2, [r7, #7]
 801456a:	4923      	ldr	r1, [pc, #140]	; (80145f8 <etharp_output_to_arp_index+0x124>)
 801456c:	4613      	mov	r3, r2
 801456e:	005b      	lsls	r3, r3, #1
 8014570:	4413      	add	r3, r2
 8014572:	00db      	lsls	r3, r3, #3
 8014574:	440b      	add	r3, r1
 8014576:	3312      	adds	r3, #18
 8014578:	881b      	ldrh	r3, [r3, #0]
 801457a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801457e:	d321      	bcc.n	80145c4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014580:	79fa      	ldrb	r2, [r7, #7]
 8014582:	4613      	mov	r3, r2
 8014584:	005b      	lsls	r3, r3, #1
 8014586:	4413      	add	r3, r2
 8014588:	00db      	lsls	r3, r3, #3
 801458a:	4a1b      	ldr	r2, [pc, #108]	; (80145f8 <etharp_output_to_arp_index+0x124>)
 801458c:	4413      	add	r3, r2
 801458e:	1d19      	adds	r1, r3, #4
 8014590:	79fa      	ldrb	r2, [r7, #7]
 8014592:	4613      	mov	r3, r2
 8014594:	005b      	lsls	r3, r3, #1
 8014596:	4413      	add	r3, r2
 8014598:	00db      	lsls	r3, r3, #3
 801459a:	3308      	adds	r3, #8
 801459c:	4a16      	ldr	r2, [pc, #88]	; (80145f8 <etharp_output_to_arp_index+0x124>)
 801459e:	4413      	add	r3, r2
 80145a0:	3304      	adds	r3, #4
 80145a2:	461a      	mov	r2, r3
 80145a4:	68f8      	ldr	r0, [r7, #12]
 80145a6:	f000 fafb 	bl	8014ba0 <etharp_request_dst>
 80145aa:	4603      	mov	r3, r0
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d109      	bne.n	80145c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80145b0:	79fa      	ldrb	r2, [r7, #7]
 80145b2:	4911      	ldr	r1, [pc, #68]	; (80145f8 <etharp_output_to_arp_index+0x124>)
 80145b4:	4613      	mov	r3, r2
 80145b6:	005b      	lsls	r3, r3, #1
 80145b8:	4413      	add	r3, r2
 80145ba:	00db      	lsls	r3, r3, #3
 80145bc:	440b      	add	r3, r1
 80145be:	3314      	adds	r3, #20
 80145c0:	2203      	movs	r2, #3
 80145c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80145ca:	79fa      	ldrb	r2, [r7, #7]
 80145cc:	4613      	mov	r3, r2
 80145ce:	005b      	lsls	r3, r3, #1
 80145d0:	4413      	add	r3, r2
 80145d2:	00db      	lsls	r3, r3, #3
 80145d4:	3308      	adds	r3, #8
 80145d6:	4a08      	ldr	r2, [pc, #32]	; (80145f8 <etharp_output_to_arp_index+0x124>)
 80145d8:	4413      	add	r3, r2
 80145da:	3304      	adds	r3, #4
 80145dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80145e0:	9200      	str	r2, [sp, #0]
 80145e2:	460a      	mov	r2, r1
 80145e4:	68b9      	ldr	r1, [r7, #8]
 80145e6:	68f8      	ldr	r0, [r7, #12]
 80145e8:	f001 fe40 	bl	801626c <ethernet_output>
 80145ec:	4603      	mov	r3, r0
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	3710      	adds	r7, #16
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bd80      	pop	{r7, pc}
 80145f6:	bf00      	nop
 80145f8:	20009028 	.word	0x20009028
 80145fc:	0801a2a8 	.word	0x0801a2a8
 8014600:	0801a418 	.word	0x0801a418
 8014604:	0801a320 	.word	0x0801a320

08014608 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b08a      	sub	sp, #40	; 0x28
 801460c:	af02      	add	r7, sp, #8
 801460e:	60f8      	str	r0, [r7, #12]
 8014610:	60b9      	str	r1, [r7, #8]
 8014612:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d106      	bne.n	801462c <etharp_output+0x24>
 801461e:	4b73      	ldr	r3, [pc, #460]	; (80147ec <etharp_output+0x1e4>)
 8014620:	f240 321e 	movw	r2, #798	; 0x31e
 8014624:	4972      	ldr	r1, [pc, #456]	; (80147f0 <etharp_output+0x1e8>)
 8014626:	4873      	ldr	r0, [pc, #460]	; (80147f4 <etharp_output+0x1ec>)
 8014628:	f002 fd28 	bl	801707c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d106      	bne.n	8014640 <etharp_output+0x38>
 8014632:	4b6e      	ldr	r3, [pc, #440]	; (80147ec <etharp_output+0x1e4>)
 8014634:	f240 321f 	movw	r2, #799	; 0x31f
 8014638:	496f      	ldr	r1, [pc, #444]	; (80147f8 <etharp_output+0x1f0>)
 801463a:	486e      	ldr	r0, [pc, #440]	; (80147f4 <etharp_output+0x1ec>)
 801463c:	f002 fd1e 	bl	801707c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d106      	bne.n	8014654 <etharp_output+0x4c>
 8014646:	4b69      	ldr	r3, [pc, #420]	; (80147ec <etharp_output+0x1e4>)
 8014648:	f44f 7248 	mov.w	r2, #800	; 0x320
 801464c:	496b      	ldr	r1, [pc, #428]	; (80147fc <etharp_output+0x1f4>)
 801464e:	4869      	ldr	r0, [pc, #420]	; (80147f4 <etharp_output+0x1ec>)
 8014650:	f002 fd14 	bl	801707c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	68f9      	ldr	r1, [r7, #12]
 801465a:	4618      	mov	r0, r3
 801465c:	f000 fef8 	bl	8015450 <ip4_addr_isbroadcast_u32>
 8014660:	4603      	mov	r3, r0
 8014662:	2b00      	cmp	r3, #0
 8014664:	d002      	beq.n	801466c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014666:	4b66      	ldr	r3, [pc, #408]	; (8014800 <etharp_output+0x1f8>)
 8014668:	61fb      	str	r3, [r7, #28]
 801466a:	e0af      	b.n	80147cc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014674:	2be0      	cmp	r3, #224	; 0xe0
 8014676:	d118      	bne.n	80146aa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014678:	2301      	movs	r3, #1
 801467a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801467c:	2300      	movs	r3, #0
 801467e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014680:	235e      	movs	r3, #94	; 0x5e
 8014682:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	3301      	adds	r3, #1
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801468e:	b2db      	uxtb	r3, r3
 8014690:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	3302      	adds	r3, #2
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	3303      	adds	r3, #3
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80146a2:	f107 0310 	add.w	r3, r7, #16
 80146a6:	61fb      	str	r3, [r7, #28]
 80146a8:	e090      	b.n	80147cc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	3304      	adds	r3, #4
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	405a      	eors	r2, r3
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	3308      	adds	r3, #8
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	4013      	ands	r3, r2
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d012      	beq.n	80146e8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80146c8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80146cc:	4293      	cmp	r3, r2
 80146ce:	d00b      	beq.n	80146e8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	330c      	adds	r3, #12
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d003      	beq.n	80146e2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	330c      	adds	r3, #12
 80146de:	61bb      	str	r3, [r7, #24]
 80146e0:	e002      	b.n	80146e8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80146e2:	f06f 0303 	mvn.w	r3, #3
 80146e6:	e07d      	b.n	80147e4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80146e8:	4b46      	ldr	r3, [pc, #280]	; (8014804 <etharp_output+0x1fc>)
 80146ea:	781b      	ldrb	r3, [r3, #0]
 80146ec:	4619      	mov	r1, r3
 80146ee:	4a46      	ldr	r2, [pc, #280]	; (8014808 <etharp_output+0x200>)
 80146f0:	460b      	mov	r3, r1
 80146f2:	005b      	lsls	r3, r3, #1
 80146f4:	440b      	add	r3, r1
 80146f6:	00db      	lsls	r3, r3, #3
 80146f8:	4413      	add	r3, r2
 80146fa:	3314      	adds	r3, #20
 80146fc:	781b      	ldrb	r3, [r3, #0]
 80146fe:	2b01      	cmp	r3, #1
 8014700:	d925      	bls.n	801474e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014702:	4b40      	ldr	r3, [pc, #256]	; (8014804 <etharp_output+0x1fc>)
 8014704:	781b      	ldrb	r3, [r3, #0]
 8014706:	4619      	mov	r1, r3
 8014708:	4a3f      	ldr	r2, [pc, #252]	; (8014808 <etharp_output+0x200>)
 801470a:	460b      	mov	r3, r1
 801470c:	005b      	lsls	r3, r3, #1
 801470e:	440b      	add	r3, r1
 8014710:	00db      	lsls	r3, r3, #3
 8014712:	4413      	add	r3, r2
 8014714:	3308      	adds	r3, #8
 8014716:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014718:	68fa      	ldr	r2, [r7, #12]
 801471a:	429a      	cmp	r2, r3
 801471c:	d117      	bne.n	801474e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801471e:	69bb      	ldr	r3, [r7, #24]
 8014720:	681a      	ldr	r2, [r3, #0]
 8014722:	4b38      	ldr	r3, [pc, #224]	; (8014804 <etharp_output+0x1fc>)
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	4618      	mov	r0, r3
 8014728:	4937      	ldr	r1, [pc, #220]	; (8014808 <etharp_output+0x200>)
 801472a:	4603      	mov	r3, r0
 801472c:	005b      	lsls	r3, r3, #1
 801472e:	4403      	add	r3, r0
 8014730:	00db      	lsls	r3, r3, #3
 8014732:	440b      	add	r3, r1
 8014734:	3304      	adds	r3, #4
 8014736:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014738:	429a      	cmp	r2, r3
 801473a:	d108      	bne.n	801474e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801473c:	4b31      	ldr	r3, [pc, #196]	; (8014804 <etharp_output+0x1fc>)
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	461a      	mov	r2, r3
 8014742:	68b9      	ldr	r1, [r7, #8]
 8014744:	68f8      	ldr	r0, [r7, #12]
 8014746:	f7ff fec5 	bl	80144d4 <etharp_output_to_arp_index>
 801474a:	4603      	mov	r3, r0
 801474c:	e04a      	b.n	80147e4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801474e:	2300      	movs	r3, #0
 8014750:	75fb      	strb	r3, [r7, #23]
 8014752:	e031      	b.n	80147b8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014754:	7dfa      	ldrb	r2, [r7, #23]
 8014756:	492c      	ldr	r1, [pc, #176]	; (8014808 <etharp_output+0x200>)
 8014758:	4613      	mov	r3, r2
 801475a:	005b      	lsls	r3, r3, #1
 801475c:	4413      	add	r3, r2
 801475e:	00db      	lsls	r3, r3, #3
 8014760:	440b      	add	r3, r1
 8014762:	3314      	adds	r3, #20
 8014764:	781b      	ldrb	r3, [r3, #0]
 8014766:	2b01      	cmp	r3, #1
 8014768:	d923      	bls.n	80147b2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801476a:	7dfa      	ldrb	r2, [r7, #23]
 801476c:	4926      	ldr	r1, [pc, #152]	; (8014808 <etharp_output+0x200>)
 801476e:	4613      	mov	r3, r2
 8014770:	005b      	lsls	r3, r3, #1
 8014772:	4413      	add	r3, r2
 8014774:	00db      	lsls	r3, r3, #3
 8014776:	440b      	add	r3, r1
 8014778:	3308      	adds	r3, #8
 801477a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801477c:	68fa      	ldr	r2, [r7, #12]
 801477e:	429a      	cmp	r2, r3
 8014780:	d117      	bne.n	80147b2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014782:	69bb      	ldr	r3, [r7, #24]
 8014784:	6819      	ldr	r1, [r3, #0]
 8014786:	7dfa      	ldrb	r2, [r7, #23]
 8014788:	481f      	ldr	r0, [pc, #124]	; (8014808 <etharp_output+0x200>)
 801478a:	4613      	mov	r3, r2
 801478c:	005b      	lsls	r3, r3, #1
 801478e:	4413      	add	r3, r2
 8014790:	00db      	lsls	r3, r3, #3
 8014792:	4403      	add	r3, r0
 8014794:	3304      	adds	r3, #4
 8014796:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014798:	4299      	cmp	r1, r3
 801479a:	d10a      	bne.n	80147b2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801479c:	4a19      	ldr	r2, [pc, #100]	; (8014804 <etharp_output+0x1fc>)
 801479e:	7dfb      	ldrb	r3, [r7, #23]
 80147a0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80147a2:	7dfb      	ldrb	r3, [r7, #23]
 80147a4:	461a      	mov	r2, r3
 80147a6:	68b9      	ldr	r1, [r7, #8]
 80147a8:	68f8      	ldr	r0, [r7, #12]
 80147aa:	f7ff fe93 	bl	80144d4 <etharp_output_to_arp_index>
 80147ae:	4603      	mov	r3, r0
 80147b0:	e018      	b.n	80147e4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80147b2:	7dfb      	ldrb	r3, [r7, #23]
 80147b4:	3301      	adds	r3, #1
 80147b6:	75fb      	strb	r3, [r7, #23]
 80147b8:	7dfb      	ldrb	r3, [r7, #23]
 80147ba:	2b09      	cmp	r3, #9
 80147bc:	d9ca      	bls.n	8014754 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80147be:	68ba      	ldr	r2, [r7, #8]
 80147c0:	69b9      	ldr	r1, [r7, #24]
 80147c2:	68f8      	ldr	r0, [r7, #12]
 80147c4:	f000 f822 	bl	801480c <etharp_query>
 80147c8:	4603      	mov	r3, r0
 80147ca:	e00b      	b.n	80147e4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80147d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80147d6:	9300      	str	r3, [sp, #0]
 80147d8:	69fb      	ldr	r3, [r7, #28]
 80147da:	68b9      	ldr	r1, [r7, #8]
 80147dc:	68f8      	ldr	r0, [r7, #12]
 80147de:	f001 fd45 	bl	801626c <ethernet_output>
 80147e2:	4603      	mov	r3, r0
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3720      	adds	r7, #32
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}
 80147ec:	0801a2a8 	.word	0x0801a2a8
 80147f0:	0801a3f8 	.word	0x0801a3f8
 80147f4:	0801a320 	.word	0x0801a320
 80147f8:	0801a448 	.word	0x0801a448
 80147fc:	0801a3e8 	.word	0x0801a3e8
 8014800:	0801aa6c 	.word	0x0801aa6c
 8014804:	20009118 	.word	0x20009118
 8014808:	20009028 	.word	0x20009028

0801480c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b08c      	sub	sp, #48	; 0x30
 8014810:	af02      	add	r7, sp, #8
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	60b9      	str	r1, [r7, #8]
 8014816:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	3326      	adds	r3, #38	; 0x26
 801481c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801481e:	23ff      	movs	r3, #255	; 0xff
 8014820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014824:	2300      	movs	r3, #0
 8014826:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014828:	68bb      	ldr	r3, [r7, #8]
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	68f9      	ldr	r1, [r7, #12]
 801482e:	4618      	mov	r0, r3
 8014830:	f000 fe0e 	bl	8015450 <ip4_addr_isbroadcast_u32>
 8014834:	4603      	mov	r3, r0
 8014836:	2b00      	cmp	r3, #0
 8014838:	d10c      	bne.n	8014854 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014842:	2be0      	cmp	r3, #224	; 0xe0
 8014844:	d006      	beq.n	8014854 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d003      	beq.n	8014854 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d102      	bne.n	801485a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014854:	f06f 030f 	mvn.w	r3, #15
 8014858:	e101      	b.n	8014a5e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801485a:	68fa      	ldr	r2, [r7, #12]
 801485c:	2101      	movs	r1, #1
 801485e:	68b8      	ldr	r0, [r7, #8]
 8014860:	f7ff fb60 	bl	8013f24 <etharp_find_entry>
 8014864:	4603      	mov	r3, r0
 8014866:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014868:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801486c:	2b00      	cmp	r3, #0
 801486e:	da02      	bge.n	8014876 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014870:	8a7b      	ldrh	r3, [r7, #18]
 8014872:	b25b      	sxtb	r3, r3
 8014874:	e0f3      	b.n	8014a5e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014876:	8a7b      	ldrh	r3, [r7, #18]
 8014878:	2b7e      	cmp	r3, #126	; 0x7e
 801487a:	d906      	bls.n	801488a <etharp_query+0x7e>
 801487c:	4b7a      	ldr	r3, [pc, #488]	; (8014a68 <etharp_query+0x25c>)
 801487e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014882:	497a      	ldr	r1, [pc, #488]	; (8014a6c <etharp_query+0x260>)
 8014884:	487a      	ldr	r0, [pc, #488]	; (8014a70 <etharp_query+0x264>)
 8014886:	f002 fbf9 	bl	801707c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801488a:	8a7b      	ldrh	r3, [r7, #18]
 801488c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801488e:	7c7a      	ldrb	r2, [r7, #17]
 8014890:	4978      	ldr	r1, [pc, #480]	; (8014a74 <etharp_query+0x268>)
 8014892:	4613      	mov	r3, r2
 8014894:	005b      	lsls	r3, r3, #1
 8014896:	4413      	add	r3, r2
 8014898:	00db      	lsls	r3, r3, #3
 801489a:	440b      	add	r3, r1
 801489c:	3314      	adds	r3, #20
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d115      	bne.n	80148d0 <etharp_query+0xc4>
    is_new_entry = 1;
 80148a4:	2301      	movs	r3, #1
 80148a6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80148a8:	7c7a      	ldrb	r2, [r7, #17]
 80148aa:	4972      	ldr	r1, [pc, #456]	; (8014a74 <etharp_query+0x268>)
 80148ac:	4613      	mov	r3, r2
 80148ae:	005b      	lsls	r3, r3, #1
 80148b0:	4413      	add	r3, r2
 80148b2:	00db      	lsls	r3, r3, #3
 80148b4:	440b      	add	r3, r1
 80148b6:	3314      	adds	r3, #20
 80148b8:	2201      	movs	r2, #1
 80148ba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80148bc:	7c7a      	ldrb	r2, [r7, #17]
 80148be:	496d      	ldr	r1, [pc, #436]	; (8014a74 <etharp_query+0x268>)
 80148c0:	4613      	mov	r3, r2
 80148c2:	005b      	lsls	r3, r3, #1
 80148c4:	4413      	add	r3, r2
 80148c6:	00db      	lsls	r3, r3, #3
 80148c8:	440b      	add	r3, r1
 80148ca:	3308      	adds	r3, #8
 80148cc:	68fa      	ldr	r2, [r7, #12]
 80148ce:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80148d0:	7c7a      	ldrb	r2, [r7, #17]
 80148d2:	4968      	ldr	r1, [pc, #416]	; (8014a74 <etharp_query+0x268>)
 80148d4:	4613      	mov	r3, r2
 80148d6:	005b      	lsls	r3, r3, #1
 80148d8:	4413      	add	r3, r2
 80148da:	00db      	lsls	r3, r3, #3
 80148dc:	440b      	add	r3, r1
 80148de:	3314      	adds	r3, #20
 80148e0:	781b      	ldrb	r3, [r3, #0]
 80148e2:	2b01      	cmp	r3, #1
 80148e4:	d011      	beq.n	801490a <etharp_query+0xfe>
 80148e6:	7c7a      	ldrb	r2, [r7, #17]
 80148e8:	4962      	ldr	r1, [pc, #392]	; (8014a74 <etharp_query+0x268>)
 80148ea:	4613      	mov	r3, r2
 80148ec:	005b      	lsls	r3, r3, #1
 80148ee:	4413      	add	r3, r2
 80148f0:	00db      	lsls	r3, r3, #3
 80148f2:	440b      	add	r3, r1
 80148f4:	3314      	adds	r3, #20
 80148f6:	781b      	ldrb	r3, [r3, #0]
 80148f8:	2b01      	cmp	r3, #1
 80148fa:	d806      	bhi.n	801490a <etharp_query+0xfe>
 80148fc:	4b5a      	ldr	r3, [pc, #360]	; (8014a68 <etharp_query+0x25c>)
 80148fe:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014902:	495d      	ldr	r1, [pc, #372]	; (8014a78 <etharp_query+0x26c>)
 8014904:	485a      	ldr	r0, [pc, #360]	; (8014a70 <etharp_query+0x264>)
 8014906:	f002 fbb9 	bl	801707c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801490a:	6a3b      	ldr	r3, [r7, #32]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d102      	bne.n	8014916 <etharp_query+0x10a>
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d10c      	bne.n	8014930 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014916:	68b9      	ldr	r1, [r7, #8]
 8014918:	68f8      	ldr	r0, [r7, #12]
 801491a:	f000 f963 	bl	8014be4 <etharp_request>
 801491e:	4603      	mov	r3, r0
 8014920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	2b00      	cmp	r3, #0
 8014928:	d102      	bne.n	8014930 <etharp_query+0x124>
      return result;
 801492a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801492e:	e096      	b.n	8014a5e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d106      	bne.n	8014944 <etharp_query+0x138>
 8014936:	4b4c      	ldr	r3, [pc, #304]	; (8014a68 <etharp_query+0x25c>)
 8014938:	f240 32e1 	movw	r2, #993	; 0x3e1
 801493c:	494f      	ldr	r1, [pc, #316]	; (8014a7c <etharp_query+0x270>)
 801493e:	484c      	ldr	r0, [pc, #304]	; (8014a70 <etharp_query+0x264>)
 8014940:	f002 fb9c 	bl	801707c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014944:	7c7a      	ldrb	r2, [r7, #17]
 8014946:	494b      	ldr	r1, [pc, #300]	; (8014a74 <etharp_query+0x268>)
 8014948:	4613      	mov	r3, r2
 801494a:	005b      	lsls	r3, r3, #1
 801494c:	4413      	add	r3, r2
 801494e:	00db      	lsls	r3, r3, #3
 8014950:	440b      	add	r3, r1
 8014952:	3314      	adds	r3, #20
 8014954:	781b      	ldrb	r3, [r3, #0]
 8014956:	2b01      	cmp	r3, #1
 8014958:	d917      	bls.n	801498a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801495a:	4a49      	ldr	r2, [pc, #292]	; (8014a80 <etharp_query+0x274>)
 801495c:	7c7b      	ldrb	r3, [r7, #17]
 801495e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014960:	7c7a      	ldrb	r2, [r7, #17]
 8014962:	4613      	mov	r3, r2
 8014964:	005b      	lsls	r3, r3, #1
 8014966:	4413      	add	r3, r2
 8014968:	00db      	lsls	r3, r3, #3
 801496a:	3308      	adds	r3, #8
 801496c:	4a41      	ldr	r2, [pc, #260]	; (8014a74 <etharp_query+0x268>)
 801496e:	4413      	add	r3, r2
 8014970:	3304      	adds	r3, #4
 8014972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014976:	9200      	str	r2, [sp, #0]
 8014978:	697a      	ldr	r2, [r7, #20]
 801497a:	6879      	ldr	r1, [r7, #4]
 801497c:	68f8      	ldr	r0, [r7, #12]
 801497e:	f001 fc75 	bl	801626c <ethernet_output>
 8014982:	4603      	mov	r3, r0
 8014984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014988:	e067      	b.n	8014a5a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801498a:	7c7a      	ldrb	r2, [r7, #17]
 801498c:	4939      	ldr	r1, [pc, #228]	; (8014a74 <etharp_query+0x268>)
 801498e:	4613      	mov	r3, r2
 8014990:	005b      	lsls	r3, r3, #1
 8014992:	4413      	add	r3, r2
 8014994:	00db      	lsls	r3, r3, #3
 8014996:	440b      	add	r3, r1
 8014998:	3314      	adds	r3, #20
 801499a:	781b      	ldrb	r3, [r3, #0]
 801499c:	2b01      	cmp	r3, #1
 801499e:	d15c      	bne.n	8014a5a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80149a0:	2300      	movs	r3, #0
 80149a2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80149a8:	e01c      	b.n	80149e4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80149aa:	69fb      	ldr	r3, [r7, #28]
 80149ac:	895a      	ldrh	r2, [r3, #10]
 80149ae:	69fb      	ldr	r3, [r7, #28]
 80149b0:	891b      	ldrh	r3, [r3, #8]
 80149b2:	429a      	cmp	r2, r3
 80149b4:	d10a      	bne.n	80149cc <etharp_query+0x1c0>
 80149b6:	69fb      	ldr	r3, [r7, #28]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d006      	beq.n	80149cc <etharp_query+0x1c0>
 80149be:	4b2a      	ldr	r3, [pc, #168]	; (8014a68 <etharp_query+0x25c>)
 80149c0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80149c4:	492f      	ldr	r1, [pc, #188]	; (8014a84 <etharp_query+0x278>)
 80149c6:	482a      	ldr	r0, [pc, #168]	; (8014a70 <etharp_query+0x264>)
 80149c8:	f002 fb58 	bl	801707c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80149cc:	69fb      	ldr	r3, [r7, #28]
 80149ce:	7b1b      	ldrb	r3, [r3, #12]
 80149d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d002      	beq.n	80149de <etharp_query+0x1d2>
        copy_needed = 1;
 80149d8:	2301      	movs	r3, #1
 80149da:	61bb      	str	r3, [r7, #24]
        break;
 80149dc:	e005      	b.n	80149ea <etharp_query+0x1de>
      }
      p = p->next;
 80149de:	69fb      	ldr	r3, [r7, #28]
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80149e4:	69fb      	ldr	r3, [r7, #28]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d1df      	bne.n	80149aa <etharp_query+0x19e>
    }
    if (copy_needed) {
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d007      	beq.n	8014a00 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80149f0:	687a      	ldr	r2, [r7, #4]
 80149f2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80149f6:	200e      	movs	r0, #14
 80149f8:	f7f9 f96e 	bl	800dcd8 <pbuf_clone>
 80149fc:	61f8      	str	r0, [r7, #28]
 80149fe:	e004      	b.n	8014a0a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014a04:	69f8      	ldr	r0, [r7, #28]
 8014a06:	f7f8 ff09 	bl	800d81c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014a0a:	69fb      	ldr	r3, [r7, #28]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d021      	beq.n	8014a54 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014a10:	7c7a      	ldrb	r2, [r7, #17]
 8014a12:	4918      	ldr	r1, [pc, #96]	; (8014a74 <etharp_query+0x268>)
 8014a14:	4613      	mov	r3, r2
 8014a16:	005b      	lsls	r3, r3, #1
 8014a18:	4413      	add	r3, r2
 8014a1a:	00db      	lsls	r3, r3, #3
 8014a1c:	440b      	add	r3, r1
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d00a      	beq.n	8014a3a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014a24:	7c7a      	ldrb	r2, [r7, #17]
 8014a26:	4913      	ldr	r1, [pc, #76]	; (8014a74 <etharp_query+0x268>)
 8014a28:	4613      	mov	r3, r2
 8014a2a:	005b      	lsls	r3, r3, #1
 8014a2c:	4413      	add	r3, r2
 8014a2e:	00db      	lsls	r3, r3, #3
 8014a30:	440b      	add	r3, r1
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	4618      	mov	r0, r3
 8014a36:	f7f8 fe51 	bl	800d6dc <pbuf_free>
      }
      arp_table[i].q = p;
 8014a3a:	7c7a      	ldrb	r2, [r7, #17]
 8014a3c:	490d      	ldr	r1, [pc, #52]	; (8014a74 <etharp_query+0x268>)
 8014a3e:	4613      	mov	r3, r2
 8014a40:	005b      	lsls	r3, r3, #1
 8014a42:	4413      	add	r3, r2
 8014a44:	00db      	lsls	r3, r3, #3
 8014a46:	440b      	add	r3, r1
 8014a48:	69fa      	ldr	r2, [r7, #28]
 8014a4a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a52:	e002      	b.n	8014a5a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014a54:	23ff      	movs	r3, #255	; 0xff
 8014a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014a5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3728      	adds	r7, #40	; 0x28
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	0801a2a8 	.word	0x0801a2a8
 8014a6c:	0801a454 	.word	0x0801a454
 8014a70:	0801a320 	.word	0x0801a320
 8014a74:	20009028 	.word	0x20009028
 8014a78:	0801a464 	.word	0x0801a464
 8014a7c:	0801a448 	.word	0x0801a448
 8014a80:	20009118 	.word	0x20009118
 8014a84:	0801a48c 	.word	0x0801a48c

08014a88 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b08a      	sub	sp, #40	; 0x28
 8014a8c:	af02      	add	r7, sp, #8
 8014a8e:	60f8      	str	r0, [r7, #12]
 8014a90:	60b9      	str	r1, [r7, #8]
 8014a92:	607a      	str	r2, [r7, #4]
 8014a94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014a96:	2300      	movs	r3, #0
 8014a98:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d106      	bne.n	8014aae <etharp_raw+0x26>
 8014aa0:	4b3a      	ldr	r3, [pc, #232]	; (8014b8c <etharp_raw+0x104>)
 8014aa2:	f240 4257 	movw	r2, #1111	; 0x457
 8014aa6:	493a      	ldr	r1, [pc, #232]	; (8014b90 <etharp_raw+0x108>)
 8014aa8:	483a      	ldr	r0, [pc, #232]	; (8014b94 <etharp_raw+0x10c>)
 8014aaa:	f002 fae7 	bl	801707c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014aae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ab2:	211c      	movs	r1, #28
 8014ab4:	200e      	movs	r0, #14
 8014ab6:	f7f8 fb2d 	bl	800d114 <pbuf_alloc>
 8014aba:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014abc:	69bb      	ldr	r3, [r7, #24]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d102      	bne.n	8014ac8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ac6:	e05d      	b.n	8014b84 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014ac8:	69bb      	ldr	r3, [r7, #24]
 8014aca:	895b      	ldrh	r3, [r3, #10]
 8014acc:	2b1b      	cmp	r3, #27
 8014ace:	d806      	bhi.n	8014ade <etharp_raw+0x56>
 8014ad0:	4b2e      	ldr	r3, [pc, #184]	; (8014b8c <etharp_raw+0x104>)
 8014ad2:	f240 4262 	movw	r2, #1122	; 0x462
 8014ad6:	4930      	ldr	r1, [pc, #192]	; (8014b98 <etharp_raw+0x110>)
 8014ad8:	482e      	ldr	r0, [pc, #184]	; (8014b94 <etharp_raw+0x10c>)
 8014ada:	f002 facf 	bl	801707c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014ade:	69bb      	ldr	r3, [r7, #24]
 8014ae0:	685b      	ldr	r3, [r3, #4]
 8014ae2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014ae4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f7f7 fa9a 	bl	800c020 <lwip_htons>
 8014aec:	4603      	mov	r3, r0
 8014aee:	461a      	mov	r2, r3
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014afa:	2b06      	cmp	r3, #6
 8014afc:	d006      	beq.n	8014b0c <etharp_raw+0x84>
 8014afe:	4b23      	ldr	r3, [pc, #140]	; (8014b8c <etharp_raw+0x104>)
 8014b00:	f240 4269 	movw	r2, #1129	; 0x469
 8014b04:	4925      	ldr	r1, [pc, #148]	; (8014b9c <etharp_raw+0x114>)
 8014b06:	4823      	ldr	r0, [pc, #140]	; (8014b94 <etharp_raw+0x10c>)
 8014b08:	f002 fab8 	bl	801707c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	3308      	adds	r3, #8
 8014b10:	2206      	movs	r2, #6
 8014b12:	6839      	ldr	r1, [r7, #0]
 8014b14:	4618      	mov	r0, r3
 8014b16:	f002 f9bb 	bl	8016e90 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014b1a:	697b      	ldr	r3, [r7, #20]
 8014b1c:	3312      	adds	r3, #18
 8014b1e:	2206      	movs	r2, #6
 8014b20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014b22:	4618      	mov	r0, r3
 8014b24:	f002 f9b4 	bl	8016e90 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014b28:	697b      	ldr	r3, [r7, #20]
 8014b2a:	330e      	adds	r3, #14
 8014b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b2e:	6812      	ldr	r2, [r2, #0]
 8014b30:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014b32:	697b      	ldr	r3, [r7, #20]
 8014b34:	3318      	adds	r3, #24
 8014b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b38:	6812      	ldr	r2, [r2, #0]
 8014b3a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014b3c:	697b      	ldr	r3, [r7, #20]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	701a      	strb	r2, [r3, #0]
 8014b42:	2200      	movs	r2, #0
 8014b44:	f042 0201 	orr.w	r2, r2, #1
 8014b48:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014b4a:	697b      	ldr	r3, [r7, #20]
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	f042 0208 	orr.w	r2, r2, #8
 8014b52:	709a      	strb	r2, [r3, #2]
 8014b54:	2200      	movs	r2, #0
 8014b56:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	2206      	movs	r2, #6
 8014b5c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014b5e:	697b      	ldr	r3, [r7, #20]
 8014b60:	2204      	movs	r2, #4
 8014b62:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014b64:	f640 0306 	movw	r3, #2054	; 0x806
 8014b68:	9300      	str	r3, [sp, #0]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	68ba      	ldr	r2, [r7, #8]
 8014b6e:	69b9      	ldr	r1, [r7, #24]
 8014b70:	68f8      	ldr	r0, [r7, #12]
 8014b72:	f001 fb7b 	bl	801626c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014b76:	69b8      	ldr	r0, [r7, #24]
 8014b78:	f7f8 fdb0 	bl	800d6dc <pbuf_free>
  p = NULL;
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014b80:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014b84:	4618      	mov	r0, r3
 8014b86:	3720      	adds	r7, #32
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}
 8014b8c:	0801a2a8 	.word	0x0801a2a8
 8014b90:	0801a3f8 	.word	0x0801a3f8
 8014b94:	0801a320 	.word	0x0801a320
 8014b98:	0801a4a8 	.word	0x0801a4a8
 8014b9c:	0801a4dc 	.word	0x0801a4dc

08014ba0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b088      	sub	sp, #32
 8014ba4:	af04      	add	r7, sp, #16
 8014ba6:	60f8      	str	r0, [r7, #12]
 8014ba8:	60b9      	str	r1, [r7, #8]
 8014baa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014bbc:	2201      	movs	r2, #1
 8014bbe:	9203      	str	r2, [sp, #12]
 8014bc0:	68ba      	ldr	r2, [r7, #8]
 8014bc2:	9202      	str	r2, [sp, #8]
 8014bc4:	4a06      	ldr	r2, [pc, #24]	; (8014be0 <etharp_request_dst+0x40>)
 8014bc6:	9201      	str	r2, [sp, #4]
 8014bc8:	9300      	str	r3, [sp, #0]
 8014bca:	4603      	mov	r3, r0
 8014bcc:	687a      	ldr	r2, [r7, #4]
 8014bce:	68f8      	ldr	r0, [r7, #12]
 8014bd0:	f7ff ff5a 	bl	8014a88 <etharp_raw>
 8014bd4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	3710      	adds	r7, #16
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
 8014bde:	bf00      	nop
 8014be0:	0801aa74 	.word	0x0801aa74

08014be4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b082      	sub	sp, #8
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
 8014bec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014bee:	4a05      	ldr	r2, [pc, #20]	; (8014c04 <etharp_request+0x20>)
 8014bf0:	6839      	ldr	r1, [r7, #0]
 8014bf2:	6878      	ldr	r0, [r7, #4]
 8014bf4:	f7ff ffd4 	bl	8014ba0 <etharp_request_dst>
 8014bf8:	4603      	mov	r3, r0
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	3708      	adds	r7, #8
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}
 8014c02:	bf00      	nop
 8014c04:	0801aa6c 	.word	0x0801aa6c

08014c08 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b08e      	sub	sp, #56	; 0x38
 8014c0c:	af04      	add	r7, sp, #16
 8014c0e:	6078      	str	r0, [r7, #4]
 8014c10:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014c12:	4b79      	ldr	r3, [pc, #484]	; (8014df8 <icmp_input+0x1f0>)
 8014c14:	689b      	ldr	r3, [r3, #8]
 8014c16:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c1a:	781b      	ldrb	r3, [r3, #0]
 8014c1c:	f003 030f 	and.w	r3, r3, #15
 8014c20:	b2db      	uxtb	r3, r3
 8014c22:	009b      	lsls	r3, r3, #2
 8014c24:	b2db      	uxtb	r3, r3
 8014c26:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014c28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c2a:	2b13      	cmp	r3, #19
 8014c2c:	f240 80cd 	bls.w	8014dca <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	895b      	ldrh	r3, [r3, #10]
 8014c34:	2b03      	cmp	r3, #3
 8014c36:	f240 80ca 	bls.w	8014dce <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	685b      	ldr	r3, [r3, #4]
 8014c3e:	781b      	ldrb	r3, [r3, #0]
 8014c40:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014c44:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	f000 80b7 	beq.w	8014dbc <icmp_input+0x1b4>
 8014c4e:	2b08      	cmp	r3, #8
 8014c50:	f040 80b7 	bne.w	8014dc2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014c54:	4b69      	ldr	r3, [pc, #420]	; (8014dfc <icmp_input+0x1f4>)
 8014c56:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014c58:	4b67      	ldr	r3, [pc, #412]	; (8014df8 <icmp_input+0x1f0>)
 8014c5a:	695b      	ldr	r3, [r3, #20]
 8014c5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c60:	2be0      	cmp	r3, #224	; 0xe0
 8014c62:	f000 80bb 	beq.w	8014ddc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014c66:	4b64      	ldr	r3, [pc, #400]	; (8014df8 <icmp_input+0x1f0>)
 8014c68:	695b      	ldr	r3, [r3, #20]
 8014c6a:	4a63      	ldr	r2, [pc, #396]	; (8014df8 <icmp_input+0x1f0>)
 8014c6c:	6812      	ldr	r2, [r2, #0]
 8014c6e:	4611      	mov	r1, r2
 8014c70:	4618      	mov	r0, r3
 8014c72:	f000 fbed 	bl	8015450 <ip4_addr_isbroadcast_u32>
 8014c76:	4603      	mov	r3, r0
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	f040 80b1 	bne.w	8014de0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	891b      	ldrh	r3, [r3, #8]
 8014c82:	2b07      	cmp	r3, #7
 8014c84:	f240 80a5 	bls.w	8014dd2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014c88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c8a:	330e      	adds	r3, #14
 8014c8c:	4619      	mov	r1, r3
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f7f8 fc8e 	bl	800d5b0 <pbuf_add_header>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d04b      	beq.n	8014d32 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	891a      	ldrh	r2, [r3, #8]
 8014c9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ca0:	4413      	add	r3, r2
 8014ca2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	891b      	ldrh	r3, [r3, #8]
 8014ca8:	8b7a      	ldrh	r2, [r7, #26]
 8014caa:	429a      	cmp	r2, r3
 8014cac:	f0c0 809a 	bcc.w	8014de4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014cb0:	8b7b      	ldrh	r3, [r7, #26]
 8014cb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	200e      	movs	r0, #14
 8014cba:	f7f8 fa2b 	bl	800d114 <pbuf_alloc>
 8014cbe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014cc0:	697b      	ldr	r3, [r7, #20]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	f000 8090 	beq.w	8014de8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014cc8:	697b      	ldr	r3, [r7, #20]
 8014cca:	895b      	ldrh	r3, [r3, #10]
 8014ccc:	461a      	mov	r2, r3
 8014cce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014cd0:	3308      	adds	r3, #8
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d203      	bcs.n	8014cde <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014cd6:	6978      	ldr	r0, [r7, #20]
 8014cd8:	f7f8 fd00 	bl	800d6dc <pbuf_free>
          goto icmperr;
 8014cdc:	e085      	b.n	8014dea <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	685b      	ldr	r3, [r3, #4]
 8014ce2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014ce4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	f002 f8d2 	bl	8016e90 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014cec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014cee:	4619      	mov	r1, r3
 8014cf0:	6978      	ldr	r0, [r7, #20]
 8014cf2:	f7f8 fc6d 	bl	800d5d0 <pbuf_remove_header>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d009      	beq.n	8014d10 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014cfc:	4b40      	ldr	r3, [pc, #256]	; (8014e00 <icmp_input+0x1f8>)
 8014cfe:	22b6      	movs	r2, #182	; 0xb6
 8014d00:	4940      	ldr	r1, [pc, #256]	; (8014e04 <icmp_input+0x1fc>)
 8014d02:	4841      	ldr	r0, [pc, #260]	; (8014e08 <icmp_input+0x200>)
 8014d04:	f002 f9ba 	bl	801707c <iprintf>
          pbuf_free(r);
 8014d08:	6978      	ldr	r0, [r7, #20]
 8014d0a:	f7f8 fce7 	bl	800d6dc <pbuf_free>
          goto icmperr;
 8014d0e:	e06c      	b.n	8014dea <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014d10:	6879      	ldr	r1, [r7, #4]
 8014d12:	6978      	ldr	r0, [r7, #20]
 8014d14:	f7f8 fe0a 	bl	800d92c <pbuf_copy>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d003      	beq.n	8014d26 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014d1e:	6978      	ldr	r0, [r7, #20]
 8014d20:	f7f8 fcdc 	bl	800d6dc <pbuf_free>
          goto icmperr;
 8014d24:	e061      	b.n	8014dea <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f7f8 fcd8 	bl	800d6dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	607b      	str	r3, [r7, #4]
 8014d30:	e00f      	b.n	8014d52 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014d32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d34:	330e      	adds	r3, #14
 8014d36:	4619      	mov	r1, r3
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f7f8 fc49 	bl	800d5d0 <pbuf_remove_header>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d006      	beq.n	8014d52 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014d44:	4b2e      	ldr	r3, [pc, #184]	; (8014e00 <icmp_input+0x1f8>)
 8014d46:	22c7      	movs	r2, #199	; 0xc7
 8014d48:	4930      	ldr	r1, [pc, #192]	; (8014e0c <icmp_input+0x204>)
 8014d4a:	482f      	ldr	r0, [pc, #188]	; (8014e08 <icmp_input+0x200>)
 8014d4c:	f002 f996 	bl	801707c <iprintf>
          goto icmperr;
 8014d50:	e04b      	b.n	8014dea <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014d58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d5a:	4619      	mov	r1, r3
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f7f8 fc27 	bl	800d5b0 <pbuf_add_header>
 8014d62:	4603      	mov	r3, r0
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d12b      	bne.n	8014dc0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	685b      	ldr	r3, [r3, #4]
 8014d6c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014d6e:	69fb      	ldr	r3, [r7, #28]
 8014d70:	681a      	ldr	r2, [r3, #0]
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014d76:	4b20      	ldr	r3, [pc, #128]	; (8014df8 <icmp_input+0x1f0>)
 8014d78:	691a      	ldr	r2, [r3, #16]
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014d7e:	693b      	ldr	r3, [r7, #16]
 8014d80:	2200      	movs	r2, #0
 8014d82:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	2200      	movs	r2, #0
 8014d88:	709a      	strb	r2, [r3, #2]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	22ff      	movs	r2, #255	; 0xff
 8014d92:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2200      	movs	r2, #0
 8014d98:	729a      	strb	r2, [r3, #10]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	9302      	str	r3, [sp, #8]
 8014da2:	2301      	movs	r3, #1
 8014da4:	9301      	str	r3, [sp, #4]
 8014da6:	2300      	movs	r3, #0
 8014da8:	9300      	str	r3, [sp, #0]
 8014daa:	23ff      	movs	r3, #255	; 0xff
 8014dac:	2200      	movs	r2, #0
 8014dae:	69f9      	ldr	r1, [r7, #28]
 8014db0:	6878      	ldr	r0, [r7, #4]
 8014db2:	f000 fa75 	bl	80152a0 <ip4_output_if>
 8014db6:	4603      	mov	r3, r0
 8014db8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014dba:	e001      	b.n	8014dc0 <icmp_input+0x1b8>
      break;
 8014dbc:	bf00      	nop
 8014dbe:	e000      	b.n	8014dc2 <icmp_input+0x1ba>
      break;
 8014dc0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f7f8 fc8a 	bl	800d6dc <pbuf_free>
  return;
 8014dc8:	e013      	b.n	8014df2 <icmp_input+0x1ea>
    goto lenerr;
 8014dca:	bf00      	nop
 8014dcc:	e002      	b.n	8014dd4 <icmp_input+0x1cc>
    goto lenerr;
 8014dce:	bf00      	nop
 8014dd0:	e000      	b.n	8014dd4 <icmp_input+0x1cc>
        goto lenerr;
 8014dd2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014dd4:	6878      	ldr	r0, [r7, #4]
 8014dd6:	f7f8 fc81 	bl	800d6dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014dda:	e00a      	b.n	8014df2 <icmp_input+0x1ea>
        goto icmperr;
 8014ddc:	bf00      	nop
 8014dde:	e004      	b.n	8014dea <icmp_input+0x1e2>
        goto icmperr;
 8014de0:	bf00      	nop
 8014de2:	e002      	b.n	8014dea <icmp_input+0x1e2>
          goto icmperr;
 8014de4:	bf00      	nop
 8014de6:	e000      	b.n	8014dea <icmp_input+0x1e2>
          goto icmperr;
 8014de8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f7f8 fc76 	bl	800d6dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014df0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014df2:	3728      	adds	r7, #40	; 0x28
 8014df4:	46bd      	mov	sp, r7
 8014df6:	bd80      	pop	{r7, pc}
 8014df8:	20005a58 	.word	0x20005a58
 8014dfc:	20005a6c 	.word	0x20005a6c
 8014e00:	0801a520 	.word	0x0801a520
 8014e04:	0801a558 	.word	0x0801a558
 8014e08:	0801a590 	.word	0x0801a590
 8014e0c:	0801a5b8 	.word	0x0801a5b8

08014e10 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b082      	sub	sp, #8
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
 8014e18:	460b      	mov	r3, r1
 8014e1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014e1c:	78fb      	ldrb	r3, [r7, #3]
 8014e1e:	461a      	mov	r2, r3
 8014e20:	2103      	movs	r1, #3
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f000 f814 	bl	8014e50 <icmp_send_response>
}
 8014e28:	bf00      	nop
 8014e2a:	3708      	adds	r7, #8
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}

08014e30 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b082      	sub	sp, #8
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
 8014e38:	460b      	mov	r3, r1
 8014e3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014e3c:	78fb      	ldrb	r3, [r7, #3]
 8014e3e:	461a      	mov	r2, r3
 8014e40:	210b      	movs	r1, #11
 8014e42:	6878      	ldr	r0, [r7, #4]
 8014e44:	f000 f804 	bl	8014e50 <icmp_send_response>
}
 8014e48:	bf00      	nop
 8014e4a:	3708      	adds	r7, #8
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	bd80      	pop	{r7, pc}

08014e50 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b08c      	sub	sp, #48	; 0x30
 8014e54:	af04      	add	r7, sp, #16
 8014e56:	6078      	str	r0, [r7, #4]
 8014e58:	460b      	mov	r3, r1
 8014e5a:	70fb      	strb	r3, [r7, #3]
 8014e5c:	4613      	mov	r3, r2
 8014e5e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014e60:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014e64:	2124      	movs	r1, #36	; 0x24
 8014e66:	2022      	movs	r0, #34	; 0x22
 8014e68:	f7f8 f954 	bl	800d114 <pbuf_alloc>
 8014e6c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014e6e:	69fb      	ldr	r3, [r7, #28]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d04c      	beq.n	8014f0e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014e74:	69fb      	ldr	r3, [r7, #28]
 8014e76:	895b      	ldrh	r3, [r3, #10]
 8014e78:	2b23      	cmp	r3, #35	; 0x23
 8014e7a:	d806      	bhi.n	8014e8a <icmp_send_response+0x3a>
 8014e7c:	4b26      	ldr	r3, [pc, #152]	; (8014f18 <icmp_send_response+0xc8>)
 8014e7e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014e82:	4926      	ldr	r1, [pc, #152]	; (8014f1c <icmp_send_response+0xcc>)
 8014e84:	4826      	ldr	r0, [pc, #152]	; (8014f20 <icmp_send_response+0xd0>)
 8014e86:	f002 f8f9 	bl	801707c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	685b      	ldr	r3, [r3, #4]
 8014e8e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014e90:	69fb      	ldr	r3, [r7, #28]
 8014e92:	685b      	ldr	r3, [r3, #4]
 8014e94:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014e96:	697b      	ldr	r3, [r7, #20]
 8014e98:	78fa      	ldrb	r2, [r7, #3]
 8014e9a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	78ba      	ldrb	r2, [r7, #2]
 8014ea0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	711a      	strb	r2, [r3, #4]
 8014ea8:	2200      	movs	r2, #0
 8014eaa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014eac:	697b      	ldr	r3, [r7, #20]
 8014eae:	2200      	movs	r2, #0
 8014eb0:	719a      	strb	r2, [r3, #6]
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014eb6:	69fb      	ldr	r3, [r7, #28]
 8014eb8:	685b      	ldr	r3, [r3, #4]
 8014eba:	f103 0008 	add.w	r0, r3, #8
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	685b      	ldr	r3, [r3, #4]
 8014ec2:	221c      	movs	r2, #28
 8014ec4:	4619      	mov	r1, r3
 8014ec6:	f001 ffe3 	bl	8016e90 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014eca:	69bb      	ldr	r3, [r7, #24]
 8014ecc:	68db      	ldr	r3, [r3, #12]
 8014ece:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014ed0:	f107 030c 	add.w	r3, r7, #12
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f000 f825 	bl	8014f24 <ip4_route>
 8014eda:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014edc:	693b      	ldr	r3, [r7, #16]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d011      	beq.n	8014f06 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	709a      	strb	r2, [r3, #2]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014eec:	f107 020c 	add.w	r2, r7, #12
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	9302      	str	r3, [sp, #8]
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	9301      	str	r3, [sp, #4]
 8014ef8:	2300      	movs	r3, #0
 8014efa:	9300      	str	r3, [sp, #0]
 8014efc:	23ff      	movs	r3, #255	; 0xff
 8014efe:	2100      	movs	r1, #0
 8014f00:	69f8      	ldr	r0, [r7, #28]
 8014f02:	f000 f9cd 	bl	80152a0 <ip4_output_if>
  }
  pbuf_free(q);
 8014f06:	69f8      	ldr	r0, [r7, #28]
 8014f08:	f7f8 fbe8 	bl	800d6dc <pbuf_free>
 8014f0c:	e000      	b.n	8014f10 <icmp_send_response+0xc0>
    return;
 8014f0e:	bf00      	nop
}
 8014f10:	3720      	adds	r7, #32
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bd80      	pop	{r7, pc}
 8014f16:	bf00      	nop
 8014f18:	0801a520 	.word	0x0801a520
 8014f1c:	0801a5ec 	.word	0x0801a5ec
 8014f20:	0801a590 	.word	0x0801a590

08014f24 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014f24:	b480      	push	{r7}
 8014f26:	b085      	sub	sp, #20
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014f2c:	4b33      	ldr	r3, [pc, #204]	; (8014ffc <ip4_route+0xd8>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	60fb      	str	r3, [r7, #12]
 8014f32:	e036      	b.n	8014fa2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f3a:	f003 0301 	and.w	r3, r3, #1
 8014f3e:	b2db      	uxtb	r3, r3
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d02b      	beq.n	8014f9c <ip4_route+0x78>
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f4a:	089b      	lsrs	r3, r3, #2
 8014f4c:	f003 0301 	and.w	r3, r3, #1
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d022      	beq.n	8014f9c <ip4_route+0x78>
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	3304      	adds	r3, #4
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d01d      	beq.n	8014f9c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	681a      	ldr	r2, [r3, #0]
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	3304      	adds	r3, #4
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	405a      	eors	r2, r3
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	3308      	adds	r3, #8
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	4013      	ands	r3, r2
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d101      	bne.n	8014f7c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	e038      	b.n	8014fee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014f82:	f003 0302 	and.w	r3, r3, #2
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d108      	bne.n	8014f9c <ip4_route+0x78>
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	681a      	ldr	r2, [r3, #0]
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	330c      	adds	r3, #12
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	429a      	cmp	r2, r3
 8014f96:	d101      	bne.n	8014f9c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	e028      	b.n	8014fee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	60fb      	str	r3, [r7, #12]
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d1c5      	bne.n	8014f34 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014fa8:	4b15      	ldr	r3, [pc, #84]	; (8015000 <ip4_route+0xdc>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d01a      	beq.n	8014fe6 <ip4_route+0xc2>
 8014fb0:	4b13      	ldr	r3, [pc, #76]	; (8015000 <ip4_route+0xdc>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014fb8:	f003 0301 	and.w	r3, r3, #1
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d012      	beq.n	8014fe6 <ip4_route+0xc2>
 8014fc0:	4b0f      	ldr	r3, [pc, #60]	; (8015000 <ip4_route+0xdc>)
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014fc8:	f003 0304 	and.w	r3, r3, #4
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d00a      	beq.n	8014fe6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014fd0:	4b0b      	ldr	r3, [pc, #44]	; (8015000 <ip4_route+0xdc>)
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	3304      	adds	r3, #4
 8014fd6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d004      	beq.n	8014fe6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	b2db      	uxtb	r3, r3
 8014fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8014fe4:	d101      	bne.n	8014fea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	e001      	b.n	8014fee <ip4_route+0xca>
  }

  return netif_default;
 8014fea:	4b05      	ldr	r3, [pc, #20]	; (8015000 <ip4_route+0xdc>)
 8014fec:	681b      	ldr	r3, [r3, #0]
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3714      	adds	r7, #20
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff8:	4770      	bx	lr
 8014ffa:	bf00      	nop
 8014ffc:	20008fbc 	.word	0x20008fbc
 8015000:	20008fc0 	.word	0x20008fc0

08015004 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015012:	f003 0301 	and.w	r3, r3, #1
 8015016:	b2db      	uxtb	r3, r3
 8015018:	2b00      	cmp	r3, #0
 801501a:	d016      	beq.n	801504a <ip4_input_accept+0x46>
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	3304      	adds	r3, #4
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d011      	beq.n	801504a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015026:	4b0b      	ldr	r3, [pc, #44]	; (8015054 <ip4_input_accept+0x50>)
 8015028:	695a      	ldr	r2, [r3, #20]
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	3304      	adds	r3, #4
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	429a      	cmp	r2, r3
 8015032:	d008      	beq.n	8015046 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015034:	4b07      	ldr	r3, [pc, #28]	; (8015054 <ip4_input_accept+0x50>)
 8015036:	695b      	ldr	r3, [r3, #20]
 8015038:	6879      	ldr	r1, [r7, #4]
 801503a:	4618      	mov	r0, r3
 801503c:	f000 fa08 	bl	8015450 <ip4_addr_isbroadcast_u32>
 8015040:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015042:	2b00      	cmp	r3, #0
 8015044:	d001      	beq.n	801504a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015046:	2301      	movs	r3, #1
 8015048:	e000      	b.n	801504c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801504a:	2300      	movs	r3, #0
}
 801504c:	4618      	mov	r0, r3
 801504e:	3708      	adds	r7, #8
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	20005a58 	.word	0x20005a58

08015058 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b086      	sub	sp, #24
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
 8015060:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	685b      	ldr	r3, [r3, #4]
 8015066:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015068:	697b      	ldr	r3, [r7, #20]
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	091b      	lsrs	r3, r3, #4
 801506e:	b2db      	uxtb	r3, r3
 8015070:	2b04      	cmp	r3, #4
 8015072:	d004      	beq.n	801507e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015074:	6878      	ldr	r0, [r7, #4]
 8015076:	f7f8 fb31 	bl	800d6dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801507a:	2300      	movs	r3, #0
 801507c:	e107      	b.n	801528e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801507e:	697b      	ldr	r3, [r7, #20]
 8015080:	781b      	ldrb	r3, [r3, #0]
 8015082:	f003 030f 	and.w	r3, r3, #15
 8015086:	b2db      	uxtb	r3, r3
 8015088:	009b      	lsls	r3, r3, #2
 801508a:	b2db      	uxtb	r3, r3
 801508c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801508e:	697b      	ldr	r3, [r7, #20]
 8015090:	885b      	ldrh	r3, [r3, #2]
 8015092:	b29b      	uxth	r3, r3
 8015094:	4618      	mov	r0, r3
 8015096:	f7f6 ffc3 	bl	800c020 <lwip_htons>
 801509a:	4603      	mov	r3, r0
 801509c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	891b      	ldrh	r3, [r3, #8]
 80150a2:	89ba      	ldrh	r2, [r7, #12]
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d204      	bcs.n	80150b2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80150a8:	89bb      	ldrh	r3, [r7, #12]
 80150aa:	4619      	mov	r1, r3
 80150ac:	6878      	ldr	r0, [r7, #4]
 80150ae:	f7f8 f98f 	bl	800d3d0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	895b      	ldrh	r3, [r3, #10]
 80150b6:	89fa      	ldrh	r2, [r7, #14]
 80150b8:	429a      	cmp	r2, r3
 80150ba:	d807      	bhi.n	80150cc <ip4_input+0x74>
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	891b      	ldrh	r3, [r3, #8]
 80150c0:	89ba      	ldrh	r2, [r7, #12]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d802      	bhi.n	80150cc <ip4_input+0x74>
 80150c6:	89fb      	ldrh	r3, [r7, #14]
 80150c8:	2b13      	cmp	r3, #19
 80150ca:	d804      	bhi.n	80150d6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f7f8 fb05 	bl	800d6dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80150d2:	2300      	movs	r3, #0
 80150d4:	e0db      	b.n	801528e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	691b      	ldr	r3, [r3, #16]
 80150da:	4a6f      	ldr	r2, [pc, #444]	; (8015298 <ip4_input+0x240>)
 80150dc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80150de:	697b      	ldr	r3, [r7, #20]
 80150e0:	68db      	ldr	r3, [r3, #12]
 80150e2:	4a6d      	ldr	r2, [pc, #436]	; (8015298 <ip4_input+0x240>)
 80150e4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80150e6:	4b6c      	ldr	r3, [pc, #432]	; (8015298 <ip4_input+0x240>)
 80150e8:	695b      	ldr	r3, [r3, #20]
 80150ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80150ee:	2be0      	cmp	r3, #224	; 0xe0
 80150f0:	d112      	bne.n	8015118 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80150f2:	683b      	ldr	r3, [r7, #0]
 80150f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80150f8:	f003 0301 	and.w	r3, r3, #1
 80150fc:	b2db      	uxtb	r3, r3
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d007      	beq.n	8015112 <ip4_input+0xba>
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	3304      	adds	r3, #4
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d002      	beq.n	8015112 <ip4_input+0xba>
      netif = inp;
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	613b      	str	r3, [r7, #16]
 8015110:	e02a      	b.n	8015168 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015112:	2300      	movs	r3, #0
 8015114:	613b      	str	r3, [r7, #16]
 8015116:	e027      	b.n	8015168 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015118:	6838      	ldr	r0, [r7, #0]
 801511a:	f7ff ff73 	bl	8015004 <ip4_input_accept>
 801511e:	4603      	mov	r3, r0
 8015120:	2b00      	cmp	r3, #0
 8015122:	d002      	beq.n	801512a <ip4_input+0xd2>
      netif = inp;
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	613b      	str	r3, [r7, #16]
 8015128:	e01e      	b.n	8015168 <ip4_input+0x110>
    } else {
      netif = NULL;
 801512a:	2300      	movs	r3, #0
 801512c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801512e:	4b5a      	ldr	r3, [pc, #360]	; (8015298 <ip4_input+0x240>)
 8015130:	695b      	ldr	r3, [r3, #20]
 8015132:	b2db      	uxtb	r3, r3
 8015134:	2b7f      	cmp	r3, #127	; 0x7f
 8015136:	d017      	beq.n	8015168 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015138:	4b58      	ldr	r3, [pc, #352]	; (801529c <ip4_input+0x244>)
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	613b      	str	r3, [r7, #16]
 801513e:	e00e      	b.n	801515e <ip4_input+0x106>
          if (netif == inp) {
 8015140:	693a      	ldr	r2, [r7, #16]
 8015142:	683b      	ldr	r3, [r7, #0]
 8015144:	429a      	cmp	r2, r3
 8015146:	d006      	beq.n	8015156 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015148:	6938      	ldr	r0, [r7, #16]
 801514a:	f7ff ff5b 	bl	8015004 <ip4_input_accept>
 801514e:	4603      	mov	r3, r0
 8015150:	2b00      	cmp	r3, #0
 8015152:	d108      	bne.n	8015166 <ip4_input+0x10e>
 8015154:	e000      	b.n	8015158 <ip4_input+0x100>
            continue;
 8015156:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	613b      	str	r3, [r7, #16]
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d1ed      	bne.n	8015140 <ip4_input+0xe8>
 8015164:	e000      	b.n	8015168 <ip4_input+0x110>
            break;
 8015166:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015168:	4b4b      	ldr	r3, [pc, #300]	; (8015298 <ip4_input+0x240>)
 801516a:	691b      	ldr	r3, [r3, #16]
 801516c:	6839      	ldr	r1, [r7, #0]
 801516e:	4618      	mov	r0, r3
 8015170:	f000 f96e 	bl	8015450 <ip4_addr_isbroadcast_u32>
 8015174:	4603      	mov	r3, r0
 8015176:	2b00      	cmp	r3, #0
 8015178:	d105      	bne.n	8015186 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801517a:	4b47      	ldr	r3, [pc, #284]	; (8015298 <ip4_input+0x240>)
 801517c:	691b      	ldr	r3, [r3, #16]
 801517e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015182:	2be0      	cmp	r3, #224	; 0xe0
 8015184:	d104      	bne.n	8015190 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015186:	6878      	ldr	r0, [r7, #4]
 8015188:	f7f8 faa8 	bl	800d6dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801518c:	2300      	movs	r3, #0
 801518e:	e07e      	b.n	801528e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d104      	bne.n	80151a0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f7f8 faa0 	bl	800d6dc <pbuf_free>
    return ERR_OK;
 801519c:	2300      	movs	r3, #0
 801519e:	e076      	b.n	801528e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80151a0:	697b      	ldr	r3, [r7, #20]
 80151a2:	88db      	ldrh	r3, [r3, #6]
 80151a4:	b29b      	uxth	r3, r3
 80151a6:	461a      	mov	r2, r3
 80151a8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80151ac:	4013      	ands	r3, r2
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d00b      	beq.n	80151ca <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f000 fc92 	bl	8015adc <ip4_reass>
 80151b8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d101      	bne.n	80151c4 <ip4_input+0x16c>
      return ERR_OK;
 80151c0:	2300      	movs	r3, #0
 80151c2:	e064      	b.n	801528e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	685b      	ldr	r3, [r3, #4]
 80151c8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80151ca:	4a33      	ldr	r2, [pc, #204]	; (8015298 <ip4_input+0x240>)
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80151d0:	4a31      	ldr	r2, [pc, #196]	; (8015298 <ip4_input+0x240>)
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80151d6:	4a30      	ldr	r2, [pc, #192]	; (8015298 <ip4_input+0x240>)
 80151d8:	697b      	ldr	r3, [r7, #20]
 80151da:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80151dc:	697b      	ldr	r3, [r7, #20]
 80151de:	781b      	ldrb	r3, [r3, #0]
 80151e0:	f003 030f 	and.w	r3, r3, #15
 80151e4:	b2db      	uxtb	r3, r3
 80151e6:	009b      	lsls	r3, r3, #2
 80151e8:	b2db      	uxtb	r3, r3
 80151ea:	b29a      	uxth	r2, r3
 80151ec:	4b2a      	ldr	r3, [pc, #168]	; (8015298 <ip4_input+0x240>)
 80151ee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80151f0:	89fb      	ldrh	r3, [r7, #14]
 80151f2:	4619      	mov	r1, r3
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f7f8 f9eb 	bl	800d5d0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80151fa:	697b      	ldr	r3, [r7, #20]
 80151fc:	7a5b      	ldrb	r3, [r3, #9]
 80151fe:	2b11      	cmp	r3, #17
 8015200:	d006      	beq.n	8015210 <ip4_input+0x1b8>
 8015202:	2b11      	cmp	r3, #17
 8015204:	dc13      	bgt.n	801522e <ip4_input+0x1d6>
 8015206:	2b01      	cmp	r3, #1
 8015208:	d00c      	beq.n	8015224 <ip4_input+0x1cc>
 801520a:	2b06      	cmp	r3, #6
 801520c:	d005      	beq.n	801521a <ip4_input+0x1c2>
 801520e:	e00e      	b.n	801522e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015210:	6839      	ldr	r1, [r7, #0]
 8015212:	6878      	ldr	r0, [r7, #4]
 8015214:	f7fe f8e6 	bl	80133e4 <udp_input>
        break;
 8015218:	e026      	b.n	8015268 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801521a:	6839      	ldr	r1, [r7, #0]
 801521c:	6878      	ldr	r0, [r7, #4]
 801521e:	f7fa f927 	bl	800f470 <tcp_input>
        break;
 8015222:	e021      	b.n	8015268 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015224:	6839      	ldr	r1, [r7, #0]
 8015226:	6878      	ldr	r0, [r7, #4]
 8015228:	f7ff fcee 	bl	8014c08 <icmp_input>
        break;
 801522c:	e01c      	b.n	8015268 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801522e:	4b1a      	ldr	r3, [pc, #104]	; (8015298 <ip4_input+0x240>)
 8015230:	695b      	ldr	r3, [r3, #20]
 8015232:	6939      	ldr	r1, [r7, #16]
 8015234:	4618      	mov	r0, r3
 8015236:	f000 f90b 	bl	8015450 <ip4_addr_isbroadcast_u32>
 801523a:	4603      	mov	r3, r0
 801523c:	2b00      	cmp	r3, #0
 801523e:	d10f      	bne.n	8015260 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015240:	4b15      	ldr	r3, [pc, #84]	; (8015298 <ip4_input+0x240>)
 8015242:	695b      	ldr	r3, [r3, #20]
 8015244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015248:	2be0      	cmp	r3, #224	; 0xe0
 801524a:	d009      	beq.n	8015260 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801524c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015250:	4619      	mov	r1, r3
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f7f8 fa2f 	bl	800d6b6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015258:	2102      	movs	r1, #2
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f7ff fdd8 	bl	8014e10 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015260:	6878      	ldr	r0, [r7, #4]
 8015262:	f7f8 fa3b 	bl	800d6dc <pbuf_free>
        break;
 8015266:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015268:	4b0b      	ldr	r3, [pc, #44]	; (8015298 <ip4_input+0x240>)
 801526a:	2200      	movs	r2, #0
 801526c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801526e:	4b0a      	ldr	r3, [pc, #40]	; (8015298 <ip4_input+0x240>)
 8015270:	2200      	movs	r2, #0
 8015272:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015274:	4b08      	ldr	r3, [pc, #32]	; (8015298 <ip4_input+0x240>)
 8015276:	2200      	movs	r2, #0
 8015278:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801527a:	4b07      	ldr	r3, [pc, #28]	; (8015298 <ip4_input+0x240>)
 801527c:	2200      	movs	r2, #0
 801527e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015280:	4b05      	ldr	r3, [pc, #20]	; (8015298 <ip4_input+0x240>)
 8015282:	2200      	movs	r2, #0
 8015284:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015286:	4b04      	ldr	r3, [pc, #16]	; (8015298 <ip4_input+0x240>)
 8015288:	2200      	movs	r2, #0
 801528a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801528c:	2300      	movs	r3, #0
}
 801528e:	4618      	mov	r0, r3
 8015290:	3718      	adds	r7, #24
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}
 8015296:	bf00      	nop
 8015298:	20005a58 	.word	0x20005a58
 801529c:	20008fbc 	.word	0x20008fbc

080152a0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b08a      	sub	sp, #40	; 0x28
 80152a4:	af04      	add	r7, sp, #16
 80152a6:	60f8      	str	r0, [r7, #12]
 80152a8:	60b9      	str	r1, [r7, #8]
 80152aa:	607a      	str	r2, [r7, #4]
 80152ac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80152ae:	68bb      	ldr	r3, [r7, #8]
 80152b0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d009      	beq.n	80152cc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80152b8:	68bb      	ldr	r3, [r7, #8]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d003      	beq.n	80152c6 <ip4_output_if+0x26>
 80152be:	68bb      	ldr	r3, [r7, #8]
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d102      	bne.n	80152cc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80152c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152c8:	3304      	adds	r3, #4
 80152ca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80152cc:	78fa      	ldrb	r2, [r7, #3]
 80152ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152d0:	9302      	str	r3, [sp, #8]
 80152d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80152d6:	9301      	str	r3, [sp, #4]
 80152d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80152dc:	9300      	str	r3, [sp, #0]
 80152de:	4613      	mov	r3, r2
 80152e0:	687a      	ldr	r2, [r7, #4]
 80152e2:	6979      	ldr	r1, [r7, #20]
 80152e4:	68f8      	ldr	r0, [r7, #12]
 80152e6:	f000 f805 	bl	80152f4 <ip4_output_if_src>
 80152ea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80152ec:	4618      	mov	r0, r3
 80152ee:	3718      	adds	r7, #24
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}

080152f4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b088      	sub	sp, #32
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	60f8      	str	r0, [r7, #12]
 80152fc:	60b9      	str	r1, [r7, #8]
 80152fe:	607a      	str	r2, [r7, #4]
 8015300:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	7b9b      	ldrb	r3, [r3, #14]
 8015306:	2b01      	cmp	r3, #1
 8015308:	d006      	beq.n	8015318 <ip4_output_if_src+0x24>
 801530a:	4b4b      	ldr	r3, [pc, #300]	; (8015438 <ip4_output_if_src+0x144>)
 801530c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015310:	494a      	ldr	r1, [pc, #296]	; (801543c <ip4_output_if_src+0x148>)
 8015312:	484b      	ldr	r0, [pc, #300]	; (8015440 <ip4_output_if_src+0x14c>)
 8015314:	f001 feb2 	bl	801707c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d060      	beq.n	80153e0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801531e:	2314      	movs	r3, #20
 8015320:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015322:	2114      	movs	r1, #20
 8015324:	68f8      	ldr	r0, [r7, #12]
 8015326:	f7f8 f943 	bl	800d5b0 <pbuf_add_header>
 801532a:	4603      	mov	r3, r0
 801532c:	2b00      	cmp	r3, #0
 801532e:	d002      	beq.n	8015336 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015330:	f06f 0301 	mvn.w	r3, #1
 8015334:	e07c      	b.n	8015430 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	685b      	ldr	r3, [r3, #4]
 801533a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	895b      	ldrh	r3, [r3, #10]
 8015340:	2b13      	cmp	r3, #19
 8015342:	d806      	bhi.n	8015352 <ip4_output_if_src+0x5e>
 8015344:	4b3c      	ldr	r3, [pc, #240]	; (8015438 <ip4_output_if_src+0x144>)
 8015346:	f44f 7262 	mov.w	r2, #904	; 0x388
 801534a:	493e      	ldr	r1, [pc, #248]	; (8015444 <ip4_output_if_src+0x150>)
 801534c:	483c      	ldr	r0, [pc, #240]	; (8015440 <ip4_output_if_src+0x14c>)
 801534e:	f001 fe95 	bl	801707c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015352:	69fb      	ldr	r3, [r7, #28]
 8015354:	78fa      	ldrb	r2, [r7, #3]
 8015356:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015358:	69fb      	ldr	r3, [r7, #28]
 801535a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801535e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681a      	ldr	r2, [r3, #0]
 8015364:	69fb      	ldr	r3, [r7, #28]
 8015366:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015368:	8b7b      	ldrh	r3, [r7, #26]
 801536a:	089b      	lsrs	r3, r3, #2
 801536c:	b29b      	uxth	r3, r3
 801536e:	b2db      	uxtb	r3, r3
 8015370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015374:	b2da      	uxtb	r2, r3
 8015376:	69fb      	ldr	r3, [r7, #28]
 8015378:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801537a:	69fb      	ldr	r3, [r7, #28]
 801537c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015380:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	891b      	ldrh	r3, [r3, #8]
 8015386:	4618      	mov	r0, r3
 8015388:	f7f6 fe4a 	bl	800c020 <lwip_htons>
 801538c:	4603      	mov	r3, r0
 801538e:	461a      	mov	r2, r3
 8015390:	69fb      	ldr	r3, [r7, #28]
 8015392:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015394:	69fb      	ldr	r3, [r7, #28]
 8015396:	2200      	movs	r2, #0
 8015398:	719a      	strb	r2, [r3, #6]
 801539a:	2200      	movs	r2, #0
 801539c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801539e:	4b2a      	ldr	r3, [pc, #168]	; (8015448 <ip4_output_if_src+0x154>)
 80153a0:	881b      	ldrh	r3, [r3, #0]
 80153a2:	4618      	mov	r0, r3
 80153a4:	f7f6 fe3c 	bl	800c020 <lwip_htons>
 80153a8:	4603      	mov	r3, r0
 80153aa:	461a      	mov	r2, r3
 80153ac:	69fb      	ldr	r3, [r7, #28]
 80153ae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80153b0:	4b25      	ldr	r3, [pc, #148]	; (8015448 <ip4_output_if_src+0x154>)
 80153b2:	881b      	ldrh	r3, [r3, #0]
 80153b4:	3301      	adds	r3, #1
 80153b6:	b29a      	uxth	r2, r3
 80153b8:	4b23      	ldr	r3, [pc, #140]	; (8015448 <ip4_output_if_src+0x154>)
 80153ba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80153bc:	68bb      	ldr	r3, [r7, #8]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d104      	bne.n	80153cc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80153c2:	4b22      	ldr	r3, [pc, #136]	; (801544c <ip4_output_if_src+0x158>)
 80153c4:	681a      	ldr	r2, [r3, #0]
 80153c6:	69fb      	ldr	r3, [r7, #28]
 80153c8:	60da      	str	r2, [r3, #12]
 80153ca:	e003      	b.n	80153d4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80153cc:	68bb      	ldr	r3, [r7, #8]
 80153ce:	681a      	ldr	r2, [r3, #0]
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80153d4:	69fb      	ldr	r3, [r7, #28]
 80153d6:	2200      	movs	r2, #0
 80153d8:	729a      	strb	r2, [r3, #10]
 80153da:	2200      	movs	r2, #0
 80153dc:	72da      	strb	r2, [r3, #11]
 80153de:	e00f      	b.n	8015400 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	895b      	ldrh	r3, [r3, #10]
 80153e4:	2b13      	cmp	r3, #19
 80153e6:	d802      	bhi.n	80153ee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80153e8:	f06f 0301 	mvn.w	r3, #1
 80153ec:	e020      	b.n	8015430 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	685b      	ldr	r3, [r3, #4]
 80153f2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80153f4:	69fb      	ldr	r3, [r7, #28]
 80153f6:	691b      	ldr	r3, [r3, #16]
 80153f8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80153fa:	f107 0314 	add.w	r3, r7, #20
 80153fe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015402:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015404:	2b00      	cmp	r3, #0
 8015406:	d00c      	beq.n	8015422 <ip4_output_if_src+0x12e>
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	891a      	ldrh	r2, [r3, #8]
 801540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801540e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015410:	429a      	cmp	r2, r3
 8015412:	d906      	bls.n	8015422 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015414:	687a      	ldr	r2, [r7, #4]
 8015416:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015418:	68f8      	ldr	r0, [r7, #12]
 801541a:	f000 fd53 	bl	8015ec4 <ip4_frag>
 801541e:	4603      	mov	r3, r0
 8015420:	e006      	b.n	8015430 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015424:	695b      	ldr	r3, [r3, #20]
 8015426:	687a      	ldr	r2, [r7, #4]
 8015428:	68f9      	ldr	r1, [r7, #12]
 801542a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801542c:	4798      	blx	r3
 801542e:	4603      	mov	r3, r0
}
 8015430:	4618      	mov	r0, r3
 8015432:	3720      	adds	r7, #32
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}
 8015438:	0801a618 	.word	0x0801a618
 801543c:	0801a64c 	.word	0x0801a64c
 8015440:	0801a658 	.word	0x0801a658
 8015444:	0801a680 	.word	0x0801a680
 8015448:	2000911a 	.word	0x2000911a
 801544c:	0801aa68 	.word	0x0801aa68

08015450 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015450:	b480      	push	{r7}
 8015452:	b085      	sub	sp, #20
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]
 8015458:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015464:	d002      	beq.n	801546c <ip4_addr_isbroadcast_u32+0x1c>
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d101      	bne.n	8015470 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801546c:	2301      	movs	r3, #1
 801546e:	e02a      	b.n	80154c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015476:	f003 0302 	and.w	r3, r3, #2
 801547a:	2b00      	cmp	r3, #0
 801547c:	d101      	bne.n	8015482 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801547e:	2300      	movs	r3, #0
 8015480:	e021      	b.n	80154c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	3304      	adds	r3, #4
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	687a      	ldr	r2, [r7, #4]
 801548a:	429a      	cmp	r2, r3
 801548c:	d101      	bne.n	8015492 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801548e:	2300      	movs	r3, #0
 8015490:	e019      	b.n	80154c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015492:	68fa      	ldr	r2, [r7, #12]
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	3304      	adds	r3, #4
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	405a      	eors	r2, r3
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	3308      	adds	r3, #8
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	4013      	ands	r3, r2
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d10d      	bne.n	80154c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80154a8:	683b      	ldr	r3, [r7, #0]
 80154aa:	3308      	adds	r3, #8
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	43da      	mvns	r2, r3
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80154b4:	683b      	ldr	r3, [r7, #0]
 80154b6:	3308      	adds	r3, #8
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80154bc:	429a      	cmp	r2, r3
 80154be:	d101      	bne.n	80154c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80154c0:	2301      	movs	r3, #1
 80154c2:	e000      	b.n	80154c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80154c4:	2300      	movs	r3, #0
  }
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	3714      	adds	r7, #20
 80154ca:	46bd      	mov	sp, r7
 80154cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d0:	4770      	bx	lr
	...

080154d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b084      	sub	sp, #16
 80154d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80154da:	2300      	movs	r3, #0
 80154dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80154de:	4b12      	ldr	r3, [pc, #72]	; (8015528 <ip_reass_tmr+0x54>)
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80154e4:	e018      	b.n	8015518 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	7fdb      	ldrb	r3, [r3, #31]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d00b      	beq.n	8015506 <ip_reass_tmr+0x32>
      r->timer--;
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	7fdb      	ldrb	r3, [r3, #31]
 80154f2:	3b01      	subs	r3, #1
 80154f4:	b2da      	uxtb	r2, r3
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	60fb      	str	r3, [r7, #12]
 8015504:	e008      	b.n	8015518 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015510:	68b9      	ldr	r1, [r7, #8]
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	f000 f80a 	bl	801552c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d1e3      	bne.n	80154e6 <ip_reass_tmr+0x12>
    }
  }
}
 801551e:	bf00      	nop
 8015520:	bf00      	nop
 8015522:	3710      	adds	r7, #16
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}
 8015528:	2000911c 	.word	0x2000911c

0801552c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b088      	sub	sp, #32
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015536:	2300      	movs	r3, #0
 8015538:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801553a:	683a      	ldr	r2, [r7, #0]
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	429a      	cmp	r2, r3
 8015540:	d105      	bne.n	801554e <ip_reass_free_complete_datagram+0x22>
 8015542:	4b45      	ldr	r3, [pc, #276]	; (8015658 <ip_reass_free_complete_datagram+0x12c>)
 8015544:	22ab      	movs	r2, #171	; 0xab
 8015546:	4945      	ldr	r1, [pc, #276]	; (801565c <ip_reass_free_complete_datagram+0x130>)
 8015548:	4845      	ldr	r0, [pc, #276]	; (8015660 <ip_reass_free_complete_datagram+0x134>)
 801554a:	f001 fd97 	bl	801707c <iprintf>
  if (prev != NULL) {
 801554e:	683b      	ldr	r3, [r7, #0]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d00a      	beq.n	801556a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	687a      	ldr	r2, [r7, #4]
 801555a:	429a      	cmp	r2, r3
 801555c:	d005      	beq.n	801556a <ip_reass_free_complete_datagram+0x3e>
 801555e:	4b3e      	ldr	r3, [pc, #248]	; (8015658 <ip_reass_free_complete_datagram+0x12c>)
 8015560:	22ad      	movs	r2, #173	; 0xad
 8015562:	4940      	ldr	r1, [pc, #256]	; (8015664 <ip_reass_free_complete_datagram+0x138>)
 8015564:	483e      	ldr	r0, [pc, #248]	; (8015660 <ip_reass_free_complete_datagram+0x134>)
 8015566:	f001 fd89 	bl	801707c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	685b      	ldr	r3, [r3, #4]
 801556e:	685b      	ldr	r3, [r3, #4]
 8015570:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015572:	697b      	ldr	r3, [r7, #20]
 8015574:	889b      	ldrh	r3, [r3, #4]
 8015576:	b29b      	uxth	r3, r3
 8015578:	2b00      	cmp	r3, #0
 801557a:	d12a      	bne.n	80155d2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015582:	697b      	ldr	r3, [r7, #20]
 8015584:	681a      	ldr	r2, [r3, #0]
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	6858      	ldr	r0, [r3, #4]
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	3308      	adds	r3, #8
 8015592:	2214      	movs	r2, #20
 8015594:	4619      	mov	r1, r3
 8015596:	f001 fc7b 	bl	8016e90 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801559a:	2101      	movs	r1, #1
 801559c:	69b8      	ldr	r0, [r7, #24]
 801559e:	f7ff fc47 	bl	8014e30 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80155a2:	69b8      	ldr	r0, [r7, #24]
 80155a4:	f7f8 f922 	bl	800d7ec <pbuf_clen>
 80155a8:	4603      	mov	r3, r0
 80155aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80155ac:	8bfa      	ldrh	r2, [r7, #30]
 80155ae:	8a7b      	ldrh	r3, [r7, #18]
 80155b0:	4413      	add	r3, r2
 80155b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155b6:	db05      	blt.n	80155c4 <ip_reass_free_complete_datagram+0x98>
 80155b8:	4b27      	ldr	r3, [pc, #156]	; (8015658 <ip_reass_free_complete_datagram+0x12c>)
 80155ba:	22bc      	movs	r2, #188	; 0xbc
 80155bc:	492a      	ldr	r1, [pc, #168]	; (8015668 <ip_reass_free_complete_datagram+0x13c>)
 80155be:	4828      	ldr	r0, [pc, #160]	; (8015660 <ip_reass_free_complete_datagram+0x134>)
 80155c0:	f001 fd5c 	bl	801707c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80155c4:	8bfa      	ldrh	r2, [r7, #30]
 80155c6:	8a7b      	ldrh	r3, [r7, #18]
 80155c8:	4413      	add	r3, r2
 80155ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80155cc:	69b8      	ldr	r0, [r7, #24]
 80155ce:	f7f8 f885 	bl	800d6dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	685b      	ldr	r3, [r3, #4]
 80155d6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80155d8:	e01f      	b.n	801561a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80155da:	69bb      	ldr	r3, [r7, #24]
 80155dc:	685b      	ldr	r3, [r3, #4]
 80155de:	617b      	str	r3, [r7, #20]
    pcur = p;
 80155e0:	69bb      	ldr	r3, [r7, #24]
 80155e2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80155ea:	68f8      	ldr	r0, [r7, #12]
 80155ec:	f7f8 f8fe 	bl	800d7ec <pbuf_clen>
 80155f0:	4603      	mov	r3, r0
 80155f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80155f4:	8bfa      	ldrh	r2, [r7, #30]
 80155f6:	8a7b      	ldrh	r3, [r7, #18]
 80155f8:	4413      	add	r3, r2
 80155fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155fe:	db05      	blt.n	801560c <ip_reass_free_complete_datagram+0xe0>
 8015600:	4b15      	ldr	r3, [pc, #84]	; (8015658 <ip_reass_free_complete_datagram+0x12c>)
 8015602:	22cc      	movs	r2, #204	; 0xcc
 8015604:	4918      	ldr	r1, [pc, #96]	; (8015668 <ip_reass_free_complete_datagram+0x13c>)
 8015606:	4816      	ldr	r0, [pc, #88]	; (8015660 <ip_reass_free_complete_datagram+0x134>)
 8015608:	f001 fd38 	bl	801707c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801560c:	8bfa      	ldrh	r2, [r7, #30]
 801560e:	8a7b      	ldrh	r3, [r7, #18]
 8015610:	4413      	add	r3, r2
 8015612:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015614:	68f8      	ldr	r0, [r7, #12]
 8015616:	f7f8 f861 	bl	800d6dc <pbuf_free>
  while (p != NULL) {
 801561a:	69bb      	ldr	r3, [r7, #24]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d1dc      	bne.n	80155da <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015620:	6839      	ldr	r1, [r7, #0]
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f000 f8c2 	bl	80157ac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015628:	4b10      	ldr	r3, [pc, #64]	; (801566c <ip_reass_free_complete_datagram+0x140>)
 801562a:	881b      	ldrh	r3, [r3, #0]
 801562c:	8bfa      	ldrh	r2, [r7, #30]
 801562e:	429a      	cmp	r2, r3
 8015630:	d905      	bls.n	801563e <ip_reass_free_complete_datagram+0x112>
 8015632:	4b09      	ldr	r3, [pc, #36]	; (8015658 <ip_reass_free_complete_datagram+0x12c>)
 8015634:	22d2      	movs	r2, #210	; 0xd2
 8015636:	490e      	ldr	r1, [pc, #56]	; (8015670 <ip_reass_free_complete_datagram+0x144>)
 8015638:	4809      	ldr	r0, [pc, #36]	; (8015660 <ip_reass_free_complete_datagram+0x134>)
 801563a:	f001 fd1f 	bl	801707c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801563e:	4b0b      	ldr	r3, [pc, #44]	; (801566c <ip_reass_free_complete_datagram+0x140>)
 8015640:	881a      	ldrh	r2, [r3, #0]
 8015642:	8bfb      	ldrh	r3, [r7, #30]
 8015644:	1ad3      	subs	r3, r2, r3
 8015646:	b29a      	uxth	r2, r3
 8015648:	4b08      	ldr	r3, [pc, #32]	; (801566c <ip_reass_free_complete_datagram+0x140>)
 801564a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801564c:	8bfb      	ldrh	r3, [r7, #30]
}
 801564e:	4618      	mov	r0, r3
 8015650:	3720      	adds	r7, #32
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}
 8015656:	bf00      	nop
 8015658:	0801a6b0 	.word	0x0801a6b0
 801565c:	0801a6ec 	.word	0x0801a6ec
 8015660:	0801a6f8 	.word	0x0801a6f8
 8015664:	0801a720 	.word	0x0801a720
 8015668:	0801a734 	.word	0x0801a734
 801566c:	20009120 	.word	0x20009120
 8015670:	0801a754 	.word	0x0801a754

08015674 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b08a      	sub	sp, #40	; 0x28
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
 801567c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801567e:	2300      	movs	r3, #0
 8015680:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015682:	2300      	movs	r3, #0
 8015684:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015686:	2300      	movs	r3, #0
 8015688:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801568a:	2300      	movs	r3, #0
 801568c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801568e:	2300      	movs	r3, #0
 8015690:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015692:	4b28      	ldr	r3, [pc, #160]	; (8015734 <ip_reass_remove_oldest_datagram+0xc0>)
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015698:	e030      	b.n	80156fc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801569c:	695a      	ldr	r2, [r3, #20]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	68db      	ldr	r3, [r3, #12]
 80156a2:	429a      	cmp	r2, r3
 80156a4:	d10c      	bne.n	80156c0 <ip_reass_remove_oldest_datagram+0x4c>
 80156a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a8:	699a      	ldr	r2, [r3, #24]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	691b      	ldr	r3, [r3, #16]
 80156ae:	429a      	cmp	r2, r3
 80156b0:	d106      	bne.n	80156c0 <ip_reass_remove_oldest_datagram+0x4c>
 80156b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156b4:	899a      	ldrh	r2, [r3, #12]
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	889b      	ldrh	r3, [r3, #4]
 80156ba:	b29b      	uxth	r3, r3
 80156bc:	429a      	cmp	r2, r3
 80156be:	d014      	beq.n	80156ea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80156c0:	693b      	ldr	r3, [r7, #16]
 80156c2:	3301      	adds	r3, #1
 80156c4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80156c6:	6a3b      	ldr	r3, [r7, #32]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d104      	bne.n	80156d6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80156cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80156d0:	69fb      	ldr	r3, [r7, #28]
 80156d2:	61bb      	str	r3, [r7, #24]
 80156d4:	e009      	b.n	80156ea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80156d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156d8:	7fda      	ldrb	r2, [r3, #31]
 80156da:	6a3b      	ldr	r3, [r7, #32]
 80156dc:	7fdb      	ldrb	r3, [r3, #31]
 80156de:	429a      	cmp	r2, r3
 80156e0:	d803      	bhi.n	80156ea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80156e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156e4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80156ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d001      	beq.n	80156f6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80156f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80156f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80156fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d1cb      	bne.n	801569a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015702:	6a3b      	ldr	r3, [r7, #32]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d008      	beq.n	801571a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015708:	69b9      	ldr	r1, [r7, #24]
 801570a:	6a38      	ldr	r0, [r7, #32]
 801570c:	f7ff ff0e 	bl	801552c <ip_reass_free_complete_datagram>
 8015710:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015712:	697a      	ldr	r2, [r7, #20]
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	4413      	add	r3, r2
 8015718:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801571a:	697a      	ldr	r2, [r7, #20]
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	429a      	cmp	r2, r3
 8015720:	da02      	bge.n	8015728 <ip_reass_remove_oldest_datagram+0xb4>
 8015722:	693b      	ldr	r3, [r7, #16]
 8015724:	2b01      	cmp	r3, #1
 8015726:	dcac      	bgt.n	8015682 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015728:	697b      	ldr	r3, [r7, #20]
}
 801572a:	4618      	mov	r0, r3
 801572c:	3728      	adds	r7, #40	; 0x28
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	2000911c 	.word	0x2000911c

08015738 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b084      	sub	sp, #16
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
 8015740:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015742:	2004      	movs	r0, #4
 8015744:	f7f7 f8e4 	bl	800c910 <memp_malloc>
 8015748:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d110      	bne.n	8015772 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015750:	6839      	ldr	r1, [r7, #0]
 8015752:	6878      	ldr	r0, [r7, #4]
 8015754:	f7ff ff8e 	bl	8015674 <ip_reass_remove_oldest_datagram>
 8015758:	4602      	mov	r2, r0
 801575a:	683b      	ldr	r3, [r7, #0]
 801575c:	4293      	cmp	r3, r2
 801575e:	dc03      	bgt.n	8015768 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015760:	2004      	movs	r0, #4
 8015762:	f7f7 f8d5 	bl	800c910 <memp_malloc>
 8015766:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d101      	bne.n	8015772 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801576e:	2300      	movs	r3, #0
 8015770:	e016      	b.n	80157a0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015772:	2220      	movs	r2, #32
 8015774:	2100      	movs	r1, #0
 8015776:	68f8      	ldr	r0, [r7, #12]
 8015778:	f001 fb98 	bl	8016eac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	220f      	movs	r2, #15
 8015780:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015782:	4b09      	ldr	r3, [pc, #36]	; (80157a8 <ip_reass_enqueue_new_datagram+0x70>)
 8015784:	681a      	ldr	r2, [r3, #0]
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801578a:	4a07      	ldr	r2, [pc, #28]	; (80157a8 <ip_reass_enqueue_new_datagram+0x70>)
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	3308      	adds	r3, #8
 8015794:	2214      	movs	r2, #20
 8015796:	6879      	ldr	r1, [r7, #4]
 8015798:	4618      	mov	r0, r3
 801579a:	f001 fb79 	bl	8016e90 <memcpy>
  return ipr;
 801579e:	68fb      	ldr	r3, [r7, #12]
}
 80157a0:	4618      	mov	r0, r3
 80157a2:	3710      	adds	r7, #16
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd80      	pop	{r7, pc}
 80157a8:	2000911c 	.word	0x2000911c

080157ac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b082      	sub	sp, #8
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
 80157b4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80157b6:	4b10      	ldr	r3, [pc, #64]	; (80157f8 <ip_reass_dequeue_datagram+0x4c>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	687a      	ldr	r2, [r7, #4]
 80157bc:	429a      	cmp	r2, r3
 80157be:	d104      	bne.n	80157ca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	4a0c      	ldr	r2, [pc, #48]	; (80157f8 <ip_reass_dequeue_datagram+0x4c>)
 80157c6:	6013      	str	r3, [r2, #0]
 80157c8:	e00d      	b.n	80157e6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d106      	bne.n	80157de <ip_reass_dequeue_datagram+0x32>
 80157d0:	4b0a      	ldr	r3, [pc, #40]	; (80157fc <ip_reass_dequeue_datagram+0x50>)
 80157d2:	f240 1245 	movw	r2, #325	; 0x145
 80157d6:	490a      	ldr	r1, [pc, #40]	; (8015800 <ip_reass_dequeue_datagram+0x54>)
 80157d8:	480a      	ldr	r0, [pc, #40]	; (8015804 <ip_reass_dequeue_datagram+0x58>)
 80157da:	f001 fc4f 	bl	801707c <iprintf>
    prev->next = ipr->next;
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	681a      	ldr	r2, [r3, #0]
 80157e2:	683b      	ldr	r3, [r7, #0]
 80157e4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80157e6:	6879      	ldr	r1, [r7, #4]
 80157e8:	2004      	movs	r0, #4
 80157ea:	f7f7 f901 	bl	800c9f0 <memp_free>
}
 80157ee:	bf00      	nop
 80157f0:	3708      	adds	r7, #8
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd80      	pop	{r7, pc}
 80157f6:	bf00      	nop
 80157f8:	2000911c 	.word	0x2000911c
 80157fc:	0801a6b0 	.word	0x0801a6b0
 8015800:	0801a778 	.word	0x0801a778
 8015804:	0801a6f8 	.word	0x0801a6f8

08015808 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b08c      	sub	sp, #48	; 0x30
 801580c:	af00      	add	r7, sp, #0
 801580e:	60f8      	str	r0, [r7, #12]
 8015810:	60b9      	str	r1, [r7, #8]
 8015812:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015814:	2300      	movs	r3, #0
 8015816:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015818:	2301      	movs	r3, #1
 801581a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	685b      	ldr	r3, [r3, #4]
 8015820:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015822:	69fb      	ldr	r3, [r7, #28]
 8015824:	885b      	ldrh	r3, [r3, #2]
 8015826:	b29b      	uxth	r3, r3
 8015828:	4618      	mov	r0, r3
 801582a:	f7f6 fbf9 	bl	800c020 <lwip_htons>
 801582e:	4603      	mov	r3, r0
 8015830:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015832:	69fb      	ldr	r3, [r7, #28]
 8015834:	781b      	ldrb	r3, [r3, #0]
 8015836:	f003 030f 	and.w	r3, r3, #15
 801583a:	b2db      	uxtb	r3, r3
 801583c:	009b      	lsls	r3, r3, #2
 801583e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015840:	7e7b      	ldrb	r3, [r7, #25]
 8015842:	b29b      	uxth	r3, r3
 8015844:	8b7a      	ldrh	r2, [r7, #26]
 8015846:	429a      	cmp	r2, r3
 8015848:	d202      	bcs.n	8015850 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801584a:	f04f 33ff 	mov.w	r3, #4294967295
 801584e:	e135      	b.n	8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015850:	7e7b      	ldrb	r3, [r7, #25]
 8015852:	b29b      	uxth	r3, r3
 8015854:	8b7a      	ldrh	r2, [r7, #26]
 8015856:	1ad3      	subs	r3, r2, r3
 8015858:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801585a:	69fb      	ldr	r3, [r7, #28]
 801585c:	88db      	ldrh	r3, [r3, #6]
 801585e:	b29b      	uxth	r3, r3
 8015860:	4618      	mov	r0, r3
 8015862:	f7f6 fbdd 	bl	800c020 <lwip_htons>
 8015866:	4603      	mov	r3, r0
 8015868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801586c:	b29b      	uxth	r3, r3
 801586e:	00db      	lsls	r3, r3, #3
 8015870:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	685b      	ldr	r3, [r3, #4]
 8015876:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587a:	2200      	movs	r2, #0
 801587c:	701a      	strb	r2, [r3, #0]
 801587e:	2200      	movs	r2, #0
 8015880:	705a      	strb	r2, [r3, #1]
 8015882:	2200      	movs	r2, #0
 8015884:	709a      	strb	r2, [r3, #2]
 8015886:	2200      	movs	r2, #0
 8015888:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801588c:	8afa      	ldrh	r2, [r7, #22]
 801588e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015890:	8afa      	ldrh	r2, [r7, #22]
 8015892:	8b7b      	ldrh	r3, [r7, #26]
 8015894:	4413      	add	r3, r2
 8015896:	b29a      	uxth	r2, r3
 8015898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801589a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801589e:	88db      	ldrh	r3, [r3, #6]
 80158a0:	b29b      	uxth	r3, r3
 80158a2:	8afa      	ldrh	r2, [r7, #22]
 80158a4:	429a      	cmp	r2, r3
 80158a6:	d902      	bls.n	80158ae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158a8:	f04f 33ff 	mov.w	r3, #4294967295
 80158ac:	e106      	b.n	8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	685b      	ldr	r3, [r3, #4]
 80158b2:	627b      	str	r3, [r7, #36]	; 0x24
 80158b4:	e068      	b.n	8015988 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80158b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b8:	685b      	ldr	r3, [r3, #4]
 80158ba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80158bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158be:	889b      	ldrh	r3, [r3, #4]
 80158c0:	b29a      	uxth	r2, r3
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	889b      	ldrh	r3, [r3, #4]
 80158c6:	b29b      	uxth	r3, r3
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d235      	bcs.n	8015938 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80158cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80158d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d020      	beq.n	801591a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80158d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158da:	889b      	ldrh	r3, [r3, #4]
 80158dc:	b29a      	uxth	r2, r3
 80158de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e0:	88db      	ldrh	r3, [r3, #6]
 80158e2:	b29b      	uxth	r3, r3
 80158e4:	429a      	cmp	r2, r3
 80158e6:	d307      	bcc.n	80158f8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80158e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ea:	88db      	ldrh	r3, [r3, #6]
 80158ec:	b29a      	uxth	r2, r3
 80158ee:	693b      	ldr	r3, [r7, #16]
 80158f0:	889b      	ldrh	r3, [r3, #4]
 80158f2:	b29b      	uxth	r3, r3
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d902      	bls.n	80158fe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158f8:	f04f 33ff 	mov.w	r3, #4294967295
 80158fc:	e0de      	b.n	8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80158fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015900:	68ba      	ldr	r2, [r7, #8]
 8015902:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015906:	88db      	ldrh	r3, [r3, #6]
 8015908:	b29a      	uxth	r2, r3
 801590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801590c:	889b      	ldrh	r3, [r3, #4]
 801590e:	b29b      	uxth	r3, r3
 8015910:	429a      	cmp	r2, r3
 8015912:	d03d      	beq.n	8015990 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015914:	2300      	movs	r3, #0
 8015916:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015918:	e03a      	b.n	8015990 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591c:	88db      	ldrh	r3, [r3, #6]
 801591e:	b29a      	uxth	r2, r3
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	889b      	ldrh	r3, [r3, #4]
 8015924:	b29b      	uxth	r3, r3
 8015926:	429a      	cmp	r2, r3
 8015928:	d902      	bls.n	8015930 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801592a:	f04f 33ff 	mov.w	r3, #4294967295
 801592e:	e0c5      	b.n	8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	68ba      	ldr	r2, [r7, #8]
 8015934:	605a      	str	r2, [r3, #4]
      break;
 8015936:	e02b      	b.n	8015990 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801593a:	889b      	ldrh	r3, [r3, #4]
 801593c:	b29a      	uxth	r2, r3
 801593e:	693b      	ldr	r3, [r7, #16]
 8015940:	889b      	ldrh	r3, [r3, #4]
 8015942:	b29b      	uxth	r3, r3
 8015944:	429a      	cmp	r2, r3
 8015946:	d102      	bne.n	801594e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015948:	f04f 33ff 	mov.w	r3, #4294967295
 801594c:	e0b6      	b.n	8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015950:	889b      	ldrh	r3, [r3, #4]
 8015952:	b29a      	uxth	r2, r3
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	88db      	ldrh	r3, [r3, #6]
 8015958:	b29b      	uxth	r3, r3
 801595a:	429a      	cmp	r2, r3
 801595c:	d202      	bcs.n	8015964 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801595e:	f04f 33ff 	mov.w	r3, #4294967295
 8015962:	e0ab      	b.n	8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015966:	2b00      	cmp	r3, #0
 8015968:	d009      	beq.n	801597e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596c:	88db      	ldrh	r3, [r3, #6]
 801596e:	b29a      	uxth	r2, r3
 8015970:	693b      	ldr	r3, [r7, #16]
 8015972:	889b      	ldrh	r3, [r3, #4]
 8015974:	b29b      	uxth	r3, r3
 8015976:	429a      	cmp	r2, r3
 8015978:	d001      	beq.n	801597e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801597a:	2300      	movs	r3, #0
 801597c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801597e:	693b      	ldr	r3, [r7, #16]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015984:	693b      	ldr	r3, [r7, #16]
 8015986:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801598a:	2b00      	cmp	r3, #0
 801598c:	d193      	bne.n	80158b6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801598e:	e000      	b.n	8015992 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015990:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015994:	2b00      	cmp	r3, #0
 8015996:	d12d      	bne.n	80159f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801599a:	2b00      	cmp	r3, #0
 801599c:	d01c      	beq.n	80159d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159a0:	88db      	ldrh	r3, [r3, #6]
 80159a2:	b29a      	uxth	r2, r3
 80159a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a6:	889b      	ldrh	r3, [r3, #4]
 80159a8:	b29b      	uxth	r3, r3
 80159aa:	429a      	cmp	r2, r3
 80159ac:	d906      	bls.n	80159bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80159ae:	4b45      	ldr	r3, [pc, #276]	; (8015ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80159b0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80159b4:	4944      	ldr	r1, [pc, #272]	; (8015ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80159b6:	4845      	ldr	r0, [pc, #276]	; (8015acc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80159b8:	f001 fb60 	bl	801707c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80159bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159be:	68ba      	ldr	r2, [r7, #8]
 80159c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80159c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159c4:	88db      	ldrh	r3, [r3, #6]
 80159c6:	b29a      	uxth	r2, r3
 80159c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ca:	889b      	ldrh	r3, [r3, #4]
 80159cc:	b29b      	uxth	r3, r3
 80159ce:	429a      	cmp	r2, r3
 80159d0:	d010      	beq.n	80159f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80159d2:	2300      	movs	r3, #0
 80159d4:	623b      	str	r3, [r7, #32]
 80159d6:	e00d      	b.n	80159f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	685b      	ldr	r3, [r3, #4]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d006      	beq.n	80159ee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80159e0:	4b38      	ldr	r3, [pc, #224]	; (8015ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80159e2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80159e6:	493a      	ldr	r1, [pc, #232]	; (8015ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80159e8:	4838      	ldr	r0, [pc, #224]	; (8015acc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80159ea:	f001 fb47 	bl	801707c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	68ba      	ldr	r2, [r7, #8]
 80159f2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d105      	bne.n	8015a06 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	7f9b      	ldrb	r3, [r3, #30]
 80159fe:	f003 0301 	and.w	r3, r3, #1
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d059      	beq.n	8015aba <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015a06:	6a3b      	ldr	r3, [r7, #32]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d04f      	beq.n	8015aac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	685b      	ldr	r3, [r3, #4]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d006      	beq.n	8015a22 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	685b      	ldr	r3, [r3, #4]
 8015a18:	685b      	ldr	r3, [r3, #4]
 8015a1a:	889b      	ldrh	r3, [r3, #4]
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d002      	beq.n	8015a28 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015a22:	2300      	movs	r3, #0
 8015a24:	623b      	str	r3, [r7, #32]
 8015a26:	e041      	b.n	8015aac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a2a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015a32:	e012      	b.n	8015a5a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a36:	685b      	ldr	r3, [r3, #4]
 8015a38:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a3c:	88db      	ldrh	r3, [r3, #6]
 8015a3e:	b29a      	uxth	r2, r3
 8015a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a42:	889b      	ldrh	r3, [r3, #4]
 8015a44:	b29b      	uxth	r3, r3
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d002      	beq.n	8015a50 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	623b      	str	r3, [r7, #32]
            break;
 8015a4e:	e007      	b.n	8015a60 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a52:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d1e9      	bne.n	8015a34 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015a60:	6a3b      	ldr	r3, [r7, #32]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d022      	beq.n	8015aac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	685b      	ldr	r3, [r3, #4]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d106      	bne.n	8015a7c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015a6e:	4b15      	ldr	r3, [pc, #84]	; (8015ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a70:	f240 12df 	movw	r2, #479	; 0x1df
 8015a74:	4917      	ldr	r1, [pc, #92]	; (8015ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015a76:	4815      	ldr	r0, [pc, #84]	; (8015acc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a78:	f001 fb00 	bl	801707c <iprintf>
          LWIP_ASSERT("sanity check",
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	685b      	ldr	r3, [r3, #4]
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d106      	bne.n	8015a96 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015a88:	4b0e      	ldr	r3, [pc, #56]	; (8015ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015a8e:	4911      	ldr	r1, [pc, #68]	; (8015ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015a90:	480e      	ldr	r0, [pc, #56]	; (8015acc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a92:	f001 faf3 	bl	801707c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d006      	beq.n	8015aac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015a9e:	4b09      	ldr	r3, [pc, #36]	; (8015ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015aa0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015aa4:	490c      	ldr	r1, [pc, #48]	; (8015ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015aa6:	4809      	ldr	r0, [pc, #36]	; (8015acc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015aa8:	f001 fae8 	bl	801707c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015aac:	6a3b      	ldr	r3, [r7, #32]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	bf14      	ite	ne
 8015ab2:	2301      	movne	r3, #1
 8015ab4:	2300      	moveq	r3, #0
 8015ab6:	b2db      	uxtb	r3, r3
 8015ab8:	e000      	b.n	8015abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015aba:	2300      	movs	r3, #0
}
 8015abc:	4618      	mov	r0, r3
 8015abe:	3730      	adds	r7, #48	; 0x30
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}
 8015ac4:	0801a6b0 	.word	0x0801a6b0
 8015ac8:	0801a794 	.word	0x0801a794
 8015acc:	0801a6f8 	.word	0x0801a6f8
 8015ad0:	0801a7b4 	.word	0x0801a7b4
 8015ad4:	0801a7ec 	.word	0x0801a7ec
 8015ad8:	0801a7fc 	.word	0x0801a7fc

08015adc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b08e      	sub	sp, #56	; 0x38
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	685b      	ldr	r3, [r3, #4]
 8015ae8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	f003 030f 	and.w	r3, r3, #15
 8015af2:	b2db      	uxtb	r3, r3
 8015af4:	009b      	lsls	r3, r3, #2
 8015af6:	b2db      	uxtb	r3, r3
 8015af8:	2b14      	cmp	r3, #20
 8015afa:	f040 8171 	bne.w	8015de0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b00:	88db      	ldrh	r3, [r3, #6]
 8015b02:	b29b      	uxth	r3, r3
 8015b04:	4618      	mov	r0, r3
 8015b06:	f7f6 fa8b 	bl	800c020 <lwip_htons>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015b10:	b29b      	uxth	r3, r3
 8015b12:	00db      	lsls	r3, r3, #3
 8015b14:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b18:	885b      	ldrh	r3, [r3, #2]
 8015b1a:	b29b      	uxth	r3, r3
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f7f6 fa7f 	bl	800c020 <lwip_htons>
 8015b22:	4603      	mov	r3, r0
 8015b24:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b28:	781b      	ldrb	r3, [r3, #0]
 8015b2a:	f003 030f 	and.w	r3, r3, #15
 8015b2e:	b2db      	uxtb	r3, r3
 8015b30:	009b      	lsls	r3, r3, #2
 8015b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015b36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015b3a:	b29b      	uxth	r3, r3
 8015b3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015b3e:	429a      	cmp	r2, r3
 8015b40:	f0c0 8150 	bcc.w	8015de4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015b48:	b29b      	uxth	r3, r3
 8015b4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015b4c:	1ad3      	subs	r3, r2, r3
 8015b4e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f7f7 fe4b 	bl	800d7ec <pbuf_clen>
 8015b56:	4603      	mov	r3, r0
 8015b58:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015b5a:	4b8c      	ldr	r3, [pc, #560]	; (8015d8c <ip4_reass+0x2b0>)
 8015b5c:	881b      	ldrh	r3, [r3, #0]
 8015b5e:	461a      	mov	r2, r3
 8015b60:	8c3b      	ldrh	r3, [r7, #32]
 8015b62:	4413      	add	r3, r2
 8015b64:	2b0a      	cmp	r3, #10
 8015b66:	dd10      	ble.n	8015b8a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015b68:	8c3b      	ldrh	r3, [r7, #32]
 8015b6a:	4619      	mov	r1, r3
 8015b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b6e:	f7ff fd81 	bl	8015674 <ip_reass_remove_oldest_datagram>
 8015b72:	4603      	mov	r3, r0
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	f000 8137 	beq.w	8015de8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015b7a:	4b84      	ldr	r3, [pc, #528]	; (8015d8c <ip4_reass+0x2b0>)
 8015b7c:	881b      	ldrh	r3, [r3, #0]
 8015b7e:	461a      	mov	r2, r3
 8015b80:	8c3b      	ldrh	r3, [r7, #32]
 8015b82:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015b84:	2b0a      	cmp	r3, #10
 8015b86:	f300 812f 	bgt.w	8015de8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015b8a:	4b81      	ldr	r3, [pc, #516]	; (8015d90 <ip4_reass+0x2b4>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8015b90:	e015      	b.n	8015bbe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b94:	695a      	ldr	r2, [r3, #20]
 8015b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b98:	68db      	ldr	r3, [r3, #12]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d10c      	bne.n	8015bb8 <ip4_reass+0xdc>
 8015b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba0:	699a      	ldr	r2, [r3, #24]
 8015ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ba4:	691b      	ldr	r3, [r3, #16]
 8015ba6:	429a      	cmp	r2, r3
 8015ba8:	d106      	bne.n	8015bb8 <ip4_reass+0xdc>
 8015baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bac:	899a      	ldrh	r2, [r3, #12]
 8015bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb0:	889b      	ldrh	r3, [r3, #4]
 8015bb2:	b29b      	uxth	r3, r3
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d006      	beq.n	8015bc6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8015bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d1e6      	bne.n	8015b92 <ip4_reass+0xb6>
 8015bc4:	e000      	b.n	8015bc8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015bc6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d109      	bne.n	8015be2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015bce:	8c3b      	ldrh	r3, [r7, #32]
 8015bd0:	4619      	mov	r1, r3
 8015bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bd4:	f7ff fdb0 	bl	8015738 <ip_reass_enqueue_new_datagram>
 8015bd8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d11c      	bne.n	8015c1a <ip4_reass+0x13e>
      goto nullreturn;
 8015be0:	e105      	b.n	8015dee <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be4:	88db      	ldrh	r3, [r3, #6]
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7f6 fa19 	bl	800c020 <lwip_htons>
 8015bee:	4603      	mov	r3, r0
 8015bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d110      	bne.n	8015c1a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bfa:	89db      	ldrh	r3, [r3, #14]
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	f7f6 fa0f 	bl	800c020 <lwip_htons>
 8015c02:	4603      	mov	r3, r0
 8015c04:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d006      	beq.n	8015c1a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c0e:	3308      	adds	r3, #8
 8015c10:	2214      	movs	r2, #20
 8015c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015c14:	4618      	mov	r0, r3
 8015c16:	f001 f93b 	bl	8016e90 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c1c:	88db      	ldrh	r3, [r3, #6]
 8015c1e:	b29b      	uxth	r3, r3
 8015c20:	f003 0320 	and.w	r3, r3, #32
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	bf0c      	ite	eq
 8015c28:	2301      	moveq	r3, #1
 8015c2a:	2300      	movne	r3, #0
 8015c2c:	b2db      	uxtb	r3, r3
 8015c2e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015c30:	69fb      	ldr	r3, [r7, #28]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d00e      	beq.n	8015c54 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015c36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c3a:	4413      	add	r3, r2
 8015c3c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015c3e:	8b7a      	ldrh	r2, [r7, #26]
 8015c40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015c42:	429a      	cmp	r2, r3
 8015c44:	f0c0 80a0 	bcc.w	8015d88 <ip4_reass+0x2ac>
 8015c48:	8b7b      	ldrh	r3, [r7, #26]
 8015c4a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015c4e:	4293      	cmp	r3, r2
 8015c50:	f200 809a 	bhi.w	8015d88 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015c54:	69fa      	ldr	r2, [r7, #28]
 8015c56:	6879      	ldr	r1, [r7, #4]
 8015c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c5a:	f7ff fdd5 	bl	8015808 <ip_reass_chain_frag_into_datagram_and_validate>
 8015c5e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c66:	f000 809b 	beq.w	8015da0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015c6a:	4b48      	ldr	r3, [pc, #288]	; (8015d8c <ip4_reass+0x2b0>)
 8015c6c:	881a      	ldrh	r2, [r3, #0]
 8015c6e:	8c3b      	ldrh	r3, [r7, #32]
 8015c70:	4413      	add	r3, r2
 8015c72:	b29a      	uxth	r2, r3
 8015c74:	4b45      	ldr	r3, [pc, #276]	; (8015d8c <ip4_reass+0x2b0>)
 8015c76:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015c78:	69fb      	ldr	r3, [r7, #28]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d00d      	beq.n	8015c9a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015c7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015c80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c82:	4413      	add	r3, r2
 8015c84:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c88:	8a7a      	ldrh	r2, [r7, #18]
 8015c8a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c8e:	7f9b      	ldrb	r3, [r3, #30]
 8015c90:	f043 0301 	orr.w	r3, r3, #1
 8015c94:	b2da      	uxtb	r2, r3
 8015c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c98:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	2b01      	cmp	r3, #1
 8015c9e:	d171      	bne.n	8015d84 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca2:	8b9b      	ldrh	r3, [r3, #28]
 8015ca4:	3314      	adds	r3, #20
 8015ca6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	685b      	ldr	r3, [r3, #4]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb4:	685b      	ldr	r3, [r3, #4]
 8015cb6:	685b      	ldr	r3, [r3, #4]
 8015cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cbc:	3308      	adds	r3, #8
 8015cbe:	2214      	movs	r2, #20
 8015cc0:	4619      	mov	r1, r3
 8015cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cc4:	f001 f8e4 	bl	8016e90 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015cc8:	8a3b      	ldrh	r3, [r7, #16]
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f7f6 f9a8 	bl	800c020 <lwip_htons>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	461a      	mov	r2, r3
 8015cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cda:	2200      	movs	r2, #0
 8015cdc:	719a      	strb	r2, [r3, #6]
 8015cde:	2200      	movs	r2, #0
 8015ce0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce4:	2200      	movs	r2, #0
 8015ce6:	729a      	strb	r2, [r3, #10]
 8015ce8:	2200      	movs	r2, #0
 8015cea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cee:	685b      	ldr	r3, [r3, #4]
 8015cf0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015cf2:	e00d      	b.n	8015d10 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cf6:	685b      	ldr	r3, [r3, #4]
 8015cf8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015cfa:	2114      	movs	r1, #20
 8015cfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015cfe:	f7f7 fc67 	bl	800d5d0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015d02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015d04:	6878      	ldr	r0, [r7, #4]
 8015d06:	f7f7 fdab 	bl	800d860 <pbuf_cat>
      r = iprh->next_pbuf;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d1ee      	bne.n	8015cf4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015d16:	4b1e      	ldr	r3, [pc, #120]	; (8015d90 <ip4_reass+0x2b4>)
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d1c:	429a      	cmp	r2, r3
 8015d1e:	d102      	bne.n	8015d26 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015d20:	2300      	movs	r3, #0
 8015d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d24:	e010      	b.n	8015d48 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015d26:	4b1a      	ldr	r3, [pc, #104]	; (8015d90 <ip4_reass+0x2b4>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d2c:	e007      	b.n	8015d3e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d34:	429a      	cmp	r2, r3
 8015d36:	d006      	beq.n	8015d46 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d1f4      	bne.n	8015d2e <ip4_reass+0x252>
 8015d44:	e000      	b.n	8015d48 <ip4_reass+0x26c>
          break;
 8015d46:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015d48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d4c:	f7ff fd2e 	bl	80157ac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015d50:	6878      	ldr	r0, [r7, #4]
 8015d52:	f7f7 fd4b 	bl	800d7ec <pbuf_clen>
 8015d56:	4603      	mov	r3, r0
 8015d58:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015d5a:	4b0c      	ldr	r3, [pc, #48]	; (8015d8c <ip4_reass+0x2b0>)
 8015d5c:	881b      	ldrh	r3, [r3, #0]
 8015d5e:	8c3a      	ldrh	r2, [r7, #32]
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d906      	bls.n	8015d72 <ip4_reass+0x296>
 8015d64:	4b0b      	ldr	r3, [pc, #44]	; (8015d94 <ip4_reass+0x2b8>)
 8015d66:	f240 229b 	movw	r2, #667	; 0x29b
 8015d6a:	490b      	ldr	r1, [pc, #44]	; (8015d98 <ip4_reass+0x2bc>)
 8015d6c:	480b      	ldr	r0, [pc, #44]	; (8015d9c <ip4_reass+0x2c0>)
 8015d6e:	f001 f985 	bl	801707c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015d72:	4b06      	ldr	r3, [pc, #24]	; (8015d8c <ip4_reass+0x2b0>)
 8015d74:	881a      	ldrh	r2, [r3, #0]
 8015d76:	8c3b      	ldrh	r3, [r7, #32]
 8015d78:	1ad3      	subs	r3, r2, r3
 8015d7a:	b29a      	uxth	r2, r3
 8015d7c:	4b03      	ldr	r3, [pc, #12]	; (8015d8c <ip4_reass+0x2b0>)
 8015d7e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	e038      	b.n	8015df6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015d84:	2300      	movs	r3, #0
 8015d86:	e036      	b.n	8015df6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015d88:	bf00      	nop
 8015d8a:	e00a      	b.n	8015da2 <ip4_reass+0x2c6>
 8015d8c:	20009120 	.word	0x20009120
 8015d90:	2000911c 	.word	0x2000911c
 8015d94:	0801a6b0 	.word	0x0801a6b0
 8015d98:	0801a820 	.word	0x0801a820
 8015d9c:	0801a6f8 	.word	0x0801a6f8
    goto nullreturn_ipr;
 8015da0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d106      	bne.n	8015db6 <ip4_reass+0x2da>
 8015da8:	4b15      	ldr	r3, [pc, #84]	; (8015e00 <ip4_reass+0x324>)
 8015daa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015dae:	4915      	ldr	r1, [pc, #84]	; (8015e04 <ip4_reass+0x328>)
 8015db0:	4815      	ldr	r0, [pc, #84]	; (8015e08 <ip4_reass+0x32c>)
 8015db2:	f001 f963 	bl	801707c <iprintf>
  if (ipr->p == NULL) {
 8015db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db8:	685b      	ldr	r3, [r3, #4]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	d116      	bne.n	8015dec <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015dbe:	4b13      	ldr	r3, [pc, #76]	; (8015e0c <ip4_reass+0x330>)
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dc4:	429a      	cmp	r2, r3
 8015dc6:	d006      	beq.n	8015dd6 <ip4_reass+0x2fa>
 8015dc8:	4b0d      	ldr	r3, [pc, #52]	; (8015e00 <ip4_reass+0x324>)
 8015dca:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015dce:	4910      	ldr	r1, [pc, #64]	; (8015e10 <ip4_reass+0x334>)
 8015dd0:	480d      	ldr	r0, [pc, #52]	; (8015e08 <ip4_reass+0x32c>)
 8015dd2:	f001 f953 	bl	801707c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015dd6:	2100      	movs	r1, #0
 8015dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015dda:	f7ff fce7 	bl	80157ac <ip_reass_dequeue_datagram>
 8015dde:	e006      	b.n	8015dee <ip4_reass+0x312>
    goto nullreturn;
 8015de0:	bf00      	nop
 8015de2:	e004      	b.n	8015dee <ip4_reass+0x312>
    goto nullreturn;
 8015de4:	bf00      	nop
 8015de6:	e002      	b.n	8015dee <ip4_reass+0x312>
      goto nullreturn;
 8015de8:	bf00      	nop
 8015dea:	e000      	b.n	8015dee <ip4_reass+0x312>
  }

nullreturn:
 8015dec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	f7f7 fc74 	bl	800d6dc <pbuf_free>
  return NULL;
 8015df4:	2300      	movs	r3, #0
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	3738      	adds	r7, #56	; 0x38
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	bd80      	pop	{r7, pc}
 8015dfe:	bf00      	nop
 8015e00:	0801a6b0 	.word	0x0801a6b0
 8015e04:	0801a83c 	.word	0x0801a83c
 8015e08:	0801a6f8 	.word	0x0801a6f8
 8015e0c:	2000911c 	.word	0x2000911c
 8015e10:	0801a848 	.word	0x0801a848

08015e14 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015e18:	2005      	movs	r0, #5
 8015e1a:	f7f6 fd79 	bl	800c910 <memp_malloc>
 8015e1e:	4603      	mov	r3, r0
}
 8015e20:	4618      	mov	r0, r3
 8015e22:	bd80      	pop	{r7, pc}

08015e24 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b082      	sub	sp, #8
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d106      	bne.n	8015e40 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015e32:	4b07      	ldr	r3, [pc, #28]	; (8015e50 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015e34:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015e38:	4906      	ldr	r1, [pc, #24]	; (8015e54 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015e3a:	4807      	ldr	r0, [pc, #28]	; (8015e58 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015e3c:	f001 f91e 	bl	801707c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015e40:	6879      	ldr	r1, [r7, #4]
 8015e42:	2005      	movs	r0, #5
 8015e44:	f7f6 fdd4 	bl	800c9f0 <memp_free>
}
 8015e48:	bf00      	nop
 8015e4a:	3708      	adds	r7, #8
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}
 8015e50:	0801a6b0 	.word	0x0801a6b0
 8015e54:	0801a868 	.word	0x0801a868
 8015e58:	0801a6f8 	.word	0x0801a6f8

08015e5c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b084      	sub	sp, #16
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d106      	bne.n	8015e7c <ipfrag_free_pbuf_custom+0x20>
 8015e6e:	4b11      	ldr	r3, [pc, #68]	; (8015eb4 <ipfrag_free_pbuf_custom+0x58>)
 8015e70:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015e74:	4910      	ldr	r1, [pc, #64]	; (8015eb8 <ipfrag_free_pbuf_custom+0x5c>)
 8015e76:	4811      	ldr	r0, [pc, #68]	; (8015ebc <ipfrag_free_pbuf_custom+0x60>)
 8015e78:	f001 f900 	bl	801707c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015e7c:	68fa      	ldr	r2, [r7, #12]
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	429a      	cmp	r2, r3
 8015e82:	d006      	beq.n	8015e92 <ipfrag_free_pbuf_custom+0x36>
 8015e84:	4b0b      	ldr	r3, [pc, #44]	; (8015eb4 <ipfrag_free_pbuf_custom+0x58>)
 8015e86:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015e8a:	490d      	ldr	r1, [pc, #52]	; (8015ec0 <ipfrag_free_pbuf_custom+0x64>)
 8015e8c:	480b      	ldr	r0, [pc, #44]	; (8015ebc <ipfrag_free_pbuf_custom+0x60>)
 8015e8e:	f001 f8f5 	bl	801707c <iprintf>
  if (pcr->original != NULL) {
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	695b      	ldr	r3, [r3, #20]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d004      	beq.n	8015ea4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	695b      	ldr	r3, [r3, #20]
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f7f7 fc1c 	bl	800d6dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015ea4:	68f8      	ldr	r0, [r7, #12]
 8015ea6:	f7ff ffbd 	bl	8015e24 <ip_frag_free_pbuf_custom_ref>
}
 8015eaa:	bf00      	nop
 8015eac:	3710      	adds	r7, #16
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}
 8015eb2:	bf00      	nop
 8015eb4:	0801a6b0 	.word	0x0801a6b0
 8015eb8:	0801a874 	.word	0x0801a874
 8015ebc:	0801a6f8 	.word	0x0801a6f8
 8015ec0:	0801a880 	.word	0x0801a880

08015ec4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b094      	sub	sp, #80	; 0x50
 8015ec8:	af02      	add	r7, sp, #8
 8015eca:	60f8      	str	r0, [r7, #12]
 8015ecc:	60b9      	str	r1, [r7, #8]
 8015ece:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015ed6:	68bb      	ldr	r3, [r7, #8]
 8015ed8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015eda:	3b14      	subs	r3, #20
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	da00      	bge.n	8015ee2 <ip4_frag+0x1e>
 8015ee0:	3307      	adds	r3, #7
 8015ee2:	10db      	asrs	r3, r3, #3
 8015ee4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015ee6:	2314      	movs	r3, #20
 8015ee8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	685b      	ldr	r3, [r3, #4]
 8015eee:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ef2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef6:	781b      	ldrb	r3, [r3, #0]
 8015ef8:	f003 030f 	and.w	r3, r3, #15
 8015efc:	b2db      	uxtb	r3, r3
 8015efe:	009b      	lsls	r3, r3, #2
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	2b14      	cmp	r3, #20
 8015f04:	d002      	beq.n	8015f0c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015f06:	f06f 0305 	mvn.w	r3, #5
 8015f0a:	e110      	b.n	801612e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015f0c:	68fb      	ldr	r3, [r7, #12]
 8015f0e:	895b      	ldrh	r3, [r3, #10]
 8015f10:	2b13      	cmp	r3, #19
 8015f12:	d809      	bhi.n	8015f28 <ip4_frag+0x64>
 8015f14:	4b88      	ldr	r3, [pc, #544]	; (8016138 <ip4_frag+0x274>)
 8015f16:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015f1a:	4988      	ldr	r1, [pc, #544]	; (801613c <ip4_frag+0x278>)
 8015f1c:	4888      	ldr	r0, [pc, #544]	; (8016140 <ip4_frag+0x27c>)
 8015f1e:	f001 f8ad 	bl	801707c <iprintf>
 8015f22:	f06f 0305 	mvn.w	r3, #5
 8015f26:	e102      	b.n	801612e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f2a:	88db      	ldrh	r3, [r3, #6]
 8015f2c:	b29b      	uxth	r3, r3
 8015f2e:	4618      	mov	r0, r3
 8015f30:	f7f6 f876 	bl	800c020 <lwip_htons>
 8015f34:	4603      	mov	r3, r0
 8015f36:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015f38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015f3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015f42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015f48:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	891b      	ldrh	r3, [r3, #8]
 8015f4e:	3b14      	subs	r3, #20
 8015f50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015f54:	e0e1      	b.n	801611a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015f56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f58:	00db      	lsls	r3, r3, #3
 8015f5a:	b29b      	uxth	r3, r3
 8015f5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015f60:	4293      	cmp	r3, r2
 8015f62:	bf28      	it	cs
 8015f64:	4613      	movcs	r3, r2
 8015f66:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015f68:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f6c:	2114      	movs	r1, #20
 8015f6e:	200e      	movs	r0, #14
 8015f70:	f7f7 f8d0 	bl	800d114 <pbuf_alloc>
 8015f74:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	f000 80d5 	beq.w	8016128 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f80:	895b      	ldrh	r3, [r3, #10]
 8015f82:	2b13      	cmp	r3, #19
 8015f84:	d806      	bhi.n	8015f94 <ip4_frag+0xd0>
 8015f86:	4b6c      	ldr	r3, [pc, #432]	; (8016138 <ip4_frag+0x274>)
 8015f88:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015f8c:	496d      	ldr	r1, [pc, #436]	; (8016144 <ip4_frag+0x280>)
 8015f8e:	486c      	ldr	r0, [pc, #432]	; (8016140 <ip4_frag+0x27c>)
 8015f90:	f001 f874 	bl	801707c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	2214      	movs	r2, #20
 8015f9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015f9c:	4618      	mov	r0, r3
 8015f9e:	f000 ff77 	bl	8016e90 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa4:	685b      	ldr	r3, [r3, #4]
 8015fa6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015fa8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015faa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015fae:	e064      	b.n	801607a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	895a      	ldrh	r2, [r3, #10]
 8015fb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015fb6:	1ad3      	subs	r3, r2, r3
 8015fb8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	895b      	ldrh	r3, [r3, #10]
 8015fbe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	d906      	bls.n	8015fd2 <ip4_frag+0x10e>
 8015fc4:	4b5c      	ldr	r3, [pc, #368]	; (8016138 <ip4_frag+0x274>)
 8015fc6:	f240 322d 	movw	r2, #813	; 0x32d
 8015fca:	495f      	ldr	r1, [pc, #380]	; (8016148 <ip4_frag+0x284>)
 8015fcc:	485c      	ldr	r0, [pc, #368]	; (8016140 <ip4_frag+0x27c>)
 8015fce:	f001 f855 	bl	801707c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015fd2:	8bfa      	ldrh	r2, [r7, #30]
 8015fd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015fd8:	4293      	cmp	r3, r2
 8015fda:	bf28      	it	cs
 8015fdc:	4613      	movcs	r3, r2
 8015fde:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015fe2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d105      	bne.n	8015ff6 <ip4_frag+0x132>
        poff = 0;
 8015fea:	2300      	movs	r3, #0
 8015fec:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	60fb      	str	r3, [r7, #12]
        continue;
 8015ff4:	e041      	b.n	801607a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015ff6:	f7ff ff0d 	bl	8015e14 <ip_frag_alloc_pbuf_custom_ref>
 8015ffa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015ffc:	69bb      	ldr	r3, [r7, #24]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d103      	bne.n	801600a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016004:	f7f7 fb6a 	bl	800d6dc <pbuf_free>
        goto memerr;
 8016008:	e08f      	b.n	801612a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801600a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016010:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016012:	4413      	add	r3, r2
 8016014:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016018:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801601c:	9201      	str	r2, [sp, #4]
 801601e:	9300      	str	r3, [sp, #0]
 8016020:	4603      	mov	r3, r0
 8016022:	2241      	movs	r2, #65	; 0x41
 8016024:	2000      	movs	r0, #0
 8016026:	f7f7 f99f 	bl	800d368 <pbuf_alloced_custom>
 801602a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801602c:	697b      	ldr	r3, [r7, #20]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d106      	bne.n	8016040 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016032:	69b8      	ldr	r0, [r7, #24]
 8016034:	f7ff fef6 	bl	8015e24 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801603a:	f7f7 fb4f 	bl	800d6dc <pbuf_free>
        goto memerr;
 801603e:	e074      	b.n	801612a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016040:	68f8      	ldr	r0, [r7, #12]
 8016042:	f7f7 fbeb 	bl	800d81c <pbuf_ref>
      pcr->original = p;
 8016046:	69bb      	ldr	r3, [r7, #24]
 8016048:	68fa      	ldr	r2, [r7, #12]
 801604a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801604c:	69bb      	ldr	r3, [r7, #24]
 801604e:	4a3f      	ldr	r2, [pc, #252]	; (801614c <ip4_frag+0x288>)
 8016050:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016052:	6979      	ldr	r1, [r7, #20]
 8016054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016056:	f7f7 fc03 	bl	800d860 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801605a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801605e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016062:	1ad3      	subs	r3, r2, r3
 8016064:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016068:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801606c:	2b00      	cmp	r3, #0
 801606e:	d004      	beq.n	801607a <ip4_frag+0x1b6>
        poff = 0;
 8016070:	2300      	movs	r3, #0
 8016072:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801607a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801607e:	2b00      	cmp	r3, #0
 8016080:	d196      	bne.n	8015fb0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016082:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016084:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016088:	4413      	add	r3, r2
 801608a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801608c:	68bb      	ldr	r3, [r7, #8]
 801608e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016090:	f1a3 0213 	sub.w	r2, r3, #19
 8016094:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016098:	429a      	cmp	r2, r3
 801609a:	bfcc      	ite	gt
 801609c:	2301      	movgt	r3, #1
 801609e:	2300      	movle	r3, #0
 80160a0:	b2db      	uxtb	r3, r3
 80160a2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80160a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80160a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80160ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80160ae:	6a3b      	ldr	r3, [r7, #32]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d002      	beq.n	80160ba <ip4_frag+0x1f6>
 80160b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d003      	beq.n	80160c2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80160ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80160bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80160c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80160c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80160c4:	4618      	mov	r0, r3
 80160c6:	f7f5 ffab 	bl	800c020 <lwip_htons>
 80160ca:	4603      	mov	r3, r0
 80160cc:	461a      	mov	r2, r3
 80160ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160d0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80160d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80160d4:	3314      	adds	r3, #20
 80160d6:	b29b      	uxth	r3, r3
 80160d8:	4618      	mov	r0, r3
 80160da:	f7f5 ffa1 	bl	800c020 <lwip_htons>
 80160de:	4603      	mov	r3, r0
 80160e0:	461a      	mov	r2, r3
 80160e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80160e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e8:	2200      	movs	r2, #0
 80160ea:	729a      	strb	r2, [r3, #10]
 80160ec:	2200      	movs	r2, #0
 80160ee:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80160f0:	68bb      	ldr	r3, [r7, #8]
 80160f2:	695b      	ldr	r3, [r3, #20]
 80160f4:	687a      	ldr	r2, [r7, #4]
 80160f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80160f8:	68b8      	ldr	r0, [r7, #8]
 80160fa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80160fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80160fe:	f7f7 faed 	bl	800d6dc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016102:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016106:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016108:	1ad3      	subs	r3, r2, r3
 801610a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801610e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016112:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016114:	4413      	add	r3, r2
 8016116:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801611a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801611e:	2b00      	cmp	r3, #0
 8016120:	f47f af19 	bne.w	8015f56 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016124:	2300      	movs	r3, #0
 8016126:	e002      	b.n	801612e <ip4_frag+0x26a>
      goto memerr;
 8016128:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801612a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801612e:	4618      	mov	r0, r3
 8016130:	3748      	adds	r7, #72	; 0x48
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}
 8016136:	bf00      	nop
 8016138:	0801a6b0 	.word	0x0801a6b0
 801613c:	0801a88c 	.word	0x0801a88c
 8016140:	0801a6f8 	.word	0x0801a6f8
 8016144:	0801a8a8 	.word	0x0801a8a8
 8016148:	0801a8c8 	.word	0x0801a8c8
 801614c:	08015e5d 	.word	0x08015e5d

08016150 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016150:	b580      	push	{r7, lr}
 8016152:	b086      	sub	sp, #24
 8016154:	af00      	add	r7, sp, #0
 8016156:	6078      	str	r0, [r7, #4]
 8016158:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801615a:	230e      	movs	r3, #14
 801615c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	895b      	ldrh	r3, [r3, #10]
 8016162:	2b0e      	cmp	r3, #14
 8016164:	d96e      	bls.n	8016244 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	7bdb      	ldrb	r3, [r3, #15]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d106      	bne.n	801617c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016174:	3301      	adds	r3, #1
 8016176:	b2da      	uxtb	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	685b      	ldr	r3, [r3, #4]
 8016180:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016182:	693b      	ldr	r3, [r7, #16]
 8016184:	7b1a      	ldrb	r2, [r3, #12]
 8016186:	7b5b      	ldrb	r3, [r3, #13]
 8016188:	021b      	lsls	r3, r3, #8
 801618a:	4313      	orrs	r3, r2
 801618c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	781b      	ldrb	r3, [r3, #0]
 8016192:	f003 0301 	and.w	r3, r3, #1
 8016196:	2b00      	cmp	r3, #0
 8016198:	d023      	beq.n	80161e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801619a:	693b      	ldr	r3, [r7, #16]
 801619c:	781b      	ldrb	r3, [r3, #0]
 801619e:	2b01      	cmp	r3, #1
 80161a0:	d10f      	bne.n	80161c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80161a2:	693b      	ldr	r3, [r7, #16]
 80161a4:	785b      	ldrb	r3, [r3, #1]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d11b      	bne.n	80161e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80161aa:	693b      	ldr	r3, [r7, #16]
 80161ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80161ae:	2b5e      	cmp	r3, #94	; 0x5e
 80161b0:	d117      	bne.n	80161e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	7b5b      	ldrb	r3, [r3, #13]
 80161b6:	f043 0310 	orr.w	r3, r3, #16
 80161ba:	b2da      	uxtb	r2, r3
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	735a      	strb	r2, [r3, #13]
 80161c0:	e00f      	b.n	80161e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	2206      	movs	r2, #6
 80161c6:	4928      	ldr	r1, [pc, #160]	; (8016268 <ethernet_input+0x118>)
 80161c8:	4618      	mov	r0, r3
 80161ca:	f000 fe51 	bl	8016e70 <memcmp>
 80161ce:	4603      	mov	r3, r0
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d106      	bne.n	80161e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	7b5b      	ldrb	r3, [r3, #13]
 80161d8:	f043 0308 	orr.w	r3, r3, #8
 80161dc:	b2da      	uxtb	r2, r3
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80161e2:	89fb      	ldrh	r3, [r7, #14]
 80161e4:	2b08      	cmp	r3, #8
 80161e6:	d003      	beq.n	80161f0 <ethernet_input+0xa0>
 80161e8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80161ec:	d014      	beq.n	8016218 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80161ee:	e032      	b.n	8016256 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80161f0:	683b      	ldr	r3, [r7, #0]
 80161f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80161f6:	f003 0308 	and.w	r3, r3, #8
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d024      	beq.n	8016248 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80161fe:	8afb      	ldrh	r3, [r7, #22]
 8016200:	4619      	mov	r1, r3
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f7f7 f9e4 	bl	800d5d0 <pbuf_remove_header>
 8016208:	4603      	mov	r3, r0
 801620a:	2b00      	cmp	r3, #0
 801620c:	d11e      	bne.n	801624c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801620e:	6839      	ldr	r1, [r7, #0]
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f7fe ff21 	bl	8015058 <ip4_input>
      break;
 8016216:	e013      	b.n	8016240 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801621e:	f003 0308 	and.w	r3, r3, #8
 8016222:	2b00      	cmp	r3, #0
 8016224:	d014      	beq.n	8016250 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016226:	8afb      	ldrh	r3, [r7, #22]
 8016228:	4619      	mov	r1, r3
 801622a:	6878      	ldr	r0, [r7, #4]
 801622c:	f7f7 f9d0 	bl	800d5d0 <pbuf_remove_header>
 8016230:	4603      	mov	r3, r0
 8016232:	2b00      	cmp	r3, #0
 8016234:	d10e      	bne.n	8016254 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016236:	6839      	ldr	r1, [r7, #0]
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f7fe f8c1 	bl	80143c0 <etharp_input>
      break;
 801623e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016240:	2300      	movs	r3, #0
 8016242:	e00c      	b.n	801625e <ethernet_input+0x10e>
    goto free_and_return;
 8016244:	bf00      	nop
 8016246:	e006      	b.n	8016256 <ethernet_input+0x106>
        goto free_and_return;
 8016248:	bf00      	nop
 801624a:	e004      	b.n	8016256 <ethernet_input+0x106>
        goto free_and_return;
 801624c:	bf00      	nop
 801624e:	e002      	b.n	8016256 <ethernet_input+0x106>
        goto free_and_return;
 8016250:	bf00      	nop
 8016252:	e000      	b.n	8016256 <ethernet_input+0x106>
        goto free_and_return;
 8016254:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	f7f7 fa40 	bl	800d6dc <pbuf_free>
  return ERR_OK;
 801625c:	2300      	movs	r3, #0
}
 801625e:	4618      	mov	r0, r3
 8016260:	3718      	adds	r7, #24
 8016262:	46bd      	mov	sp, r7
 8016264:	bd80      	pop	{r7, pc}
 8016266:	bf00      	nop
 8016268:	0801aa6c 	.word	0x0801aa6c

0801626c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801626c:	b580      	push	{r7, lr}
 801626e:	b086      	sub	sp, #24
 8016270:	af00      	add	r7, sp, #0
 8016272:	60f8      	str	r0, [r7, #12]
 8016274:	60b9      	str	r1, [r7, #8]
 8016276:	607a      	str	r2, [r7, #4]
 8016278:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801627a:	8c3b      	ldrh	r3, [r7, #32]
 801627c:	4618      	mov	r0, r3
 801627e:	f7f5 fecf 	bl	800c020 <lwip_htons>
 8016282:	4603      	mov	r3, r0
 8016284:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016286:	210e      	movs	r1, #14
 8016288:	68b8      	ldr	r0, [r7, #8]
 801628a:	f7f7 f991 	bl	800d5b0 <pbuf_add_header>
 801628e:	4603      	mov	r3, r0
 8016290:	2b00      	cmp	r3, #0
 8016292:	d125      	bne.n	80162e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	685b      	ldr	r3, [r3, #4]
 8016298:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801629a:	693b      	ldr	r3, [r7, #16]
 801629c:	8afa      	ldrh	r2, [r7, #22]
 801629e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80162a0:	693b      	ldr	r3, [r7, #16]
 80162a2:	2206      	movs	r2, #6
 80162a4:	6839      	ldr	r1, [r7, #0]
 80162a6:	4618      	mov	r0, r3
 80162a8:	f000 fdf2 	bl	8016e90 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80162ac:	693b      	ldr	r3, [r7, #16]
 80162ae:	3306      	adds	r3, #6
 80162b0:	2206      	movs	r2, #6
 80162b2:	6879      	ldr	r1, [r7, #4]
 80162b4:	4618      	mov	r0, r3
 80162b6:	f000 fdeb 	bl	8016e90 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80162c0:	2b06      	cmp	r3, #6
 80162c2:	d006      	beq.n	80162d2 <ethernet_output+0x66>
 80162c4:	4b0a      	ldr	r3, [pc, #40]	; (80162f0 <ethernet_output+0x84>)
 80162c6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80162ca:	490a      	ldr	r1, [pc, #40]	; (80162f4 <ethernet_output+0x88>)
 80162cc:	480a      	ldr	r0, [pc, #40]	; (80162f8 <ethernet_output+0x8c>)
 80162ce:	f000 fed5 	bl	801707c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	699b      	ldr	r3, [r3, #24]
 80162d6:	68b9      	ldr	r1, [r7, #8]
 80162d8:	68f8      	ldr	r0, [r7, #12]
 80162da:	4798      	blx	r3
 80162dc:	4603      	mov	r3, r0
 80162de:	e002      	b.n	80162e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80162e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80162e2:	f06f 0301 	mvn.w	r3, #1
}
 80162e6:	4618      	mov	r0, r3
 80162e8:	3718      	adds	r7, #24
 80162ea:	46bd      	mov	sp, r7
 80162ec:	bd80      	pop	{r7, pc}
 80162ee:	bf00      	nop
 80162f0:	0801a8d8 	.word	0x0801a8d8
 80162f4:	0801a910 	.word	0x0801a910
 80162f8:	0801a944 	.word	0x0801a944

080162fc <adc_test>:
/// Count the number of conversions completed, to make sure the conversion
/// happens at every new loop iteration.
uint8_t convert_cnt;

uint8_t adc_test(uint8_t iter)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b084      	sub	sp, #16
 8016300:	af00      	add	r7, sp, #0
 8016302:	4603      	mov	r3, r0
 8016304:	71fb      	strb	r3, [r7, #7]
	uint16_t adc_read = INIT_VALUE;
 8016306:	2300      	movs	r3, #0
 8016308:	81bb      	strh	r3, [r7, #12]
	// Enables ADC DMA. Sets it's buffer to adc_read and requests 1 read
	HAL_ADC_Start_DMA(ADC_HANDLE, (uint32_t *) &adc_read, READ_BUFF);
 801630a:	f107 030c 	add.w	r3, r7, #12
 801630e:	2201      	movs	r2, #1
 8016310:	4619      	mov	r1, r3
 8016312:	4815      	ldr	r0, [pc, #84]	; (8016368 <adc_test+0x6c>)
 8016314:	f7ec f9c6 	bl	80026a4 <HAL_ADC_Start_DMA>

	// Initiate the read counter to 0
	convert_cnt = INIT_VALUE;
 8016318:	4b14      	ldr	r3, [pc, #80]	; (801636c <adc_test+0x70>)
 801631a:	2200      	movs	r2, #0
 801631c:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < iter; i++)
 801631e:	2300      	movs	r3, #0
 8016320:	73fb      	strb	r3, [r7, #15]
 8016322:	e011      	b.n	8016348 <adc_test+0x4c>
	{
		// read the value and store it in adc_read
		HAL_ADC_Start(ADC_HANDLE);
 8016324:	4810      	ldr	r0, [pc, #64]	; (8016368 <adc_test+0x6c>)
 8016326:	f7eb ffdf 	bl	80022e8 <HAL_ADC_Start>

		/// check if the ADC read value is out of valid range
		if ( adc_read < LOWER_BOUND || UPPER_BOUND < adc_read )
 801632a:	89bb      	ldrh	r3, [r7, #12]
 801632c:	f640 729b 	movw	r2, #3995	; 0xf9b
 8016330:	4293      	cmp	r3, r2
 8016332:	d904      	bls.n	801633e <adc_test+0x42>
 8016334:	89bb      	ldrh	r3, [r7, #12]
 8016336:	f241 0264 	movw	r2, #4196	; 0x1064
 801633a:	4293      	cmp	r3, r2
 801633c:	d901      	bls.n	8016342 <adc_test+0x46>
			return FAILURE;
 801633e:	23ff      	movs	r3, #255	; 0xff
 8016340:	e00e      	b.n	8016360 <adc_test+0x64>
	for(uint8_t i = 0; i < iter; i++)
 8016342:	7bfb      	ldrb	r3, [r7, #15]
 8016344:	3301      	adds	r3, #1
 8016346:	73fb      	strb	r3, [r7, #15]
 8016348:	7bfa      	ldrb	r2, [r7, #15]
 801634a:	79fb      	ldrb	r3, [r7, #7]
 801634c:	429a      	cmp	r2, r3
 801634e:	d3e9      	bcc.n	8016324 <adc_test+0x28>
	}

	/// If the counter is smaller than the number of iterations, we missed some
	/// readings. Might mean we have an hardware problem.
	if(convert_cnt < iter)
 8016350:	4b06      	ldr	r3, [pc, #24]	; (801636c <adc_test+0x70>)
 8016352:	781b      	ldrb	r3, [r3, #0]
 8016354:	79fa      	ldrb	r2, [r7, #7]
 8016356:	429a      	cmp	r2, r3
 8016358:	d901      	bls.n	801635e <adc_test+0x62>
		return FAILURE;
 801635a:	23ff      	movs	r3, #255	; 0xff
 801635c:	e000      	b.n	8016360 <adc_test+0x64>

	return SUCCESS;
 801635e:	2301      	movs	r3, #1
}
 8016360:	4618      	mov	r0, r3
 8016362:	3710      	adds	r7, #16
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	200001ec 	.word	0x200001ec
 801636c:	20009122 	.word	0x20009122

08016370 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8016370:	b480      	push	{r7}
 8016372:	b083      	sub	sp, #12
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
	++convert_cnt;
 8016378:	4b05      	ldr	r3, [pc, #20]	; (8016390 <HAL_ADC_ConvCpltCallback+0x20>)
 801637a:	781b      	ldrb	r3, [r3, #0]
 801637c:	3301      	adds	r3, #1
 801637e:	b2da      	uxtb	r2, r3
 8016380:	4b03      	ldr	r3, [pc, #12]	; (8016390 <HAL_ADC_ConvCpltCallback+0x20>)
 8016382:	701a      	strb	r2, [r3, #0]
}
 8016384:	bf00      	nop
 8016386:	370c      	adds	r7, #12
 8016388:	46bd      	mov	sp, r7
 801638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801638e:	4770      	bx	lr
 8016390:	20009122 	.word	0x20009122

08016394 <i2c_test>:
 * This is the main function for the I2C testing.
 * The data received from server will be received initially by I2C2, transmit
 * to I2C1, and then transmit back to I2C2 to check if the data is the same.
 */
uint8_t i2c_test(uint8_t iter, uint8_t data_length, uint8_t *data)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 801639a:	af02      	add	r7, sp, #8
 801639c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80163a0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80163a4:	601a      	str	r2, [r3, #0]
 80163a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80163aa:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 80163ae:	4602      	mov	r2, r0
 80163b0:	701a      	strb	r2, [r3, #0]
 80163b2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80163b6:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80163ba:	460a      	mov	r2, r1
 80163bc:	701a      	strb	r2, [r3, #0]
	uint8_t i2c2_buff[DATA_SIZE] = { 0 }; // init the buffer to be full '\0'
 80163be:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80163c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80163c6:	2200      	movs	r2, #0
 80163c8:	601a      	str	r2, [r3, #0]
 80163ca:	3304      	adds	r3, #4
 80163cc:	22fc      	movs	r2, #252	; 0xfc
 80163ce:	2100      	movs	r1, #0
 80163d0:	4618      	mov	r0, r3
 80163d2:	f000 fd6b 	bl	8016eac <memset>
	uint8_t i2c4_buff[DATA_SIZE] = { 0 }; // init the buffer to be full '\0'
 80163d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80163da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80163de:	2200      	movs	r2, #0
 80163e0:	601a      	str	r2, [r3, #0]
 80163e2:	3304      	adds	r3, #4
 80163e4:	22fc      	movs	r2, #252	; 0xfc
 80163e6:	2100      	movs	r1, #0
 80163e8:	4618      	mov	r0, r3
 80163ea:	f000 fd5f 	bl	8016eac <memset>
	uint8_t result = SUCCESS;
 80163ee:	2301      	movs	r3, #1
 80163f0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e

	for(uint8_t i = 0; i < iter ; i++)
 80163f4:	2300      	movs	r3, #0
 80163f6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80163fa:	e048      	b.n	801648e <i2c_test+0xfa>
	{
		i2c_transmit_to_slave(I2C_MASTER, I2C_SLAVE, data_length, data, i2c4_buff);
 80163fc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8016400:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016404:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8016408:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 801640c:	7811      	ldrb	r1, [r2, #0]
 801640e:	f107 020c 	add.w	r2, r7, #12
 8016412:	9200      	str	r2, [sp, #0]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	460a      	mov	r2, r1
 8016418:	4925      	ldr	r1, [pc, #148]	; (80164b0 <i2c_test+0x11c>)
 801641a:	4826      	ldr	r0, [pc, #152]	; (80164b4 <i2c_test+0x120>)
 801641c:	f000 f84c 	bl	80164b8 <i2c_transmit_to_slave>
		i2c_delay_till_received();
 8016420:	f000 f8a0 	bl	8016564 <i2c_delay_till_received>
		i2c_transmit_to_master(I2C_SLAVE, I2C_MASTER, data_length, i2c4_buff, i2c2_buff);
 8016424:	f107 010c 	add.w	r1, r7, #12
 8016428:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801642c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8016430:	781a      	ldrb	r2, [r3, #0]
 8016432:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8016436:	9300      	str	r3, [sp, #0]
 8016438:	460b      	mov	r3, r1
 801643a:	491e      	ldr	r1, [pc, #120]	; (80164b4 <i2c_test+0x120>)
 801643c:	481c      	ldr	r0, [pc, #112]	; (80164b0 <i2c_test+0x11c>)
 801643e:	f000 f857 	bl	80164f0 <i2c_transmit_to_master>
		i2c_delay_till_received();
 8016442:	f000 f88f 	bl	8016564 <i2c_delay_till_received>

		if(strncmp((char *)i2c2_buff, (char *)data, data_length) != 0)
 8016446:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801644a:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 801644e:	781a      	ldrb	r2, [r3, #0]
 8016450:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8016454:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016458:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 801645c:	6819      	ldr	r1, [r3, #0]
 801645e:	f000 fe73 	bl	8017148 <strncmp>
 8016462:	4603      	mov	r3, r0
 8016464:	2b00      	cmp	r3, #0
 8016466:	d005      	beq.n	8016474 <i2c_test+0xe0>
		{
			result = FAILURE;
 8016468:	23ff      	movs	r3, #255	; 0xff
 801646a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
			return result;
 801646e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8016472:	e017      	b.n	80164a4 <i2c_test+0x110>
		}
		i2c_reset_buffers(i2c4_buff, i2c2_buff);
 8016474:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8016478:	f107 030c 	add.w	r3, r7, #12
 801647c:	4611      	mov	r1, r2
 801647e:	4618      	mov	r0, r3
 8016480:	f000 f88e 	bl	80165a0 <i2c_reset_buffers>
	for(uint8_t i = 0; i < iter ; i++)
 8016484:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8016488:	3301      	adds	r3, #1
 801648a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 801648e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8016492:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8016496:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 801649a:	781b      	ldrb	r3, [r3, #0]
 801649c:	429a      	cmp	r2, r3
 801649e:	d3ad      	bcc.n	80163fc <i2c_test+0x68>
	}
	return result;
 80164a0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
}
 80164a4:	4618      	mov	r0, r3
 80164a6:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bd80      	pop	{r7, pc}
 80164ae:	bf00      	nop
 80164b0:	20000294 	.word	0x20000294
 80164b4:	200002e8 	.word	0x200002e8

080164b8 <i2c_transmit_to_slave>:
void i2c_transmit_to_slave(	I2C_HandleTypeDef *i2c_transmit,
							I2C_HandleTypeDef *i2c_receive,
							uint8_t data_length,
							uint8_t *transmit_buff,
							uint8_t *receive_buff )
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b084      	sub	sp, #16
 80164bc:	af00      	add	r7, sp, #0
 80164be:	60f8      	str	r0, [r7, #12]
 80164c0:	60b9      	str	r1, [r7, #8]
 80164c2:	603b      	str	r3, [r7, #0]
 80164c4:	4613      	mov	r3, r2
 80164c6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Slave_Receive_DMA(i2c_receive, receive_buff, data_length);
 80164c8:	79fb      	ldrb	r3, [r7, #7]
 80164ca:	b29b      	uxth	r3, r3
 80164cc:	461a      	mov	r2, r3
 80164ce:	69b9      	ldr	r1, [r7, #24]
 80164d0:	68b8      	ldr	r0, [r7, #8]
 80164d2:	f7ef f8e3 	bl	800569c <HAL_I2C_Slave_Receive_DMA>
	HAL_I2C_Master_Transmit_DMA(i2c_transmit, SLAVE_ADDR, transmit_buff, data_length);
 80164d6:	79fb      	ldrb	r3, [r7, #7]
 80164d8:	b29b      	uxth	r3, r3
 80164da:	683a      	ldr	r2, [r7, #0]
 80164dc:	210e      	movs	r1, #14
 80164de:	68f8      	ldr	r0, [r7, #12]
 80164e0:	f7ee fe46 	bl	8005170 <HAL_I2C_Master_Transmit_DMA>
	i2c_delay_till_transmited();
 80164e4:	f000 f820 	bl	8016528 <i2c_delay_till_transmited>
}
 80164e8:	bf00      	nop
 80164ea:	3710      	adds	r7, #16
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd80      	pop	{r7, pc}

080164f0 <i2c_transmit_to_master>:
void i2c_transmit_to_master(I2C_HandleTypeDef *i2c_transmit,
							I2C_HandleTypeDef *i2c_receive,
							uint8_t data_length,
							uint8_t *transmit_buff,
							uint8_t *receive_buff )
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b084      	sub	sp, #16
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	60f8      	str	r0, [r7, #12]
 80164f8:	60b9      	str	r1, [r7, #8]
 80164fa:	603b      	str	r3, [r7, #0]
 80164fc:	4613      	mov	r3, r2
 80164fe:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Receive_DMA(i2c_receive, SLAVE_ADDR, receive_buff, data_length);
 8016500:	79fb      	ldrb	r3, [r7, #7]
 8016502:	b29b      	uxth	r3, r3
 8016504:	69ba      	ldr	r2, [r7, #24]
 8016506:	210e      	movs	r1, #14
 8016508:	68b8      	ldr	r0, [r7, #8]
 801650a:	f7ee ff21 	bl	8005350 <HAL_I2C_Master_Receive_DMA>
	HAL_I2C_Slave_Transmit_DMA(i2c_transmit, transmit_buff, data_length);
 801650e:	79fb      	ldrb	r3, [r7, #7]
 8016510:	b29b      	uxth	r3, r3
 8016512:	461a      	mov	r2, r3
 8016514:	6839      	ldr	r1, [r7, #0]
 8016516:	68f8      	ldr	r0, [r7, #12]
 8016518:	f7ef f80a 	bl	8005530 <HAL_I2C_Slave_Transmit_DMA>
	i2c_delay_till_transmited();
 801651c:	f000 f804 	bl	8016528 <i2c_delay_till_transmited>
}
 8016520:	bf00      	nop
 8016522:	3710      	adds	r7, #16
 8016524:	46bd      	mov	sp, r7
 8016526:	bd80      	pop	{r7, pc}

08016528 <i2c_delay_till_transmited>:

/// Delay until enters HAL_I2C_TxCpltCallback changes flag to true
void i2c_delay_till_transmited()
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b082      	sub	sp, #8
 801652c:	af00      	add	r7, sp, #0
	uint32_t tickstart = HAL_GetTick();
 801652e:	f7eb fe67 	bl	8002200 <HAL_GetTick>
 8016532:	6078      	str	r0, [r7, #4]
	while(i2c_tx_done_flag != TRUE)
 8016534:	e007      	b.n	8016546 <i2c_delay_till_transmited+0x1e>
	{
		if (HAL_GetTick() - tickstart > SECOND_IN_MILLISECONS)
 8016536:	f7eb fe63 	bl	8002200 <HAL_GetTick>
 801653a:	4602      	mov	r2, r0
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	1ad3      	subs	r3, r2, r3
 8016540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016544:	d804      	bhi.n	8016550 <i2c_delay_till_transmited+0x28>
	while(i2c_tx_done_flag != TRUE)
 8016546:	4b06      	ldr	r3, [pc, #24]	; (8016560 <i2c_delay_till_transmited+0x38>)
 8016548:	781b      	ldrb	r3, [r3, #0]
 801654a:	2b01      	cmp	r3, #1
 801654c:	d1f3      	bne.n	8016536 <i2c_delay_till_transmited+0xe>
 801654e:	e000      	b.n	8016552 <i2c_delay_till_transmited+0x2a>
			break;
 8016550:	bf00      	nop
	}
	i2c_tx_done_flag = FALSE;
 8016552:	4b03      	ldr	r3, [pc, #12]	; (8016560 <i2c_delay_till_transmited+0x38>)
 8016554:	2200      	movs	r2, #0
 8016556:	701a      	strb	r2, [r3, #0]
}
 8016558:	bf00      	nop
 801655a:	3708      	adds	r7, #8
 801655c:	46bd      	mov	sp, r7
 801655e:	bd80      	pop	{r7, pc}
 8016560:	20009123 	.word	0x20009123

08016564 <i2c_delay_till_received>:

/// Delay until enters HAL_I2C_Rx_CpltCallback changes flag to true
void i2c_delay_till_received()
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b082      	sub	sp, #8
 8016568:	af00      	add	r7, sp, #0
	uint32_t tickstart = HAL_GetTick();
 801656a:	f7eb fe49 	bl	8002200 <HAL_GetTick>
 801656e:	6078      	str	r0, [r7, #4]
	while(i2c_rx_done_flag != TRUE)
 8016570:	e007      	b.n	8016582 <i2c_delay_till_received+0x1e>
	{
		if (HAL_GetTick() - tickstart > SECOND_IN_MILLISECONS)
 8016572:	f7eb fe45 	bl	8002200 <HAL_GetTick>
 8016576:	4602      	mov	r2, r0
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	1ad3      	subs	r3, r2, r3
 801657c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016580:	d804      	bhi.n	801658c <i2c_delay_till_received+0x28>
	while(i2c_rx_done_flag != TRUE)
 8016582:	4b06      	ldr	r3, [pc, #24]	; (801659c <i2c_delay_till_received+0x38>)
 8016584:	781b      	ldrb	r3, [r3, #0]
 8016586:	2b01      	cmp	r3, #1
 8016588:	d1f3      	bne.n	8016572 <i2c_delay_till_received+0xe>
 801658a:	e000      	b.n	801658e <i2c_delay_till_received+0x2a>
			break;
 801658c:	bf00      	nop
	}
	i2c_rx_done_flag = FALSE;
 801658e:	4b03      	ldr	r3, [pc, #12]	; (801659c <i2c_delay_till_received+0x38>)
 8016590:	2200      	movs	r2, #0
 8016592:	701a      	strb	r2, [r3, #0]
}
 8016594:	bf00      	nop
 8016596:	3708      	adds	r7, #8
 8016598:	46bd      	mov	sp, r7
 801659a:	bd80      	pop	{r7, pc}
 801659c:	20009124 	.word	0x20009124

080165a0 <i2c_reset_buffers>:

/**
 * This function reset the buffer to "empty" buffer (filled with zeros).
 */
void i2c_reset_buffers(uint8_t *slave_buff, uint8_t *master_buff)
{
 80165a0:	b580      	push	{r7, lr}
 80165a2:	b082      	sub	sp, #8
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	6078      	str	r0, [r7, #4]
 80165a8:	6039      	str	r1, [r7, #0]
	memset(master_buff, '0', DATA_SIZE);
 80165aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80165ae:	2130      	movs	r1, #48	; 0x30
 80165b0:	6838      	ldr	r0, [r7, #0]
 80165b2:	f000 fc7b 	bl	8016eac <memset>
	memset(slave_buff, '0', DATA_SIZE);
 80165b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80165ba:	2130      	movs	r1, #48	; 0x30
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f000 fc75 	bl	8016eac <memset>
}
 80165c2:	bf00      	nop
 80165c4:	3708      	adds	r7, #8
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}
	...

080165cc <HAL_I2C_MasterTxCpltCallback>:

/// Enters here upon completed I2C master transmit
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80165cc:	b480      	push	{r7}
 80165ce:	b083      	sub	sp, #12
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
	if(hi2c == I2C_MASTER)
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	4a06      	ldr	r2, [pc, #24]	; (80165f0 <HAL_I2C_MasterTxCpltCallback+0x24>)
 80165d8:	4293      	cmp	r3, r2
 80165da:	d102      	bne.n	80165e2 <HAL_I2C_MasterTxCpltCallback+0x16>
		i2c_tx_done_flag = TRUE;
 80165dc:	4b05      	ldr	r3, [pc, #20]	; (80165f4 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80165de:	2201      	movs	r2, #1
 80165e0:	701a      	strb	r2, [r3, #0]
}
 80165e2:	bf00      	nop
 80165e4:	370c      	adds	r7, #12
 80165e6:	46bd      	mov	sp, r7
 80165e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ec:	4770      	bx	lr
 80165ee:	bf00      	nop
 80165f0:	200002e8 	.word	0x200002e8
 80165f4:	20009123 	.word	0x20009123

080165f8 <HAL_I2C_MasterRxCpltCallback>:

/// Enters here upon completed I2C master receive
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80165f8:	b480      	push	{r7}
 80165fa:	b083      	sub	sp, #12
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
	if (hi2c == I2C_MASTER)
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	4a06      	ldr	r2, [pc, #24]	; (801661c <HAL_I2C_MasterRxCpltCallback+0x24>)
 8016604:	4293      	cmp	r3, r2
 8016606:	d102      	bne.n	801660e <HAL_I2C_MasterRxCpltCallback+0x16>
		i2c_rx_done_flag = TRUE;
 8016608:	4b05      	ldr	r3, [pc, #20]	; (8016620 <HAL_I2C_MasterRxCpltCallback+0x28>)
 801660a:	2201      	movs	r2, #1
 801660c:	701a      	strb	r2, [r3, #0]
}
 801660e:	bf00      	nop
 8016610:	370c      	adds	r7, #12
 8016612:	46bd      	mov	sp, r7
 8016614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016618:	4770      	bx	lr
 801661a:	bf00      	nop
 801661c:	200002e8 	.word	0x200002e8
 8016620:	20009124 	.word	0x20009124

08016624 <HAL_I2C_SlaveTxCpltCallback>:

/// Enters here upon completed I2C slave transmit
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016624:	b480      	push	{r7}
 8016626:	b083      	sub	sp, #12
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
	if (hi2c == I2C_SLAVE)
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	4a06      	ldr	r2, [pc, #24]	; (8016648 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8016630:	4293      	cmp	r3, r2
 8016632:	d102      	bne.n	801663a <HAL_I2C_SlaveTxCpltCallback+0x16>
		i2c_tx_done_flag = TRUE;
 8016634:	4b05      	ldr	r3, [pc, #20]	; (801664c <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8016636:	2201      	movs	r2, #1
 8016638:	701a      	strb	r2, [r3, #0]
}
 801663a:	bf00      	nop
 801663c:	370c      	adds	r7, #12
 801663e:	46bd      	mov	sp, r7
 8016640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016644:	4770      	bx	lr
 8016646:	bf00      	nop
 8016648:	20000294 	.word	0x20000294
 801664c:	20009123 	.word	0x20009123

08016650 <HAL_I2C_SlaveRxCpltCallback>:

/// Enters here upon completed I2C slave receive
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016650:	b480      	push	{r7}
 8016652:	b083      	sub	sp, #12
 8016654:	af00      	add	r7, sp, #0
 8016656:	6078      	str	r0, [r7, #4]
	if (hi2c == I2C_SLAVE)
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	4a06      	ldr	r2, [pc, #24]	; (8016674 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 801665c:	4293      	cmp	r3, r2
 801665e:	d102      	bne.n	8016666 <HAL_I2C_SlaveRxCpltCallback+0x16>
		i2c_rx_done_flag = TRUE;
 8016660:	4b05      	ldr	r3, [pc, #20]	; (8016678 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8016662:	2201      	movs	r2, #1
 8016664:	701a      	strb	r2, [r3, #0]
}
 8016666:	bf00      	nop
 8016668:	370c      	adds	r7, #12
 801666a:	46bd      	mov	sp, r7
 801666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016670:	4770      	bx	lr
 8016672:	bf00      	nop
 8016674:	20000294 	.word	0x20000294
 8016678:	20009124 	.word	0x20009124

0801667c <rtg_main>:
#include "SPI.h"
#include "ADC.h"
#include "TIMER.h"

void rtg_main()
{
 801667c:	b580      	push	{r7, lr}
 801667e:	af00      	add	r7, sp, #0
	udpServer_init();				//Init UDP server
 8016680:	f000 fad2 	bl	8016c28 <udpServer_init>
	while(TRUE)
	{
		ethernetif_input(&gnetif);
 8016684:	4802      	ldr	r0, [pc, #8]	; (8016690 <rtg_main+0x14>)
 8016686:	f7f5 fa4f 	bl	800bb28 <ethernetif_input>
		sys_check_timeouts();		//checks timeout expiration
 801668a:	f7fc fdbb 	bl	8013204 <sys_check_timeouts>
		ethernetif_input(&gnetif);
 801668e:	e7f9      	b.n	8016684 <rtg_main+0x8>
 8016690:	20000f78 	.word	0x20000f78

08016694 <send_to_test>:
/**
 * Receives the test packet structure. Based on the peripheral indicated in
 * the packet received, runs the corresponding test.
 */
uint8_t send_to_test(packet_t *test_packet)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	b084      	sub	sp, #16
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
	uint8_t test_result;
	switch (test_packet->test_per)
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	791b      	ldrb	r3, [r3, #4]
 80166a0:	3b01      	subs	r3, #1
 80166a2:	2b0f      	cmp	r3, #15
 80166a4:	d856      	bhi.n	8016754 <send_to_test+0xc0>
 80166a6:	a201      	add	r2, pc, #4	; (adr r2, 80166ac <send_to_test+0x18>)
 80166a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166ac:	080166ed 	.word	0x080166ed
 80166b0:	080166fd 	.word	0x080166fd
 80166b4:	08016755 	.word	0x08016755
 80166b8:	08016715 	.word	0x08016715
 80166bc:	08016755 	.word	0x08016755
 80166c0:	08016755 	.word	0x08016755
 80166c4:	08016755 	.word	0x08016755
 80166c8:	0801672d 	.word	0x0801672d
 80166cc:	08016755 	.word	0x08016755
 80166d0:	08016755 	.word	0x08016755
 80166d4:	08016755 	.word	0x08016755
 80166d8:	08016755 	.word	0x08016755
 80166dc:	08016755 	.word	0x08016755
 80166e0:	08016755 	.word	0x08016755
 80166e4:	08016755 	.word	0x08016755
 80166e8:	08016745 	.word	0x08016745
	{
		case(TIMER_TEST):
			test_result = timer_test(test_packet->test_iter);
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	795b      	ldrb	r3, [r3, #5]
 80166f0:	4618      	mov	r0, r3
 80166f2:	f000 f90f 	bl	8016914 <timer_test>
 80166f6:	4603      	mov	r3, r0
 80166f8:	73fb      	strb	r3, [r7, #15]
			break;
 80166fa:	e02e      	b.n	801675a <send_to_test+0xc6>

		case(UART_TEST):
			test_result = uart_test(test_packet->test_iter,
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	7958      	ldrb	r0, [r3, #5]
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	7999      	ldrb	r1, [r3, #6]
									test_packet->test_bitfield_len,
									test_packet->test_bitfield_data);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	3307      	adds	r3, #7
			test_result = uart_test(test_packet->test_iter,
 8016708:	461a      	mov	r2, r3
 801670a:	f000 f955 	bl	80169b8 <uart_test>
 801670e:	4603      	mov	r3, r0
 8016710:	73fb      	strb	r3, [r7, #15]
			break;
 8016712:	e022      	b.n	801675a <send_to_test+0xc6>

		case(SPI_TEST):
			test_result = spi_test( test_packet->test_iter,
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	7958      	ldrb	r0, [r3, #5]
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	7999      	ldrb	r1, [r3, #6]
									test_packet->test_bitfield_len,
									test_packet->test_bitfield_data);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	3307      	adds	r3, #7
			test_result = spi_test( test_packet->test_iter,
 8016720:	461a      	mov	r2, r3
 8016722:	f000 f81f 	bl	8016764 <spi_test>
 8016726:	4603      	mov	r3, r0
 8016728:	73fb      	strb	r3, [r7, #15]
			break;
 801672a:	e016      	b.n	801675a <send_to_test+0xc6>

		case(I2C_TEST):
			test_result = i2c_test(test_packet->test_iter,
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	7958      	ldrb	r0, [r3, #5]
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	7999      	ldrb	r1, [r3, #6]
									test_packet->test_bitfield_len,
									test_packet->test_bitfield_data);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	3307      	adds	r3, #7
			test_result = i2c_test(test_packet->test_iter,
 8016738:	461a      	mov	r2, r3
 801673a:	f7ff fe2b 	bl	8016394 <i2c_test>
 801673e:	4603      	mov	r3, r0
 8016740:	73fb      	strb	r3, [r7, #15]
			break;
 8016742:	e00a      	b.n	801675a <send_to_test+0xc6>

		case(ADC_TEST):
			test_result = adc_test(test_packet->test_iter);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	795b      	ldrb	r3, [r3, #5]
 8016748:	4618      	mov	r0, r3
 801674a:	f7ff fdd7 	bl	80162fc <adc_test>
 801674e:	4603      	mov	r3, r0
 8016750:	73fb      	strb	r3, [r7, #15]
			break;
 8016752:	e002      	b.n	801675a <send_to_test+0xc6>

		// in case of invalid test, return failure.
		default:
			test_result = FAILURE;
 8016754:	23ff      	movs	r3, #255	; 0xff
 8016756:	73fb      	strb	r3, [r7, #15]
			break;
 8016758:	bf00      	nop
	}
	return test_result;
 801675a:	7bfb      	ldrb	r3, [r7, #15]
}
 801675c:	4618      	mov	r0, r3
 801675e:	3710      	adds	r7, #16
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}

08016764 <spi_test>:

/**
 * This is the main function for the SPI testing.
 */
uint8_t spi_test(uint8_t iter, uint8_t data_length, uint8_t *data)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b084      	sub	sp, #16
 8016768:	af00      	add	r7, sp, #0
 801676a:	4603      	mov	r3, r0
 801676c:	603a      	str	r2, [r7, #0]
 801676e:	71fb      	strb	r3, [r7, #7]
 8016770:	460b      	mov	r3, r1
 8016772:	71bb      	strb	r3, [r7, #6]
	for(uint8_t i = 0; i < iter ; i++)
 8016774:	2300      	movs	r3, #0
 8016776:	73fb      	strb	r3, [r7, #15]
 8016778:	e01d      	b.n	80167b6 <spi_test+0x52>
	{
		// transmit from master to slave
		spi_transmit_to_slave(data_length, data);
 801677a:	79bb      	ldrb	r3, [r7, #6]
 801677c:	6839      	ldr	r1, [r7, #0]
 801677e:	4618      	mov	r0, r3
 8016780:	f000 f83a 	bl	80167f8 <spi_transmit_to_slave>

		// transmit from slave to master
		spi_transmit_to_master(data_length);
 8016784:	79bb      	ldrb	r3, [r7, #6]
 8016786:	4618      	mov	r0, r3
 8016788:	f000 f856 	bl	8016838 <spi_transmit_to_master>

		// test received data equals to original data and callback counters
		// reached expected count
		if (!spi_test_conditions(data_length, data))
 801678c:	79bb      	ldrb	r3, [r7, #6]
 801678e:	6839      	ldr	r1, [r7, #0]
 8016790:	4618      	mov	r0, r3
 8016792:	f000 f871 	bl	8016878 <spi_test_conditions>
 8016796:	4603      	mov	r3, r0
 8016798:	2b00      	cmp	r3, #0
 801679a:	d101      	bne.n	80167a0 <spi_test+0x3c>
		{
			return FAILURE;
 801679c:	23ff      	movs	r3, #255	; 0xff
 801679e:	e00f      	b.n	80167c0 <spi_test+0x5c>
		}

		spi_reset_buffers();
 80167a0:	f000 f816 	bl	80167d0 <spi_reset_buffers>
		master_tx_rx_cnt = INIT_VALUE;
 80167a4:	4b08      	ldr	r3, [pc, #32]	; (80167c8 <spi_test+0x64>)
 80167a6:	2200      	movs	r2, #0
 80167a8:	701a      	strb	r2, [r3, #0]
		slave_tx_rx_cnt = INIT_VALUE;
 80167aa:	4b08      	ldr	r3, [pc, #32]	; (80167cc <spi_test+0x68>)
 80167ac:	2200      	movs	r2, #0
 80167ae:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < iter ; i++)
 80167b0:	7bfb      	ldrb	r3, [r7, #15]
 80167b2:	3301      	adds	r3, #1
 80167b4:	73fb      	strb	r3, [r7, #15]
 80167b6:	7bfa      	ldrb	r2, [r7, #15]
 80167b8:	79fb      	ldrb	r3, [r7, #7]
 80167ba:	429a      	cmp	r2, r3
 80167bc:	d3dd      	bcc.n	801677a <spi_test+0x16>
	}
	return SUCCESS;
 80167be:	2301      	movs	r3, #1
}
 80167c0:	4618      	mov	r0, r3
 80167c2:	3710      	adds	r7, #16
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bd80      	pop	{r7, pc}
 80167c8:	20009328 	.word	0x20009328
 80167cc:	20009329 	.word	0x20009329

080167d0 <spi_reset_buffers>:

/**
 * This function reset the buffer to "empty" buffer (filled with zeros).
 */
void spi_reset_buffers()
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	af00      	add	r7, sp, #0
	memset(master_buff, '0', DATA_SIZE);
 80167d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80167d8:	2130      	movs	r1, #48	; 0x30
 80167da:	4805      	ldr	r0, [pc, #20]	; (80167f0 <spi_reset_buffers+0x20>)
 80167dc:	f000 fb66 	bl	8016eac <memset>
	memset(slave_buff, '0', DATA_SIZE);
 80167e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80167e4:	2130      	movs	r1, #48	; 0x30
 80167e6:	4803      	ldr	r0, [pc, #12]	; (80167f4 <spi_reset_buffers+0x24>)
 80167e8:	f000 fb60 	bl	8016eac <memset>
}
 80167ec:	bf00      	nop
 80167ee:	bd80      	pop	{r7, pc}
 80167f0:	20009128 	.word	0x20009128
 80167f4:	20009228 	.word	0x20009228

080167f8 <spi_transmit_to_slave>:
/**
 * This function will send the data from SPI master to SPI slave.
 */
void spi_transmit_to_slave(	uint8_t data_length,
							uint8_t *data)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	4603      	mov	r3, r0
 8016800:	6039      	str	r1, [r7, #0]
 8016802:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive_DMA(SPI_SLAVE,
 8016804:	79fb      	ldrb	r3, [r7, #7]
 8016806:	b29b      	uxth	r3, r3
 8016808:	4a07      	ldr	r2, [pc, #28]	; (8016828 <spi_transmit_to_slave+0x30>)
 801680a:	4907      	ldr	r1, [pc, #28]	; (8016828 <spi_transmit_to_slave+0x30>)
 801680c:	4807      	ldr	r0, [pc, #28]	; (801682c <spi_transmit_to_slave+0x34>)
 801680e:	f7f1 fe99 	bl	8008544 <HAL_SPI_TransmitReceive_DMA>
								slave_buff,
								slave_buff,
								data_length);

	HAL_SPI_TransmitReceive_DMA(SPI_MASTER,
 8016812:	79fb      	ldrb	r3, [r7, #7]
 8016814:	b29b      	uxth	r3, r3
 8016816:	4a06      	ldr	r2, [pc, #24]	; (8016830 <spi_transmit_to_slave+0x38>)
 8016818:	6839      	ldr	r1, [r7, #0]
 801681a:	4806      	ldr	r0, [pc, #24]	; (8016834 <spi_transmit_to_slave+0x3c>)
 801681c:	f7f1 fe92 	bl	8008544 <HAL_SPI_TransmitReceive_DMA>
								data,
								master_buff,
								data_length);
}
 8016820:	bf00      	nop
 8016822:	3708      	adds	r7, #8
 8016824:	46bd      	mov	sp, r7
 8016826:	bd80      	pop	{r7, pc}
 8016828:	20009228 	.word	0x20009228
 801682c:	20000520 	.word	0x20000520
 8016830:	20009128 	.word	0x20009128
 8016834:	200004bc 	.word	0x200004bc

08016838 <spi_transmit_to_master>:

/**
 * This function will send the data from SPI slave to SPI master.
 */
void spi_transmit_to_master(uint8_t data_length)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	4603      	mov	r3, r0
 8016840:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive_DMA(SPI_SLAVE,
 8016842:	79fb      	ldrb	r3, [r7, #7]
 8016844:	b29b      	uxth	r3, r3
 8016846:	4a08      	ldr	r2, [pc, #32]	; (8016868 <spi_transmit_to_master+0x30>)
 8016848:	4907      	ldr	r1, [pc, #28]	; (8016868 <spi_transmit_to_master+0x30>)
 801684a:	4808      	ldr	r0, [pc, #32]	; (801686c <spi_transmit_to_master+0x34>)
 801684c:	f7f1 fe7a 	bl	8008544 <HAL_SPI_TransmitReceive_DMA>
								slave_buff,
								slave_buff,
								data_length);

	HAL_SPI_TransmitReceive_DMA(SPI_MASTER,
 8016850:	79fb      	ldrb	r3, [r7, #7]
 8016852:	b29b      	uxth	r3, r3
 8016854:	4a06      	ldr	r2, [pc, #24]	; (8016870 <spi_transmit_to_master+0x38>)
 8016856:	4906      	ldr	r1, [pc, #24]	; (8016870 <spi_transmit_to_master+0x38>)
 8016858:	4806      	ldr	r0, [pc, #24]	; (8016874 <spi_transmit_to_master+0x3c>)
 801685a:	f7f1 fe73 	bl	8008544 <HAL_SPI_TransmitReceive_DMA>
								master_buff,
								master_buff,
								data_length);
}
 801685e:	bf00      	nop
 8016860:	3708      	adds	r7, #8
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	20009228 	.word	0x20009228
 801686c:	20000520 	.word	0x20000520
 8016870:	20009128 	.word	0x20009128
 8016874:	200004bc 	.word	0x200004bc

08016878 <spi_test_conditions>:
/**
 * Checks that the transmitted/received data is the same as the original
 * data, and that the data was actually sent during spi_test run.
 */
uint8_t spi_test_conditions(uint8_t data_length, uint8_t *data)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b082      	sub	sp, #8
 801687c:	af00      	add	r7, sp, #0
 801687e:	4603      	mov	r3, r0
 8016880:	6039      	str	r1, [r7, #0]
 8016882:	71fb      	strb	r3, [r7, #7]
	if ( strncmp((char *)master_buff, (char *)data, data_length) != 0 )
 8016884:	79fb      	ldrb	r3, [r7, #7]
 8016886:	461a      	mov	r2, r3
 8016888:	6839      	ldr	r1, [r7, #0]
 801688a:	480b      	ldr	r0, [pc, #44]	; (80168b8 <spi_test_conditions+0x40>)
 801688c:	f000 fc5c 	bl	8017148 <strncmp>
 8016890:	4603      	mov	r3, r0
 8016892:	2b00      	cmp	r3, #0
 8016894:	d001      	beq.n	801689a <spi_test_conditions+0x22>
	{
		return FALSE;
 8016896:	2300      	movs	r3, #0
 8016898:	e00a      	b.n	80168b0 <spi_test_conditions+0x38>
	}

	if (	 master_tx_rx_cnt != CORRECT_CALLBACK_CNT
 801689a:	4b08      	ldr	r3, [pc, #32]	; (80168bc <spi_test_conditions+0x44>)
 801689c:	781b      	ldrb	r3, [r3, #0]
 801689e:	2b02      	cmp	r3, #2
 80168a0:	d103      	bne.n	80168aa <spi_test_conditions+0x32>
		||	 slave_tx_rx_cnt != CORRECT_CALLBACK_CNT )
 80168a2:	4b07      	ldr	r3, [pc, #28]	; (80168c0 <spi_test_conditions+0x48>)
 80168a4:	781b      	ldrb	r3, [r3, #0]
 80168a6:	2b02      	cmp	r3, #2
 80168a8:	d001      	beq.n	80168ae <spi_test_conditions+0x36>
	{
		return FALSE;
 80168aa:	2300      	movs	r3, #0
 80168ac:	e000      	b.n	80168b0 <spi_test_conditions+0x38>
	}

	return TRUE;
 80168ae:	2301      	movs	r3, #1
}
 80168b0:	4618      	mov	r0, r3
 80168b2:	3708      	adds	r7, #8
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd80      	pop	{r7, pc}
 80168b8:	20009128 	.word	0x20009128
 80168bc:	20009328 	.word	0x20009328
 80168c0:	20009329 	.word	0x20009329

080168c4 <HAL_SPI_TxRxCpltCallback>:

/// enter this callback after successful HAL_SPI_TransmitReceive() function.
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80168c4:	b480      	push	{r7}
 80168c6:	b083      	sub	sp, #12
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
	if (hspi == SPI_MASTER)
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	4a0d      	ldr	r2, [pc, #52]	; (8016904 <HAL_SPI_TxRxCpltCallback+0x40>)
 80168d0:	4293      	cmp	r3, r2
 80168d2:	d106      	bne.n	80168e2 <HAL_SPI_TxRxCpltCallback+0x1e>
		++master_tx_rx_cnt;
 80168d4:	4b0c      	ldr	r3, [pc, #48]	; (8016908 <HAL_SPI_TxRxCpltCallback+0x44>)
 80168d6:	781b      	ldrb	r3, [r3, #0]
 80168d8:	3301      	adds	r3, #1
 80168da:	b2da      	uxtb	r2, r3
 80168dc:	4b0a      	ldr	r3, [pc, #40]	; (8016908 <HAL_SPI_TxRxCpltCallback+0x44>)
 80168de:	701a      	strb	r2, [r3, #0]
	else if (hspi == SPI_SLAVE)
		++slave_tx_rx_cnt;
}
 80168e0:	e009      	b.n	80168f6 <HAL_SPI_TxRxCpltCallback+0x32>
	else if (hspi == SPI_SLAVE)
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	4a09      	ldr	r2, [pc, #36]	; (801690c <HAL_SPI_TxRxCpltCallback+0x48>)
 80168e6:	4293      	cmp	r3, r2
 80168e8:	d105      	bne.n	80168f6 <HAL_SPI_TxRxCpltCallback+0x32>
		++slave_tx_rx_cnt;
 80168ea:	4b09      	ldr	r3, [pc, #36]	; (8016910 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80168ec:	781b      	ldrb	r3, [r3, #0]
 80168ee:	3301      	adds	r3, #1
 80168f0:	b2da      	uxtb	r2, r3
 80168f2:	4b07      	ldr	r3, [pc, #28]	; (8016910 <HAL_SPI_TxRxCpltCallback+0x4c>)
 80168f4:	701a      	strb	r2, [r3, #0]
}
 80168f6:	bf00      	nop
 80168f8:	370c      	adds	r7, #12
 80168fa:	46bd      	mov	sp, r7
 80168fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016900:	4770      	bx	lr
 8016902:	bf00      	nop
 8016904:	200004bc 	.word	0x200004bc
 8016908:	20009328 	.word	0x20009328
 801690c:	20000520 	.word	0x20000520
 8016910:	20009329 	.word	0x20009329

08016914 <timer_test>:
/**
 * This is the main function of timer test. This function will control the
 * test run.
 */
uint8_t timer_test(uint8_t iter)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b084      	sub	sp, #16
 8016918:	af00      	add	r7, sp, #0
 801691a:	4603      	mov	r3, r0
 801691c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < iter ; ++i)
 801691e:	2300      	movs	r3, #0
 8016920:	73fb      	strb	r3, [r7, #15]
 8016922:	e018      	b.n	8016956 <timer_test+0x42>
	{
		// sets flag to 0 before starting.
		second_passed = FALSE;
 8016924:	4b10      	ldr	r3, [pc, #64]	; (8016968 <timer_test+0x54>)
 8016926:	2200      	movs	r2, #0
 8016928:	701a      	strb	r2, [r3, #0]
		// get current tick
		uint32_t tickstart = HAL_GetTick();
 801692a:	f7eb fc69 	bl	8002200 <HAL_GetTick>
 801692e:	60b8      	str	r0, [r7, #8]
		// start the tested timer
		HAL_TIM_Base_Start_IT(TIMER);
 8016930:	480e      	ldr	r0, [pc, #56]	; (801696c <timer_test+0x58>)
 8016932:	f7f2 fc07 	bl	8009144 <HAL_TIM_Base_Start_IT>

		count_1_second(tickstart);
 8016936:	68b8      	ldr	r0, [r7, #8]
 8016938:	f000 f81a 	bl	8016970 <count_1_second>
		HAL_TIM_Base_Stop_IT(TIMER);
 801693c:	480b      	ldr	r0, [pc, #44]	; (801696c <timer_test+0x58>)
 801693e:	f7f2 fc79 	bl	8009234 <HAL_TIM_Base_Stop_IT>

		if (second_passed)
 8016942:	4b09      	ldr	r3, [pc, #36]	; (8016968 <timer_test+0x54>)
 8016944:	781b      	ldrb	r3, [r3, #0]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d003      	beq.n	8016952 <timer_test+0x3e>
	for(uint8_t i = 0; i < iter ; ++i)
 801694a:	7bfb      	ldrb	r3, [r7, #15]
 801694c:	3301      	adds	r3, #1
 801694e:	73fb      	strb	r3, [r7, #15]
 8016950:	e001      	b.n	8016956 <timer_test+0x42>
			continue;

		return FAILURE;
 8016952:	23ff      	movs	r3, #255	; 0xff
 8016954:	e004      	b.n	8016960 <timer_test+0x4c>
	for(uint8_t i = 0; i < iter ; ++i)
 8016956:	7bfa      	ldrb	r2, [r7, #15]
 8016958:	79fb      	ldrb	r3, [r7, #7]
 801695a:	429a      	cmp	r2, r3
 801695c:	d3e2      	bcc.n	8016924 <timer_test+0x10>
	}
	return SUCCESS;
 801695e:	2301      	movs	r3, #1
}
 8016960:	4618      	mov	r0, r3
 8016962:	3710      	adds	r7, #16
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}
 8016968:	2000932a 	.word	0x2000932a
 801696c:	20000704 	.word	0x20000704

08016970 <count_1_second>:

/**
 * This function count one second.
 */
void count_1_second(uint32_t tickstart)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() - tickstart < TIMER_DELAY);
 8016978:	bf00      	nop
 801697a:	f7eb fc41 	bl	8002200 <HAL_GetTick>
 801697e:	4602      	mov	r2, r0
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	1ad3      	subs	r3, r2, r3
 8016984:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016988:	4293      	cmp	r3, r2
 801698a:	d9f6      	bls.n	801697a <count_1_second+0xa>
}
 801698c:	bf00      	nop
 801698e:	bf00      	nop
 8016990:	3708      	adds	r7, #8
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}
	...

08016998 <HAL_TIM_PeriodElapsedCallback>:

// Enters here after 1 second has passed.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016998:	b480      	push	{r7}
 801699a:	b083      	sub	sp, #12
 801699c:	af00      	add	r7, sp, #0
 801699e:	6078      	str	r0, [r7, #4]
	second_passed = TRUE;
 80169a0:	4b04      	ldr	r3, [pc, #16]	; (80169b4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80169a2:	2201      	movs	r2, #1
 80169a4:	701a      	strb	r2, [r3, #0]
}
 80169a6:	bf00      	nop
 80169a8:	370c      	adds	r7, #12
 80169aa:	46bd      	mov	sp, r7
 80169ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b0:	4770      	bx	lr
 80169b2:	bf00      	nop
 80169b4:	2000932a 	.word	0x2000932a

080169b8 <uart_test>:
 * This is the main function for the UART testing.
 * The data received from server will be received initially by UART4, transmit
 * to UART6, and then transmit back to UART4 to check if the data is the same.
 */
uint8_t uart_test(uint8_t iter, uint8_t data_length, uint8_t *data)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80169be:	af02      	add	r7, sp, #8
 80169c0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80169c4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80169c8:	601a      	str	r2, [r3, #0]
 80169ca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80169ce:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 80169d2:	4602      	mov	r2, r0
 80169d4:	701a      	strb	r2, [r3, #0]
 80169d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80169da:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80169de:	460a      	mov	r2, r1
 80169e0:	701a      	strb	r2, [r3, #0]
	uint8_t uart_master_buff[DATA_SIZE] = { 0 };		// UART4 Buffer
 80169e2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80169e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80169ea:	2200      	movs	r2, #0
 80169ec:	601a      	str	r2, [r3, #0]
 80169ee:	3304      	adds	r3, #4
 80169f0:	22fc      	movs	r2, #252	; 0xfc
 80169f2:	2100      	movs	r1, #0
 80169f4:	4618      	mov	r0, r3
 80169f6:	f000 fa59 	bl	8016eac <memset>
	uint8_t uart_slave_buff[DATA_SIZE] = { 0 };			// UART6 BUFFER
 80169fa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80169fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8016a02:	2200      	movs	r2, #0
 8016a04:	601a      	str	r2, [r3, #0]
 8016a06:	3304      	adds	r3, #4
 8016a08:	22fc      	movs	r2, #252	; 0xfc
 8016a0a:	2100      	movs	r1, #0
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	f000 fa4d 	bl	8016eac <memset>
	uint8_t result = SUCCESS;
 8016a12:	2301      	movs	r3, #1
 8016a14:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e

	for(uint8_t i = 0; i < iter; i++)
 8016a18:	2300      	movs	r3, #0
 8016a1a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8016a1e:	e048      	b.n	8016ab2 <uart_test+0xfa>
	{
		uart_transmit_receive(	UART_MASTER,
 8016a20:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8016a24:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016a28:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8016a2c:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 8016a30:	7811      	ldrb	r1, [r2, #0]
 8016a32:	f107 020c 	add.w	r2, r7, #12
 8016a36:	9200      	str	r2, [sp, #0]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	460a      	mov	r2, r1
 8016a3c:	4925      	ldr	r1, [pc, #148]	; (8016ad4 <uart_test+0x11c>)
 8016a3e:	4826      	ldr	r0, [pc, #152]	; (8016ad8 <uart_test+0x120>)
 8016a40:	f000 f84c 	bl	8016adc <uart_transmit_receive>
								UART_SLAVE,
								data_length,
								data,
								uart_slave_buff);
		uart_delay_till_received();
 8016a44:	f000 f884 	bl	8016b50 <uart_delay_till_received>
		uart_transmit_receive(	UART_SLAVE,
 8016a48:	f107 010c 	add.w	r1, r7, #12
 8016a4c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8016a50:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8016a54:	781a      	ldrb	r2, [r3, #0]
 8016a56:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8016a5a:	9300      	str	r3, [sp, #0]
 8016a5c:	460b      	mov	r3, r1
 8016a5e:	491e      	ldr	r1, [pc, #120]	; (8016ad8 <uart_test+0x120>)
 8016a60:	481c      	ldr	r0, [pc, #112]	; (8016ad4 <uart_test+0x11c>)
 8016a62:	f000 f83b 	bl	8016adc <uart_transmit_receive>
								UART_MASTER,
								data_length,
								uart_slave_buff,
								uart_master_buff);
		uart_delay_till_received();
 8016a66:	f000 f873 	bl	8016b50 <uart_delay_till_received>

		if(strncmp((char *)uart_master_buff, (char *)data, data_length) != 0)
 8016a6a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8016a6e:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8016a72:	781a      	ldrb	r2, [r3, #0]
 8016a74:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8016a78:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8016a7c:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8016a80:	6819      	ldr	r1, [r3, #0]
 8016a82:	f000 fb61 	bl	8017148 <strncmp>
 8016a86:	4603      	mov	r3, r0
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d005      	beq.n	8016a98 <uart_test+0xe0>
		{
			result = FAILURE;
 8016a8c:	23ff      	movs	r3, #255	; 0xff
 8016a8e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
			return result;
 8016a92:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8016a96:	e017      	b.n	8016ac8 <uart_test+0x110>
		}
		uart_reset_buffers(uart_slave_buff, uart_master_buff);
 8016a98:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8016a9c:	f107 030c 	add.w	r3, r7, #12
 8016aa0:	4611      	mov	r1, r2
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	f000 f872 	bl	8016b8c <uart_reset_buffers>
	for(uint8_t i = 0; i < iter; i++)
 8016aa8:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8016aac:	3301      	adds	r3, #1
 8016aae:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8016ab2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8016ab6:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8016aba:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8016abe:	781b      	ldrb	r3, [r3, #0]
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d3ad      	bcc.n	8016a20 <uart_test+0x68>
	}
	return result;
 8016ac4:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
}
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bd80      	pop	{r7, pc}
 8016ad2:	bf00      	nop
 8016ad4:	20000860 	.word	0x20000860
 8016ad8:	20000750 	.word	0x20000750

08016adc <uart_transmit_receive>:
void uart_transmit_receive(	UART_HandleTypeDef *uart_transmit,
							UART_HandleTypeDef *uart_receive,
							uint8_t data_length,
							uint8_t *transmit_buff,
							uint8_t *receive_buff )
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b084      	sub	sp, #16
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	60f8      	str	r0, [r7, #12]
 8016ae4:	60b9      	str	r1, [r7, #8]
 8016ae6:	603b      	str	r3, [r7, #0]
 8016ae8:	4613      	mov	r3, r2
 8016aea:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive_DMA(uart_receive, receive_buff, data_length);
 8016aec:	79fb      	ldrb	r3, [r7, #7]
 8016aee:	b29b      	uxth	r3, r3
 8016af0:	461a      	mov	r2, r3
 8016af2:	69b9      	ldr	r1, [r7, #24]
 8016af4:	68b8      	ldr	r0, [r7, #8]
 8016af6:	f7f3 f88d 	bl	8009c14 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(uart_transmit, transmit_buff, data_length);
 8016afa:	79fb      	ldrb	r3, [r7, #7]
 8016afc:	b29b      	uxth	r3, r3
 8016afe:	461a      	mov	r2, r3
 8016b00:	6839      	ldr	r1, [r7, #0]
 8016b02:	68f8      	ldr	r0, [r7, #12]
 8016b04:	f7f3 f80a 	bl	8009b1c <HAL_UART_Transmit_DMA>
	uart_delay_till_transmited();
 8016b08:	f000 f804 	bl	8016b14 <uart_delay_till_transmited>
}
 8016b0c:	bf00      	nop
 8016b0e:	3710      	adds	r7, #16
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <uart_delay_till_transmited>:

/// Delay until enters HAL_UART_TxCpltCallback changes flag to true
void uart_delay_till_transmited()
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b082      	sub	sp, #8
 8016b18:	af00      	add	r7, sp, #0
	uint32_t tickstart = HAL_GetTick();
 8016b1a:	f7eb fb71 	bl	8002200 <HAL_GetTick>
 8016b1e:	6078      	str	r0, [r7, #4]
	while(uart_tx_done_flag != TRUE)
 8016b20:	e007      	b.n	8016b32 <uart_delay_till_transmited+0x1e>
	{
		if(HAL_GetTick() - tickstart > SECOND_IN_MILLISECONS)
 8016b22:	f7eb fb6d 	bl	8002200 <HAL_GetTick>
 8016b26:	4602      	mov	r2, r0
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	1ad3      	subs	r3, r2, r3
 8016b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016b30:	d804      	bhi.n	8016b3c <uart_delay_till_transmited+0x28>
	while(uart_tx_done_flag != TRUE)
 8016b32:	4b06      	ldr	r3, [pc, #24]	; (8016b4c <uart_delay_till_transmited+0x38>)
 8016b34:	781b      	ldrb	r3, [r3, #0]
 8016b36:	2b01      	cmp	r3, #1
 8016b38:	d1f3      	bne.n	8016b22 <uart_delay_till_transmited+0xe>
 8016b3a:	e000      	b.n	8016b3e <uart_delay_till_transmited+0x2a>
			break;
 8016b3c:	bf00      	nop
	}
	uart_tx_done_flag = FALSE;
 8016b3e:	4b03      	ldr	r3, [pc, #12]	; (8016b4c <uart_delay_till_transmited+0x38>)
 8016b40:	2200      	movs	r2, #0
 8016b42:	701a      	strb	r2, [r3, #0]
}
 8016b44:	bf00      	nop
 8016b46:	3708      	adds	r7, #8
 8016b48:	46bd      	mov	sp, r7
 8016b4a:	bd80      	pop	{r7, pc}
 8016b4c:	2000932b 	.word	0x2000932b

08016b50 <uart_delay_till_received>:

/// Delay until enters HAL_UART_Rx_CpltCallback changes flag to true
void uart_delay_till_received()
{
 8016b50:	b580      	push	{r7, lr}
 8016b52:	b082      	sub	sp, #8
 8016b54:	af00      	add	r7, sp, #0
	uint32_t tickstart = HAL_GetTick();
 8016b56:	f7eb fb53 	bl	8002200 <HAL_GetTick>
 8016b5a:	6078      	str	r0, [r7, #4]
	while(uart_rx_done_flag != TRUE)
 8016b5c:	e007      	b.n	8016b6e <uart_delay_till_received+0x1e>
	{
		if(HAL_GetTick() - tickstart > SECOND_IN_MILLISECONS)
 8016b5e:	f7eb fb4f 	bl	8002200 <HAL_GetTick>
 8016b62:	4602      	mov	r2, r0
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	1ad3      	subs	r3, r2, r3
 8016b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8016b6c:	d804      	bhi.n	8016b78 <uart_delay_till_received+0x28>
	while(uart_rx_done_flag != TRUE)
 8016b6e:	4b06      	ldr	r3, [pc, #24]	; (8016b88 <uart_delay_till_received+0x38>)
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	2b01      	cmp	r3, #1
 8016b74:	d1f3      	bne.n	8016b5e <uart_delay_till_received+0xe>
 8016b76:	e000      	b.n	8016b7a <uart_delay_till_received+0x2a>
			break;
 8016b78:	bf00      	nop
	}
	uart_rx_done_flag = FALSE;
 8016b7a:	4b03      	ldr	r3, [pc, #12]	; (8016b88 <uart_delay_till_received+0x38>)
 8016b7c:	2200      	movs	r2, #0
 8016b7e:	701a      	strb	r2, [r3, #0]
}
 8016b80:	bf00      	nop
 8016b82:	3708      	adds	r7, #8
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}
 8016b88:	2000932c 	.word	0x2000932c

08016b8c <uart_reset_buffers>:

/**
 * This function reset the buffer to "empty" buffer (filled with zeros).
 */
void uart_reset_buffers(uint8_t *slave_buff, uint8_t *master_buff)
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b082      	sub	sp, #8
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
 8016b94:	6039      	str	r1, [r7, #0]
	memset(master_buff, '0', DATA_SIZE);
 8016b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016b9a:	2130      	movs	r1, #48	; 0x30
 8016b9c:	6838      	ldr	r0, [r7, #0]
 8016b9e:	f000 f985 	bl	8016eac <memset>
	memset(slave_buff, '0', DATA_SIZE);
 8016ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016ba6:	2130      	movs	r1, #48	; 0x30
 8016ba8:	6878      	ldr	r0, [r7, #4]
 8016baa:	f000 f97f 	bl	8016eac <memset>
}
 8016bae:	bf00      	nop
 8016bb0:	3708      	adds	r7, #8
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd80      	pop	{r7, pc}
	...

08016bb8 <HAL_UART_RxCpltCallback>:

/// Enters here upon completed UART receive.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8016bb8:	b480      	push	{r7}
 8016bba:	b083      	sub	sp, #12
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
	if (huart == UART_MASTER || huart == UART_SLAVE)
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	4a08      	ldr	r2, [pc, #32]	; (8016be4 <HAL_UART_RxCpltCallback+0x2c>)
 8016bc4:	4293      	cmp	r3, r2
 8016bc6:	d003      	beq.n	8016bd0 <HAL_UART_RxCpltCallback+0x18>
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	4a07      	ldr	r2, [pc, #28]	; (8016be8 <HAL_UART_RxCpltCallback+0x30>)
 8016bcc:	4293      	cmp	r3, r2
 8016bce:	d102      	bne.n	8016bd6 <HAL_UART_RxCpltCallback+0x1e>
		uart_rx_done_flag = TRUE;
 8016bd0:	4b06      	ldr	r3, [pc, #24]	; (8016bec <HAL_UART_RxCpltCallback+0x34>)
 8016bd2:	2201      	movs	r2, #1
 8016bd4:	701a      	strb	r2, [r3, #0]
}
 8016bd6:	bf00      	nop
 8016bd8:	370c      	adds	r7, #12
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be0:	4770      	bx	lr
 8016be2:	bf00      	nop
 8016be4:	20000750 	.word	0x20000750
 8016be8:	20000860 	.word	0x20000860
 8016bec:	2000932c 	.word	0x2000932c

08016bf0 <HAL_UART_TxCpltCallback>:

/// Enters here upon complete UART transmit.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016bf0:	b480      	push	{r7}
 8016bf2:	b083      	sub	sp, #12
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
	if (huart == UART_MASTER || huart == UART_SLAVE)
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	4a08      	ldr	r2, [pc, #32]	; (8016c1c <HAL_UART_TxCpltCallback+0x2c>)
 8016bfc:	4293      	cmp	r3, r2
 8016bfe:	d003      	beq.n	8016c08 <HAL_UART_TxCpltCallback+0x18>
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	4a07      	ldr	r2, [pc, #28]	; (8016c20 <HAL_UART_TxCpltCallback+0x30>)
 8016c04:	4293      	cmp	r3, r2
 8016c06:	d102      	bne.n	8016c0e <HAL_UART_TxCpltCallback+0x1e>
		uart_tx_done_flag = TRUE;
 8016c08:	4b06      	ldr	r3, [pc, #24]	; (8016c24 <HAL_UART_TxCpltCallback+0x34>)
 8016c0a:	2201      	movs	r2, #1
 8016c0c:	701a      	strb	r2, [r3, #0]
}
 8016c0e:	bf00      	nop
 8016c10:	370c      	adds	r7, #12
 8016c12:	46bd      	mov	sp, r7
 8016c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c18:	4770      	bx	lr
 8016c1a:	bf00      	nop
 8016c1c:	20000750 	.word	0x20000750
 8016c20:	20000860 	.word	0x20000860
 8016c24:	2000932b 	.word	0x2000932b

08016c28 <udpServer_init>:

/**
 * Initiate the UDP server
 */
void udpServer_init()
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b084      	sub	sp, #16
 8016c2c:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8016c2e:	f7fd f857 	bl	8013ce0 <udp_new>
 8016c32:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 1, 10);
 8016c34:	4b0d      	ldr	r3, [pc, #52]	; (8016c6c <udpServer_init+0x44>)
 8016c36:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, MY_PORT);  // 55555 is the server UDP port
 8016c38:	1d3b      	adds	r3, r7, #4
 8016c3a:	f64d 1203 	movw	r2, #55555	; 0xd903
 8016c3e:	4619      	mov	r1, r3
 8016c40:	68f8      	ldr	r0, [r7, #12]
 8016c42:	f7fc fecd 	bl	80139e0 <udp_bind>
 8016c46:	4603      	mov	r3, r0
 8016c48:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8016c4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d105      	bne.n	8016c5e <udpServer_init+0x36>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8016c52:	2200      	movs	r2, #0
 8016c54:	4906      	ldr	r1, [pc, #24]	; (8016c70 <udpServer_init+0x48>)
 8016c56:	68f8      	ldr	r0, [r7, #12]
 8016c58:	f7fc ffe0 	bl	8013c1c <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8016c5c:	e002      	b.n	8016c64 <udpServer_init+0x3c>
	   udp_remove(upcb);
 8016c5e:	68f8      	ldr	r0, [r7, #12]
 8016c60:	f7fc fffc 	bl	8013c5c <udp_remove>
}
 8016c64:	bf00      	nop
 8016c66:	3710      	adds	r7, #16
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}
 8016c6c:	0a01a8c0 	.word	0x0a01a8c0
 8016c70:	08016c75 	.word	0x08016c75

08016c74 <udp_receive_callback>:
		void *arg,
		struct udp_pcb *upcb,
		struct pbuf *p,
		const ip_addr_t *addr,
		u16_t port)
{
 8016c74:	b590      	push	{r4, r7, lr}
 8016c76:	b0cd      	sub	sp, #308	; 0x134
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8016c7e:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 8016c82:	6020      	str	r0, [r4, #0]
 8016c84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8016c88:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 8016c8c:	6001      	str	r1, [r0, #0]
 8016c8e:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8016c92:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 8016c96:	600a      	str	r2, [r1, #0]
 8016c98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8016c9c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8016ca0:	6013      	str	r3, [r2, #0]
	/// empty packet received
	if (p->len == 0 || p->payload == NULL)
 8016ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016ca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	895b      	ldrh	r3, [r3, #10]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	f000 80a5 	beq.w	8016dfe <udp_receive_callback+0x18a>
 8016cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016cb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	685b      	ldr	r3, [r3, #4]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	f000 809c 	beq.w	8016dfe <udp_receive_callback+0x18a>
	uint8_t test_result;
	/* struct to store the packet data based on test fields */
	packet_t rec_packet;

	char *payload_data;
	payload_data = p->payload;
 8016cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016cca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	685b      	ldr	r3, [r3, #4]
 8016cd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8016cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	461a      	mov	r2, r3

	// copy the test id to the packet struct
	memcpy(&rec_packet.test_id, payload_data, ID_LEN);
 8016cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016ce2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016ce6:	601a      	str	r2, [r3, #0]
	payload_data += ID_LEN;	// advances the payload pointer to the next field
 8016ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016cec:	3304      	adds	r3, #4
 8016cee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	// copy the test peripheral code into the packet struct
	memcpy(&rec_packet.test_per, payload_data++, CONTROL_FIELD_LEN);
 8016cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016cf6:	1c5a      	adds	r2, r3, #1
 8016cf8:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8016cfc:	781a      	ldrb	r2, [r3, #0]
 8016cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016d02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016d06:	711a      	strb	r2, [r3, #4]
	// copy the test iteration number into the packet struct
	memcpy(&rec_packet.test_iter,payload_data++, CONTROL_FIELD_LEN);
 8016d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016d0c:	1c5a      	adds	r2, r3, #1
 8016d0e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8016d12:	781a      	ldrb	r2, [r3, #0]
 8016d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016d18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016d1c:	715a      	strb	r2, [r3, #5]
	// copy the test bitfield length into the packet struct
	memcpy(&rec_packet.test_bitfield_len,payload_data++, CONTROL_FIELD_LEN);
 8016d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016d22:	1c5a      	adds	r2, r3, #1
 8016d24:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8016d28:	781a      	ldrb	r2, [r3, #0]
 8016d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016d2e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016d32:	719a      	strb	r2, [r3, #6]
	// copy the test bitfield data into the packet struct
	memcpy(&rec_packet.test_bitfield_data, payload_data, DATA_SIZE);
 8016d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016d38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016d3c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8016d40:	3307      	adds	r3, #7
 8016d42:	4611      	mov	r1, r2
 8016d44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f000 f8a1 	bl	8016e90 <memcpy>

	free(p);
 8016d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016d52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016d56:	6818      	ldr	r0, [r3, #0]
 8016d58:	f000 f882 	bl	8016e60 <free>
	free(payload_data);
 8016d5c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8016d60:	f000 f87e 	bl	8016e60 <free>

    /* send the packet struct to the tests fucntion */
	test_result = send_to_test(&rec_packet);
 8016d64:	f107 0314 	add.w	r3, r7, #20
 8016d68:	4618      	mov	r0, r3
 8016d6a:	f7ff fc93 	bl	8016694 <send_to_test>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
 8016d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016d78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016d7c:	681b      	ldr	r3, [r3, #0]
    /* copy id to the first 4 bytes in the result buf */
	memcpy(buf, rec_packet.test_id, ID_LEN);
 8016d7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	/* store the test result at the last index of the result buf */
	buf[TEST_RESULT_INDEX] = (char) test_result;
 8016d82:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8016d86:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,REPLY_BUFF_LEN, PBUF_RAM);
 8016d8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d8e:	2105      	movs	r1, #5
 8016d90:	2036      	movs	r0, #54	; 0x36
 8016d92:	f7f6 f9bf 	bl	800d114 <pbuf_alloc>
 8016d96:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, REPLY_BUFF_LEN);
 8016d9a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8016d9e:	2205      	movs	r2, #5
 8016da0:	4619      	mov	r1, r3
 8016da2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8016da6:	f7f6 ff05 	bl	800dbb4 <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8016daa:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8016dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016db2:	f5a3 7198 	sub.w	r1, r3, #304	; 0x130
 8016db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016dba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016dbe:	6809      	ldr	r1, [r1, #0]
 8016dc0:	6818      	ldr	r0, [r3, #0]
 8016dc2:	f7fc fe95 	bl	8013af0 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8016dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016dca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016dce:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8016dd2:	6818      	ldr	r0, [r3, #0]
 8016dd4:	f7fc fc1a 	bl	801360c <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8016dd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016ddc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8016de0:	6818      	ldr	r0, [r3, #0]
 8016de2:	f7fc fef3 	bl	8013bcc <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8016de6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8016dea:	f7f6 fc77 	bl	800d6dc <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8016dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8016df2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8016df6:	6818      	ldr	r0, [r3, #0]
 8016df8:	f7f6 fc70 	bl	800d6dc <pbuf_free>
 8016dfc:	e000      	b.n	8016e00 <udp_receive_callback+0x18c>
		return;
 8016dfe:	bf00      	nop
}
 8016e00:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd90      	pop	{r4, r7, pc}

08016e08 <__libc_init_array>:
 8016e08:	b570      	push	{r4, r5, r6, lr}
 8016e0a:	4d0d      	ldr	r5, [pc, #52]	; (8016e40 <__libc_init_array+0x38>)
 8016e0c:	4c0d      	ldr	r4, [pc, #52]	; (8016e44 <__libc_init_array+0x3c>)
 8016e0e:	1b64      	subs	r4, r4, r5
 8016e10:	10a4      	asrs	r4, r4, #2
 8016e12:	2600      	movs	r6, #0
 8016e14:	42a6      	cmp	r6, r4
 8016e16:	d109      	bne.n	8016e2c <__libc_init_array+0x24>
 8016e18:	4d0b      	ldr	r5, [pc, #44]	; (8016e48 <__libc_init_array+0x40>)
 8016e1a:	4c0c      	ldr	r4, [pc, #48]	; (8016e4c <__libc_init_array+0x44>)
 8016e1c:	f001 f8aa 	bl	8017f74 <_init>
 8016e20:	1b64      	subs	r4, r4, r5
 8016e22:	10a4      	asrs	r4, r4, #2
 8016e24:	2600      	movs	r6, #0
 8016e26:	42a6      	cmp	r6, r4
 8016e28:	d105      	bne.n	8016e36 <__libc_init_array+0x2e>
 8016e2a:	bd70      	pop	{r4, r5, r6, pc}
 8016e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e30:	4798      	blx	r3
 8016e32:	3601      	adds	r6, #1
 8016e34:	e7ee      	b.n	8016e14 <__libc_init_array+0xc>
 8016e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e3a:	4798      	blx	r3
 8016e3c:	3601      	adds	r6, #1
 8016e3e:	e7f2      	b.n	8016e26 <__libc_init_array+0x1e>
 8016e40:	0801abcc 	.word	0x0801abcc
 8016e44:	0801abcc 	.word	0x0801abcc
 8016e48:	0801abcc 	.word	0x0801abcc
 8016e4c:	0801abd0 	.word	0x0801abd0

08016e50 <malloc>:
 8016e50:	4b02      	ldr	r3, [pc, #8]	; (8016e5c <malloc+0xc>)
 8016e52:	4601      	mov	r1, r0
 8016e54:	6818      	ldr	r0, [r3, #0]
 8016e56:	f000 b89d 	b.w	8016f94 <_malloc_r>
 8016e5a:	bf00      	nop
 8016e5c:	2000002c 	.word	0x2000002c

08016e60 <free>:
 8016e60:	4b02      	ldr	r3, [pc, #8]	; (8016e6c <free+0xc>)
 8016e62:	4601      	mov	r1, r0
 8016e64:	6818      	ldr	r0, [r3, #0]
 8016e66:	f000 b829 	b.w	8016ebc <_free_r>
 8016e6a:	bf00      	nop
 8016e6c:	2000002c 	.word	0x2000002c

08016e70 <memcmp>:
 8016e70:	b510      	push	{r4, lr}
 8016e72:	3901      	subs	r1, #1
 8016e74:	4402      	add	r2, r0
 8016e76:	4290      	cmp	r0, r2
 8016e78:	d101      	bne.n	8016e7e <memcmp+0xe>
 8016e7a:	2000      	movs	r0, #0
 8016e7c:	e005      	b.n	8016e8a <memcmp+0x1a>
 8016e7e:	7803      	ldrb	r3, [r0, #0]
 8016e80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016e84:	42a3      	cmp	r3, r4
 8016e86:	d001      	beq.n	8016e8c <memcmp+0x1c>
 8016e88:	1b18      	subs	r0, r3, r4
 8016e8a:	bd10      	pop	{r4, pc}
 8016e8c:	3001      	adds	r0, #1
 8016e8e:	e7f2      	b.n	8016e76 <memcmp+0x6>

08016e90 <memcpy>:
 8016e90:	440a      	add	r2, r1
 8016e92:	4291      	cmp	r1, r2
 8016e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e98:	d100      	bne.n	8016e9c <memcpy+0xc>
 8016e9a:	4770      	bx	lr
 8016e9c:	b510      	push	{r4, lr}
 8016e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ea6:	4291      	cmp	r1, r2
 8016ea8:	d1f9      	bne.n	8016e9e <memcpy+0xe>
 8016eaa:	bd10      	pop	{r4, pc}

08016eac <memset>:
 8016eac:	4402      	add	r2, r0
 8016eae:	4603      	mov	r3, r0
 8016eb0:	4293      	cmp	r3, r2
 8016eb2:	d100      	bne.n	8016eb6 <memset+0xa>
 8016eb4:	4770      	bx	lr
 8016eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8016eba:	e7f9      	b.n	8016eb0 <memset+0x4>

08016ebc <_free_r>:
 8016ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016ebe:	2900      	cmp	r1, #0
 8016ec0:	d044      	beq.n	8016f4c <_free_r+0x90>
 8016ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ec6:	9001      	str	r0, [sp, #4]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	f1a1 0404 	sub.w	r4, r1, #4
 8016ece:	bfb8      	it	lt
 8016ed0:	18e4      	addlt	r4, r4, r3
 8016ed2:	f000 fa75 	bl	80173c0 <__malloc_lock>
 8016ed6:	4a1e      	ldr	r2, [pc, #120]	; (8016f50 <_free_r+0x94>)
 8016ed8:	9801      	ldr	r0, [sp, #4]
 8016eda:	6813      	ldr	r3, [r2, #0]
 8016edc:	b933      	cbnz	r3, 8016eec <_free_r+0x30>
 8016ede:	6063      	str	r3, [r4, #4]
 8016ee0:	6014      	str	r4, [r2, #0]
 8016ee2:	b003      	add	sp, #12
 8016ee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ee8:	f000 ba70 	b.w	80173cc <__malloc_unlock>
 8016eec:	42a3      	cmp	r3, r4
 8016eee:	d908      	bls.n	8016f02 <_free_r+0x46>
 8016ef0:	6825      	ldr	r5, [r4, #0]
 8016ef2:	1961      	adds	r1, r4, r5
 8016ef4:	428b      	cmp	r3, r1
 8016ef6:	bf01      	itttt	eq
 8016ef8:	6819      	ldreq	r1, [r3, #0]
 8016efa:	685b      	ldreq	r3, [r3, #4]
 8016efc:	1949      	addeq	r1, r1, r5
 8016efe:	6021      	streq	r1, [r4, #0]
 8016f00:	e7ed      	b.n	8016ede <_free_r+0x22>
 8016f02:	461a      	mov	r2, r3
 8016f04:	685b      	ldr	r3, [r3, #4]
 8016f06:	b10b      	cbz	r3, 8016f0c <_free_r+0x50>
 8016f08:	42a3      	cmp	r3, r4
 8016f0a:	d9fa      	bls.n	8016f02 <_free_r+0x46>
 8016f0c:	6811      	ldr	r1, [r2, #0]
 8016f0e:	1855      	adds	r5, r2, r1
 8016f10:	42a5      	cmp	r5, r4
 8016f12:	d10b      	bne.n	8016f2c <_free_r+0x70>
 8016f14:	6824      	ldr	r4, [r4, #0]
 8016f16:	4421      	add	r1, r4
 8016f18:	1854      	adds	r4, r2, r1
 8016f1a:	42a3      	cmp	r3, r4
 8016f1c:	6011      	str	r1, [r2, #0]
 8016f1e:	d1e0      	bne.n	8016ee2 <_free_r+0x26>
 8016f20:	681c      	ldr	r4, [r3, #0]
 8016f22:	685b      	ldr	r3, [r3, #4]
 8016f24:	6053      	str	r3, [r2, #4]
 8016f26:	4421      	add	r1, r4
 8016f28:	6011      	str	r1, [r2, #0]
 8016f2a:	e7da      	b.n	8016ee2 <_free_r+0x26>
 8016f2c:	d902      	bls.n	8016f34 <_free_r+0x78>
 8016f2e:	230c      	movs	r3, #12
 8016f30:	6003      	str	r3, [r0, #0]
 8016f32:	e7d6      	b.n	8016ee2 <_free_r+0x26>
 8016f34:	6825      	ldr	r5, [r4, #0]
 8016f36:	1961      	adds	r1, r4, r5
 8016f38:	428b      	cmp	r3, r1
 8016f3a:	bf04      	itt	eq
 8016f3c:	6819      	ldreq	r1, [r3, #0]
 8016f3e:	685b      	ldreq	r3, [r3, #4]
 8016f40:	6063      	str	r3, [r4, #4]
 8016f42:	bf04      	itt	eq
 8016f44:	1949      	addeq	r1, r1, r5
 8016f46:	6021      	streq	r1, [r4, #0]
 8016f48:	6054      	str	r4, [r2, #4]
 8016f4a:	e7ca      	b.n	8016ee2 <_free_r+0x26>
 8016f4c:	b003      	add	sp, #12
 8016f4e:	bd30      	pop	{r4, r5, pc}
 8016f50:	20009330 	.word	0x20009330

08016f54 <sbrk_aligned>:
 8016f54:	b570      	push	{r4, r5, r6, lr}
 8016f56:	4e0e      	ldr	r6, [pc, #56]	; (8016f90 <sbrk_aligned+0x3c>)
 8016f58:	460c      	mov	r4, r1
 8016f5a:	6831      	ldr	r1, [r6, #0]
 8016f5c:	4605      	mov	r5, r0
 8016f5e:	b911      	cbnz	r1, 8016f66 <sbrk_aligned+0x12>
 8016f60:	f000 f8e2 	bl	8017128 <_sbrk_r>
 8016f64:	6030      	str	r0, [r6, #0]
 8016f66:	4621      	mov	r1, r4
 8016f68:	4628      	mov	r0, r5
 8016f6a:	f000 f8dd 	bl	8017128 <_sbrk_r>
 8016f6e:	1c43      	adds	r3, r0, #1
 8016f70:	d00a      	beq.n	8016f88 <sbrk_aligned+0x34>
 8016f72:	1cc4      	adds	r4, r0, #3
 8016f74:	f024 0403 	bic.w	r4, r4, #3
 8016f78:	42a0      	cmp	r0, r4
 8016f7a:	d007      	beq.n	8016f8c <sbrk_aligned+0x38>
 8016f7c:	1a21      	subs	r1, r4, r0
 8016f7e:	4628      	mov	r0, r5
 8016f80:	f000 f8d2 	bl	8017128 <_sbrk_r>
 8016f84:	3001      	adds	r0, #1
 8016f86:	d101      	bne.n	8016f8c <sbrk_aligned+0x38>
 8016f88:	f04f 34ff 	mov.w	r4, #4294967295
 8016f8c:	4620      	mov	r0, r4
 8016f8e:	bd70      	pop	{r4, r5, r6, pc}
 8016f90:	20009334 	.word	0x20009334

08016f94 <_malloc_r>:
 8016f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f98:	1ccd      	adds	r5, r1, #3
 8016f9a:	f025 0503 	bic.w	r5, r5, #3
 8016f9e:	3508      	adds	r5, #8
 8016fa0:	2d0c      	cmp	r5, #12
 8016fa2:	bf38      	it	cc
 8016fa4:	250c      	movcc	r5, #12
 8016fa6:	2d00      	cmp	r5, #0
 8016fa8:	4607      	mov	r7, r0
 8016faa:	db01      	blt.n	8016fb0 <_malloc_r+0x1c>
 8016fac:	42a9      	cmp	r1, r5
 8016fae:	d905      	bls.n	8016fbc <_malloc_r+0x28>
 8016fb0:	230c      	movs	r3, #12
 8016fb2:	603b      	str	r3, [r7, #0]
 8016fb4:	2600      	movs	r6, #0
 8016fb6:	4630      	mov	r0, r6
 8016fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fbc:	4e2e      	ldr	r6, [pc, #184]	; (8017078 <_malloc_r+0xe4>)
 8016fbe:	f000 f9ff 	bl	80173c0 <__malloc_lock>
 8016fc2:	6833      	ldr	r3, [r6, #0]
 8016fc4:	461c      	mov	r4, r3
 8016fc6:	bb34      	cbnz	r4, 8017016 <_malloc_r+0x82>
 8016fc8:	4629      	mov	r1, r5
 8016fca:	4638      	mov	r0, r7
 8016fcc:	f7ff ffc2 	bl	8016f54 <sbrk_aligned>
 8016fd0:	1c43      	adds	r3, r0, #1
 8016fd2:	4604      	mov	r4, r0
 8016fd4:	d14d      	bne.n	8017072 <_malloc_r+0xde>
 8016fd6:	6834      	ldr	r4, [r6, #0]
 8016fd8:	4626      	mov	r6, r4
 8016fda:	2e00      	cmp	r6, #0
 8016fdc:	d140      	bne.n	8017060 <_malloc_r+0xcc>
 8016fde:	6823      	ldr	r3, [r4, #0]
 8016fe0:	4631      	mov	r1, r6
 8016fe2:	4638      	mov	r0, r7
 8016fe4:	eb04 0803 	add.w	r8, r4, r3
 8016fe8:	f000 f89e 	bl	8017128 <_sbrk_r>
 8016fec:	4580      	cmp	r8, r0
 8016fee:	d13a      	bne.n	8017066 <_malloc_r+0xd2>
 8016ff0:	6821      	ldr	r1, [r4, #0]
 8016ff2:	3503      	adds	r5, #3
 8016ff4:	1a6d      	subs	r5, r5, r1
 8016ff6:	f025 0503 	bic.w	r5, r5, #3
 8016ffa:	3508      	adds	r5, #8
 8016ffc:	2d0c      	cmp	r5, #12
 8016ffe:	bf38      	it	cc
 8017000:	250c      	movcc	r5, #12
 8017002:	4629      	mov	r1, r5
 8017004:	4638      	mov	r0, r7
 8017006:	f7ff ffa5 	bl	8016f54 <sbrk_aligned>
 801700a:	3001      	adds	r0, #1
 801700c:	d02b      	beq.n	8017066 <_malloc_r+0xd2>
 801700e:	6823      	ldr	r3, [r4, #0]
 8017010:	442b      	add	r3, r5
 8017012:	6023      	str	r3, [r4, #0]
 8017014:	e00e      	b.n	8017034 <_malloc_r+0xa0>
 8017016:	6822      	ldr	r2, [r4, #0]
 8017018:	1b52      	subs	r2, r2, r5
 801701a:	d41e      	bmi.n	801705a <_malloc_r+0xc6>
 801701c:	2a0b      	cmp	r2, #11
 801701e:	d916      	bls.n	801704e <_malloc_r+0xba>
 8017020:	1961      	adds	r1, r4, r5
 8017022:	42a3      	cmp	r3, r4
 8017024:	6025      	str	r5, [r4, #0]
 8017026:	bf18      	it	ne
 8017028:	6059      	strne	r1, [r3, #4]
 801702a:	6863      	ldr	r3, [r4, #4]
 801702c:	bf08      	it	eq
 801702e:	6031      	streq	r1, [r6, #0]
 8017030:	5162      	str	r2, [r4, r5]
 8017032:	604b      	str	r3, [r1, #4]
 8017034:	4638      	mov	r0, r7
 8017036:	f104 060b 	add.w	r6, r4, #11
 801703a:	f000 f9c7 	bl	80173cc <__malloc_unlock>
 801703e:	f026 0607 	bic.w	r6, r6, #7
 8017042:	1d23      	adds	r3, r4, #4
 8017044:	1af2      	subs	r2, r6, r3
 8017046:	d0b6      	beq.n	8016fb6 <_malloc_r+0x22>
 8017048:	1b9b      	subs	r3, r3, r6
 801704a:	50a3      	str	r3, [r4, r2]
 801704c:	e7b3      	b.n	8016fb6 <_malloc_r+0x22>
 801704e:	6862      	ldr	r2, [r4, #4]
 8017050:	42a3      	cmp	r3, r4
 8017052:	bf0c      	ite	eq
 8017054:	6032      	streq	r2, [r6, #0]
 8017056:	605a      	strne	r2, [r3, #4]
 8017058:	e7ec      	b.n	8017034 <_malloc_r+0xa0>
 801705a:	4623      	mov	r3, r4
 801705c:	6864      	ldr	r4, [r4, #4]
 801705e:	e7b2      	b.n	8016fc6 <_malloc_r+0x32>
 8017060:	4634      	mov	r4, r6
 8017062:	6876      	ldr	r6, [r6, #4]
 8017064:	e7b9      	b.n	8016fda <_malloc_r+0x46>
 8017066:	230c      	movs	r3, #12
 8017068:	603b      	str	r3, [r7, #0]
 801706a:	4638      	mov	r0, r7
 801706c:	f000 f9ae 	bl	80173cc <__malloc_unlock>
 8017070:	e7a1      	b.n	8016fb6 <_malloc_r+0x22>
 8017072:	6025      	str	r5, [r4, #0]
 8017074:	e7de      	b.n	8017034 <_malloc_r+0xa0>
 8017076:	bf00      	nop
 8017078:	20009330 	.word	0x20009330

0801707c <iprintf>:
 801707c:	b40f      	push	{r0, r1, r2, r3}
 801707e:	4b0a      	ldr	r3, [pc, #40]	; (80170a8 <iprintf+0x2c>)
 8017080:	b513      	push	{r0, r1, r4, lr}
 8017082:	681c      	ldr	r4, [r3, #0]
 8017084:	b124      	cbz	r4, 8017090 <iprintf+0x14>
 8017086:	69a3      	ldr	r3, [r4, #24]
 8017088:	b913      	cbnz	r3, 8017090 <iprintf+0x14>
 801708a:	4620      	mov	r0, r4
 801708c:	f000 f8e6 	bl	801725c <__sinit>
 8017090:	ab05      	add	r3, sp, #20
 8017092:	9a04      	ldr	r2, [sp, #16]
 8017094:	68a1      	ldr	r1, [r4, #8]
 8017096:	9301      	str	r3, [sp, #4]
 8017098:	4620      	mov	r0, r4
 801709a:	f000 f9c7 	bl	801742c <_vfiprintf_r>
 801709e:	b002      	add	sp, #8
 80170a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170a4:	b004      	add	sp, #16
 80170a6:	4770      	bx	lr
 80170a8:	2000002c 	.word	0x2000002c

080170ac <rand>:
 80170ac:	4b16      	ldr	r3, [pc, #88]	; (8017108 <rand+0x5c>)
 80170ae:	b510      	push	{r4, lr}
 80170b0:	681c      	ldr	r4, [r3, #0]
 80170b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80170b4:	b9b3      	cbnz	r3, 80170e4 <rand+0x38>
 80170b6:	2018      	movs	r0, #24
 80170b8:	f7ff feca 	bl	8016e50 <malloc>
 80170bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80170be:	b928      	cbnz	r0, 80170cc <rand+0x20>
 80170c0:	4602      	mov	r2, r0
 80170c2:	4b12      	ldr	r3, [pc, #72]	; (801710c <rand+0x60>)
 80170c4:	4812      	ldr	r0, [pc, #72]	; (8017110 <rand+0x64>)
 80170c6:	214e      	movs	r1, #78	; 0x4e
 80170c8:	f000 f852 	bl	8017170 <__assert_func>
 80170cc:	4a11      	ldr	r2, [pc, #68]	; (8017114 <rand+0x68>)
 80170ce:	4b12      	ldr	r3, [pc, #72]	; (8017118 <rand+0x6c>)
 80170d0:	e9c0 2300 	strd	r2, r3, [r0]
 80170d4:	4b11      	ldr	r3, [pc, #68]	; (801711c <rand+0x70>)
 80170d6:	6083      	str	r3, [r0, #8]
 80170d8:	230b      	movs	r3, #11
 80170da:	8183      	strh	r3, [r0, #12]
 80170dc:	2201      	movs	r2, #1
 80170de:	2300      	movs	r3, #0
 80170e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80170e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80170e6:	4a0e      	ldr	r2, [pc, #56]	; (8017120 <rand+0x74>)
 80170e8:	6920      	ldr	r0, [r4, #16]
 80170ea:	6963      	ldr	r3, [r4, #20]
 80170ec:	490d      	ldr	r1, [pc, #52]	; (8017124 <rand+0x78>)
 80170ee:	4342      	muls	r2, r0
 80170f0:	fb01 2203 	mla	r2, r1, r3, r2
 80170f4:	fba0 0101 	umull	r0, r1, r0, r1
 80170f8:	1c43      	adds	r3, r0, #1
 80170fa:	eb42 0001 	adc.w	r0, r2, r1
 80170fe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017102:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017106:	bd10      	pop	{r4, pc}
 8017108:	2000002c 	.word	0x2000002c
 801710c:	0801aa80 	.word	0x0801aa80
 8017110:	0801aa97 	.word	0x0801aa97
 8017114:	abcd330e 	.word	0xabcd330e
 8017118:	e66d1234 	.word	0xe66d1234
 801711c:	0005deec 	.word	0x0005deec
 8017120:	5851f42d 	.word	0x5851f42d
 8017124:	4c957f2d 	.word	0x4c957f2d

08017128 <_sbrk_r>:
 8017128:	b538      	push	{r3, r4, r5, lr}
 801712a:	4d06      	ldr	r5, [pc, #24]	; (8017144 <_sbrk_r+0x1c>)
 801712c:	2300      	movs	r3, #0
 801712e:	4604      	mov	r4, r0
 8017130:	4608      	mov	r0, r1
 8017132:	602b      	str	r3, [r5, #0]
 8017134:	f7ea fe3e 	bl	8001db4 <_sbrk>
 8017138:	1c43      	adds	r3, r0, #1
 801713a:	d102      	bne.n	8017142 <_sbrk_r+0x1a>
 801713c:	682b      	ldr	r3, [r5, #0]
 801713e:	b103      	cbz	r3, 8017142 <_sbrk_r+0x1a>
 8017140:	6023      	str	r3, [r4, #0]
 8017142:	bd38      	pop	{r3, r4, r5, pc}
 8017144:	20009338 	.word	0x20009338

08017148 <strncmp>:
 8017148:	b510      	push	{r4, lr}
 801714a:	b17a      	cbz	r2, 801716c <strncmp+0x24>
 801714c:	4603      	mov	r3, r0
 801714e:	3901      	subs	r1, #1
 8017150:	1884      	adds	r4, r0, r2
 8017152:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017156:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801715a:	4290      	cmp	r0, r2
 801715c:	d101      	bne.n	8017162 <strncmp+0x1a>
 801715e:	42a3      	cmp	r3, r4
 8017160:	d101      	bne.n	8017166 <strncmp+0x1e>
 8017162:	1a80      	subs	r0, r0, r2
 8017164:	bd10      	pop	{r4, pc}
 8017166:	2800      	cmp	r0, #0
 8017168:	d1f3      	bne.n	8017152 <strncmp+0xa>
 801716a:	e7fa      	b.n	8017162 <strncmp+0x1a>
 801716c:	4610      	mov	r0, r2
 801716e:	e7f9      	b.n	8017164 <strncmp+0x1c>

08017170 <__assert_func>:
 8017170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017172:	4614      	mov	r4, r2
 8017174:	461a      	mov	r2, r3
 8017176:	4b09      	ldr	r3, [pc, #36]	; (801719c <__assert_func+0x2c>)
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	4605      	mov	r5, r0
 801717c:	68d8      	ldr	r0, [r3, #12]
 801717e:	b14c      	cbz	r4, 8017194 <__assert_func+0x24>
 8017180:	4b07      	ldr	r3, [pc, #28]	; (80171a0 <__assert_func+0x30>)
 8017182:	9100      	str	r1, [sp, #0]
 8017184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017188:	4906      	ldr	r1, [pc, #24]	; (80171a4 <__assert_func+0x34>)
 801718a:	462b      	mov	r3, r5
 801718c:	f000 f8e4 	bl	8017358 <fiprintf>
 8017190:	f000 fd26 	bl	8017be0 <abort>
 8017194:	4b04      	ldr	r3, [pc, #16]	; (80171a8 <__assert_func+0x38>)
 8017196:	461c      	mov	r4, r3
 8017198:	e7f3      	b.n	8017182 <__assert_func+0x12>
 801719a:	bf00      	nop
 801719c:	2000002c 	.word	0x2000002c
 80171a0:	0801aaf2 	.word	0x0801aaf2
 80171a4:	0801aaff 	.word	0x0801aaff
 80171a8:	0801ab2d 	.word	0x0801ab2d

080171ac <std>:
 80171ac:	2300      	movs	r3, #0
 80171ae:	b510      	push	{r4, lr}
 80171b0:	4604      	mov	r4, r0
 80171b2:	e9c0 3300 	strd	r3, r3, [r0]
 80171b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80171ba:	6083      	str	r3, [r0, #8]
 80171bc:	8181      	strh	r1, [r0, #12]
 80171be:	6643      	str	r3, [r0, #100]	; 0x64
 80171c0:	81c2      	strh	r2, [r0, #14]
 80171c2:	6183      	str	r3, [r0, #24]
 80171c4:	4619      	mov	r1, r3
 80171c6:	2208      	movs	r2, #8
 80171c8:	305c      	adds	r0, #92	; 0x5c
 80171ca:	f7ff fe6f 	bl	8016eac <memset>
 80171ce:	4b05      	ldr	r3, [pc, #20]	; (80171e4 <std+0x38>)
 80171d0:	6263      	str	r3, [r4, #36]	; 0x24
 80171d2:	4b05      	ldr	r3, [pc, #20]	; (80171e8 <std+0x3c>)
 80171d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80171d6:	4b05      	ldr	r3, [pc, #20]	; (80171ec <std+0x40>)
 80171d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80171da:	4b05      	ldr	r3, [pc, #20]	; (80171f0 <std+0x44>)
 80171dc:	6224      	str	r4, [r4, #32]
 80171de:	6323      	str	r3, [r4, #48]	; 0x30
 80171e0:	bd10      	pop	{r4, pc}
 80171e2:	bf00      	nop
 80171e4:	080179b5 	.word	0x080179b5
 80171e8:	080179d7 	.word	0x080179d7
 80171ec:	08017a0f 	.word	0x08017a0f
 80171f0:	08017a33 	.word	0x08017a33

080171f4 <_cleanup_r>:
 80171f4:	4901      	ldr	r1, [pc, #4]	; (80171fc <_cleanup_r+0x8>)
 80171f6:	f000 b8c1 	b.w	801737c <_fwalk_reent>
 80171fa:	bf00      	nop
 80171fc:	08017d1d 	.word	0x08017d1d

08017200 <__sfmoreglue>:
 8017200:	b570      	push	{r4, r5, r6, lr}
 8017202:	2268      	movs	r2, #104	; 0x68
 8017204:	1e4d      	subs	r5, r1, #1
 8017206:	4355      	muls	r5, r2
 8017208:	460e      	mov	r6, r1
 801720a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801720e:	f7ff fec1 	bl	8016f94 <_malloc_r>
 8017212:	4604      	mov	r4, r0
 8017214:	b140      	cbz	r0, 8017228 <__sfmoreglue+0x28>
 8017216:	2100      	movs	r1, #0
 8017218:	e9c0 1600 	strd	r1, r6, [r0]
 801721c:	300c      	adds	r0, #12
 801721e:	60a0      	str	r0, [r4, #8]
 8017220:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017224:	f7ff fe42 	bl	8016eac <memset>
 8017228:	4620      	mov	r0, r4
 801722a:	bd70      	pop	{r4, r5, r6, pc}

0801722c <__sfp_lock_acquire>:
 801722c:	4801      	ldr	r0, [pc, #4]	; (8017234 <__sfp_lock_acquire+0x8>)
 801722e:	f000 b8c5 	b.w	80173bc <__retarget_lock_acquire_recursive>
 8017232:	bf00      	nop
 8017234:	2000933d 	.word	0x2000933d

08017238 <__sfp_lock_release>:
 8017238:	4801      	ldr	r0, [pc, #4]	; (8017240 <__sfp_lock_release+0x8>)
 801723a:	f000 b8c0 	b.w	80173be <__retarget_lock_release_recursive>
 801723e:	bf00      	nop
 8017240:	2000933d 	.word	0x2000933d

08017244 <__sinit_lock_acquire>:
 8017244:	4801      	ldr	r0, [pc, #4]	; (801724c <__sinit_lock_acquire+0x8>)
 8017246:	f000 b8b9 	b.w	80173bc <__retarget_lock_acquire_recursive>
 801724a:	bf00      	nop
 801724c:	2000933e 	.word	0x2000933e

08017250 <__sinit_lock_release>:
 8017250:	4801      	ldr	r0, [pc, #4]	; (8017258 <__sinit_lock_release+0x8>)
 8017252:	f000 b8b4 	b.w	80173be <__retarget_lock_release_recursive>
 8017256:	bf00      	nop
 8017258:	2000933e 	.word	0x2000933e

0801725c <__sinit>:
 801725c:	b510      	push	{r4, lr}
 801725e:	4604      	mov	r4, r0
 8017260:	f7ff fff0 	bl	8017244 <__sinit_lock_acquire>
 8017264:	69a3      	ldr	r3, [r4, #24]
 8017266:	b11b      	cbz	r3, 8017270 <__sinit+0x14>
 8017268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801726c:	f7ff bff0 	b.w	8017250 <__sinit_lock_release>
 8017270:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017274:	6523      	str	r3, [r4, #80]	; 0x50
 8017276:	4b13      	ldr	r3, [pc, #76]	; (80172c4 <__sinit+0x68>)
 8017278:	4a13      	ldr	r2, [pc, #76]	; (80172c8 <__sinit+0x6c>)
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	62a2      	str	r2, [r4, #40]	; 0x28
 801727e:	42a3      	cmp	r3, r4
 8017280:	bf04      	itt	eq
 8017282:	2301      	moveq	r3, #1
 8017284:	61a3      	streq	r3, [r4, #24]
 8017286:	4620      	mov	r0, r4
 8017288:	f000 f820 	bl	80172cc <__sfp>
 801728c:	6060      	str	r0, [r4, #4]
 801728e:	4620      	mov	r0, r4
 8017290:	f000 f81c 	bl	80172cc <__sfp>
 8017294:	60a0      	str	r0, [r4, #8]
 8017296:	4620      	mov	r0, r4
 8017298:	f000 f818 	bl	80172cc <__sfp>
 801729c:	2200      	movs	r2, #0
 801729e:	60e0      	str	r0, [r4, #12]
 80172a0:	2104      	movs	r1, #4
 80172a2:	6860      	ldr	r0, [r4, #4]
 80172a4:	f7ff ff82 	bl	80171ac <std>
 80172a8:	68a0      	ldr	r0, [r4, #8]
 80172aa:	2201      	movs	r2, #1
 80172ac:	2109      	movs	r1, #9
 80172ae:	f7ff ff7d 	bl	80171ac <std>
 80172b2:	68e0      	ldr	r0, [r4, #12]
 80172b4:	2202      	movs	r2, #2
 80172b6:	2112      	movs	r1, #18
 80172b8:	f7ff ff78 	bl	80171ac <std>
 80172bc:	2301      	movs	r3, #1
 80172be:	61a3      	str	r3, [r4, #24]
 80172c0:	e7d2      	b.n	8017268 <__sinit+0xc>
 80172c2:	bf00      	nop
 80172c4:	0801aa7c 	.word	0x0801aa7c
 80172c8:	080171f5 	.word	0x080171f5

080172cc <__sfp>:
 80172cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172ce:	4607      	mov	r7, r0
 80172d0:	f7ff ffac 	bl	801722c <__sfp_lock_acquire>
 80172d4:	4b1e      	ldr	r3, [pc, #120]	; (8017350 <__sfp+0x84>)
 80172d6:	681e      	ldr	r6, [r3, #0]
 80172d8:	69b3      	ldr	r3, [r6, #24]
 80172da:	b913      	cbnz	r3, 80172e2 <__sfp+0x16>
 80172dc:	4630      	mov	r0, r6
 80172de:	f7ff ffbd 	bl	801725c <__sinit>
 80172e2:	3648      	adds	r6, #72	; 0x48
 80172e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80172e8:	3b01      	subs	r3, #1
 80172ea:	d503      	bpl.n	80172f4 <__sfp+0x28>
 80172ec:	6833      	ldr	r3, [r6, #0]
 80172ee:	b30b      	cbz	r3, 8017334 <__sfp+0x68>
 80172f0:	6836      	ldr	r6, [r6, #0]
 80172f2:	e7f7      	b.n	80172e4 <__sfp+0x18>
 80172f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80172f8:	b9d5      	cbnz	r5, 8017330 <__sfp+0x64>
 80172fa:	4b16      	ldr	r3, [pc, #88]	; (8017354 <__sfp+0x88>)
 80172fc:	60e3      	str	r3, [r4, #12]
 80172fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017302:	6665      	str	r5, [r4, #100]	; 0x64
 8017304:	f000 f859 	bl	80173ba <__retarget_lock_init_recursive>
 8017308:	f7ff ff96 	bl	8017238 <__sfp_lock_release>
 801730c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017310:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017314:	6025      	str	r5, [r4, #0]
 8017316:	61a5      	str	r5, [r4, #24]
 8017318:	2208      	movs	r2, #8
 801731a:	4629      	mov	r1, r5
 801731c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017320:	f7ff fdc4 	bl	8016eac <memset>
 8017324:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017328:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801732c:	4620      	mov	r0, r4
 801732e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017330:	3468      	adds	r4, #104	; 0x68
 8017332:	e7d9      	b.n	80172e8 <__sfp+0x1c>
 8017334:	2104      	movs	r1, #4
 8017336:	4638      	mov	r0, r7
 8017338:	f7ff ff62 	bl	8017200 <__sfmoreglue>
 801733c:	4604      	mov	r4, r0
 801733e:	6030      	str	r0, [r6, #0]
 8017340:	2800      	cmp	r0, #0
 8017342:	d1d5      	bne.n	80172f0 <__sfp+0x24>
 8017344:	f7ff ff78 	bl	8017238 <__sfp_lock_release>
 8017348:	230c      	movs	r3, #12
 801734a:	603b      	str	r3, [r7, #0]
 801734c:	e7ee      	b.n	801732c <__sfp+0x60>
 801734e:	bf00      	nop
 8017350:	0801aa7c 	.word	0x0801aa7c
 8017354:	ffff0001 	.word	0xffff0001

08017358 <fiprintf>:
 8017358:	b40e      	push	{r1, r2, r3}
 801735a:	b503      	push	{r0, r1, lr}
 801735c:	4601      	mov	r1, r0
 801735e:	ab03      	add	r3, sp, #12
 8017360:	4805      	ldr	r0, [pc, #20]	; (8017378 <fiprintf+0x20>)
 8017362:	f853 2b04 	ldr.w	r2, [r3], #4
 8017366:	6800      	ldr	r0, [r0, #0]
 8017368:	9301      	str	r3, [sp, #4]
 801736a:	f000 f85f 	bl	801742c <_vfiprintf_r>
 801736e:	b002      	add	sp, #8
 8017370:	f85d eb04 	ldr.w	lr, [sp], #4
 8017374:	b003      	add	sp, #12
 8017376:	4770      	bx	lr
 8017378:	2000002c 	.word	0x2000002c

0801737c <_fwalk_reent>:
 801737c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017380:	4606      	mov	r6, r0
 8017382:	4688      	mov	r8, r1
 8017384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017388:	2700      	movs	r7, #0
 801738a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801738e:	f1b9 0901 	subs.w	r9, r9, #1
 8017392:	d505      	bpl.n	80173a0 <_fwalk_reent+0x24>
 8017394:	6824      	ldr	r4, [r4, #0]
 8017396:	2c00      	cmp	r4, #0
 8017398:	d1f7      	bne.n	801738a <_fwalk_reent+0xe>
 801739a:	4638      	mov	r0, r7
 801739c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173a0:	89ab      	ldrh	r3, [r5, #12]
 80173a2:	2b01      	cmp	r3, #1
 80173a4:	d907      	bls.n	80173b6 <_fwalk_reent+0x3a>
 80173a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80173aa:	3301      	adds	r3, #1
 80173ac:	d003      	beq.n	80173b6 <_fwalk_reent+0x3a>
 80173ae:	4629      	mov	r1, r5
 80173b0:	4630      	mov	r0, r6
 80173b2:	47c0      	blx	r8
 80173b4:	4307      	orrs	r7, r0
 80173b6:	3568      	adds	r5, #104	; 0x68
 80173b8:	e7e9      	b.n	801738e <_fwalk_reent+0x12>

080173ba <__retarget_lock_init_recursive>:
 80173ba:	4770      	bx	lr

080173bc <__retarget_lock_acquire_recursive>:
 80173bc:	4770      	bx	lr

080173be <__retarget_lock_release_recursive>:
 80173be:	4770      	bx	lr

080173c0 <__malloc_lock>:
 80173c0:	4801      	ldr	r0, [pc, #4]	; (80173c8 <__malloc_lock+0x8>)
 80173c2:	f7ff bffb 	b.w	80173bc <__retarget_lock_acquire_recursive>
 80173c6:	bf00      	nop
 80173c8:	2000933c 	.word	0x2000933c

080173cc <__malloc_unlock>:
 80173cc:	4801      	ldr	r0, [pc, #4]	; (80173d4 <__malloc_unlock+0x8>)
 80173ce:	f7ff bff6 	b.w	80173be <__retarget_lock_release_recursive>
 80173d2:	bf00      	nop
 80173d4:	2000933c 	.word	0x2000933c

080173d8 <__sfputc_r>:
 80173d8:	6893      	ldr	r3, [r2, #8]
 80173da:	3b01      	subs	r3, #1
 80173dc:	2b00      	cmp	r3, #0
 80173de:	b410      	push	{r4}
 80173e0:	6093      	str	r3, [r2, #8]
 80173e2:	da08      	bge.n	80173f6 <__sfputc_r+0x1e>
 80173e4:	6994      	ldr	r4, [r2, #24]
 80173e6:	42a3      	cmp	r3, r4
 80173e8:	db01      	blt.n	80173ee <__sfputc_r+0x16>
 80173ea:	290a      	cmp	r1, #10
 80173ec:	d103      	bne.n	80173f6 <__sfputc_r+0x1e>
 80173ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80173f2:	f000 bb23 	b.w	8017a3c <__swbuf_r>
 80173f6:	6813      	ldr	r3, [r2, #0]
 80173f8:	1c58      	adds	r0, r3, #1
 80173fa:	6010      	str	r0, [r2, #0]
 80173fc:	7019      	strb	r1, [r3, #0]
 80173fe:	4608      	mov	r0, r1
 8017400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017404:	4770      	bx	lr

08017406 <__sfputs_r>:
 8017406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017408:	4606      	mov	r6, r0
 801740a:	460f      	mov	r7, r1
 801740c:	4614      	mov	r4, r2
 801740e:	18d5      	adds	r5, r2, r3
 8017410:	42ac      	cmp	r4, r5
 8017412:	d101      	bne.n	8017418 <__sfputs_r+0x12>
 8017414:	2000      	movs	r0, #0
 8017416:	e007      	b.n	8017428 <__sfputs_r+0x22>
 8017418:	f814 1b01 	ldrb.w	r1, [r4], #1
 801741c:	463a      	mov	r2, r7
 801741e:	4630      	mov	r0, r6
 8017420:	f7ff ffda 	bl	80173d8 <__sfputc_r>
 8017424:	1c43      	adds	r3, r0, #1
 8017426:	d1f3      	bne.n	8017410 <__sfputs_r+0xa>
 8017428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801742c <_vfiprintf_r>:
 801742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017430:	460d      	mov	r5, r1
 8017432:	b09d      	sub	sp, #116	; 0x74
 8017434:	4614      	mov	r4, r2
 8017436:	4698      	mov	r8, r3
 8017438:	4606      	mov	r6, r0
 801743a:	b118      	cbz	r0, 8017444 <_vfiprintf_r+0x18>
 801743c:	6983      	ldr	r3, [r0, #24]
 801743e:	b90b      	cbnz	r3, 8017444 <_vfiprintf_r+0x18>
 8017440:	f7ff ff0c 	bl	801725c <__sinit>
 8017444:	4b89      	ldr	r3, [pc, #548]	; (801766c <_vfiprintf_r+0x240>)
 8017446:	429d      	cmp	r5, r3
 8017448:	d11b      	bne.n	8017482 <_vfiprintf_r+0x56>
 801744a:	6875      	ldr	r5, [r6, #4]
 801744c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801744e:	07d9      	lsls	r1, r3, #31
 8017450:	d405      	bmi.n	801745e <_vfiprintf_r+0x32>
 8017452:	89ab      	ldrh	r3, [r5, #12]
 8017454:	059a      	lsls	r2, r3, #22
 8017456:	d402      	bmi.n	801745e <_vfiprintf_r+0x32>
 8017458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801745a:	f7ff ffaf 	bl	80173bc <__retarget_lock_acquire_recursive>
 801745e:	89ab      	ldrh	r3, [r5, #12]
 8017460:	071b      	lsls	r3, r3, #28
 8017462:	d501      	bpl.n	8017468 <_vfiprintf_r+0x3c>
 8017464:	692b      	ldr	r3, [r5, #16]
 8017466:	b9eb      	cbnz	r3, 80174a4 <_vfiprintf_r+0x78>
 8017468:	4629      	mov	r1, r5
 801746a:	4630      	mov	r0, r6
 801746c:	f000 fb4a 	bl	8017b04 <__swsetup_r>
 8017470:	b1c0      	cbz	r0, 80174a4 <_vfiprintf_r+0x78>
 8017472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017474:	07dc      	lsls	r4, r3, #31
 8017476:	d50e      	bpl.n	8017496 <_vfiprintf_r+0x6a>
 8017478:	f04f 30ff 	mov.w	r0, #4294967295
 801747c:	b01d      	add	sp, #116	; 0x74
 801747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017482:	4b7b      	ldr	r3, [pc, #492]	; (8017670 <_vfiprintf_r+0x244>)
 8017484:	429d      	cmp	r5, r3
 8017486:	d101      	bne.n	801748c <_vfiprintf_r+0x60>
 8017488:	68b5      	ldr	r5, [r6, #8]
 801748a:	e7df      	b.n	801744c <_vfiprintf_r+0x20>
 801748c:	4b79      	ldr	r3, [pc, #484]	; (8017674 <_vfiprintf_r+0x248>)
 801748e:	429d      	cmp	r5, r3
 8017490:	bf08      	it	eq
 8017492:	68f5      	ldreq	r5, [r6, #12]
 8017494:	e7da      	b.n	801744c <_vfiprintf_r+0x20>
 8017496:	89ab      	ldrh	r3, [r5, #12]
 8017498:	0598      	lsls	r0, r3, #22
 801749a:	d4ed      	bmi.n	8017478 <_vfiprintf_r+0x4c>
 801749c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801749e:	f7ff ff8e 	bl	80173be <__retarget_lock_release_recursive>
 80174a2:	e7e9      	b.n	8017478 <_vfiprintf_r+0x4c>
 80174a4:	2300      	movs	r3, #0
 80174a6:	9309      	str	r3, [sp, #36]	; 0x24
 80174a8:	2320      	movs	r3, #32
 80174aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80174ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80174b2:	2330      	movs	r3, #48	; 0x30
 80174b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017678 <_vfiprintf_r+0x24c>
 80174b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80174bc:	f04f 0901 	mov.w	r9, #1
 80174c0:	4623      	mov	r3, r4
 80174c2:	469a      	mov	sl, r3
 80174c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174c8:	b10a      	cbz	r2, 80174ce <_vfiprintf_r+0xa2>
 80174ca:	2a25      	cmp	r2, #37	; 0x25
 80174cc:	d1f9      	bne.n	80174c2 <_vfiprintf_r+0x96>
 80174ce:	ebba 0b04 	subs.w	fp, sl, r4
 80174d2:	d00b      	beq.n	80174ec <_vfiprintf_r+0xc0>
 80174d4:	465b      	mov	r3, fp
 80174d6:	4622      	mov	r2, r4
 80174d8:	4629      	mov	r1, r5
 80174da:	4630      	mov	r0, r6
 80174dc:	f7ff ff93 	bl	8017406 <__sfputs_r>
 80174e0:	3001      	adds	r0, #1
 80174e2:	f000 80aa 	beq.w	801763a <_vfiprintf_r+0x20e>
 80174e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174e8:	445a      	add	r2, fp
 80174ea:	9209      	str	r2, [sp, #36]	; 0x24
 80174ec:	f89a 3000 	ldrb.w	r3, [sl]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	f000 80a2 	beq.w	801763a <_vfiprintf_r+0x20e>
 80174f6:	2300      	movs	r3, #0
 80174f8:	f04f 32ff 	mov.w	r2, #4294967295
 80174fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017500:	f10a 0a01 	add.w	sl, sl, #1
 8017504:	9304      	str	r3, [sp, #16]
 8017506:	9307      	str	r3, [sp, #28]
 8017508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801750c:	931a      	str	r3, [sp, #104]	; 0x68
 801750e:	4654      	mov	r4, sl
 8017510:	2205      	movs	r2, #5
 8017512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017516:	4858      	ldr	r0, [pc, #352]	; (8017678 <_vfiprintf_r+0x24c>)
 8017518:	f7e8 fe7a 	bl	8000210 <memchr>
 801751c:	9a04      	ldr	r2, [sp, #16]
 801751e:	b9d8      	cbnz	r0, 8017558 <_vfiprintf_r+0x12c>
 8017520:	06d1      	lsls	r1, r2, #27
 8017522:	bf44      	itt	mi
 8017524:	2320      	movmi	r3, #32
 8017526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801752a:	0713      	lsls	r3, r2, #28
 801752c:	bf44      	itt	mi
 801752e:	232b      	movmi	r3, #43	; 0x2b
 8017530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017534:	f89a 3000 	ldrb.w	r3, [sl]
 8017538:	2b2a      	cmp	r3, #42	; 0x2a
 801753a:	d015      	beq.n	8017568 <_vfiprintf_r+0x13c>
 801753c:	9a07      	ldr	r2, [sp, #28]
 801753e:	4654      	mov	r4, sl
 8017540:	2000      	movs	r0, #0
 8017542:	f04f 0c0a 	mov.w	ip, #10
 8017546:	4621      	mov	r1, r4
 8017548:	f811 3b01 	ldrb.w	r3, [r1], #1
 801754c:	3b30      	subs	r3, #48	; 0x30
 801754e:	2b09      	cmp	r3, #9
 8017550:	d94e      	bls.n	80175f0 <_vfiprintf_r+0x1c4>
 8017552:	b1b0      	cbz	r0, 8017582 <_vfiprintf_r+0x156>
 8017554:	9207      	str	r2, [sp, #28]
 8017556:	e014      	b.n	8017582 <_vfiprintf_r+0x156>
 8017558:	eba0 0308 	sub.w	r3, r0, r8
 801755c:	fa09 f303 	lsl.w	r3, r9, r3
 8017560:	4313      	orrs	r3, r2
 8017562:	9304      	str	r3, [sp, #16]
 8017564:	46a2      	mov	sl, r4
 8017566:	e7d2      	b.n	801750e <_vfiprintf_r+0xe2>
 8017568:	9b03      	ldr	r3, [sp, #12]
 801756a:	1d19      	adds	r1, r3, #4
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	9103      	str	r1, [sp, #12]
 8017570:	2b00      	cmp	r3, #0
 8017572:	bfbb      	ittet	lt
 8017574:	425b      	neglt	r3, r3
 8017576:	f042 0202 	orrlt.w	r2, r2, #2
 801757a:	9307      	strge	r3, [sp, #28]
 801757c:	9307      	strlt	r3, [sp, #28]
 801757e:	bfb8      	it	lt
 8017580:	9204      	strlt	r2, [sp, #16]
 8017582:	7823      	ldrb	r3, [r4, #0]
 8017584:	2b2e      	cmp	r3, #46	; 0x2e
 8017586:	d10c      	bne.n	80175a2 <_vfiprintf_r+0x176>
 8017588:	7863      	ldrb	r3, [r4, #1]
 801758a:	2b2a      	cmp	r3, #42	; 0x2a
 801758c:	d135      	bne.n	80175fa <_vfiprintf_r+0x1ce>
 801758e:	9b03      	ldr	r3, [sp, #12]
 8017590:	1d1a      	adds	r2, r3, #4
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	9203      	str	r2, [sp, #12]
 8017596:	2b00      	cmp	r3, #0
 8017598:	bfb8      	it	lt
 801759a:	f04f 33ff 	movlt.w	r3, #4294967295
 801759e:	3402      	adds	r4, #2
 80175a0:	9305      	str	r3, [sp, #20]
 80175a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017688 <_vfiprintf_r+0x25c>
 80175a6:	7821      	ldrb	r1, [r4, #0]
 80175a8:	2203      	movs	r2, #3
 80175aa:	4650      	mov	r0, sl
 80175ac:	f7e8 fe30 	bl	8000210 <memchr>
 80175b0:	b140      	cbz	r0, 80175c4 <_vfiprintf_r+0x198>
 80175b2:	2340      	movs	r3, #64	; 0x40
 80175b4:	eba0 000a 	sub.w	r0, r0, sl
 80175b8:	fa03 f000 	lsl.w	r0, r3, r0
 80175bc:	9b04      	ldr	r3, [sp, #16]
 80175be:	4303      	orrs	r3, r0
 80175c0:	3401      	adds	r4, #1
 80175c2:	9304      	str	r3, [sp, #16]
 80175c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175c8:	482c      	ldr	r0, [pc, #176]	; (801767c <_vfiprintf_r+0x250>)
 80175ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80175ce:	2206      	movs	r2, #6
 80175d0:	f7e8 fe1e 	bl	8000210 <memchr>
 80175d4:	2800      	cmp	r0, #0
 80175d6:	d03f      	beq.n	8017658 <_vfiprintf_r+0x22c>
 80175d8:	4b29      	ldr	r3, [pc, #164]	; (8017680 <_vfiprintf_r+0x254>)
 80175da:	bb1b      	cbnz	r3, 8017624 <_vfiprintf_r+0x1f8>
 80175dc:	9b03      	ldr	r3, [sp, #12]
 80175de:	3307      	adds	r3, #7
 80175e0:	f023 0307 	bic.w	r3, r3, #7
 80175e4:	3308      	adds	r3, #8
 80175e6:	9303      	str	r3, [sp, #12]
 80175e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175ea:	443b      	add	r3, r7
 80175ec:	9309      	str	r3, [sp, #36]	; 0x24
 80175ee:	e767      	b.n	80174c0 <_vfiprintf_r+0x94>
 80175f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80175f4:	460c      	mov	r4, r1
 80175f6:	2001      	movs	r0, #1
 80175f8:	e7a5      	b.n	8017546 <_vfiprintf_r+0x11a>
 80175fa:	2300      	movs	r3, #0
 80175fc:	3401      	adds	r4, #1
 80175fe:	9305      	str	r3, [sp, #20]
 8017600:	4619      	mov	r1, r3
 8017602:	f04f 0c0a 	mov.w	ip, #10
 8017606:	4620      	mov	r0, r4
 8017608:	f810 2b01 	ldrb.w	r2, [r0], #1
 801760c:	3a30      	subs	r2, #48	; 0x30
 801760e:	2a09      	cmp	r2, #9
 8017610:	d903      	bls.n	801761a <_vfiprintf_r+0x1ee>
 8017612:	2b00      	cmp	r3, #0
 8017614:	d0c5      	beq.n	80175a2 <_vfiprintf_r+0x176>
 8017616:	9105      	str	r1, [sp, #20]
 8017618:	e7c3      	b.n	80175a2 <_vfiprintf_r+0x176>
 801761a:	fb0c 2101 	mla	r1, ip, r1, r2
 801761e:	4604      	mov	r4, r0
 8017620:	2301      	movs	r3, #1
 8017622:	e7f0      	b.n	8017606 <_vfiprintf_r+0x1da>
 8017624:	ab03      	add	r3, sp, #12
 8017626:	9300      	str	r3, [sp, #0]
 8017628:	462a      	mov	r2, r5
 801762a:	4b16      	ldr	r3, [pc, #88]	; (8017684 <_vfiprintf_r+0x258>)
 801762c:	a904      	add	r1, sp, #16
 801762e:	4630      	mov	r0, r6
 8017630:	f3af 8000 	nop.w
 8017634:	4607      	mov	r7, r0
 8017636:	1c78      	adds	r0, r7, #1
 8017638:	d1d6      	bne.n	80175e8 <_vfiprintf_r+0x1bc>
 801763a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801763c:	07d9      	lsls	r1, r3, #31
 801763e:	d405      	bmi.n	801764c <_vfiprintf_r+0x220>
 8017640:	89ab      	ldrh	r3, [r5, #12]
 8017642:	059a      	lsls	r2, r3, #22
 8017644:	d402      	bmi.n	801764c <_vfiprintf_r+0x220>
 8017646:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017648:	f7ff feb9 	bl	80173be <__retarget_lock_release_recursive>
 801764c:	89ab      	ldrh	r3, [r5, #12]
 801764e:	065b      	lsls	r3, r3, #25
 8017650:	f53f af12 	bmi.w	8017478 <_vfiprintf_r+0x4c>
 8017654:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017656:	e711      	b.n	801747c <_vfiprintf_r+0x50>
 8017658:	ab03      	add	r3, sp, #12
 801765a:	9300      	str	r3, [sp, #0]
 801765c:	462a      	mov	r2, r5
 801765e:	4b09      	ldr	r3, [pc, #36]	; (8017684 <_vfiprintf_r+0x258>)
 8017660:	a904      	add	r1, sp, #16
 8017662:	4630      	mov	r0, r6
 8017664:	f000 f880 	bl	8017768 <_printf_i>
 8017668:	e7e4      	b.n	8017634 <_vfiprintf_r+0x208>
 801766a:	bf00      	nop
 801766c:	0801ab50 	.word	0x0801ab50
 8017670:	0801ab70 	.word	0x0801ab70
 8017674:	0801ab30 	.word	0x0801ab30
 8017678:	0801ab90 	.word	0x0801ab90
 801767c:	0801ab9a 	.word	0x0801ab9a
 8017680:	00000000 	.word	0x00000000
 8017684:	08017407 	.word	0x08017407
 8017688:	0801ab96 	.word	0x0801ab96

0801768c <_printf_common>:
 801768c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017690:	4616      	mov	r6, r2
 8017692:	4699      	mov	r9, r3
 8017694:	688a      	ldr	r2, [r1, #8]
 8017696:	690b      	ldr	r3, [r1, #16]
 8017698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801769c:	4293      	cmp	r3, r2
 801769e:	bfb8      	it	lt
 80176a0:	4613      	movlt	r3, r2
 80176a2:	6033      	str	r3, [r6, #0]
 80176a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80176a8:	4607      	mov	r7, r0
 80176aa:	460c      	mov	r4, r1
 80176ac:	b10a      	cbz	r2, 80176b2 <_printf_common+0x26>
 80176ae:	3301      	adds	r3, #1
 80176b0:	6033      	str	r3, [r6, #0]
 80176b2:	6823      	ldr	r3, [r4, #0]
 80176b4:	0699      	lsls	r1, r3, #26
 80176b6:	bf42      	ittt	mi
 80176b8:	6833      	ldrmi	r3, [r6, #0]
 80176ba:	3302      	addmi	r3, #2
 80176bc:	6033      	strmi	r3, [r6, #0]
 80176be:	6825      	ldr	r5, [r4, #0]
 80176c0:	f015 0506 	ands.w	r5, r5, #6
 80176c4:	d106      	bne.n	80176d4 <_printf_common+0x48>
 80176c6:	f104 0a19 	add.w	sl, r4, #25
 80176ca:	68e3      	ldr	r3, [r4, #12]
 80176cc:	6832      	ldr	r2, [r6, #0]
 80176ce:	1a9b      	subs	r3, r3, r2
 80176d0:	42ab      	cmp	r3, r5
 80176d2:	dc26      	bgt.n	8017722 <_printf_common+0x96>
 80176d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80176d8:	1e13      	subs	r3, r2, #0
 80176da:	6822      	ldr	r2, [r4, #0]
 80176dc:	bf18      	it	ne
 80176de:	2301      	movne	r3, #1
 80176e0:	0692      	lsls	r2, r2, #26
 80176e2:	d42b      	bmi.n	801773c <_printf_common+0xb0>
 80176e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80176e8:	4649      	mov	r1, r9
 80176ea:	4638      	mov	r0, r7
 80176ec:	47c0      	blx	r8
 80176ee:	3001      	adds	r0, #1
 80176f0:	d01e      	beq.n	8017730 <_printf_common+0xa4>
 80176f2:	6823      	ldr	r3, [r4, #0]
 80176f4:	68e5      	ldr	r5, [r4, #12]
 80176f6:	6832      	ldr	r2, [r6, #0]
 80176f8:	f003 0306 	and.w	r3, r3, #6
 80176fc:	2b04      	cmp	r3, #4
 80176fe:	bf08      	it	eq
 8017700:	1aad      	subeq	r5, r5, r2
 8017702:	68a3      	ldr	r3, [r4, #8]
 8017704:	6922      	ldr	r2, [r4, #16]
 8017706:	bf0c      	ite	eq
 8017708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801770c:	2500      	movne	r5, #0
 801770e:	4293      	cmp	r3, r2
 8017710:	bfc4      	itt	gt
 8017712:	1a9b      	subgt	r3, r3, r2
 8017714:	18ed      	addgt	r5, r5, r3
 8017716:	2600      	movs	r6, #0
 8017718:	341a      	adds	r4, #26
 801771a:	42b5      	cmp	r5, r6
 801771c:	d11a      	bne.n	8017754 <_printf_common+0xc8>
 801771e:	2000      	movs	r0, #0
 8017720:	e008      	b.n	8017734 <_printf_common+0xa8>
 8017722:	2301      	movs	r3, #1
 8017724:	4652      	mov	r2, sl
 8017726:	4649      	mov	r1, r9
 8017728:	4638      	mov	r0, r7
 801772a:	47c0      	blx	r8
 801772c:	3001      	adds	r0, #1
 801772e:	d103      	bne.n	8017738 <_printf_common+0xac>
 8017730:	f04f 30ff 	mov.w	r0, #4294967295
 8017734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017738:	3501      	adds	r5, #1
 801773a:	e7c6      	b.n	80176ca <_printf_common+0x3e>
 801773c:	18e1      	adds	r1, r4, r3
 801773e:	1c5a      	adds	r2, r3, #1
 8017740:	2030      	movs	r0, #48	; 0x30
 8017742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017746:	4422      	add	r2, r4
 8017748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801774c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017750:	3302      	adds	r3, #2
 8017752:	e7c7      	b.n	80176e4 <_printf_common+0x58>
 8017754:	2301      	movs	r3, #1
 8017756:	4622      	mov	r2, r4
 8017758:	4649      	mov	r1, r9
 801775a:	4638      	mov	r0, r7
 801775c:	47c0      	blx	r8
 801775e:	3001      	adds	r0, #1
 8017760:	d0e6      	beq.n	8017730 <_printf_common+0xa4>
 8017762:	3601      	adds	r6, #1
 8017764:	e7d9      	b.n	801771a <_printf_common+0x8e>
	...

08017768 <_printf_i>:
 8017768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801776c:	7e0f      	ldrb	r7, [r1, #24]
 801776e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017770:	2f78      	cmp	r7, #120	; 0x78
 8017772:	4691      	mov	r9, r2
 8017774:	4680      	mov	r8, r0
 8017776:	460c      	mov	r4, r1
 8017778:	469a      	mov	sl, r3
 801777a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801777e:	d807      	bhi.n	8017790 <_printf_i+0x28>
 8017780:	2f62      	cmp	r7, #98	; 0x62
 8017782:	d80a      	bhi.n	801779a <_printf_i+0x32>
 8017784:	2f00      	cmp	r7, #0
 8017786:	f000 80d8 	beq.w	801793a <_printf_i+0x1d2>
 801778a:	2f58      	cmp	r7, #88	; 0x58
 801778c:	f000 80a3 	beq.w	80178d6 <_printf_i+0x16e>
 8017790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017798:	e03a      	b.n	8017810 <_printf_i+0xa8>
 801779a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801779e:	2b15      	cmp	r3, #21
 80177a0:	d8f6      	bhi.n	8017790 <_printf_i+0x28>
 80177a2:	a101      	add	r1, pc, #4	; (adr r1, 80177a8 <_printf_i+0x40>)
 80177a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80177a8:	08017801 	.word	0x08017801
 80177ac:	08017815 	.word	0x08017815
 80177b0:	08017791 	.word	0x08017791
 80177b4:	08017791 	.word	0x08017791
 80177b8:	08017791 	.word	0x08017791
 80177bc:	08017791 	.word	0x08017791
 80177c0:	08017815 	.word	0x08017815
 80177c4:	08017791 	.word	0x08017791
 80177c8:	08017791 	.word	0x08017791
 80177cc:	08017791 	.word	0x08017791
 80177d0:	08017791 	.word	0x08017791
 80177d4:	08017921 	.word	0x08017921
 80177d8:	08017845 	.word	0x08017845
 80177dc:	08017903 	.word	0x08017903
 80177e0:	08017791 	.word	0x08017791
 80177e4:	08017791 	.word	0x08017791
 80177e8:	08017943 	.word	0x08017943
 80177ec:	08017791 	.word	0x08017791
 80177f0:	08017845 	.word	0x08017845
 80177f4:	08017791 	.word	0x08017791
 80177f8:	08017791 	.word	0x08017791
 80177fc:	0801790b 	.word	0x0801790b
 8017800:	682b      	ldr	r3, [r5, #0]
 8017802:	1d1a      	adds	r2, r3, #4
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	602a      	str	r2, [r5, #0]
 8017808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801780c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017810:	2301      	movs	r3, #1
 8017812:	e0a3      	b.n	801795c <_printf_i+0x1f4>
 8017814:	6820      	ldr	r0, [r4, #0]
 8017816:	6829      	ldr	r1, [r5, #0]
 8017818:	0606      	lsls	r6, r0, #24
 801781a:	f101 0304 	add.w	r3, r1, #4
 801781e:	d50a      	bpl.n	8017836 <_printf_i+0xce>
 8017820:	680e      	ldr	r6, [r1, #0]
 8017822:	602b      	str	r3, [r5, #0]
 8017824:	2e00      	cmp	r6, #0
 8017826:	da03      	bge.n	8017830 <_printf_i+0xc8>
 8017828:	232d      	movs	r3, #45	; 0x2d
 801782a:	4276      	negs	r6, r6
 801782c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017830:	485e      	ldr	r0, [pc, #376]	; (80179ac <_printf_i+0x244>)
 8017832:	230a      	movs	r3, #10
 8017834:	e019      	b.n	801786a <_printf_i+0x102>
 8017836:	680e      	ldr	r6, [r1, #0]
 8017838:	602b      	str	r3, [r5, #0]
 801783a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801783e:	bf18      	it	ne
 8017840:	b236      	sxthne	r6, r6
 8017842:	e7ef      	b.n	8017824 <_printf_i+0xbc>
 8017844:	682b      	ldr	r3, [r5, #0]
 8017846:	6820      	ldr	r0, [r4, #0]
 8017848:	1d19      	adds	r1, r3, #4
 801784a:	6029      	str	r1, [r5, #0]
 801784c:	0601      	lsls	r1, r0, #24
 801784e:	d501      	bpl.n	8017854 <_printf_i+0xec>
 8017850:	681e      	ldr	r6, [r3, #0]
 8017852:	e002      	b.n	801785a <_printf_i+0xf2>
 8017854:	0646      	lsls	r6, r0, #25
 8017856:	d5fb      	bpl.n	8017850 <_printf_i+0xe8>
 8017858:	881e      	ldrh	r6, [r3, #0]
 801785a:	4854      	ldr	r0, [pc, #336]	; (80179ac <_printf_i+0x244>)
 801785c:	2f6f      	cmp	r7, #111	; 0x6f
 801785e:	bf0c      	ite	eq
 8017860:	2308      	moveq	r3, #8
 8017862:	230a      	movne	r3, #10
 8017864:	2100      	movs	r1, #0
 8017866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801786a:	6865      	ldr	r5, [r4, #4]
 801786c:	60a5      	str	r5, [r4, #8]
 801786e:	2d00      	cmp	r5, #0
 8017870:	bfa2      	ittt	ge
 8017872:	6821      	ldrge	r1, [r4, #0]
 8017874:	f021 0104 	bicge.w	r1, r1, #4
 8017878:	6021      	strge	r1, [r4, #0]
 801787a:	b90e      	cbnz	r6, 8017880 <_printf_i+0x118>
 801787c:	2d00      	cmp	r5, #0
 801787e:	d04d      	beq.n	801791c <_printf_i+0x1b4>
 8017880:	4615      	mov	r5, r2
 8017882:	fbb6 f1f3 	udiv	r1, r6, r3
 8017886:	fb03 6711 	mls	r7, r3, r1, r6
 801788a:	5dc7      	ldrb	r7, [r0, r7]
 801788c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017890:	4637      	mov	r7, r6
 8017892:	42bb      	cmp	r3, r7
 8017894:	460e      	mov	r6, r1
 8017896:	d9f4      	bls.n	8017882 <_printf_i+0x11a>
 8017898:	2b08      	cmp	r3, #8
 801789a:	d10b      	bne.n	80178b4 <_printf_i+0x14c>
 801789c:	6823      	ldr	r3, [r4, #0]
 801789e:	07de      	lsls	r6, r3, #31
 80178a0:	d508      	bpl.n	80178b4 <_printf_i+0x14c>
 80178a2:	6923      	ldr	r3, [r4, #16]
 80178a4:	6861      	ldr	r1, [r4, #4]
 80178a6:	4299      	cmp	r1, r3
 80178a8:	bfde      	ittt	le
 80178aa:	2330      	movle	r3, #48	; 0x30
 80178ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80178b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80178b4:	1b52      	subs	r2, r2, r5
 80178b6:	6122      	str	r2, [r4, #16]
 80178b8:	f8cd a000 	str.w	sl, [sp]
 80178bc:	464b      	mov	r3, r9
 80178be:	aa03      	add	r2, sp, #12
 80178c0:	4621      	mov	r1, r4
 80178c2:	4640      	mov	r0, r8
 80178c4:	f7ff fee2 	bl	801768c <_printf_common>
 80178c8:	3001      	adds	r0, #1
 80178ca:	d14c      	bne.n	8017966 <_printf_i+0x1fe>
 80178cc:	f04f 30ff 	mov.w	r0, #4294967295
 80178d0:	b004      	add	sp, #16
 80178d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178d6:	4835      	ldr	r0, [pc, #212]	; (80179ac <_printf_i+0x244>)
 80178d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80178dc:	6829      	ldr	r1, [r5, #0]
 80178de:	6823      	ldr	r3, [r4, #0]
 80178e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80178e4:	6029      	str	r1, [r5, #0]
 80178e6:	061d      	lsls	r5, r3, #24
 80178e8:	d514      	bpl.n	8017914 <_printf_i+0x1ac>
 80178ea:	07df      	lsls	r7, r3, #31
 80178ec:	bf44      	itt	mi
 80178ee:	f043 0320 	orrmi.w	r3, r3, #32
 80178f2:	6023      	strmi	r3, [r4, #0]
 80178f4:	b91e      	cbnz	r6, 80178fe <_printf_i+0x196>
 80178f6:	6823      	ldr	r3, [r4, #0]
 80178f8:	f023 0320 	bic.w	r3, r3, #32
 80178fc:	6023      	str	r3, [r4, #0]
 80178fe:	2310      	movs	r3, #16
 8017900:	e7b0      	b.n	8017864 <_printf_i+0xfc>
 8017902:	6823      	ldr	r3, [r4, #0]
 8017904:	f043 0320 	orr.w	r3, r3, #32
 8017908:	6023      	str	r3, [r4, #0]
 801790a:	2378      	movs	r3, #120	; 0x78
 801790c:	4828      	ldr	r0, [pc, #160]	; (80179b0 <_printf_i+0x248>)
 801790e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017912:	e7e3      	b.n	80178dc <_printf_i+0x174>
 8017914:	0659      	lsls	r1, r3, #25
 8017916:	bf48      	it	mi
 8017918:	b2b6      	uxthmi	r6, r6
 801791a:	e7e6      	b.n	80178ea <_printf_i+0x182>
 801791c:	4615      	mov	r5, r2
 801791e:	e7bb      	b.n	8017898 <_printf_i+0x130>
 8017920:	682b      	ldr	r3, [r5, #0]
 8017922:	6826      	ldr	r6, [r4, #0]
 8017924:	6961      	ldr	r1, [r4, #20]
 8017926:	1d18      	adds	r0, r3, #4
 8017928:	6028      	str	r0, [r5, #0]
 801792a:	0635      	lsls	r5, r6, #24
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	d501      	bpl.n	8017934 <_printf_i+0x1cc>
 8017930:	6019      	str	r1, [r3, #0]
 8017932:	e002      	b.n	801793a <_printf_i+0x1d2>
 8017934:	0670      	lsls	r0, r6, #25
 8017936:	d5fb      	bpl.n	8017930 <_printf_i+0x1c8>
 8017938:	8019      	strh	r1, [r3, #0]
 801793a:	2300      	movs	r3, #0
 801793c:	6123      	str	r3, [r4, #16]
 801793e:	4615      	mov	r5, r2
 8017940:	e7ba      	b.n	80178b8 <_printf_i+0x150>
 8017942:	682b      	ldr	r3, [r5, #0]
 8017944:	1d1a      	adds	r2, r3, #4
 8017946:	602a      	str	r2, [r5, #0]
 8017948:	681d      	ldr	r5, [r3, #0]
 801794a:	6862      	ldr	r2, [r4, #4]
 801794c:	2100      	movs	r1, #0
 801794e:	4628      	mov	r0, r5
 8017950:	f7e8 fc5e 	bl	8000210 <memchr>
 8017954:	b108      	cbz	r0, 801795a <_printf_i+0x1f2>
 8017956:	1b40      	subs	r0, r0, r5
 8017958:	6060      	str	r0, [r4, #4]
 801795a:	6863      	ldr	r3, [r4, #4]
 801795c:	6123      	str	r3, [r4, #16]
 801795e:	2300      	movs	r3, #0
 8017960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017964:	e7a8      	b.n	80178b8 <_printf_i+0x150>
 8017966:	6923      	ldr	r3, [r4, #16]
 8017968:	462a      	mov	r2, r5
 801796a:	4649      	mov	r1, r9
 801796c:	4640      	mov	r0, r8
 801796e:	47d0      	blx	sl
 8017970:	3001      	adds	r0, #1
 8017972:	d0ab      	beq.n	80178cc <_printf_i+0x164>
 8017974:	6823      	ldr	r3, [r4, #0]
 8017976:	079b      	lsls	r3, r3, #30
 8017978:	d413      	bmi.n	80179a2 <_printf_i+0x23a>
 801797a:	68e0      	ldr	r0, [r4, #12]
 801797c:	9b03      	ldr	r3, [sp, #12]
 801797e:	4298      	cmp	r0, r3
 8017980:	bfb8      	it	lt
 8017982:	4618      	movlt	r0, r3
 8017984:	e7a4      	b.n	80178d0 <_printf_i+0x168>
 8017986:	2301      	movs	r3, #1
 8017988:	4632      	mov	r2, r6
 801798a:	4649      	mov	r1, r9
 801798c:	4640      	mov	r0, r8
 801798e:	47d0      	blx	sl
 8017990:	3001      	adds	r0, #1
 8017992:	d09b      	beq.n	80178cc <_printf_i+0x164>
 8017994:	3501      	adds	r5, #1
 8017996:	68e3      	ldr	r3, [r4, #12]
 8017998:	9903      	ldr	r1, [sp, #12]
 801799a:	1a5b      	subs	r3, r3, r1
 801799c:	42ab      	cmp	r3, r5
 801799e:	dcf2      	bgt.n	8017986 <_printf_i+0x21e>
 80179a0:	e7eb      	b.n	801797a <_printf_i+0x212>
 80179a2:	2500      	movs	r5, #0
 80179a4:	f104 0619 	add.w	r6, r4, #25
 80179a8:	e7f5      	b.n	8017996 <_printf_i+0x22e>
 80179aa:	bf00      	nop
 80179ac:	0801aba1 	.word	0x0801aba1
 80179b0:	0801abb2 	.word	0x0801abb2

080179b4 <__sread>:
 80179b4:	b510      	push	{r4, lr}
 80179b6:	460c      	mov	r4, r1
 80179b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179bc:	f000 fa62 	bl	8017e84 <_read_r>
 80179c0:	2800      	cmp	r0, #0
 80179c2:	bfab      	itete	ge
 80179c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80179c6:	89a3      	ldrhlt	r3, [r4, #12]
 80179c8:	181b      	addge	r3, r3, r0
 80179ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80179ce:	bfac      	ite	ge
 80179d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80179d2:	81a3      	strhlt	r3, [r4, #12]
 80179d4:	bd10      	pop	{r4, pc}

080179d6 <__swrite>:
 80179d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179da:	461f      	mov	r7, r3
 80179dc:	898b      	ldrh	r3, [r1, #12]
 80179de:	05db      	lsls	r3, r3, #23
 80179e0:	4605      	mov	r5, r0
 80179e2:	460c      	mov	r4, r1
 80179e4:	4616      	mov	r6, r2
 80179e6:	d505      	bpl.n	80179f4 <__swrite+0x1e>
 80179e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179ec:	2302      	movs	r3, #2
 80179ee:	2200      	movs	r2, #0
 80179f0:	f000 f9d0 	bl	8017d94 <_lseek_r>
 80179f4:	89a3      	ldrh	r3, [r4, #12]
 80179f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80179fe:	81a3      	strh	r3, [r4, #12]
 8017a00:	4632      	mov	r2, r6
 8017a02:	463b      	mov	r3, r7
 8017a04:	4628      	mov	r0, r5
 8017a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a0a:	f000 b869 	b.w	8017ae0 <_write_r>

08017a0e <__sseek>:
 8017a0e:	b510      	push	{r4, lr}
 8017a10:	460c      	mov	r4, r1
 8017a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a16:	f000 f9bd 	bl	8017d94 <_lseek_r>
 8017a1a:	1c43      	adds	r3, r0, #1
 8017a1c:	89a3      	ldrh	r3, [r4, #12]
 8017a1e:	bf15      	itete	ne
 8017a20:	6560      	strne	r0, [r4, #84]	; 0x54
 8017a22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017a26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017a2a:	81a3      	strheq	r3, [r4, #12]
 8017a2c:	bf18      	it	ne
 8017a2e:	81a3      	strhne	r3, [r4, #12]
 8017a30:	bd10      	pop	{r4, pc}

08017a32 <__sclose>:
 8017a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a36:	f000 b8db 	b.w	8017bf0 <_close_r>
	...

08017a3c <__swbuf_r>:
 8017a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a3e:	460e      	mov	r6, r1
 8017a40:	4614      	mov	r4, r2
 8017a42:	4605      	mov	r5, r0
 8017a44:	b118      	cbz	r0, 8017a4e <__swbuf_r+0x12>
 8017a46:	6983      	ldr	r3, [r0, #24]
 8017a48:	b90b      	cbnz	r3, 8017a4e <__swbuf_r+0x12>
 8017a4a:	f7ff fc07 	bl	801725c <__sinit>
 8017a4e:	4b21      	ldr	r3, [pc, #132]	; (8017ad4 <__swbuf_r+0x98>)
 8017a50:	429c      	cmp	r4, r3
 8017a52:	d12b      	bne.n	8017aac <__swbuf_r+0x70>
 8017a54:	686c      	ldr	r4, [r5, #4]
 8017a56:	69a3      	ldr	r3, [r4, #24]
 8017a58:	60a3      	str	r3, [r4, #8]
 8017a5a:	89a3      	ldrh	r3, [r4, #12]
 8017a5c:	071a      	lsls	r2, r3, #28
 8017a5e:	d52f      	bpl.n	8017ac0 <__swbuf_r+0x84>
 8017a60:	6923      	ldr	r3, [r4, #16]
 8017a62:	b36b      	cbz	r3, 8017ac0 <__swbuf_r+0x84>
 8017a64:	6923      	ldr	r3, [r4, #16]
 8017a66:	6820      	ldr	r0, [r4, #0]
 8017a68:	1ac0      	subs	r0, r0, r3
 8017a6a:	6963      	ldr	r3, [r4, #20]
 8017a6c:	b2f6      	uxtb	r6, r6
 8017a6e:	4283      	cmp	r3, r0
 8017a70:	4637      	mov	r7, r6
 8017a72:	dc04      	bgt.n	8017a7e <__swbuf_r+0x42>
 8017a74:	4621      	mov	r1, r4
 8017a76:	4628      	mov	r0, r5
 8017a78:	f000 f950 	bl	8017d1c <_fflush_r>
 8017a7c:	bb30      	cbnz	r0, 8017acc <__swbuf_r+0x90>
 8017a7e:	68a3      	ldr	r3, [r4, #8]
 8017a80:	3b01      	subs	r3, #1
 8017a82:	60a3      	str	r3, [r4, #8]
 8017a84:	6823      	ldr	r3, [r4, #0]
 8017a86:	1c5a      	adds	r2, r3, #1
 8017a88:	6022      	str	r2, [r4, #0]
 8017a8a:	701e      	strb	r6, [r3, #0]
 8017a8c:	6963      	ldr	r3, [r4, #20]
 8017a8e:	3001      	adds	r0, #1
 8017a90:	4283      	cmp	r3, r0
 8017a92:	d004      	beq.n	8017a9e <__swbuf_r+0x62>
 8017a94:	89a3      	ldrh	r3, [r4, #12]
 8017a96:	07db      	lsls	r3, r3, #31
 8017a98:	d506      	bpl.n	8017aa8 <__swbuf_r+0x6c>
 8017a9a:	2e0a      	cmp	r6, #10
 8017a9c:	d104      	bne.n	8017aa8 <__swbuf_r+0x6c>
 8017a9e:	4621      	mov	r1, r4
 8017aa0:	4628      	mov	r0, r5
 8017aa2:	f000 f93b 	bl	8017d1c <_fflush_r>
 8017aa6:	b988      	cbnz	r0, 8017acc <__swbuf_r+0x90>
 8017aa8:	4638      	mov	r0, r7
 8017aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017aac:	4b0a      	ldr	r3, [pc, #40]	; (8017ad8 <__swbuf_r+0x9c>)
 8017aae:	429c      	cmp	r4, r3
 8017ab0:	d101      	bne.n	8017ab6 <__swbuf_r+0x7a>
 8017ab2:	68ac      	ldr	r4, [r5, #8]
 8017ab4:	e7cf      	b.n	8017a56 <__swbuf_r+0x1a>
 8017ab6:	4b09      	ldr	r3, [pc, #36]	; (8017adc <__swbuf_r+0xa0>)
 8017ab8:	429c      	cmp	r4, r3
 8017aba:	bf08      	it	eq
 8017abc:	68ec      	ldreq	r4, [r5, #12]
 8017abe:	e7ca      	b.n	8017a56 <__swbuf_r+0x1a>
 8017ac0:	4621      	mov	r1, r4
 8017ac2:	4628      	mov	r0, r5
 8017ac4:	f000 f81e 	bl	8017b04 <__swsetup_r>
 8017ac8:	2800      	cmp	r0, #0
 8017aca:	d0cb      	beq.n	8017a64 <__swbuf_r+0x28>
 8017acc:	f04f 37ff 	mov.w	r7, #4294967295
 8017ad0:	e7ea      	b.n	8017aa8 <__swbuf_r+0x6c>
 8017ad2:	bf00      	nop
 8017ad4:	0801ab50 	.word	0x0801ab50
 8017ad8:	0801ab70 	.word	0x0801ab70
 8017adc:	0801ab30 	.word	0x0801ab30

08017ae0 <_write_r>:
 8017ae0:	b538      	push	{r3, r4, r5, lr}
 8017ae2:	4d07      	ldr	r5, [pc, #28]	; (8017b00 <_write_r+0x20>)
 8017ae4:	4604      	mov	r4, r0
 8017ae6:	4608      	mov	r0, r1
 8017ae8:	4611      	mov	r1, r2
 8017aea:	2200      	movs	r2, #0
 8017aec:	602a      	str	r2, [r5, #0]
 8017aee:	461a      	mov	r2, r3
 8017af0:	f7ea f90f 	bl	8001d12 <_write>
 8017af4:	1c43      	adds	r3, r0, #1
 8017af6:	d102      	bne.n	8017afe <_write_r+0x1e>
 8017af8:	682b      	ldr	r3, [r5, #0]
 8017afa:	b103      	cbz	r3, 8017afe <_write_r+0x1e>
 8017afc:	6023      	str	r3, [r4, #0]
 8017afe:	bd38      	pop	{r3, r4, r5, pc}
 8017b00:	20009338 	.word	0x20009338

08017b04 <__swsetup_r>:
 8017b04:	4b32      	ldr	r3, [pc, #200]	; (8017bd0 <__swsetup_r+0xcc>)
 8017b06:	b570      	push	{r4, r5, r6, lr}
 8017b08:	681d      	ldr	r5, [r3, #0]
 8017b0a:	4606      	mov	r6, r0
 8017b0c:	460c      	mov	r4, r1
 8017b0e:	b125      	cbz	r5, 8017b1a <__swsetup_r+0x16>
 8017b10:	69ab      	ldr	r3, [r5, #24]
 8017b12:	b913      	cbnz	r3, 8017b1a <__swsetup_r+0x16>
 8017b14:	4628      	mov	r0, r5
 8017b16:	f7ff fba1 	bl	801725c <__sinit>
 8017b1a:	4b2e      	ldr	r3, [pc, #184]	; (8017bd4 <__swsetup_r+0xd0>)
 8017b1c:	429c      	cmp	r4, r3
 8017b1e:	d10f      	bne.n	8017b40 <__swsetup_r+0x3c>
 8017b20:	686c      	ldr	r4, [r5, #4]
 8017b22:	89a3      	ldrh	r3, [r4, #12]
 8017b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017b28:	0719      	lsls	r1, r3, #28
 8017b2a:	d42c      	bmi.n	8017b86 <__swsetup_r+0x82>
 8017b2c:	06dd      	lsls	r5, r3, #27
 8017b2e:	d411      	bmi.n	8017b54 <__swsetup_r+0x50>
 8017b30:	2309      	movs	r3, #9
 8017b32:	6033      	str	r3, [r6, #0]
 8017b34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017b38:	81a3      	strh	r3, [r4, #12]
 8017b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8017b3e:	e03e      	b.n	8017bbe <__swsetup_r+0xba>
 8017b40:	4b25      	ldr	r3, [pc, #148]	; (8017bd8 <__swsetup_r+0xd4>)
 8017b42:	429c      	cmp	r4, r3
 8017b44:	d101      	bne.n	8017b4a <__swsetup_r+0x46>
 8017b46:	68ac      	ldr	r4, [r5, #8]
 8017b48:	e7eb      	b.n	8017b22 <__swsetup_r+0x1e>
 8017b4a:	4b24      	ldr	r3, [pc, #144]	; (8017bdc <__swsetup_r+0xd8>)
 8017b4c:	429c      	cmp	r4, r3
 8017b4e:	bf08      	it	eq
 8017b50:	68ec      	ldreq	r4, [r5, #12]
 8017b52:	e7e6      	b.n	8017b22 <__swsetup_r+0x1e>
 8017b54:	0758      	lsls	r0, r3, #29
 8017b56:	d512      	bpl.n	8017b7e <__swsetup_r+0x7a>
 8017b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b5a:	b141      	cbz	r1, 8017b6e <__swsetup_r+0x6a>
 8017b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b60:	4299      	cmp	r1, r3
 8017b62:	d002      	beq.n	8017b6a <__swsetup_r+0x66>
 8017b64:	4630      	mov	r0, r6
 8017b66:	f7ff f9a9 	bl	8016ebc <_free_r>
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	6363      	str	r3, [r4, #52]	; 0x34
 8017b6e:	89a3      	ldrh	r3, [r4, #12]
 8017b70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017b74:	81a3      	strh	r3, [r4, #12]
 8017b76:	2300      	movs	r3, #0
 8017b78:	6063      	str	r3, [r4, #4]
 8017b7a:	6923      	ldr	r3, [r4, #16]
 8017b7c:	6023      	str	r3, [r4, #0]
 8017b7e:	89a3      	ldrh	r3, [r4, #12]
 8017b80:	f043 0308 	orr.w	r3, r3, #8
 8017b84:	81a3      	strh	r3, [r4, #12]
 8017b86:	6923      	ldr	r3, [r4, #16]
 8017b88:	b94b      	cbnz	r3, 8017b9e <__swsetup_r+0x9a>
 8017b8a:	89a3      	ldrh	r3, [r4, #12]
 8017b8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b94:	d003      	beq.n	8017b9e <__swsetup_r+0x9a>
 8017b96:	4621      	mov	r1, r4
 8017b98:	4630      	mov	r0, r6
 8017b9a:	f000 f933 	bl	8017e04 <__smakebuf_r>
 8017b9e:	89a0      	ldrh	r0, [r4, #12]
 8017ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ba4:	f010 0301 	ands.w	r3, r0, #1
 8017ba8:	d00a      	beq.n	8017bc0 <__swsetup_r+0xbc>
 8017baa:	2300      	movs	r3, #0
 8017bac:	60a3      	str	r3, [r4, #8]
 8017bae:	6963      	ldr	r3, [r4, #20]
 8017bb0:	425b      	negs	r3, r3
 8017bb2:	61a3      	str	r3, [r4, #24]
 8017bb4:	6923      	ldr	r3, [r4, #16]
 8017bb6:	b943      	cbnz	r3, 8017bca <__swsetup_r+0xc6>
 8017bb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017bbc:	d1ba      	bne.n	8017b34 <__swsetup_r+0x30>
 8017bbe:	bd70      	pop	{r4, r5, r6, pc}
 8017bc0:	0781      	lsls	r1, r0, #30
 8017bc2:	bf58      	it	pl
 8017bc4:	6963      	ldrpl	r3, [r4, #20]
 8017bc6:	60a3      	str	r3, [r4, #8]
 8017bc8:	e7f4      	b.n	8017bb4 <__swsetup_r+0xb0>
 8017bca:	2000      	movs	r0, #0
 8017bcc:	e7f7      	b.n	8017bbe <__swsetup_r+0xba>
 8017bce:	bf00      	nop
 8017bd0:	2000002c 	.word	0x2000002c
 8017bd4:	0801ab50 	.word	0x0801ab50
 8017bd8:	0801ab70 	.word	0x0801ab70
 8017bdc:	0801ab30 	.word	0x0801ab30

08017be0 <abort>:
 8017be0:	b508      	push	{r3, lr}
 8017be2:	2006      	movs	r0, #6
 8017be4:	f000 f988 	bl	8017ef8 <raise>
 8017be8:	2001      	movs	r0, #1
 8017bea:	f7ea f86b 	bl	8001cc4 <_exit>
	...

08017bf0 <_close_r>:
 8017bf0:	b538      	push	{r3, r4, r5, lr}
 8017bf2:	4d06      	ldr	r5, [pc, #24]	; (8017c0c <_close_r+0x1c>)
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	4604      	mov	r4, r0
 8017bf8:	4608      	mov	r0, r1
 8017bfa:	602b      	str	r3, [r5, #0]
 8017bfc:	f7ea f8a5 	bl	8001d4a <_close>
 8017c00:	1c43      	adds	r3, r0, #1
 8017c02:	d102      	bne.n	8017c0a <_close_r+0x1a>
 8017c04:	682b      	ldr	r3, [r5, #0]
 8017c06:	b103      	cbz	r3, 8017c0a <_close_r+0x1a>
 8017c08:	6023      	str	r3, [r4, #0]
 8017c0a:	bd38      	pop	{r3, r4, r5, pc}
 8017c0c:	20009338 	.word	0x20009338

08017c10 <__sflush_r>:
 8017c10:	898a      	ldrh	r2, [r1, #12]
 8017c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c16:	4605      	mov	r5, r0
 8017c18:	0710      	lsls	r0, r2, #28
 8017c1a:	460c      	mov	r4, r1
 8017c1c:	d458      	bmi.n	8017cd0 <__sflush_r+0xc0>
 8017c1e:	684b      	ldr	r3, [r1, #4]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	dc05      	bgt.n	8017c30 <__sflush_r+0x20>
 8017c24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	dc02      	bgt.n	8017c30 <__sflush_r+0x20>
 8017c2a:	2000      	movs	r0, #0
 8017c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017c32:	2e00      	cmp	r6, #0
 8017c34:	d0f9      	beq.n	8017c2a <__sflush_r+0x1a>
 8017c36:	2300      	movs	r3, #0
 8017c38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017c3c:	682f      	ldr	r7, [r5, #0]
 8017c3e:	602b      	str	r3, [r5, #0]
 8017c40:	d032      	beq.n	8017ca8 <__sflush_r+0x98>
 8017c42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017c44:	89a3      	ldrh	r3, [r4, #12]
 8017c46:	075a      	lsls	r2, r3, #29
 8017c48:	d505      	bpl.n	8017c56 <__sflush_r+0x46>
 8017c4a:	6863      	ldr	r3, [r4, #4]
 8017c4c:	1ac0      	subs	r0, r0, r3
 8017c4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017c50:	b10b      	cbz	r3, 8017c56 <__sflush_r+0x46>
 8017c52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017c54:	1ac0      	subs	r0, r0, r3
 8017c56:	2300      	movs	r3, #0
 8017c58:	4602      	mov	r2, r0
 8017c5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017c5c:	6a21      	ldr	r1, [r4, #32]
 8017c5e:	4628      	mov	r0, r5
 8017c60:	47b0      	blx	r6
 8017c62:	1c43      	adds	r3, r0, #1
 8017c64:	89a3      	ldrh	r3, [r4, #12]
 8017c66:	d106      	bne.n	8017c76 <__sflush_r+0x66>
 8017c68:	6829      	ldr	r1, [r5, #0]
 8017c6a:	291d      	cmp	r1, #29
 8017c6c:	d82c      	bhi.n	8017cc8 <__sflush_r+0xb8>
 8017c6e:	4a2a      	ldr	r2, [pc, #168]	; (8017d18 <__sflush_r+0x108>)
 8017c70:	40ca      	lsrs	r2, r1
 8017c72:	07d6      	lsls	r6, r2, #31
 8017c74:	d528      	bpl.n	8017cc8 <__sflush_r+0xb8>
 8017c76:	2200      	movs	r2, #0
 8017c78:	6062      	str	r2, [r4, #4]
 8017c7a:	04d9      	lsls	r1, r3, #19
 8017c7c:	6922      	ldr	r2, [r4, #16]
 8017c7e:	6022      	str	r2, [r4, #0]
 8017c80:	d504      	bpl.n	8017c8c <__sflush_r+0x7c>
 8017c82:	1c42      	adds	r2, r0, #1
 8017c84:	d101      	bne.n	8017c8a <__sflush_r+0x7a>
 8017c86:	682b      	ldr	r3, [r5, #0]
 8017c88:	b903      	cbnz	r3, 8017c8c <__sflush_r+0x7c>
 8017c8a:	6560      	str	r0, [r4, #84]	; 0x54
 8017c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c8e:	602f      	str	r7, [r5, #0]
 8017c90:	2900      	cmp	r1, #0
 8017c92:	d0ca      	beq.n	8017c2a <__sflush_r+0x1a>
 8017c94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c98:	4299      	cmp	r1, r3
 8017c9a:	d002      	beq.n	8017ca2 <__sflush_r+0x92>
 8017c9c:	4628      	mov	r0, r5
 8017c9e:	f7ff f90d 	bl	8016ebc <_free_r>
 8017ca2:	2000      	movs	r0, #0
 8017ca4:	6360      	str	r0, [r4, #52]	; 0x34
 8017ca6:	e7c1      	b.n	8017c2c <__sflush_r+0x1c>
 8017ca8:	6a21      	ldr	r1, [r4, #32]
 8017caa:	2301      	movs	r3, #1
 8017cac:	4628      	mov	r0, r5
 8017cae:	47b0      	blx	r6
 8017cb0:	1c41      	adds	r1, r0, #1
 8017cb2:	d1c7      	bne.n	8017c44 <__sflush_r+0x34>
 8017cb4:	682b      	ldr	r3, [r5, #0]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d0c4      	beq.n	8017c44 <__sflush_r+0x34>
 8017cba:	2b1d      	cmp	r3, #29
 8017cbc:	d001      	beq.n	8017cc2 <__sflush_r+0xb2>
 8017cbe:	2b16      	cmp	r3, #22
 8017cc0:	d101      	bne.n	8017cc6 <__sflush_r+0xb6>
 8017cc2:	602f      	str	r7, [r5, #0]
 8017cc4:	e7b1      	b.n	8017c2a <__sflush_r+0x1a>
 8017cc6:	89a3      	ldrh	r3, [r4, #12]
 8017cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ccc:	81a3      	strh	r3, [r4, #12]
 8017cce:	e7ad      	b.n	8017c2c <__sflush_r+0x1c>
 8017cd0:	690f      	ldr	r7, [r1, #16]
 8017cd2:	2f00      	cmp	r7, #0
 8017cd4:	d0a9      	beq.n	8017c2a <__sflush_r+0x1a>
 8017cd6:	0793      	lsls	r3, r2, #30
 8017cd8:	680e      	ldr	r6, [r1, #0]
 8017cda:	bf08      	it	eq
 8017cdc:	694b      	ldreq	r3, [r1, #20]
 8017cde:	600f      	str	r7, [r1, #0]
 8017ce0:	bf18      	it	ne
 8017ce2:	2300      	movne	r3, #0
 8017ce4:	eba6 0807 	sub.w	r8, r6, r7
 8017ce8:	608b      	str	r3, [r1, #8]
 8017cea:	f1b8 0f00 	cmp.w	r8, #0
 8017cee:	dd9c      	ble.n	8017c2a <__sflush_r+0x1a>
 8017cf0:	6a21      	ldr	r1, [r4, #32]
 8017cf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017cf4:	4643      	mov	r3, r8
 8017cf6:	463a      	mov	r2, r7
 8017cf8:	4628      	mov	r0, r5
 8017cfa:	47b0      	blx	r6
 8017cfc:	2800      	cmp	r0, #0
 8017cfe:	dc06      	bgt.n	8017d0e <__sflush_r+0xfe>
 8017d00:	89a3      	ldrh	r3, [r4, #12]
 8017d02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d06:	81a3      	strh	r3, [r4, #12]
 8017d08:	f04f 30ff 	mov.w	r0, #4294967295
 8017d0c:	e78e      	b.n	8017c2c <__sflush_r+0x1c>
 8017d0e:	4407      	add	r7, r0
 8017d10:	eba8 0800 	sub.w	r8, r8, r0
 8017d14:	e7e9      	b.n	8017cea <__sflush_r+0xda>
 8017d16:	bf00      	nop
 8017d18:	20400001 	.word	0x20400001

08017d1c <_fflush_r>:
 8017d1c:	b538      	push	{r3, r4, r5, lr}
 8017d1e:	690b      	ldr	r3, [r1, #16]
 8017d20:	4605      	mov	r5, r0
 8017d22:	460c      	mov	r4, r1
 8017d24:	b913      	cbnz	r3, 8017d2c <_fflush_r+0x10>
 8017d26:	2500      	movs	r5, #0
 8017d28:	4628      	mov	r0, r5
 8017d2a:	bd38      	pop	{r3, r4, r5, pc}
 8017d2c:	b118      	cbz	r0, 8017d36 <_fflush_r+0x1a>
 8017d2e:	6983      	ldr	r3, [r0, #24]
 8017d30:	b90b      	cbnz	r3, 8017d36 <_fflush_r+0x1a>
 8017d32:	f7ff fa93 	bl	801725c <__sinit>
 8017d36:	4b14      	ldr	r3, [pc, #80]	; (8017d88 <_fflush_r+0x6c>)
 8017d38:	429c      	cmp	r4, r3
 8017d3a:	d11b      	bne.n	8017d74 <_fflush_r+0x58>
 8017d3c:	686c      	ldr	r4, [r5, #4]
 8017d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d0ef      	beq.n	8017d26 <_fflush_r+0xa>
 8017d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017d48:	07d0      	lsls	r0, r2, #31
 8017d4a:	d404      	bmi.n	8017d56 <_fflush_r+0x3a>
 8017d4c:	0599      	lsls	r1, r3, #22
 8017d4e:	d402      	bmi.n	8017d56 <_fflush_r+0x3a>
 8017d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017d52:	f7ff fb33 	bl	80173bc <__retarget_lock_acquire_recursive>
 8017d56:	4628      	mov	r0, r5
 8017d58:	4621      	mov	r1, r4
 8017d5a:	f7ff ff59 	bl	8017c10 <__sflush_r>
 8017d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017d60:	07da      	lsls	r2, r3, #31
 8017d62:	4605      	mov	r5, r0
 8017d64:	d4e0      	bmi.n	8017d28 <_fflush_r+0xc>
 8017d66:	89a3      	ldrh	r3, [r4, #12]
 8017d68:	059b      	lsls	r3, r3, #22
 8017d6a:	d4dd      	bmi.n	8017d28 <_fflush_r+0xc>
 8017d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017d6e:	f7ff fb26 	bl	80173be <__retarget_lock_release_recursive>
 8017d72:	e7d9      	b.n	8017d28 <_fflush_r+0xc>
 8017d74:	4b05      	ldr	r3, [pc, #20]	; (8017d8c <_fflush_r+0x70>)
 8017d76:	429c      	cmp	r4, r3
 8017d78:	d101      	bne.n	8017d7e <_fflush_r+0x62>
 8017d7a:	68ac      	ldr	r4, [r5, #8]
 8017d7c:	e7df      	b.n	8017d3e <_fflush_r+0x22>
 8017d7e:	4b04      	ldr	r3, [pc, #16]	; (8017d90 <_fflush_r+0x74>)
 8017d80:	429c      	cmp	r4, r3
 8017d82:	bf08      	it	eq
 8017d84:	68ec      	ldreq	r4, [r5, #12]
 8017d86:	e7da      	b.n	8017d3e <_fflush_r+0x22>
 8017d88:	0801ab50 	.word	0x0801ab50
 8017d8c:	0801ab70 	.word	0x0801ab70
 8017d90:	0801ab30 	.word	0x0801ab30

08017d94 <_lseek_r>:
 8017d94:	b538      	push	{r3, r4, r5, lr}
 8017d96:	4d07      	ldr	r5, [pc, #28]	; (8017db4 <_lseek_r+0x20>)
 8017d98:	4604      	mov	r4, r0
 8017d9a:	4608      	mov	r0, r1
 8017d9c:	4611      	mov	r1, r2
 8017d9e:	2200      	movs	r2, #0
 8017da0:	602a      	str	r2, [r5, #0]
 8017da2:	461a      	mov	r2, r3
 8017da4:	f7e9 fff8 	bl	8001d98 <_lseek>
 8017da8:	1c43      	adds	r3, r0, #1
 8017daa:	d102      	bne.n	8017db2 <_lseek_r+0x1e>
 8017dac:	682b      	ldr	r3, [r5, #0]
 8017dae:	b103      	cbz	r3, 8017db2 <_lseek_r+0x1e>
 8017db0:	6023      	str	r3, [r4, #0]
 8017db2:	bd38      	pop	{r3, r4, r5, pc}
 8017db4:	20009338 	.word	0x20009338

08017db8 <__swhatbuf_r>:
 8017db8:	b570      	push	{r4, r5, r6, lr}
 8017dba:	460e      	mov	r6, r1
 8017dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017dc0:	2900      	cmp	r1, #0
 8017dc2:	b096      	sub	sp, #88	; 0x58
 8017dc4:	4614      	mov	r4, r2
 8017dc6:	461d      	mov	r5, r3
 8017dc8:	da08      	bge.n	8017ddc <__swhatbuf_r+0x24>
 8017dca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017dce:	2200      	movs	r2, #0
 8017dd0:	602a      	str	r2, [r5, #0]
 8017dd2:	061a      	lsls	r2, r3, #24
 8017dd4:	d410      	bmi.n	8017df8 <__swhatbuf_r+0x40>
 8017dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017dda:	e00e      	b.n	8017dfa <__swhatbuf_r+0x42>
 8017ddc:	466a      	mov	r2, sp
 8017dde:	f000 f8a7 	bl	8017f30 <_fstat_r>
 8017de2:	2800      	cmp	r0, #0
 8017de4:	dbf1      	blt.n	8017dca <__swhatbuf_r+0x12>
 8017de6:	9a01      	ldr	r2, [sp, #4]
 8017de8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017dec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017df0:	425a      	negs	r2, r3
 8017df2:	415a      	adcs	r2, r3
 8017df4:	602a      	str	r2, [r5, #0]
 8017df6:	e7ee      	b.n	8017dd6 <__swhatbuf_r+0x1e>
 8017df8:	2340      	movs	r3, #64	; 0x40
 8017dfa:	2000      	movs	r0, #0
 8017dfc:	6023      	str	r3, [r4, #0]
 8017dfe:	b016      	add	sp, #88	; 0x58
 8017e00:	bd70      	pop	{r4, r5, r6, pc}
	...

08017e04 <__smakebuf_r>:
 8017e04:	898b      	ldrh	r3, [r1, #12]
 8017e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017e08:	079d      	lsls	r5, r3, #30
 8017e0a:	4606      	mov	r6, r0
 8017e0c:	460c      	mov	r4, r1
 8017e0e:	d507      	bpl.n	8017e20 <__smakebuf_r+0x1c>
 8017e10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017e14:	6023      	str	r3, [r4, #0]
 8017e16:	6123      	str	r3, [r4, #16]
 8017e18:	2301      	movs	r3, #1
 8017e1a:	6163      	str	r3, [r4, #20]
 8017e1c:	b002      	add	sp, #8
 8017e1e:	bd70      	pop	{r4, r5, r6, pc}
 8017e20:	ab01      	add	r3, sp, #4
 8017e22:	466a      	mov	r2, sp
 8017e24:	f7ff ffc8 	bl	8017db8 <__swhatbuf_r>
 8017e28:	9900      	ldr	r1, [sp, #0]
 8017e2a:	4605      	mov	r5, r0
 8017e2c:	4630      	mov	r0, r6
 8017e2e:	f7ff f8b1 	bl	8016f94 <_malloc_r>
 8017e32:	b948      	cbnz	r0, 8017e48 <__smakebuf_r+0x44>
 8017e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e38:	059a      	lsls	r2, r3, #22
 8017e3a:	d4ef      	bmi.n	8017e1c <__smakebuf_r+0x18>
 8017e3c:	f023 0303 	bic.w	r3, r3, #3
 8017e40:	f043 0302 	orr.w	r3, r3, #2
 8017e44:	81a3      	strh	r3, [r4, #12]
 8017e46:	e7e3      	b.n	8017e10 <__smakebuf_r+0xc>
 8017e48:	4b0d      	ldr	r3, [pc, #52]	; (8017e80 <__smakebuf_r+0x7c>)
 8017e4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8017e4c:	89a3      	ldrh	r3, [r4, #12]
 8017e4e:	6020      	str	r0, [r4, #0]
 8017e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e54:	81a3      	strh	r3, [r4, #12]
 8017e56:	9b00      	ldr	r3, [sp, #0]
 8017e58:	6163      	str	r3, [r4, #20]
 8017e5a:	9b01      	ldr	r3, [sp, #4]
 8017e5c:	6120      	str	r0, [r4, #16]
 8017e5e:	b15b      	cbz	r3, 8017e78 <__smakebuf_r+0x74>
 8017e60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e64:	4630      	mov	r0, r6
 8017e66:	f000 f875 	bl	8017f54 <_isatty_r>
 8017e6a:	b128      	cbz	r0, 8017e78 <__smakebuf_r+0x74>
 8017e6c:	89a3      	ldrh	r3, [r4, #12]
 8017e6e:	f023 0303 	bic.w	r3, r3, #3
 8017e72:	f043 0301 	orr.w	r3, r3, #1
 8017e76:	81a3      	strh	r3, [r4, #12]
 8017e78:	89a0      	ldrh	r0, [r4, #12]
 8017e7a:	4305      	orrs	r5, r0
 8017e7c:	81a5      	strh	r5, [r4, #12]
 8017e7e:	e7cd      	b.n	8017e1c <__smakebuf_r+0x18>
 8017e80:	080171f5 	.word	0x080171f5

08017e84 <_read_r>:
 8017e84:	b538      	push	{r3, r4, r5, lr}
 8017e86:	4d07      	ldr	r5, [pc, #28]	; (8017ea4 <_read_r+0x20>)
 8017e88:	4604      	mov	r4, r0
 8017e8a:	4608      	mov	r0, r1
 8017e8c:	4611      	mov	r1, r2
 8017e8e:	2200      	movs	r2, #0
 8017e90:	602a      	str	r2, [r5, #0]
 8017e92:	461a      	mov	r2, r3
 8017e94:	f7e9 ff20 	bl	8001cd8 <_read>
 8017e98:	1c43      	adds	r3, r0, #1
 8017e9a:	d102      	bne.n	8017ea2 <_read_r+0x1e>
 8017e9c:	682b      	ldr	r3, [r5, #0]
 8017e9e:	b103      	cbz	r3, 8017ea2 <_read_r+0x1e>
 8017ea0:	6023      	str	r3, [r4, #0]
 8017ea2:	bd38      	pop	{r3, r4, r5, pc}
 8017ea4:	20009338 	.word	0x20009338

08017ea8 <_raise_r>:
 8017ea8:	291f      	cmp	r1, #31
 8017eaa:	b538      	push	{r3, r4, r5, lr}
 8017eac:	4604      	mov	r4, r0
 8017eae:	460d      	mov	r5, r1
 8017eb0:	d904      	bls.n	8017ebc <_raise_r+0x14>
 8017eb2:	2316      	movs	r3, #22
 8017eb4:	6003      	str	r3, [r0, #0]
 8017eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8017eba:	bd38      	pop	{r3, r4, r5, pc}
 8017ebc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017ebe:	b112      	cbz	r2, 8017ec6 <_raise_r+0x1e>
 8017ec0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ec4:	b94b      	cbnz	r3, 8017eda <_raise_r+0x32>
 8017ec6:	4620      	mov	r0, r4
 8017ec8:	f000 f830 	bl	8017f2c <_getpid_r>
 8017ecc:	462a      	mov	r2, r5
 8017ece:	4601      	mov	r1, r0
 8017ed0:	4620      	mov	r0, r4
 8017ed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ed6:	f000 b817 	b.w	8017f08 <_kill_r>
 8017eda:	2b01      	cmp	r3, #1
 8017edc:	d00a      	beq.n	8017ef4 <_raise_r+0x4c>
 8017ede:	1c59      	adds	r1, r3, #1
 8017ee0:	d103      	bne.n	8017eea <_raise_r+0x42>
 8017ee2:	2316      	movs	r3, #22
 8017ee4:	6003      	str	r3, [r0, #0]
 8017ee6:	2001      	movs	r0, #1
 8017ee8:	e7e7      	b.n	8017eba <_raise_r+0x12>
 8017eea:	2400      	movs	r4, #0
 8017eec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017ef0:	4628      	mov	r0, r5
 8017ef2:	4798      	blx	r3
 8017ef4:	2000      	movs	r0, #0
 8017ef6:	e7e0      	b.n	8017eba <_raise_r+0x12>

08017ef8 <raise>:
 8017ef8:	4b02      	ldr	r3, [pc, #8]	; (8017f04 <raise+0xc>)
 8017efa:	4601      	mov	r1, r0
 8017efc:	6818      	ldr	r0, [r3, #0]
 8017efe:	f7ff bfd3 	b.w	8017ea8 <_raise_r>
 8017f02:	bf00      	nop
 8017f04:	2000002c 	.word	0x2000002c

08017f08 <_kill_r>:
 8017f08:	b538      	push	{r3, r4, r5, lr}
 8017f0a:	4d07      	ldr	r5, [pc, #28]	; (8017f28 <_kill_r+0x20>)
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	4604      	mov	r4, r0
 8017f10:	4608      	mov	r0, r1
 8017f12:	4611      	mov	r1, r2
 8017f14:	602b      	str	r3, [r5, #0]
 8017f16:	f7e9 fec3 	bl	8001ca0 <_kill>
 8017f1a:	1c43      	adds	r3, r0, #1
 8017f1c:	d102      	bne.n	8017f24 <_kill_r+0x1c>
 8017f1e:	682b      	ldr	r3, [r5, #0]
 8017f20:	b103      	cbz	r3, 8017f24 <_kill_r+0x1c>
 8017f22:	6023      	str	r3, [r4, #0]
 8017f24:	bd38      	pop	{r3, r4, r5, pc}
 8017f26:	bf00      	nop
 8017f28:	20009338 	.word	0x20009338

08017f2c <_getpid_r>:
 8017f2c:	f7e9 beb0 	b.w	8001c90 <_getpid>

08017f30 <_fstat_r>:
 8017f30:	b538      	push	{r3, r4, r5, lr}
 8017f32:	4d07      	ldr	r5, [pc, #28]	; (8017f50 <_fstat_r+0x20>)
 8017f34:	2300      	movs	r3, #0
 8017f36:	4604      	mov	r4, r0
 8017f38:	4608      	mov	r0, r1
 8017f3a:	4611      	mov	r1, r2
 8017f3c:	602b      	str	r3, [r5, #0]
 8017f3e:	f7e9 ff10 	bl	8001d62 <_fstat>
 8017f42:	1c43      	adds	r3, r0, #1
 8017f44:	d102      	bne.n	8017f4c <_fstat_r+0x1c>
 8017f46:	682b      	ldr	r3, [r5, #0]
 8017f48:	b103      	cbz	r3, 8017f4c <_fstat_r+0x1c>
 8017f4a:	6023      	str	r3, [r4, #0]
 8017f4c:	bd38      	pop	{r3, r4, r5, pc}
 8017f4e:	bf00      	nop
 8017f50:	20009338 	.word	0x20009338

08017f54 <_isatty_r>:
 8017f54:	b538      	push	{r3, r4, r5, lr}
 8017f56:	4d06      	ldr	r5, [pc, #24]	; (8017f70 <_isatty_r+0x1c>)
 8017f58:	2300      	movs	r3, #0
 8017f5a:	4604      	mov	r4, r0
 8017f5c:	4608      	mov	r0, r1
 8017f5e:	602b      	str	r3, [r5, #0]
 8017f60:	f7e9 ff0f 	bl	8001d82 <_isatty>
 8017f64:	1c43      	adds	r3, r0, #1
 8017f66:	d102      	bne.n	8017f6e <_isatty_r+0x1a>
 8017f68:	682b      	ldr	r3, [r5, #0]
 8017f6a:	b103      	cbz	r3, 8017f6e <_isatty_r+0x1a>
 8017f6c:	6023      	str	r3, [r4, #0]
 8017f6e:	bd38      	pop	{r3, r4, r5, pc}
 8017f70:	20009338 	.word	0x20009338

08017f74 <_init>:
 8017f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f76:	bf00      	nop
 8017f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f7a:	bc08      	pop	{r3}
 8017f7c:	469e      	mov	lr, r3
 8017f7e:	4770      	bx	lr

08017f80 <_fini>:
 8017f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f82:	bf00      	nop
 8017f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f86:	bc08      	pop	{r3}
 8017f88:	469e      	mov	lr, r3
 8017f8a:	4770      	bx	lr

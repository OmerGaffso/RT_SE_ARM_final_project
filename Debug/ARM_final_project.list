
ARM_final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  0800a3ac  0800a3ac  0001a3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a608  0800a608  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a608  0800a608  0001a608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a610  0800a610  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a610  0800a610  0001a610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a614  0800a614  0001a614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b4c  20000070  0800a688  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  0800a688  00020bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018172  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000334f  00000000  00000000  00038212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0003b568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028a1c  00000000  00000000  0003d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a89  00000000  00000000  0006638c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee29e  00000000  00000000  0007ee15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d0b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000574c  00000000  00000000  0016d104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a394 	.word	0x0800a394

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800a394 	.word	0x0800a394

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f001 f98d 	bl	80018d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f81a 	bl	80005f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init(); 	// DMA init here so it won't turn off when editing settings
 80005c0:	f000 fa36 	bl	8000a30 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 fa96 	bl	8000af4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 f9d4 	bl	8000974 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 fa02 	bl	80009d4 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 80005d0:	f000 f970 	bl	80008b4 <MX_UART4_Init>
  MX_I2C2_Init();
 80005d4:	f000 f876 	bl	80006c4 <MX_I2C2_Init>
  MX_I2C4_Init();
 80005d8:	f000 f8b4 	bl	8000744 <MX_I2C4_Init>
  MX_SPI1_Init();
 80005dc:	f000 f8f2 	bl	80007c4 <MX_SPI1_Init>
  MX_SPI4_Init();
 80005e0:	f000 f92e 	bl	8000840 <MX_SPI4_Init>
  MX_DMA_Init();
 80005e4:	f000 fa24 	bl	8000a30 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f994 	bl	8000914 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rtg_main();
 80005ec:	f008 f88a 	bl	8008704 <rtg_main>
 80005f0:	e7fc      	b.n	80005ec <main+0x38>
	...

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f008 fb6a 	bl	8008cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000618:	f003 fe94 	bl	8004344 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	4b27      	ldr	r3, [pc, #156]	; (80006bc <SystemClock_Config+0xc8>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a26      	ldr	r2, [pc, #152]	; (80006bc <SystemClock_Config+0xc8>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <SystemClock_Config+0xc8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xcc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063c:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <SystemClock_Config+0xcc>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <SystemClock_Config+0xcc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000654:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000668:	2348      	movs	r3, #72	; 0x48
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000670:	2303      	movs	r3, #3
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f003 fe73 	bl	8004364 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 fb3a 	bl	8000cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2102      	movs	r1, #2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 f901 	bl	80048ac <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b0:	f000 fb24 	bl	8000cfc <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	; (8000738 <MX_I2C2_Init+0x74>)
 80006ca:	4a1c      	ldr	r2, [pc, #112]	; (800073c <MX_I2C2_Init+0x78>)
 80006cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80006ce:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_I2C2_Init+0x74>)
 80006d0:	4a1b      	ldr	r2, [pc, #108]	; (8000740 <MX_I2C2_Init+0x7c>)
 80006d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006d4:	4b18      	ldr	r3, [pc, #96]	; (8000738 <MX_I2C2_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_I2C2_Init+0x74>)
 80006dc:	2201      	movs	r2, #1
 80006de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_I2C2_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_I2C2_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C2_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C2_Init+0x74>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C2_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006fe:	480e      	ldr	r0, [pc, #56]	; (8000738 <MX_I2C2_Init+0x74>)
 8000700:	f002 f85a 	bl	80027b8 <HAL_I2C_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800070a:	f000 faf7 	bl	8000cfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800070e:	2100      	movs	r1, #0
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <MX_I2C2_Init+0x74>)
 8000712:	f003 fc37 	bl	8003f84 <HAL_I2CEx_ConfigAnalogFilter>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800071c:	f000 faee 	bl	8000cfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000720:	2100      	movs	r1, #0
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_I2C2_Init+0x74>)
 8000724:	f003 fc79 	bl	800401a <HAL_I2CEx_ConfigDigitalFilter>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800072e:	f000 fae5 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000008c 	.word	0x2000008c
 800073c:	40005800 	.word	0x40005800
 8000740:	00808cd2 	.word	0x00808cd2

08000744 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_I2C4_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_I2C4_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_I2C4_Init+0x74>)
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <MX_I2C4_Init+0x7c>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 44;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_I2C4_Init+0x74>)
 8000756:	222c      	movs	r2, #44	; 0x2c
 8000758:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_I2C4_Init+0x74>)
 800075c:	2201      	movs	r2, #1
 800075e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_I2C4_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_I2C4_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C4_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C4_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C4_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <MX_I2C4_Init+0x74>)
 8000780:	f002 f81a 	bl	80027b8 <HAL_I2C_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800078a:	f000 fab7 	bl	8000cfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800078e:	2100      	movs	r1, #0
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <MX_I2C4_Init+0x74>)
 8000792:	f003 fbf7 	bl	8003f84 <HAL_I2CEx_ConfigAnalogFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800079c:	f000 faae 	bl	8000cfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80007a0:	2100      	movs	r1, #0
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_I2C4_Init+0x74>)
 80007a4:	f003 fc39 	bl	800401a <HAL_I2CEx_ConfigDigitalFilter>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80007ae:	f000 faa5 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000e0 	.word	0x200000e0
 80007bc:	40006000 	.word	0x40006000
 80007c0:	00808cd2 	.word	0x00808cd2

080007c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_SPI1_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_SPI1_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_SPI1_Init+0x74>)
 80007d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_SPI1_Init+0x74>)
 80007d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_SPI1_Init+0x74>)
 80007e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_SPI1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_SPI1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_SPI1_Init+0x74>)
 80007f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_SPI1_Init+0x74>)
 80007fc:	2228      	movs	r2, #40	; 0x28
 80007fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MX_SPI1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_SPI1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_SPI1_Init+0x74>)
 8000814:	2207      	movs	r2, #7
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_SPI1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_SPI1_Init+0x74>)
 8000820:	2208      	movs	r2, #8
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_SPI1_Init+0x74>)
 8000826:	f004 fe57 	bl	80054d8 <HAL_SPI_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000830:	f000 fa64 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000134 	.word	0x20000134
 800083c:	40013000 	.word	0x40013000

08000840 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_SPI4_Init+0x6c>)
 8000846:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <MX_SPI4_Init+0x70>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_SPI4_Init+0x6c>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_SPI4_Init+0x6c>)
 8000852:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000856:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_SPI4_Init+0x6c>)
 800085a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800085e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_SPI4_Init+0x6c>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_SPI4_Init+0x6c>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_SPI4_Init+0x6c>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_SPI4_Init+0x6c>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_SPI4_Init+0x6c>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_SPI4_Init+0x6c>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_SPI4_Init+0x6c>)
 8000886:	2207      	movs	r2, #7
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_SPI4_Init+0x6c>)
 800088c:	2200      	movs	r2, #0
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_SPI4_Init+0x6c>)
 8000892:	2200      	movs	r2, #0
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_SPI4_Init+0x6c>)
 8000898:	f004 fe1e 	bl	80054d8 <HAL_SPI_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_SPI4_Init+0x66>
  {
    Error_Handler();
 80008a2:	f000 fa2b 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000198 	.word	0x20000198
 80008b0:	40013400 	.word	0x40013400

080008b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_UART4_Init+0x58>)
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <MX_UART4_Init+0x5c>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_UART4_Init+0x58>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_UART4_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_UART4_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_UART4_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_UART4_Init+0x58>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_UART4_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_UART4_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_UART4_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_UART4_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_UART4_Init+0x58>)
 80008f8:	f005 fec6 	bl	8006688 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000902:	f000 f9fb 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000037c 	.word	0x2000037c
 8000910:	40004c00 	.word	0x40004c00

08000914 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART2_UART_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MX_USART2_UART_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART2_UART_Init+0x58>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART2_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART2_UART_Init+0x58>)
 8000958:	f005 fe96 	bl	8006688 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f9cb 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000404 	.word	0x20000404
 8000970:	40004400 	.word	0x40004400

08000974 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <MX_USART3_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	; (80009d0 <MX_USART3_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_USART3_UART_Init+0x58>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_USART3_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_USART3_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <MX_USART3_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_USART3_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_USART3_UART_Init+0x58>)
 80009b8:	f005 fe66 	bl	8006688 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 f99b 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000048c 	.word	0x2000048c
 80009d0:	40004800 	.word	0x40004800

080009d4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009d8:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2206      	movs	r2, #6
 80009e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a18:	f003 fb4b 	bl	80040b2 <HAL_PCD_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 f96b 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000694 	.word	0x20000694

08000a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <MX_DMA_Init+0xc0>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a2d      	ldr	r2, [pc, #180]	; (8000af0 <MX_DMA_Init+0xc0>)
 8000a3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <MX_DMA_Init+0xc0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_DMA_Init+0xc0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a27      	ldr	r2, [pc, #156]	; (8000af0 <MX_DMA_Init+0xc0>)
 8000a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <MX_DMA_Init+0xc0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	200d      	movs	r0, #13
 8000a6c:	f001 f88f 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a70:	200d      	movs	r0, #13
 8000a72:	f001 f8a8 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f001 f887 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a80:	200f      	movs	r0, #15
 8000a82:	f001 f8a0 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2010      	movs	r0, #16
 8000a8c:	f001 f87f 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a90:	2010      	movs	r0, #16
 8000a92:	f001 f898 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2011      	movs	r0, #17
 8000a9c:	f001 f877 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000aa0:	2011      	movs	r0, #17
 8000aa2:	f001 f890 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2038      	movs	r0, #56	; 0x38
 8000aac:	f001 f86f 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ab0:	2038      	movs	r0, #56	; 0x38
 8000ab2:	f001 f888 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2039      	movs	r0, #57	; 0x39
 8000abc:	f001 f867 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ac0:	2039      	movs	r0, #57	; 0x39
 8000ac2:	f001 f880 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	203a      	movs	r0, #58	; 0x3a
 8000acc:	f001 f85f 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000ad0:	203a      	movs	r0, #58	; 0x3a
 8000ad2:	f001 f878 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	203b      	movs	r0, #59	; 0x3b
 8000adc:	f001 f857 	bl	8001b8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ae0:	203b      	movs	r0, #59	; 0x3b
 8000ae2:	f001 f870 	bl	8001bc6 <HAL_NVIC_EnableIRQ>

}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0a:	4b76      	ldr	r3, [pc, #472]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a75      	ldr	r2, [pc, #468]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b10:	f043 0310 	orr.w	r3, r3, #16
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b73      	ldr	r3, [pc, #460]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b22:	4b70      	ldr	r3, [pc, #448]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a6f      	ldr	r2, [pc, #444]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b6d      	ldr	r3, [pc, #436]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b3a:	4b6a      	ldr	r3, [pc, #424]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a69      	ldr	r2, [pc, #420]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b67      	ldr	r3, [pc, #412]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	4b64      	ldr	r3, [pc, #400]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a63      	ldr	r2, [pc, #396]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b61      	ldr	r3, [pc, #388]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b5e      	ldr	r3, [pc, #376]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a5d      	ldr	r2, [pc, #372]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b5b      	ldr	r3, [pc, #364]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b82:	4b58      	ldr	r3, [pc, #352]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a57      	ldr	r2, [pc, #348]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b55      	ldr	r3, [pc, #340]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b9a:	4b52      	ldr	r3, [pc, #328]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a51      	ldr	r2, [pc, #324]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b4f      	ldr	r3, [pc, #316]	; (8000ce4 <MX_GPIO_Init+0x1f0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bb8:	484b      	ldr	r0, [pc, #300]	; (8000ce8 <MX_GPIO_Init+0x1f4>)
 8000bba:	f001 fde3 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2140      	movs	r1, #64	; 0x40
 8000bc2:	484a      	ldr	r0, [pc, #296]	; (8000cec <MX_GPIO_Init+0x1f8>)
 8000bc4:	f001 fdde 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4844      	ldr	r0, [pc, #272]	; (8000cf0 <MX_GPIO_Init+0x1fc>)
 8000be0:	f001 fc24 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000be4:	2332      	movs	r3, #50	; 0x32
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf4:	230b      	movs	r3, #11
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	483c      	ldr	r0, [pc, #240]	; (8000cf0 <MX_GPIO_Init+0x1fc>)
 8000c00:	f001 fc14 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c04:	2386      	movs	r3, #134	; 0x86
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c14:	230b      	movs	r3, #11
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4835      	ldr	r0, [pc, #212]	; (8000cf4 <MX_GPIO_Init+0x200>)
 8000c20:	f001 fc04 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c24:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	482a      	ldr	r0, [pc, #168]	; (8000ce8 <MX_GPIO_Init+0x1f4>)
 8000c3e:	f001 fbf5 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c42:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000c54:	2308      	movs	r3, #8
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4826      	ldr	r0, [pc, #152]	; (8000cf8 <MX_GPIO_Init+0x204>)
 8000c60:	f001 fbe4 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c76:	230b      	movs	r3, #11
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4819      	ldr	r0, [pc, #100]	; (8000ce8 <MX_GPIO_Init+0x1f4>)
 8000c82:	f001 fbd3 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c86:	2340      	movs	r3, #64	; 0x40
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4813      	ldr	r0, [pc, #76]	; (8000cec <MX_GPIO_Init+0x1f8>)
 8000c9e:	f001 fbc5 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <MX_GPIO_Init+0x1f8>)
 8000cb6:	f001 fbb9 	bl	800242c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ccc:	230b      	movs	r3, #11
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_GPIO_Init+0x1f8>)
 8000cd8:	f001 fba8 	bl	800242c <HAL_GPIO_Init>

}
 8000cdc:	bf00      	nop
 8000cde:	3730      	adds	r7, #48	; 0x30
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020400 	.word	0x40020400
 8000cec:	40021800 	.word	0x40021800
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40021000 	.word	0x40021000

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <Error_Handler+0x8>
	...

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_MspInit+0x44>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_MspInit+0x44>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_MspInit+0x44>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x44>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x44>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x44>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0ac      	sub	sp, #176	; 0xb0
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d68:	f107 0318 	add.w	r3, r7, #24
 8000d6c:	2284      	movs	r2, #132	; 0x84
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f007 ffb3 	bl	8008cdc <memset>
  if(hi2c->Instance==I2C2)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a4c      	ldr	r2, [pc, #304]	; (8000eac <HAL_I2C_MspInit+0x15c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d146      	bne.n	8000e0e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d8c:	f107 0318 	add.w	r3, r7, #24
 8000d90:	4618      	mov	r0, r3
 8000d92:	f003 ffb1 	bl	8004cf8 <HAL_RCCEx_PeriphCLKConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000d9c:	f7ff ffae 	bl	8000cfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <HAL_I2C_MspInit+0x160>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a42      	ldr	r2, [pc, #264]	; (8000eb0 <HAL_I2C_MspInit+0x160>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <HAL_I2C_MspInit+0x160>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000db8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc0:	2312      	movs	r3, #18
 8000dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4835      	ldr	r0, [pc, #212]	; (8000eb4 <HAL_I2C_MspInit+0x164>)
 8000de0:	f001 fb24 	bl	800242c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000de4:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <HAL_I2C_MspInit+0x160>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	4a31      	ldr	r2, [pc, #196]	; (8000eb0 <HAL_I2C_MspInit+0x160>)
 8000dea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dee:	6413      	str	r3, [r2, #64]	; 0x40
 8000df0:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <HAL_I2C_MspInit+0x160>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2021      	movs	r0, #33	; 0x21
 8000e02:	f000 fec4 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000e06:	2021      	movs	r0, #33	; 0x21
 8000e08:	f000 fedd 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000e0c:	e04a      	b.n	8000ea4 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C4)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <HAL_I2C_MspInit+0x168>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d145      	bne.n	8000ea4 <HAL_I2C_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 ff65 	bl	8004cf8 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_I2C_MspInit+0xe8>
      Error_Handler();
 8000e34:	f7ff ff62 	bl	8000cfc <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <HAL_I2C_MspInit+0x160>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <HAL_I2C_MspInit+0x160>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	6313      	str	r3, [r2, #48]	; 0x30
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <HAL_I2C_MspInit+0x160>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e50:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e58:	2312      	movs	r3, #18
 8000e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e74:	4619      	mov	r1, r3
 8000e76:	4811      	ldr	r0, [pc, #68]	; (8000ebc <HAL_I2C_MspInit+0x16c>)
 8000e78:	f001 fad8 	bl	800242c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_I2C_MspInit+0x160>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_I2C_MspInit+0x160>)
 8000e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_I2C_MspInit+0x160>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2100      	movs	r1, #0
 8000e98:	205f      	movs	r0, #95	; 0x5f
 8000e9a:	f000 fe78 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8000e9e:	205f      	movs	r0, #95	; 0x5f
 8000ea0:	f000 fe91 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
}
 8000ea4:	bf00      	nop
 8000ea6:	37b0      	adds	r7, #176	; 0xb0
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40005800 	.word	0x40005800
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	40006000 	.word	0x40006000
 8000ebc:	40020c00 	.word	0x40020c00

08000ec0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4aa1      	ldr	r2, [pc, #644]	; (8001164 <HAL_SPI_MspInit+0x2a4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	f040 80a9 	bne.w	8001036 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ee4:	4ba0      	ldr	r3, [pc, #640]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee8:	4a9f      	ldr	r2, [pc, #636]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8000eea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eee:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef0:	4b9d      	ldr	r3, [pc, #628]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b9a      	ldr	r3, [pc, #616]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f00:	4a99      	ldr	r2, [pc, #612]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6313      	str	r3, [r2, #48]	; 0x30
 8000f08:	4b97      	ldr	r3, [pc, #604]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f14:	4b94      	ldr	r3, [pc, #592]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a93      	ldr	r2, [pc, #588]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f20:	4b91      	ldr	r3, [pc, #580]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f3c:	2305      	movs	r3, #5
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4889      	ldr	r0, [pc, #548]	; (800116c <HAL_SPI_MspInit+0x2ac>)
 8000f48:	f001 fa70 	bl	800242c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f4c:	2338      	movs	r3, #56	; 0x38
 8000f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f5c:	2305      	movs	r3, #5
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4882      	ldr	r0, [pc, #520]	; (8001170 <HAL_SPI_MspInit+0x2b0>)
 8000f68:	f001 fa60 	bl	800242c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8000f6c:	4b81      	ldr	r3, [pc, #516]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000f6e:	4a82      	ldr	r2, [pc, #520]	; (8001178 <HAL_SPI_MspInit+0x2b8>)
 8000f70:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000f72:	4b80      	ldr	r3, [pc, #512]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000f74:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7a:	4b7e      	ldr	r3, [pc, #504]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b7c      	ldr	r3, [pc, #496]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b7b      	ldr	r3, [pc, #492]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f8e:	4b79      	ldr	r3, [pc, #484]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f94:	4b77      	ldr	r3, [pc, #476]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f9a:	4b76      	ldr	r3, [pc, #472]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa0:	4b74      	ldr	r3, [pc, #464]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa6:	4b73      	ldr	r3, [pc, #460]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000fac:	4871      	ldr	r0, [pc, #452]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000fae:	f000 fe25 	bl	8001bfc <HAL_DMA_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8000fb8:	f7ff fea0 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a6d      	ldr	r2, [pc, #436]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000fc0:	659a      	str	r2, [r3, #88]	; 0x58
 8000fc2:	4a6c      	ldr	r2, [pc, #432]	; (8001174 <HAL_SPI_MspInit+0x2b4>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000fc8:	4b6c      	ldr	r3, [pc, #432]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 8000fca:	4a6d      	ldr	r2, [pc, #436]	; (8001180 <HAL_SPI_MspInit+0x2c0>)
 8000fcc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000fce:	4b6b      	ldr	r3, [pc, #428]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 8000fd0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fd6:	4b69      	ldr	r3, [pc, #420]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 8000fd8:	2240      	movs	r2, #64	; 0x40
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fdc:	4b67      	ldr	r3, [pc, #412]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	4b66      	ldr	r3, [pc, #408]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 8000fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fea:	4b64      	ldr	r3, [pc, #400]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff0:	4b62      	ldr	r3, [pc, #392]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ff6:	4b61      	ldr	r3, [pc, #388]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffc:	4b5f      	ldr	r3, [pc, #380]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001002:	4b5e      	ldr	r3, [pc, #376]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001008:	485c      	ldr	r0, [pc, #368]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 800100a:	f000 fdf7 	bl	8001bfc <HAL_DMA_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001014:	f7ff fe72 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a58      	ldr	r2, [pc, #352]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 800101c:	655a      	str	r2, [r3, #84]	; 0x54
 800101e:	4a57      	ldr	r2, [pc, #348]	; (800117c <HAL_SPI_MspInit+0x2bc>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2023      	movs	r0, #35	; 0x23
 800102a:	f000 fdb0 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800102e:	2023      	movs	r0, #35	; 0x23
 8001030:	f000 fdc9 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001034:	e091      	b.n	800115a <HAL_SPI_MspInit+0x29a>
  else if(hspi->Instance==SPI4)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a52      	ldr	r2, [pc, #328]	; (8001184 <HAL_SPI_MspInit+0x2c4>)
 800103c:	4293      	cmp	r3, r2
 800103e:	f040 808c 	bne.w	800115a <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001042:	4b49      	ldr	r3, [pc, #292]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a48      	ldr	r2, [pc, #288]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8001048:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800105a:	4b43      	ldr	r3, [pc, #268]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a42      	ldr	r2, [pc, #264]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8001060:	f043 0310 	orr.w	r3, r3, #16
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b40      	ldr	r3, [pc, #256]	; (8001168 <HAL_SPI_MspInit+0x2a8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8001072:	2334      	movs	r3, #52	; 0x34
 8001074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001082:	2305      	movs	r3, #5
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001086:	f107 031c 	add.w	r3, r7, #28
 800108a:	4619      	mov	r1, r3
 800108c:	483e      	ldr	r0, [pc, #248]	; (8001188 <HAL_SPI_MspInit+0x2c8>)
 800108e:	f001 f9cd 	bl	800242c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001092:	4b3e      	ldr	r3, [pc, #248]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 8001094:	4a3e      	ldr	r2, [pc, #248]	; (8001190 <HAL_SPI_MspInit+0x2d0>)
 8001096:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001098:	4b3c      	ldr	r3, [pc, #240]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 800109a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800109e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010a0:	4b3a      	ldr	r3, [pc, #232]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a6:	4b39      	ldr	r3, [pc, #228]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010ac:	4b37      	ldr	r3, [pc, #220]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 80010ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b2:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010b4:	4b35      	ldr	r3, [pc, #212]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ba:	4b34      	ldr	r3, [pc, #208]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80010d2:	482e      	ldr	r0, [pc, #184]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 80010d4:	f000 fd92 	bl	8001bfc <HAL_DMA_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 80010de:	f7ff fe0d 	bl	8000cfc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a29      	ldr	r2, [pc, #164]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 80010e6:	659a      	str	r2, [r3, #88]	; 0x58
 80010e8:	4a28      	ldr	r2, [pc, #160]	; (800118c <HAL_SPI_MspInit+0x2cc>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 80010f0:	4a29      	ldr	r2, [pc, #164]	; (8001198 <HAL_SPI_MspInit+0x2d8>)
 80010f2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 80010f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fa:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010fc:	4b25      	ldr	r3, [pc, #148]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 80010fe:	2240      	movs	r2, #64	; 0x40
 8001100:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001102:	4b24      	ldr	r3, [pc, #144]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 800110a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800110e:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 800111e:	2200      	movs	r2, #0
 8001120:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800112e:	4819      	ldr	r0, [pc, #100]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 8001130:	f000 fd64 	bl	8001bfc <HAL_DMA_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 800113a:	f7ff fddf 	bl	8000cfc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 8001142:	655a      	str	r2, [r3, #84]	; 0x54
 8001144:	4a13      	ldr	r2, [pc, #76]	; (8001194 <HAL_SPI_MspInit+0x2d4>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	2054      	movs	r0, #84	; 0x54
 8001150:	f000 fd1d 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001154:	2054      	movs	r0, #84	; 0x54
 8001156:	f000 fd36 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3730      	adds	r7, #48	; 0x30
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40013000 	.word	0x40013000
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400
 8001174:	200001fc 	.word	0x200001fc
 8001178:	40026440 	.word	0x40026440
 800117c:	2000025c 	.word	0x2000025c
 8001180:	40026458 	.word	0x40026458
 8001184:	40013400 	.word	0x40013400
 8001188:	40021000 	.word	0x40021000
 800118c:	200002bc 	.word	0x200002bc
 8001190:	40026410 	.word	0x40026410
 8001194:	2000031c 	.word	0x2000031c
 8001198:	40026428 	.word	0x40026428

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0ae      	sub	sp, #184	; 0xb8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	2284      	movs	r2, #132	; 0x84
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f007 fd8d 	bl	8008cdc <memset>
  if(huart->Instance==UART4)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4aa6      	ldr	r2, [pc, #664]	; (8001460 <HAL_UART_MspInit+0x2c4>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	f040 80a2 	bne.w	8001312 <HAL_UART_MspInit+0x176>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80011ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f107 0320 	add.w	r3, r7, #32
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 fd8b 	bl	8004cf8 <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80011e8:	f7ff fd88 	bl	8000cfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011ec:	4b9d      	ldr	r3, [pc, #628]	; (8001464 <HAL_UART_MspInit+0x2c8>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a9c      	ldr	r2, [pc, #624]	; (8001464 <HAL_UART_MspInit+0x2c8>)
 80011f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
 80011f8:	4b9a      	ldr	r3, [pc, #616]	; (8001464 <HAL_UART_MspInit+0x2c8>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001204:	4b97      	ldr	r3, [pc, #604]	; (8001464 <HAL_UART_MspInit+0x2c8>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	4a96      	ldr	r2, [pc, #600]	; (8001464 <HAL_UART_MspInit+0x2c8>)
 800120a:	f043 0304 	orr.w	r3, r3, #4
 800120e:	6313      	str	r3, [r2, #48]	; 0x30
 8001210:	4b94      	ldr	r3, [pc, #592]	; (8001464 <HAL_UART_MspInit+0x2c8>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800121c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001220:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001236:	2308      	movs	r3, #8
 8001238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001240:	4619      	mov	r1, r3
 8001242:	4889      	ldr	r0, [pc, #548]	; (8001468 <HAL_UART_MspInit+0x2cc>)
 8001244:	f001 f8f2 	bl	800242c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001248:	4b88      	ldr	r3, [pc, #544]	; (800146c <HAL_UART_MspInit+0x2d0>)
 800124a:	4a89      	ldr	r2, [pc, #548]	; (8001470 <HAL_UART_MspInit+0x2d4>)
 800124c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800124e:	4b87      	ldr	r3, [pc, #540]	; (800146c <HAL_UART_MspInit+0x2d0>)
 8001250:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001254:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001256:	4b85      	ldr	r3, [pc, #532]	; (800146c <HAL_UART_MspInit+0x2d0>)
 8001258:	2240      	movs	r2, #64	; 0x40
 800125a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	4b83      	ldr	r3, [pc, #524]	; (800146c <HAL_UART_MspInit+0x2d0>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001262:	4b82      	ldr	r3, [pc, #520]	; (800146c <HAL_UART_MspInit+0x2d0>)
 8001264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001268:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800126a:	4b80      	ldr	r3, [pc, #512]	; (800146c <HAL_UART_MspInit+0x2d0>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001270:	4b7e      	ldr	r3, [pc, #504]	; (800146c <HAL_UART_MspInit+0x2d0>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001276:	4b7d      	ldr	r3, [pc, #500]	; (800146c <HAL_UART_MspInit+0x2d0>)
 8001278:	2200      	movs	r2, #0
 800127a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800127c:	4b7b      	ldr	r3, [pc, #492]	; (800146c <HAL_UART_MspInit+0x2d0>)
 800127e:	2200      	movs	r2, #0
 8001280:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001282:	4b7a      	ldr	r3, [pc, #488]	; (800146c <HAL_UART_MspInit+0x2d0>)
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001288:	4878      	ldr	r0, [pc, #480]	; (800146c <HAL_UART_MspInit+0x2d0>)
 800128a:	f000 fcb7 	bl	8001bfc <HAL_DMA_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8001294:	f7ff fd32 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a74      	ldr	r2, [pc, #464]	; (800146c <HAL_UART_MspInit+0x2d0>)
 800129c:	671a      	str	r2, [r3, #112]	; 0x70
 800129e:	4a73      	ldr	r2, [pc, #460]	; (800146c <HAL_UART_MspInit+0x2d0>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80012a4:	4b73      	ldr	r3, [pc, #460]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012a6:	4a74      	ldr	r2, [pc, #464]	; (8001478 <HAL_UART_MspInit+0x2dc>)
 80012a8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80012aa:	4b72      	ldr	r3, [pc, #456]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012b0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b2:	4b70      	ldr	r3, [pc, #448]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b8:	4b6e      	ldr	r3, [pc, #440]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012be:	4b6d      	ldr	r3, [pc, #436]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c6:	4b6b      	ldr	r3, [pc, #428]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012cc:	4b69      	ldr	r3, [pc, #420]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80012d2:	4b68      	ldr	r3, [pc, #416]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012d8:	4b66      	ldr	r3, [pc, #408]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012de:	4b65      	ldr	r3, [pc, #404]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80012e4:	4863      	ldr	r0, [pc, #396]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012e6:	f000 fc89 	bl	8001bfc <HAL_DMA_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 80012f0:	f7ff fd04 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a5f      	ldr	r2, [pc, #380]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012f8:	675a      	str	r2, [r3, #116]	; 0x74
 80012fa:	4a5e      	ldr	r2, [pc, #376]	; (8001474 <HAL_UART_MspInit+0x2d8>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2034      	movs	r0, #52	; 0x34
 8001306:	f000 fc42 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800130a:	2034      	movs	r0, #52	; 0x34
 800130c:	f000 fc5b 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001310:	e102      	b.n	8001518 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a59      	ldr	r2, [pc, #356]	; (800147c <HAL_UART_MspInit+0x2e0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	f040 80bb 	bne.w	8001494 <HAL_UART_MspInit+0x2f8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001322:	2300      	movs	r3, #0
 8001324:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	4618      	mov	r0, r3
 800132c:	f003 fce4 	bl	8004cf8 <HAL_RCCEx_PeriphCLKConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001336:	f7ff fce1 	bl	8000cfc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800133a:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <HAL_UART_MspInit+0x2c8>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a49      	ldr	r2, [pc, #292]	; (8001464 <HAL_UART_MspInit+0x2c8>)
 8001340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b47      	ldr	r3, [pc, #284]	; (8001464 <HAL_UART_MspInit+0x2c8>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001352:	4b44      	ldr	r3, [pc, #272]	; (8001464 <HAL_UART_MspInit+0x2c8>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a43      	ldr	r2, [pc, #268]	; (8001464 <HAL_UART_MspInit+0x2c8>)
 8001358:	f043 0308 	orr.w	r3, r3, #8
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b41      	ldr	r3, [pc, #260]	; (8001464 <HAL_UART_MspInit+0x2c8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800136a:	2360      	movs	r3, #96	; 0x60
 800136c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001382:	2307      	movs	r3, #7
 8001384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001388:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800138c:	4619      	mov	r1, r3
 800138e:	483c      	ldr	r0, [pc, #240]	; (8001480 <HAL_UART_MspInit+0x2e4>)
 8001390:	f001 f84c 	bl	800242c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001394:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 8001396:	4a3c      	ldr	r2, [pc, #240]	; (8001488 <HAL_UART_MspInit+0x2ec>)
 8001398:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800139a:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 800139c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 80013a4:	2240      	movs	r2, #64	; 0x40
 80013a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ae:	4b35      	ldr	r3, [pc, #212]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 80013b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b6:	4b33      	ldr	r3, [pc, #204]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013bc:	4b31      	ldr	r3, [pc, #196]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013c8:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80013d4:	482b      	ldr	r0, [pc, #172]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 80013d6:	f000 fc11 	bl	8001bfc <HAL_DMA_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_UART_MspInit+0x248>
      Error_Handler();
 80013e0:	f7ff fc8c 	bl	8000cfc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a27      	ldr	r2, [pc, #156]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 80013e8:	671a      	str	r2, [r3, #112]	; 0x70
 80013ea:	4a26      	ldr	r2, [pc, #152]	; (8001484 <HAL_UART_MspInit+0x2e8>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <HAL_UART_MspInit+0x2f0>)
 80013f2:	4a27      	ldr	r2, [pc, #156]	; (8001490 <HAL_UART_MspInit+0x2f4>)
 80013f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <HAL_UART_MspInit+0x2f0>)
 80013f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <HAL_UART_MspInit+0x2f0>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_UART_MspInit+0x2f0>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_UART_MspInit+0x2f0>)
 800140c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001410:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_UART_MspInit+0x2f0>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001418:	4b1c      	ldr	r3, [pc, #112]	; (800148c <HAL_UART_MspInit+0x2f0>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_UART_MspInit+0x2f0>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <HAL_UART_MspInit+0x2f0>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <HAL_UART_MspInit+0x2f0>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001430:	4816      	ldr	r0, [pc, #88]	; (800148c <HAL_UART_MspInit+0x2f0>)
 8001432:	f000 fbe3 	bl	8001bfc <HAL_DMA_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 800143c:	f7ff fc5e 	bl	8000cfc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <HAL_UART_MspInit+0x2f0>)
 8001444:	675a      	str	r2, [r3, #116]	; 0x74
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_UART_MspInit+0x2f0>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2100      	movs	r1, #0
 8001450:	2026      	movs	r0, #38	; 0x26
 8001452:	f000 fb9c 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001456:	2026      	movs	r0, #38	; 0x26
 8001458:	f000 fbb5 	bl	8001bc6 <HAL_NVIC_EnableIRQ>
}
 800145c:	e05c      	b.n	8001518 <HAL_UART_MspInit+0x37c>
 800145e:	bf00      	nop
 8001460:	40004c00 	.word	0x40004c00
 8001464:	40023800 	.word	0x40023800
 8001468:	40020800 	.word	0x40020800
 800146c:	20000514 	.word	0x20000514
 8001470:	40026070 	.word	0x40026070
 8001474:	20000574 	.word	0x20000574
 8001478:	40026040 	.word	0x40026040
 800147c:	40004400 	.word	0x40004400
 8001480:	40020c00 	.word	0x40020c00
 8001484:	200005d4 	.word	0x200005d4
 8001488:	400260a0 	.word	0x400260a0
 800148c:	20000634 	.word	0x20000634
 8001490:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <HAL_UART_MspInit+0x384>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d13c      	bne.n	8001518 <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800149e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a8:	f107 0320 	add.w	r3, r7, #32
 80014ac:	4618      	mov	r0, r3
 80014ae:	f003 fc23 	bl	8004cf8 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0x320>
      Error_Handler();
 80014b8:	f7ff fc20 	bl	8000cfc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014bc:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_UART_MspInit+0x388>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	4a18      	ldr	r2, [pc, #96]	; (8001524 <HAL_UART_MspInit+0x388>)
 80014c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c6:	6413      	str	r3, [r2, #64]	; 0x40
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <HAL_UART_MspInit+0x388>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <HAL_UART_MspInit+0x388>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	4a12      	ldr	r2, [pc, #72]	; (8001524 <HAL_UART_MspInit+0x388>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	6313      	str	r3, [r2, #48]	; 0x30
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_UART_MspInit+0x388>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001506:	2307      	movs	r3, #7
 8001508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001510:	4619      	mov	r1, r3
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <HAL_UART_MspInit+0x38c>)
 8001514:	f000 ff8a 	bl	800242c <HAL_GPIO_Init>
}
 8001518:	bf00      	nop
 800151a:	37b8      	adds	r7, #184	; 0xb8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40004800 	.word	0x40004800
 8001524:	40023800 	.word	0x40023800
 8001528:	40020c00 	.word	0x40020c00

0800152c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b0ac      	sub	sp, #176	; 0xb0
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001544:	f107 0318 	add.w	r3, r7, #24
 8001548:	2284      	movs	r2, #132	; 0x84
 800154a:	2100      	movs	r1, #0
 800154c:	4618      	mov	r0, r3
 800154e:	f007 fbc5 	bl	8008cdc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800155a:	d159      	bne.n	8001610 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800155c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001560:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001568:	f107 0318 	add.w	r3, r7, #24
 800156c:	4618      	mov	r0, r3
 800156e:	f003 fbc3 	bl	8004cf8 <HAL_RCCEx_PeriphCLKConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001578:	f7ff fbc0 	bl	8000cfc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157c:	4b26      	ldr	r3, [pc, #152]	; (8001618 <HAL_PCD_MspInit+0xec>)
 800157e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001580:	4a25      	ldr	r2, [pc, #148]	; (8001618 <HAL_PCD_MspInit+0xec>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6313      	str	r3, [r2, #48]	; 0x30
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <HAL_PCD_MspInit+0xec>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001594:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015ae:	230a      	movs	r3, #10
 80015b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015b8:	4619      	mov	r1, r3
 80015ba:	4818      	ldr	r0, [pc, #96]	; (800161c <HAL_PCD_MspInit+0xf0>)
 80015bc:	f000 ff36 	bl	800242c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015d8:	4619      	mov	r1, r3
 80015da:	4810      	ldr	r0, [pc, #64]	; (800161c <HAL_PCD_MspInit+0xf0>)
 80015dc:	f000 ff26 	bl	800242c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_PCD_MspInit+0xec>)
 80015e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <HAL_PCD_MspInit+0xec>)
 80015e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ea:	6353      	str	r3, [r2, #52]	; 0x34
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_PCD_MspInit+0xec>)
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4b07      	ldr	r3, [pc, #28]	; (8001618 <HAL_PCD_MspInit+0xec>)
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <HAL_PCD_MspInit+0xec>)
 80015fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001602:	6453      	str	r3, [r2, #68]	; 0x44
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <HAL_PCD_MspInit+0xec>)
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	37b0      	adds	r7, #176	; 0xb0
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler+0x4>

08001626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <MemManage_Handler+0x4>

08001632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler+0x4>

0800163e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166c:	f000 f970 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <DMA1_Stream2_IRQHandler+0x10>)
 800167a:	f000 fc5f 	bl	8001f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000574 	.word	0x20000574

08001688 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <DMA1_Stream4_IRQHandler+0x10>)
 800168e:	f000 fc55 	bl	8001f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000514 	.word	0x20000514

0800169c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016a0:	4802      	ldr	r0, [pc, #8]	; (80016ac <DMA1_Stream5_IRQHandler+0x10>)
 80016a2:	f000 fc4b 	bl	8001f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000634 	.word	0x20000634

080016b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <DMA1_Stream6_IRQHandler+0x10>)
 80016b6:	f000 fc41 	bl	8001f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200005d4 	.word	0x200005d4

080016c4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <I2C2_EV_IRQHandler+0x10>)
 80016ca:	f001 fa85 	bl	8002bd8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000008c 	.word	0x2000008c

080016d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <SPI1_IRQHandler+0x10>)
 80016de:	f004 fb4b 	bl	8005d78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000134 	.word	0x20000134

080016ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <USART2_IRQHandler+0x10>)
 80016f2:	f005 fa1f 	bl	8006b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000404 	.word	0x20000404

08001700 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <UART4_IRQHandler+0x10>)
 8001706:	f005 fa15 	bl	8006b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000037c 	.word	0x2000037c

08001714 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <DMA2_Stream0_IRQHandler+0x10>)
 800171a:	f000 fc0f 	bl	8001f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200002bc 	.word	0x200002bc

08001728 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <DMA2_Stream1_IRQHandler+0x10>)
 800172e:	f000 fc05 	bl	8001f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000031c 	.word	0x2000031c

0800173c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <DMA2_Stream2_IRQHandler+0x10>)
 8001742:	f000 fbfb 	bl	8001f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200001fc 	.word	0x200001fc

08001750 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <DMA2_Stream3_IRQHandler+0x10>)
 8001756:	f000 fbf1 	bl	8001f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000025c 	.word	0x2000025c

08001764 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <SPI4_IRQHandler+0x10>)
 800176a:	f004 fb05 	bl	8005d78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000198 	.word	0x20000198

08001778 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <I2C4_EV_IRQHandler+0x10>)
 800177e:	f001 fa2b 	bl	8002bd8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200000e0 	.word	0x200000e0

0800178c <_close>:
	}
	return len;
}

int _close(int file)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	return -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b4:	605a      	str	r2, [r3, #4]
	return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_isatty>:

int _isatty(int file)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017da:	b480      	push	{r7}
 80017dc:	b085      	sub	sp, #20
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
	return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f007 fa30 	bl	8008c88 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20050000 	.word	0x20050000
 8001854:	00000400 	.word	0x00000400
 8001858:	20000b9c 	.word	0x20000b9c
 800185c:	20000bc0 	.word	0x20000bc0

08001860 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188a:	490e      	ldr	r1, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a0:	4c0b      	ldr	r4, [pc, #44]	; (80018d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ae:	f7ff ffd7 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f007 f9ef 	bl	8008c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7fe fe7d 	bl	80005b4 <main>
  bx  lr    
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018c8:	0800a618 	.word	0x0800a618
  ldr r2, =_sbss
 80018cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018d0:	20000bbc 	.word	0x20000bbc

080018d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>

080018d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018da:	2003      	movs	r0, #3
 80018dc:	f000 f94c 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e0:	2000      	movs	r0, #0
 80018e2:	f000 f805 	bl	80018f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e6:	f7ff fa0f 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f8:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_InitTick+0x54>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_InitTick+0x58>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001906:	fbb3 f3f1 	udiv	r3, r3, r1
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f967 	bl	8001be2 <HAL_SYSTICK_Config>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e00e      	b.n	800193c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b0f      	cmp	r3, #15
 8001922:	d80a      	bhi.n	800193a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001924:	2200      	movs	r2, #0
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f000 f92f 	bl	8001b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001930:	4a06      	ldr	r2, [pc, #24]	; (800194c <HAL_InitTick+0x5c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000000 	.word	0x20000000
 8001948:	20000008 	.word	0x20000008
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_IncTick+0x20>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_IncTick+0x24>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a04      	ldr	r2, [pc, #16]	; (8001974 <HAL_IncTick+0x24>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000008 	.word	0x20000008
 8001974:	20000ba0 	.word	0x20000ba0

08001978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  return uwTick;
 800197c:	4b03      	ldr	r3, [pc, #12]	; (800198c <HAL_GetTick+0x14>)
 800197e:	681b      	ldr	r3, [r3, #0]
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000ba0 	.word	0x20000ba0

08001990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001998:	f7ff ffee 	bl	8001978 <HAL_GetTick>
 800199c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a8:	d005      	beq.n	80019b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_Delay+0x44>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b6:	bf00      	nop
 80019b8:	f7ff ffde 	bl	8001978 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d8f7      	bhi.n	80019b8 <HAL_Delay+0x28>
  {
  }
}
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008

080019d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <__NVIC_SetPriorityGrouping+0x40>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <__NVIC_SetPriorityGrouping+0x40>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00
 8001a1c:	05fa0000 	.word	0x05fa0000

08001a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <__NVIC_GetPriorityGrouping+0x18>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 0307 	and.w	r3, r3, #7
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4907      	ldr	r1, [pc, #28]	; (8001a74 <__NVIC_EnableIRQ+0x38>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000e100 	.word	0xe000e100

08001a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db0a      	blt.n	8001aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	490c      	ldr	r1, [pc, #48]	; (8001ac4 <__NVIC_SetPriority+0x4c>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa0:	e00a      	b.n	8001ab8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <__NVIC_SetPriority+0x50>)
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	3b04      	subs	r3, #4
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	761a      	strb	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f1c3 0307 	rsb	r3, r3, #7
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	bf28      	it	cs
 8001aea:	2304      	movcs	r3, #4
 8001aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3304      	adds	r3, #4
 8001af2:	2b06      	cmp	r3, #6
 8001af4:	d902      	bls.n	8001afc <NVIC_EncodePriority+0x30>
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3b03      	subs	r3, #3
 8001afa:	e000      	b.n	8001afe <NVIC_EncodePriority+0x32>
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	f04f 32ff 	mov.w	r2, #4294967295
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	401a      	ands	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	4313      	orrs	r3, r2
         );
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3724      	adds	r7, #36	; 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b44:	d301      	bcc.n	8001b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <SysTick_Config+0x40>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b52:	210f      	movs	r1, #15
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f7ff ff8e 	bl	8001a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SysTick_Config+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <SysTick_Config+0x40>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff29 	bl	80019d8 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba0:	f7ff ff3e 	bl	8001a20 <__NVIC_GetPriorityGrouping>
 8001ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff ff8e 	bl	8001acc <NVIC_EncodePriority>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff5d 	bl	8001a78 <__NVIC_SetPriority>
}
 8001bbe:	bf00      	nop
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff31 	bl	8001a3c <__NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffa2 	bl	8001b34 <SysTick_Config>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff feb6 	bl	8001978 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e099      	b.n	8001d4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c38:	e00f      	b.n	8001c5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c3a:	f7ff fe9d 	bl	8001978 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d908      	bls.n	8001c5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2203      	movs	r2, #3
 8001c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e078      	b.n	8001d4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1e8      	bne.n	8001c3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <HAL_DMA_Init+0x158>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d107      	bne.n	8001cc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f023 0307 	bic.w	r3, r3, #7
 8001cda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d117      	bne.n	8001d1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00e      	beq.n	8001d1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fb17 	bl	8002334 <DMA_CheckFifoParam>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e016      	b.n	8001d4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 face 	bl	80022c8 <DMA_CalcBaseAndBitshift>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	223f      	movs	r2, #63	; 0x3f
 8001d36:	409a      	lsls	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	f010803f 	.word	0xf010803f

08001d58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_DMA_Start_IT+0x26>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e048      	b.n	8001e10 <HAL_DMA_Start_IT+0xb8>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d137      	bne.n	8001e02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2202      	movs	r2, #2
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fa60 	bl	800226c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	223f      	movs	r2, #63	; 0x3f
 8001db2:	409a      	lsls	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0216 	orr.w	r2, r2, #22
 8001dc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dd6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0208 	orr.w	r2, r2, #8
 8001dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e005      	b.n	8001e0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e26:	f7ff fda7 	bl	8001978 <HAL_GetTick>
 8001e2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d008      	beq.n	8001e4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2280      	movs	r2, #128	; 0x80
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e052      	b.n	8001ef0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0216 	bic.w	r2, r2, #22
 8001e58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d103      	bne.n	8001e7a <HAL_DMA_Abort+0x62>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0208 	bic.w	r2, r2, #8
 8001e88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0201 	bic.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9a:	e013      	b.n	8001ec4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e9c:	f7ff fd6c 	bl	8001978 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d90c      	bls.n	8001ec4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e015      	b.n	8001ef0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1e4      	bne.n	8001e9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed6:	223f      	movs	r2, #63	; 0x3f
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d004      	beq.n	8001f16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00c      	b.n	8001f30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2205      	movs	r2, #5
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 0201 	bic.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001f48:	4b8e      	ldr	r3, [pc, #568]	; (8002184 <HAL_DMA_IRQHandler+0x248>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a8e      	ldr	r2, [pc, #568]	; (8002188 <HAL_DMA_IRQHandler+0x24c>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0a9b      	lsrs	r3, r3, #10
 8001f54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f66:	2208      	movs	r2, #8
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01a      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d013      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0204 	bic.w	r2, r2, #4
 8001f8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	2208      	movs	r2, #8
 8001f96:	409a      	lsls	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fac:	2201      	movs	r2, #1
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d012      	beq.n	8001fde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fca:	2201      	movs	r2, #1
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	f043 0202 	orr.w	r2, r3, #2
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d012      	beq.n	8002014 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00b      	beq.n	8002014 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	2204      	movs	r2, #4
 8002002:	409a      	lsls	r2, r3
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	2210      	movs	r2, #16
 800201a:	409a      	lsls	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d043      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d03c      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	2210      	movs	r2, #16
 8002038:	409a      	lsls	r2, r3
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d018      	beq.n	800207e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d108      	bne.n	800206c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d024      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4798      	blx	r3
 800206a:	e01f      	b.n	80020ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01b      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	4798      	blx	r3
 800207c:	e016      	b.n	80020ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0208 	bic.w	r2, r2, #8
 800209a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	2220      	movs	r2, #32
 80020b2:	409a      	lsls	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 808f 	beq.w	80021dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8087 	beq.w	80021dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	2220      	movs	r2, #32
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d136      	bne.n	8002154 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 0216 	bic.w	r2, r2, #22
 80020f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002104:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d103      	bne.n	8002116 <HAL_DMA_IRQHandler+0x1da>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0208 	bic.w	r2, r2, #8
 8002124:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	223f      	movs	r2, #63	; 0x3f
 800212c:	409a      	lsls	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002146:	2b00      	cmp	r3, #0
 8002148:	d07e      	beq.n	8002248 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	4798      	blx	r3
        }
        return;
 8002152:	e079      	b.n	8002248 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01d      	beq.n	800219e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10d      	bne.n	800218c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	2b00      	cmp	r3, #0
 8002176:	d031      	beq.n	80021dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
 8002180:	e02c      	b.n	80021dc <HAL_DMA_IRQHandler+0x2a0>
 8002182:	bf00      	nop
 8002184:	20000000 	.word	0x20000000
 8002188:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	2b00      	cmp	r3, #0
 8002192:	d023      	beq.n	80021dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
 800219c:	e01e      	b.n	80021dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10f      	bne.n	80021cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0210 	bic.w	r2, r2, #16
 80021ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d032      	beq.n	800224a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d022      	beq.n	8002236 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2205      	movs	r2, #5
 80021f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	3301      	adds	r3, #1
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	d307      	bcc.n	8002224 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f2      	bne.n	8002208 <HAL_DMA_IRQHandler+0x2cc>
 8002222:	e000      	b.n	8002226 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002224:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d005      	beq.n	800224a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	4798      	blx	r3
 8002246:	e000      	b.n	800224a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002248:	bf00      	nop
    }
  }
}
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225e:	b2db      	uxtb	r3, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002288:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d108      	bne.n	80022ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022aa:	e007      	b.n	80022bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3b10      	subs	r3, #16
 80022d8:	4a13      	ldr	r2, [pc, #76]	; (8002328 <DMA_CalcBaseAndBitshift+0x60>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <DMA_CalcBaseAndBitshift+0x64>)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d908      	bls.n	8002308 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <DMA_CalcBaseAndBitshift+0x68>)
 80022fe:	4013      	ands	r3, r2
 8002300:	1d1a      	adds	r2, r3, #4
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	659a      	str	r2, [r3, #88]	; 0x58
 8002306:	e006      	b.n	8002316 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <DMA_CalcBaseAndBitshift+0x68>)
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	aaaaaaab 	.word	0xaaaaaaab
 800232c:	0800a478 	.word	0x0800a478
 8002330:	fffffc00 	.word	0xfffffc00

08002334 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11f      	bne.n	800238e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d856      	bhi.n	8002402 <DMA_CheckFifoParam+0xce>
 8002354:	a201      	add	r2, pc, #4	; (adr r2, 800235c <DMA_CheckFifoParam+0x28>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	0800236d 	.word	0x0800236d
 8002360:	0800237f 	.word	0x0800237f
 8002364:	0800236d 	.word	0x0800236d
 8002368:	08002403 	.word	0x08002403
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d046      	beq.n	8002406 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237c:	e043      	b.n	8002406 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002386:	d140      	bne.n	800240a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238c:	e03d      	b.n	800240a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002396:	d121      	bne.n	80023dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d837      	bhi.n	800240e <DMA_CheckFifoParam+0xda>
 800239e:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <DMA_CheckFifoParam+0x70>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023bb 	.word	0x080023bb
 80023ac:	080023b5 	.word	0x080023b5
 80023b0:	080023cd 	.word	0x080023cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
      break;
 80023b8:	e030      	b.n	800241c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d025      	beq.n	8002412 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ca:	e022      	b.n	8002412 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023d4:	d11f      	bne.n	8002416 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023da:	e01c      	b.n	8002416 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d903      	bls.n	80023ea <DMA_CheckFifoParam+0xb6>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d003      	beq.n	80023f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023e8:	e018      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      break;
 80023ee:	e015      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00e      	beq.n	800241a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002400:	e00b      	b.n	800241a <DMA_CheckFifoParam+0xe6>
      break;
 8002402:	bf00      	nop
 8002404:	e00a      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 8002406:	bf00      	nop
 8002408:	e008      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e006      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e004      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e002      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;   
 8002416:	bf00      	nop
 8002418:	e000      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
    }
  } 
  
  return status; 
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e175      	b.n	8002738 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	429a      	cmp	r2, r3
 8002466:	f040 8164 	bne.w	8002732 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d005      	beq.n	8002482 <HAL_GPIO_Init+0x56>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d130      	bne.n	80024e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	2203      	movs	r2, #3
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 0201 	and.w	r2, r3, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d017      	beq.n	8002520 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d123      	bne.n	8002574 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	08da      	lsrs	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3208      	adds	r2, #8
 8002534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	220f      	movs	r2, #15
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3208      	adds	r2, #8
 800256e:	69b9      	ldr	r1, [r7, #24]
 8002570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0203 	and.w	r2, r3, #3
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80be 	beq.w	8002732 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	4b66      	ldr	r3, [pc, #408]	; (8002750 <HAL_GPIO_Init+0x324>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	4a65      	ldr	r2, [pc, #404]	; (8002750 <HAL_GPIO_Init+0x324>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	; 0x44
 80025c2:	4b63      	ldr	r3, [pc, #396]	; (8002750 <HAL_GPIO_Init+0x324>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025ce:	4a61      	ldr	r2, [pc, #388]	; (8002754 <HAL_GPIO_Init+0x328>)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a58      	ldr	r2, [pc, #352]	; (8002758 <HAL_GPIO_Init+0x32c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d037      	beq.n	800266a <HAL_GPIO_Init+0x23e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a57      	ldr	r2, [pc, #348]	; (800275c <HAL_GPIO_Init+0x330>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d031      	beq.n	8002666 <HAL_GPIO_Init+0x23a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a56      	ldr	r2, [pc, #344]	; (8002760 <HAL_GPIO_Init+0x334>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d02b      	beq.n	8002662 <HAL_GPIO_Init+0x236>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a55      	ldr	r2, [pc, #340]	; (8002764 <HAL_GPIO_Init+0x338>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d025      	beq.n	800265e <HAL_GPIO_Init+0x232>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a54      	ldr	r2, [pc, #336]	; (8002768 <HAL_GPIO_Init+0x33c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d01f      	beq.n	800265a <HAL_GPIO_Init+0x22e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a53      	ldr	r2, [pc, #332]	; (800276c <HAL_GPIO_Init+0x340>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d019      	beq.n	8002656 <HAL_GPIO_Init+0x22a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_GPIO_Init+0x344>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_GPIO_Init+0x226>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a51      	ldr	r2, [pc, #324]	; (8002774 <HAL_GPIO_Init+0x348>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00d      	beq.n	800264e <HAL_GPIO_Init+0x222>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a50      	ldr	r2, [pc, #320]	; (8002778 <HAL_GPIO_Init+0x34c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <HAL_GPIO_Init+0x21e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4f      	ldr	r2, [pc, #316]	; (800277c <HAL_GPIO_Init+0x350>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d101      	bne.n	8002646 <HAL_GPIO_Init+0x21a>
 8002642:	2309      	movs	r3, #9
 8002644:	e012      	b.n	800266c <HAL_GPIO_Init+0x240>
 8002646:	230a      	movs	r3, #10
 8002648:	e010      	b.n	800266c <HAL_GPIO_Init+0x240>
 800264a:	2308      	movs	r3, #8
 800264c:	e00e      	b.n	800266c <HAL_GPIO_Init+0x240>
 800264e:	2307      	movs	r3, #7
 8002650:	e00c      	b.n	800266c <HAL_GPIO_Init+0x240>
 8002652:	2306      	movs	r3, #6
 8002654:	e00a      	b.n	800266c <HAL_GPIO_Init+0x240>
 8002656:	2305      	movs	r3, #5
 8002658:	e008      	b.n	800266c <HAL_GPIO_Init+0x240>
 800265a:	2304      	movs	r3, #4
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x240>
 800265e:	2303      	movs	r3, #3
 8002660:	e004      	b.n	800266c <HAL_GPIO_Init+0x240>
 8002662:	2302      	movs	r3, #2
 8002664:	e002      	b.n	800266c <HAL_GPIO_Init+0x240>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_GPIO_Init+0x240>
 800266a:	2300      	movs	r3, #0
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f002 0203 	and.w	r2, r2, #3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4093      	lsls	r3, r2
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800267c:	4935      	ldr	r1, [pc, #212]	; (8002754 <HAL_GPIO_Init+0x328>)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268a:	4b3d      	ldr	r3, [pc, #244]	; (8002780 <HAL_GPIO_Init+0x354>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ae:	4a34      	ldr	r2, [pc, #208]	; (8002780 <HAL_GPIO_Init+0x354>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b4:	4b32      	ldr	r3, [pc, #200]	; (8002780 <HAL_GPIO_Init+0x354>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d8:	4a29      	ldr	r2, [pc, #164]	; (8002780 <HAL_GPIO_Init+0x354>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026de:	4b28      	ldr	r3, [pc, #160]	; (8002780 <HAL_GPIO_Init+0x354>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002702:	4a1f      	ldr	r2, [pc, #124]	; (8002780 <HAL_GPIO_Init+0x354>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_GPIO_Init+0x354>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <HAL_GPIO_Init+0x354>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	f67f ae86 	bls.w	800244c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40013800 	.word	0x40013800
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40021400 	.word	0x40021400
 8002770:	40021800 	.word	0x40021800
 8002774:	40021c00 	.word	0x40021c00
 8002778:	40022000 	.word	0x40022000
 800277c:	40022400 	.word	0x40022400
 8002780:	40013c00 	.word	0x40013c00

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027a0:	e003      	b.n	80027aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	041a      	lsls	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e07f      	b.n	80028ca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fab6 	bl	8000d50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	; 0x24
 80027e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002808:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002818:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d107      	bne.n	8002832 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	e006      	b.n	8002840 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800283e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d104      	bne.n	8002852 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002850:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_I2C_Init+0x11c>)
 800285e:	430b      	orrs	r3, r1
 8002860:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002870:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69d9      	ldr	r1, [r3, #28]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1a      	ldr	r2, [r3, #32]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	02008000 	.word	0x02008000

080028d8 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	460b      	mov	r3, r1
 80028e6:	817b      	strh	r3, [r7, #10]
 80028e8:	4613      	mov	r3, r2
 80028ea:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d153      	bne.n	80029a0 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002906:	d101      	bne.n	800290c <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
 800290a:	e04a      	b.n	80029a2 <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_I2C_Master_Transmit_IT+0x42>
 8002916:	2302      	movs	r3, #2
 8002918:	e043      	b.n	80029a2 <HAL_I2C_Master_Transmit_IT+0xca>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2221      	movs	r2, #33	; 0x21
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2210      	movs	r2, #16
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	893a      	ldrh	r2, [r7, #8]
 8002942:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4a19      	ldr	r2, [pc, #100]	; (80029ac <HAL_I2C_Master_Transmit_IT+0xd4>)
 8002948:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <HAL_I2C_Master_Transmit_IT+0xd8>)
 800294e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2bff      	cmp	r3, #255	; 0xff
 8002958:	d906      	bls.n	8002968 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	22ff      	movs	r2, #255	; 0xff
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e007      	b.n	8002978 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002976:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	b2da      	uxtb	r2, r3
 800297e:	8979      	ldrh	r1, [r7, #10]
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f001 fa02 	bl	8003d90 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002994:	2101      	movs	r1, #1
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f001 fa2c 	bl	8003df4 <I2C_Enable_IRQ>

    return HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	e000      	b.n	80029a2 <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	ffff0000 	.word	0xffff0000
 80029b0:	08002c8d 	.word	0x08002c8d
 80029b4:	80002000 	.word	0x80002000

080029b8 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af02      	add	r7, sp, #8
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	461a      	mov	r2, r3
 80029c4:	460b      	mov	r3, r1
 80029c6:	817b      	strh	r3, [r7, #10]
 80029c8:	4613      	mov	r3, r2
 80029ca:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d153      	bne.n	8002a80 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e6:	d101      	bne.n	80029ec <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80029e8:	2302      	movs	r3, #2
 80029ea:	e04a      	b.n	8002a82 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_I2C_Master_Receive_IT+0x42>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e043      	b.n	8002a82 <HAL_I2C_Master_Receive_IT+0xca>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2222      	movs	r2, #34	; 0x22
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	893a      	ldrh	r2, [r7, #8]
 8002a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_I2C_Master_Receive_IT+0xd4>)
 8002a28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_I2C_Master_Receive_IT+0xd8>)
 8002a2e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2bff      	cmp	r3, #255	; 0xff
 8002a38:	d906      	bls.n	8002a48 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	22ff      	movs	r2, #255	; 0xff
 8002a3e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002a40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e007      	b.n	8002a58 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a56:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	8979      	ldrh	r1, [r7, #10]
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <HAL_I2C_Master_Receive_IT+0xdc>)
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f001 f992 	bl	8003d90 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a74:	2102      	movs	r1, #2
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f001 f9bc 	bl	8003df4 <I2C_Enable_IRQ>

    return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e000      	b.n	8002a82 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	ffff0000 	.word	0xffff0000
 8002a90:	08002c8d 	.word	0x08002c8d
 8002a94:	80002400 	.word	0x80002400

08002a98 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d139      	bne.n	8002b26 <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_I2C_Slave_Transmit_IT+0x28>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e033      	b.n	8002b28 <HAL_I2C_Slave_Transmit_IT+0x90>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2221      	movs	r2, #33	; 0x21
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aec:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_I2C_Slave_Transmit_IT+0x98>)
 8002b08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a09      	ldr	r2, [pc, #36]	; (8002b34 <HAL_I2C_Slave_Transmit_IT+0x9c>)
 8002b0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002b18:	f248 0101 	movw	r1, #32769	; 0x8001
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f001 f969 	bl	8003df4 <I2C_Enable_IRQ>

    return HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e000      	b.n	8002b28 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002b26:	2302      	movs	r3, #2
  }
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	ffff0000 	.word	0xffff0000
 8002b34:	08002edd 	.word	0x08002edd

08002b38 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	4613      	mov	r3, r2
 8002b44:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d139      	bne.n	8002bc6 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_I2C_Slave_Receive_IT+0x28>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e033      	b.n	8002bc8 <HAL_I2C_Slave_Receive_IT+0x90>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2222      	movs	r2, #34	; 0x22
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b8c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	88fa      	ldrh	r2, [r7, #6]
 8002b98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <HAL_I2C_Slave_Receive_IT+0x98>)
 8002ba8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8002bae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002bb8:	f248 0102 	movw	r1, #32770	; 0x8002
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f001 f919 	bl	8003df4 <I2C_Enable_IRQ>

    return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e000      	b.n	8002bc8 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
  }
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	ffff0000 	.word	0xffff0000
 8002bd4:	08002edd 	.word	0x08002edd

08002bd8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	68f9      	ldr	r1, [r7, #12]
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	4798      	blx	r3
  }
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	70fb      	strb	r3, [r7, #3]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <I2C_Master_ISR_IT+0x1e>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e114      	b.n	8002ed4 <I2C_Master_ISR_IT+0x248>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	091b      	lsrs	r3, r3, #4
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d013      	beq.n	8002ce6 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00d      	beq.n	8002ce6 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2210      	movs	r2, #16
 8002cd0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	f043 0204 	orr.w	r2, r3, #4
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f001 f813 	bl	8003d0a <I2C_Flush_TXDR>
 8002ce4:	e0e1      	b.n	8002eaa <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	089b      	lsrs	r3, r3, #2
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d023      	beq.n	8002d3a <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01d      	beq.n	8002d3a <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d38:	e0b7      	b.n	8002eaa <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01e      	beq.n	8002d84 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d018      	beq.n	8002d84 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d82:	e092      	b.n	8002eaa <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	09db      	lsrs	r3, r3, #7
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d05d      	beq.n	8002e4c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	099b      	lsrs	r3, r3, #6
 8002d94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d057      	beq.n	8002e4c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d040      	beq.n	8002e28 <I2C_Master_ISR_IT+0x19c>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d13c      	bne.n	8002e28 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dba:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2bff      	cmp	r3, #255	; 0xff
 8002dc4:	d90e      	bls.n	8002de4 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	8a79      	ldrh	r1, [r7, #18]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 ffd7 	bl	8003d90 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de2:	e032      	b.n	8002e4a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df6:	d00b      	beq.n	8002e10 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	8a79      	ldrh	r1, [r7, #18]
 8002e04:	2000      	movs	r0, #0
 8002e06:	9000      	str	r0, [sp, #0]
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 ffc1 	bl	8003d90 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e0e:	e01c      	b.n	8002e4a <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	8a79      	ldrh	r1, [r7, #18]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 ffb5 	bl	8003d90 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e26:	e010      	b.n	8002e4a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e36:	d003      	beq.n	8002e40 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fba9 	bl	8003590 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e3e:	e034      	b.n	8002eaa <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002e40:	2140      	movs	r1, #64	; 0x40
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fe6a 	bl	8003b1c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e48:	e02f      	b.n	8002eaa <I2C_Master_ISR_IT+0x21e>
 8002e4a:	e02e      	b.n	8002eaa <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	099b      	lsrs	r3, r3, #6
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d028      	beq.n	8002eaa <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	099b      	lsrs	r3, r3, #6
 8002e5c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d022      	beq.n	8002eaa <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d119      	bne.n	8002ea2 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e7c:	d015      	beq.n	8002eaa <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e86:	d108      	bne.n	8002e9a <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	e007      	b.n	8002eaa <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 fb78 	bl	8003590 <I2C_ITMasterSeqCplt>
 8002ea0:	e003      	b.n	8002eaa <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ea2:	2140      	movs	r1, #64	; 0x40
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fe39 	bl	8003b1c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	095b      	lsrs	r3, r3, #5
 8002eba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002ec2:	6979      	ldr	r1, [r7, #20]
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fbff 	bl	80036c8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <I2C_Slave_ISR_IT+0x24>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e0ec      	b.n	80030da <I2C_Slave_ISR_IT+0x1fe>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d009      	beq.n	8002f28 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002f20:	6939      	ldr	r1, [r7, #16]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fc9a 	bl	800385c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d04d      	beq.n	8002fd0 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d047      	beq.n	8002fd0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d128      	bne.n	8002f9c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b28      	cmp	r3, #40	; 0x28
 8002f54:	d108      	bne.n	8002f68 <I2C_Slave_ISR_IT+0x8c>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f5c:	d104      	bne.n	8002f68 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f5e:	6939      	ldr	r1, [r7, #16]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 fd85 	bl	8003a70 <I2C_ITListenCplt>
 8002f66:	e032      	b.n	8002fce <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b29      	cmp	r3, #41	; 0x29
 8002f72:	d10e      	bne.n	8002f92 <I2C_Slave_ISR_IT+0xb6>
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f7a:	d00a      	beq.n	8002f92 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2210      	movs	r2, #16
 8002f82:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fec0 	bl	8003d0a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 fb3d 	bl	800360a <I2C_ITSlaveSeqCplt>
 8002f90:	e01d      	b.n	8002fce <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2210      	movs	r2, #16
 8002f98:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002f9a:	e096      	b.n	80030ca <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa8:	f043 0204 	orr.w	r2, r3, #4
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <I2C_Slave_ISR_IT+0xe4>
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fbc:	f040 8085 	bne.w	80030ca <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fda8 	bl	8003b1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002fcc:	e07d      	b.n	80030ca <I2C_Slave_ISR_IT+0x1ee>
 8002fce:	e07c      	b.n	80030ca <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d030      	beq.n	800303e <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d02a      	beq.n	800303e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d018      	beq.n	8003024 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d14f      	bne.n	80030ce <I2C_Slave_ISR_IT+0x1f2>
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003034:	d04b      	beq.n	80030ce <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fae7 	bl	800360a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800303c:	e047      	b.n	80030ce <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	08db      	lsrs	r3, r3, #3
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003056:	6939      	ldr	r1, [r7, #16]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fa15 	bl	8003488 <I2C_ITAddrCplt>
 800305e:	e037      	b.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d031      	beq.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	085b      	lsrs	r3, r3, #1
 8003070:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003074:	2b00      	cmp	r3, #0
 8003076:	d02b      	beq.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d018      	beq.n	80030b4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80030b2:	e00d      	b.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ba:	d002      	beq.n	80030c2 <I2C_Slave_ISR_IT+0x1e6>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 faa1 	bl	800360a <I2C_ITSlaveSeqCplt>
 80030c8:	e002      	b.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80030ce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b088      	sub	sp, #32
 80030e6:	af02      	add	r7, sp, #8
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <I2C_Master_ISR_DMA+0x1a>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e0e1      	b.n	80032c0 <I2C_Master_ISR_DMA+0x1de>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d017      	beq.n	8003140 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003118:	2b00      	cmp	r3, #0
 800311a:	d011      	beq.n	8003140 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2210      	movs	r2, #16
 8003122:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003128:	f043 0204 	orr.w	r2, r3, #4
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003130:	2120      	movs	r1, #32
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fe5e 	bl	8003df4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fde6 	bl	8003d0a <I2C_Flush_TXDR>
 800313e:	e0ba      	b.n	80032b6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	09db      	lsrs	r3, r3, #7
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d072      	beq.n	8003232 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003154:	2b00      	cmp	r3, #0
 8003156:	d06c      	beq.n	8003232 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003166:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d04e      	beq.n	8003210 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	b29b      	uxth	r3, r3
 800317a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800317e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	2bff      	cmp	r3, #255	; 0xff
 8003188:	d906      	bls.n	8003198 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	22ff      	movs	r2, #255	; 0xff
 800318e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e010      	b.n	80031ba <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031aa:	d003      	beq.n	80031b4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e002      	b.n	80031ba <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80031b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	8a79      	ldrh	r1, [r7, #18]
 80031c2:	2300      	movs	r3, #0
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fde1 	bl	8003d90 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b22      	cmp	r3, #34	; 0x22
 80031ea:	d108      	bne.n	80031fe <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031fa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80031fc:	e05b      	b.n	80032b6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800320c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800320e:	e052      	b.n	80032b6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800321e:	d003      	beq.n	8003228 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f9b5 	bl	8003590 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003226:	e046      	b.n	80032b6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003228:	2140      	movs	r1, #64	; 0x40
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fc76 	bl	8003b1c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003230:	e041      	b.n	80032b6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d029      	beq.n	8003292 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	099b      	lsrs	r3, r3, #6
 8003242:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003246:	2b00      	cmp	r3, #0
 8003248:	d023      	beq.n	8003292 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d119      	bne.n	8003288 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003262:	d027      	beq.n	80032b4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800326c:	d108      	bne.n	8003280 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800327c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800327e:	e019      	b.n	80032b4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f985 	bl	8003590 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003286:	e015      	b.n	80032b4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003288:	2140      	movs	r1, #64	; 0x40
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fc46 	bl	8003b1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003290:	e010      	b.n	80032b4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	095b      	lsrs	r3, r3, #5
 80032a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 fa0b 	bl	80036c8 <I2C_ITMasterCplt>
 80032b2:	e000      	b.n	80032b6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80032b4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <I2C_Slave_ISR_DMA+0x24>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e0c9      	b.n	8003480 <I2C_Slave_ISR_DMA+0x1b8>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 faa4 	bl	800385c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 809a 	beq.w	8003456 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8093 	beq.w	8003456 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	0b9b      	lsrs	r3, r3, #14
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	0bdb      	lsrs	r3, r3, #15
 8003340:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003344:	2b00      	cmp	r3, #0
 8003346:	d07f      	beq.n	8003448 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	0bdb      	lsrs	r3, r3, #15
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003368:	2301      	movs	r3, #1
 800336a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	0b9b      	lsrs	r3, r3, #14
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800338c:	2301      	movs	r3, #1
 800338e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d128      	bne.n	80033e8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b28      	cmp	r3, #40	; 0x28
 80033a0:	d108      	bne.n	80033b4 <I2C_Slave_ISR_DMA+0xec>
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033a8:	d104      	bne.n	80033b4 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fb5f 	bl	8003a70 <I2C_ITListenCplt>
 80033b2:	e048      	b.n	8003446 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b29      	cmp	r3, #41	; 0x29
 80033be:	d10e      	bne.n	80033de <I2C_Slave_ISR_DMA+0x116>
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033c6:	d00a      	beq.n	80033de <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2210      	movs	r2, #16
 80033ce:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fc9a 	bl	8003d0a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f917 	bl	800360a <I2C_ITSlaveSeqCplt>
 80033dc:	e033      	b.n	8003446 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2210      	movs	r2, #16
 80033e4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80033e6:	e034      	b.n	8003452 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2210      	movs	r2, #16
 80033ee:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f043 0204 	orr.w	r2, r3, #4
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003402:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <I2C_Slave_ISR_DMA+0x14a>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003410:	d11f      	bne.n	8003452 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	2b21      	cmp	r3, #33	; 0x21
 8003416:	d002      	beq.n	800341e <I2C_Slave_ISR_DMA+0x156>
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	2b29      	cmp	r3, #41	; 0x29
 800341c:	d103      	bne.n	8003426 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2221      	movs	r2, #33	; 0x21
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
 8003424:	e008      	b.n	8003438 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	2b22      	cmp	r3, #34	; 0x22
 800342a:	d002      	beq.n	8003432 <I2C_Slave_ISR_DMA+0x16a>
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	2b2a      	cmp	r3, #42	; 0x2a
 8003430:	d102      	bne.n	8003438 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2222      	movs	r2, #34	; 0x22
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	4619      	mov	r1, r3
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fb6c 	bl	8003b1c <I2C_ITError>
      if (treatdmanack == 1U)
 8003444:	e005      	b.n	8003452 <I2C_Slave_ISR_DMA+0x18a>
 8003446:	e004      	b.n	8003452 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2210      	movs	r2, #16
 800344e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003450:	e011      	b.n	8003476 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003452:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003454:	e00f      	b.n	8003476 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	08db      	lsrs	r3, r3, #3
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	08db      	lsrs	r3, r3, #3
 8003466:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f809 	bl	8003488 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3720      	adds	r7, #32
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800349e:	2b28      	cmp	r3, #40	; 0x28
 80034a0:	d16a      	bne.n	8003578 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	0c1b      	lsrs	r3, r3, #16
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80034c0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80034dc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d138      	bne.n	8003558 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80034e6:	897b      	ldrh	r3, [r7, #10]
 80034e8:	09db      	lsrs	r3, r3, #7
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	89bb      	ldrh	r3, [r7, #12]
 80034ee:	4053      	eors	r3, r2
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f003 0306 	and.w	r3, r3, #6
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d11c      	bne.n	8003534 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80034fa:	897b      	ldrh	r3, [r7, #10]
 80034fc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350c:	2b02      	cmp	r3, #2
 800350e:	d13b      	bne.n	8003588 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2208      	movs	r2, #8
 800351c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003526:	89ba      	ldrh	r2, [r7, #12]
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff fb6d 	bl	8002c0c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003532:	e029      	b.n	8003588 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003534:	893b      	ldrh	r3, [r7, #8]
 8003536:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fcc3 	bl	8003ec8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800354a:	89ba      	ldrh	r2, [r7, #12]
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	4619      	mov	r1, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff fb5b 	bl	8002c0c <HAL_I2C_AddrCallback>
}
 8003556:	e017      	b.n	8003588 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003558:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fcb3 	bl	8003ec8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800356a:	89ba      	ldrh	r2, [r7, #12]
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fb4b 	bl	8002c0c <HAL_I2C_AddrCallback>
}
 8003576:	e007      	b.n	8003588 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2208      	movs	r2, #8
 800357e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b21      	cmp	r3, #33	; 0x21
 80035aa:	d115      	bne.n	80035d8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2211      	movs	r2, #17
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80035c0:	2101      	movs	r1, #1
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fc80 	bl	8003ec8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f005 f83f 	bl	8008654 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035d6:	e014      	b.n	8003602 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2212      	movs	r2, #18
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80035ec:	2102      	movs	r1, #2
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fc6a 	bl	8003ec8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f005 f83f 	bl	8008680 <HAL_I2C_MasterRxCpltCallback>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	0b9b      	lsrs	r3, r3, #14
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d008      	beq.n	8003640 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e00d      	b.n	800365c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	0bdb      	lsrs	r3, r3, #15
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800365a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b29      	cmp	r3, #41	; 0x29
 8003666:	d112      	bne.n	800368e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2228      	movs	r2, #40	; 0x28
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2221      	movs	r2, #33	; 0x21
 8003674:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003676:	2101      	movs	r1, #1
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fc25 	bl	8003ec8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f005 f810 	bl	80086ac <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800368c:	e017      	b.n	80036be <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b2a      	cmp	r3, #42	; 0x2a
 8003698:	d111      	bne.n	80036be <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2228      	movs	r2, #40	; 0x28
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2222      	movs	r2, #34	; 0x22
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80036a8:	2102      	movs	r1, #2
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fc0c 	bl	8003ec8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f005 f80d 	bl	80086d8 <HAL_I2C_SlaveRxCpltCallback>
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2220      	movs	r2, #32
 80036dc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b21      	cmp	r3, #33	; 0x21
 80036e8:	d107      	bne.n	80036fa <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036ea:	2101      	movs	r1, #1
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 fbeb 	bl	8003ec8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2211      	movs	r2, #17
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30
 80036f8:	e00c      	b.n	8003714 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b22      	cmp	r3, #34	; 0x22
 8003704:	d106      	bne.n	8003714 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003706:	2102      	movs	r1, #2
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fbdd 	bl	8003ec8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2212      	movs	r2, #18
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6859      	ldr	r1, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b4d      	ldr	r3, [pc, #308]	; (8003854 <I2C_ITMasterCplt+0x18c>)
 8003720:	400b      	ands	r3, r1
 8003722:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a4a      	ldr	r2, [pc, #296]	; (8003858 <I2C_ITMasterCplt+0x190>)
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2210      	movs	r2, #16
 8003742:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	f043 0204 	orr.w	r2, r3, #4
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b60      	cmp	r3, #96	; 0x60
 800375a:	d10b      	bne.n	8003774 <I2C_ITMasterCplt+0xac>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	089b      	lsrs	r3, r3, #2
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	b2db      	uxtb	r3, r3
 8003770:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003772:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fac8 	bl	8003d0a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b60      	cmp	r3, #96	; 0x60
 800378a:	d002      	beq.n	8003792 <I2C_ITMasterCplt+0xca>
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d006      	beq.n	80037a0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	4619      	mov	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f9bf 	bl	8003b1c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800379e:	e054      	b.n	800384a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b21      	cmp	r3, #33	; 0x21
 80037aa:	d124      	bne.n	80037f6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b40      	cmp	r3, #64	; 0x40
 80037c4:	d10b      	bne.n	80037de <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff fa30 	bl	8002c3c <HAL_I2C_MemTxCpltCallback>
}
 80037dc:	e035      	b.n	800384a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f004 ff30 	bl	8008654 <HAL_I2C_MasterTxCpltCallback>
}
 80037f4:	e029      	b.n	800384a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b22      	cmp	r3, #34	; 0x22
 8003800:	d123      	bne.n	800384a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d10b      	bne.n	8003834 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff fa0f 	bl	8002c50 <HAL_I2C_MemRxCpltCallback>
}
 8003832:	e00a      	b.n	800384a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f004 ff1b 	bl	8008680 <HAL_I2C_MasterRxCpltCallback>
}
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	fe00e800 	.word	0xfe00e800
 8003858:	ffff0000 	.word	0xffff0000

0800385c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003878:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2220      	movs	r2, #32
 8003880:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b21      	cmp	r3, #33	; 0x21
 8003886:	d002      	beq.n	800388e <I2C_ITSlaveCplt+0x32>
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	2b29      	cmp	r3, #41	; 0x29
 800388c:	d108      	bne.n	80038a0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800388e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fb18 	bl	8003ec8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2221      	movs	r2, #33	; 0x21
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
 800389e:	e00d      	b.n	80038bc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b22      	cmp	r3, #34	; 0x22
 80038a4:	d002      	beq.n	80038ac <I2C_ITSlaveCplt+0x50>
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b2a      	cmp	r3, #42	; 0x2a
 80038aa:	d107      	bne.n	80038bc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80038ac:	f248 0102 	movw	r1, #32770	; 0x8002
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fb09 	bl	8003ec8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2222      	movs	r2, #34	; 0x22
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038ca:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6859      	ldr	r1, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	4b64      	ldr	r3, [pc, #400]	; (8003a68 <I2C_ITSlaveCplt+0x20c>)
 80038d8:	400b      	ands	r3, r1
 80038da:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fa14 	bl	8003d0a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	0b9b      	lsrs	r3, r3, #14
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d013      	beq.n	8003916 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	2b00      	cmp	r3, #0
 8003904:	d020      	beq.n	8003948 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	b29a      	uxth	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003914:	e018      	b.n	8003948 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	0bdb      	lsrs	r3, r3, #15
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d012      	beq.n	8003948 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003930:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d006      	beq.n	8003948 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	b29a      	uxth	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	089b      	lsrs	r3, r3, #2
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d020      	beq.n	8003996 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f023 0304 	bic.w	r3, r3, #4
 800395a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00c      	beq.n	8003996 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d010      	beq.n	80039e4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f8a7 	bl	8003b1c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b28      	cmp	r3, #40	; 0x28
 80039d8:	d141      	bne.n	8003a5e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80039da:	6979      	ldr	r1, [r7, #20]
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f847 	bl	8003a70 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039e2:	e03c      	b.n	8003a5e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039ec:	d014      	beq.n	8003a18 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff fe0b 	bl	800360a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <I2C_ITSlaveCplt+0x210>)
 80039f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff f909 	bl	8002c28 <HAL_I2C_ListenCpltCallback>
}
 8003a16:	e022      	b.n	8003a5e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b22      	cmp	r3, #34	; 0x22
 8003a22:	d10e      	bne.n	8003a42 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f004 fe4c 	bl	80086d8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a40:	e00d      	b.n	8003a5e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f004 fe27 	bl	80086ac <HAL_I2C_SlaveTxCpltCallback>
}
 8003a5e:	bf00      	nop
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	fe00e800 	.word	0xfe00e800
 8003a6c:	ffff0000 	.word	0xffff0000

08003a70 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <I2C_ITListenCplt+0xa8>)
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	089b      	lsrs	r3, r3, #2
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d022      	beq.n	8003aee <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d012      	beq.n	8003aee <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f043 0204 	orr.w	r2, r3, #4
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003aee:	f248 0103 	movw	r1, #32771	; 0x8003
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f9e8 	bl	8003ec8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2210      	movs	r2, #16
 8003afe:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff f88d 	bl	8002c28 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	ffff0000 	.word	0xffff0000

08003b1c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a5d      	ldr	r2, [pc, #372]	; (8003cb0 <I2C_ITError+0x194>)
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b28      	cmp	r3, #40	; 0x28
 8003b52:	d005      	beq.n	8003b60 <I2C_ITError+0x44>
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b29      	cmp	r3, #41	; 0x29
 8003b58:	d002      	beq.n	8003b60 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b5e:	d10b      	bne.n	8003b78 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b60:	2103      	movs	r1, #3
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f9b0 	bl	8003ec8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2228      	movs	r2, #40	; 0x28
 8003b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a50      	ldr	r2, [pc, #320]	; (8003cb4 <I2C_ITError+0x198>)
 8003b74:	635a      	str	r2, [r3, #52]	; 0x34
 8003b76:	e011      	b.n	8003b9c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b78:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f9a3 	bl	8003ec8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b60      	cmp	r3, #96	; 0x60
 8003b8c:	d003      	beq.n	8003b96 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d039      	beq.n	8003c1e <I2C_ITError+0x102>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b11      	cmp	r3, #17
 8003bae:	d002      	beq.n	8003bb6 <I2C_ITError+0x9a>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b21      	cmp	r3, #33	; 0x21
 8003bb4:	d133      	bne.n	8003c1e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bc4:	d107      	bne.n	8003bd6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bd4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fb38 	bl	8002250 <HAL_DMA_GetState>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d017      	beq.n	8003c16 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	4a33      	ldr	r2, [pc, #204]	; (8003cb8 <I2C_ITError+0x19c>)
 8003bec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe f97c 	bl	8001ef8 <HAL_DMA_Abort_IT>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d04d      	beq.n	8003ca2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c10:	4610      	mov	r0, r2
 8003c12:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c14:	e045      	b.n	8003ca2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f850 	bl	8003cbc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c1c:	e041      	b.n	8003ca2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d039      	beq.n	8003c9a <I2C_ITError+0x17e>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2b12      	cmp	r3, #18
 8003c2a:	d002      	beq.n	8003c32 <I2C_ITError+0x116>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b22      	cmp	r3, #34	; 0x22
 8003c30:	d133      	bne.n	8003c9a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c40:	d107      	bne.n	8003c52 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c50:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fe fafa 	bl	8002250 <HAL_DMA_GetState>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d017      	beq.n	8003c92 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <I2C_ITError+0x19c>)
 8003c68:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe f93e 	bl	8001ef8 <HAL_DMA_Abort_IT>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d011      	beq.n	8003ca6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c8c:	4610      	mov	r0, r2
 8003c8e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c90:	e009      	b.n	8003ca6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f812 	bl	8003cbc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c98:	e005      	b.n	8003ca6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f80e 	bl	8003cbc <I2C_TreatErrorCallback>
  }
}
 8003ca0:	e002      	b.n	8003ca8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ca2:	bf00      	nop
 8003ca4:	e000      	b.n	8003ca8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ca6:	bf00      	nop
}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	ffff0000 	.word	0xffff0000
 8003cb4:	08002edd 	.word	0x08002edd
 8003cb8:	08003d53 	.word	0x08003d53

08003cbc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b60      	cmp	r3, #96	; 0x60
 8003cce:	d10e      	bne.n	8003cee <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fe ffc6 	bl	8002c78 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cec:	e009      	b.n	8003d02 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fe ffb1 	bl	8002c64 <HAL_I2C_ErrorCallback>
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d103      	bne.n	8003d28 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2200      	movs	r2, #0
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d007      	beq.n	8003d46 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699a      	ldr	r2, [r3, #24]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0201 	orr.w	r2, r2, #1
 8003d44:	619a      	str	r2, [r3, #24]
  }
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff ff9b 	bl	8003cbc <I2C_TreatErrorCallback>
}
 8003d86:	bf00      	nop
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	607b      	str	r3, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	817b      	strh	r3, [r7, #10]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003da2:	897b      	ldrh	r3, [r7, #10]
 8003da4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003da8:	7a7b      	ldrb	r3, [r7, #9]
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003db0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dbe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	0d5b      	lsrs	r3, r3, #21
 8003dca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <I2C_TransferConfig+0x60>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	ea02 0103 	and.w	r1, r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	03ff63ff 	.word	0x03ff63ff

08003df4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e08:	4a2d      	ldr	r2, [pc, #180]	; (8003ec0 <I2C_Enable_IRQ+0xcc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d004      	beq.n	8003e18 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003e12:	4a2c      	ldr	r2, [pc, #176]	; (8003ec4 <I2C_Enable_IRQ+0xd0>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d11d      	bne.n	8003e54 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	da03      	bge.n	8003e28 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003e26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e28:	887b      	ldrh	r3, [r7, #2]
 8003e2a:	2b10      	cmp	r3, #16
 8003e2c:	d103      	bne.n	8003e36 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003e34:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e36:	887b      	ldrh	r3, [r7, #2]
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d103      	bne.n	8003e44 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003e42:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e44:	887b      	ldrh	r3, [r7, #2]
 8003e46:	2b40      	cmp	r3, #64	; 0x40
 8003e48:	d12c      	bne.n	8003ea4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e50:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e52:	e027      	b.n	8003ea4 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	da03      	bge.n	8003e64 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003e62:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e64:	887b      	ldrh	r3, [r7, #2]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003e74:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e76:	887b      	ldrh	r3, [r7, #2]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003e86:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003e88:	887b      	ldrh	r3, [r7, #2]
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d103      	bne.n	8003e96 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003e94:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003e96:	887b      	ldrh	r3, [r7, #2]
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d103      	bne.n	8003ea4 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f043 0320 	orr.w	r3, r3, #32
 8003ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6819      	ldr	r1, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	080030e3 	.word	0x080030e3
 8003ec4:	080032c9 	.word	0x080032c9

08003ec8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ed8:	887b      	ldrh	r3, [r7, #2]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00f      	beq.n	8003f02 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003ee8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ef6:	2b28      	cmp	r3, #40	; 0x28
 8003ef8:	d003      	beq.n	8003f02 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003f00:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003f02:	887b      	ldrh	r3, [r7, #2]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00f      	beq.n	8003f2c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003f12:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f20:	2b28      	cmp	r3, #40	; 0x28
 8003f22:	d003      	beq.n	8003f2c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003f2a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003f2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	da03      	bge.n	8003f3c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003f3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003f3c:	887b      	ldrh	r3, [r7, #2]
 8003f3e:	2b10      	cmp	r3, #16
 8003f40:	d103      	bne.n	8003f4a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003f48:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003f4a:	887b      	ldrh	r3, [r7, #2]
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d103      	bne.n	8003f58 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f043 0320 	orr.w	r3, r3, #32
 8003f56:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003f58:	887b      	ldrh	r3, [r7, #2]
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d103      	bne.n	8003f66 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f64:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6819      	ldr	r1, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	43da      	mvns	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	400a      	ands	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d138      	bne.n	800400c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e032      	b.n	800400e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2224      	movs	r2, #36	; 0x24
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6819      	ldr	r1, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e000      	b.n	800400e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b20      	cmp	r3, #32
 800402e:	d139      	bne.n	80040a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800403a:	2302      	movs	r3, #2
 800403c:	e033      	b.n	80040a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2224      	movs	r2, #36	; 0x24
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800406c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b4:	b08f      	sub	sp, #60	; 0x3c
 80040b6:	af0a      	add	r7, sp, #40	; 0x28
 80040b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e116      	b.n	80042f2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fd fa24 	bl	800152c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2203      	movs	r2, #3
 80040e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d102      	bne.n	80040fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f003 ff24 	bl	8007f50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	687e      	ldr	r6, [r7, #4]
 8004110:	466d      	mov	r5, sp
 8004112:	f106 0410 	add.w	r4, r6, #16
 8004116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800411a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800411c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800411e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004122:	e885 0003 	stmia.w	r5, {r0, r1}
 8004126:	1d33      	adds	r3, r6, #4
 8004128:	cb0e      	ldmia	r3, {r1, r2, r3}
 800412a:	6838      	ldr	r0, [r7, #0]
 800412c:	f003 feb8 	bl	8007ea0 <USB_CoreInit>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e0d7      	b.n	80042f2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f003 ff12 	bl	8007f72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414e:	2300      	movs	r3, #0
 8004150:	73fb      	strb	r3, [r7, #15]
 8004152:	e04a      	b.n	80041ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004154:	7bfa      	ldrb	r2, [r7, #15]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	333d      	adds	r3, #61	; 0x3d
 8004164:	2201      	movs	r2, #1
 8004166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	333c      	adds	r3, #60	; 0x3c
 8004178:	7bfa      	ldrb	r2, [r7, #15]
 800417a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800417c:	7bfa      	ldrb	r2, [r7, #15]
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	b298      	uxth	r0, r3
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	3344      	adds	r3, #68	; 0x44
 8004190:	4602      	mov	r2, r0
 8004192:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	3340      	adds	r3, #64	; 0x40
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041a8:	7bfa      	ldrb	r2, [r7, #15]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	3348      	adds	r3, #72	; 0x48
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041bc:	7bfa      	ldrb	r2, [r7, #15]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	334c      	adds	r3, #76	; 0x4c
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041d0:	7bfa      	ldrb	r2, [r7, #15]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3354      	adds	r3, #84	; 0x54
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	3301      	adds	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d3af      	bcc.n	8004154 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041f4:	2300      	movs	r3, #0
 80041f6:	73fb      	strb	r3, [r7, #15]
 80041f8:	e044      	b.n	8004284 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041fa:	7bfa      	ldrb	r2, [r7, #15]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004210:	7bfa      	ldrb	r2, [r7, #15]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004222:	7bfa      	ldrb	r2, [r7, #15]
 8004224:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004226:	7bfa      	ldrb	r2, [r7, #15]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800423c:	7bfa      	ldrb	r2, [r7, #15]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004268:	7bfa      	ldrb	r2, [r7, #15]
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800427e:	7bfb      	ldrb	r3, [r7, #15]
 8004280:	3301      	adds	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	429a      	cmp	r2, r3
 800428c:	d3b5      	bcc.n	80041fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	687e      	ldr	r6, [r7, #4]
 8004296:	466d      	mov	r5, sp
 8004298:	f106 0410 	add.w	r4, r6, #16
 800429c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800429e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80042ac:	1d33      	adds	r3, r6, #4
 80042ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042b0:	6838      	ldr	r0, [r7, #0]
 80042b2:	f003 feab 	bl	800800c <USB_DevInit>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e014      	b.n	80042f2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d102      	bne.n	80042e6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f80b 	bl	80042fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f004 f869 	bl	80083c2 <USB_DevDisconnect>

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080042fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_PCDEx_ActivateLPM+0x44>)
 800432c:	4313      	orrs	r3, r2
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	10000003 	.word	0x10000003

08004344 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a04      	ldr	r2, [pc, #16]	; (8004360 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40007000 	.word	0x40007000

08004364 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800436c:	2300      	movs	r3, #0
 800436e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e291      	b.n	800489e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8087 	beq.w	8004496 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004388:	4b96      	ldr	r3, [pc, #600]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b04      	cmp	r3, #4
 8004392:	d00c      	beq.n	80043ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004394:	4b93      	ldr	r3, [pc, #588]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b08      	cmp	r3, #8
 800439e:	d112      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62>
 80043a0:	4b90      	ldr	r3, [pc, #576]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ac:	d10b      	bne.n	80043c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ae:	4b8d      	ldr	r3, [pc, #564]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d06c      	beq.n	8004494 <HAL_RCC_OscConfig+0x130>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d168      	bne.n	8004494 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e26b      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ce:	d106      	bne.n	80043de <HAL_RCC_OscConfig+0x7a>
 80043d0:	4b84      	ldr	r3, [pc, #528]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a83      	ldr	r2, [pc, #524]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80043d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e02e      	b.n	800443c <HAL_RCC_OscConfig+0xd8>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x9c>
 80043e6:	4b7f      	ldr	r3, [pc, #508]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a7e      	ldr	r2, [pc, #504]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80043ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b7c      	ldr	r3, [pc, #496]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a7b      	ldr	r2, [pc, #492]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80043f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e01d      	b.n	800443c <HAL_RCC_OscConfig+0xd8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0xc0>
 800440a:	4b76      	ldr	r3, [pc, #472]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a75      	ldr	r2, [pc, #468]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	4b73      	ldr	r3, [pc, #460]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a72      	ldr	r2, [pc, #456]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	e00b      	b.n	800443c <HAL_RCC_OscConfig+0xd8>
 8004424:	4b6f      	ldr	r3, [pc, #444]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a6e      	ldr	r2, [pc, #440]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 800442a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	4b6c      	ldr	r3, [pc, #432]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a6b      	ldr	r2, [pc, #428]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800443a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d013      	beq.n	800446c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fd fa98 	bl	8001978 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800444c:	f7fd fa94 	bl	8001978 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b64      	cmp	r3, #100	; 0x64
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e21f      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	4b61      	ldr	r3, [pc, #388]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0xe8>
 800446a:	e014      	b.n	8004496 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fd fa84 	bl	8001978 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004474:	f7fd fa80 	bl	8001978 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b64      	cmp	r3, #100	; 0x64
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e20b      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004486:	4b57      	ldr	r3, [pc, #348]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x110>
 8004492:	e000      	b.n	8004496 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d069      	beq.n	8004576 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044a2:	4b50      	ldr	r3, [pc, #320]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00b      	beq.n	80044c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ae:	4b4d      	ldr	r3, [pc, #308]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d11c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x190>
 80044ba:	4b4a      	ldr	r3, [pc, #296]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d116      	bne.n	80044f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044c6:	4b47      	ldr	r3, [pc, #284]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_RCC_OscConfig+0x17a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d001      	beq.n	80044de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e1df      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044de:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	493d      	ldr	r1, [pc, #244]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f2:	e040      	b.n	8004576 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d023      	beq.n	8004544 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044fc:	4b39      	ldr	r3, [pc, #228]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a38      	ldr	r2, [pc, #224]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004508:	f7fd fa36 	bl	8001978 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004510:	f7fd fa32 	bl	8001978 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e1bd      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004522:	4b30      	ldr	r3, [pc, #192]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452e:	4b2d      	ldr	r3, [pc, #180]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4929      	ldr	r1, [pc, #164]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]
 8004542:	e018      	b.n	8004576 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004544:	4b27      	ldr	r3, [pc, #156]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a26      	ldr	r2, [pc, #152]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fd fa12 	bl	8001978 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004558:	f7fd fa0e 	bl	8001978 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e199      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456a:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d038      	beq.n	80045f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d019      	beq.n	80045be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458a:	4b16      	ldr	r3, [pc, #88]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 800458c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458e:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004596:	f7fd f9ef 	bl	8001978 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800459e:	f7fd f9eb 	bl	8001978 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e176      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80045b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <HAL_RCC_OscConfig+0x23a>
 80045bc:	e01a      	b.n	80045f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045be:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80045c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c2:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <HAL_RCC_OscConfig+0x280>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7fd f9d5 	bl	8001978 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d2:	f7fd f9d1 	bl	8001978 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d903      	bls.n	80045e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e15c      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
 80045e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e8:	4b91      	ldr	r3, [pc, #580]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80045ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1ee      	bne.n	80045d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80a4 	beq.w	800474a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004602:	4b8b      	ldr	r3, [pc, #556]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10d      	bne.n	800462a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800460e:	4b88      	ldr	r3, [pc, #544]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4a87      	ldr	r2, [pc, #540]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	; 0x40
 800461a:	4b85      	ldr	r3, [pc, #532]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800462a:	4b82      	ldr	r3, [pc, #520]	; (8004834 <HAL_RCC_OscConfig+0x4d0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	2b00      	cmp	r3, #0
 8004634:	d118      	bne.n	8004668 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004636:	4b7f      	ldr	r3, [pc, #508]	; (8004834 <HAL_RCC_OscConfig+0x4d0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a7e      	ldr	r2, [pc, #504]	; (8004834 <HAL_RCC_OscConfig+0x4d0>)
 800463c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004642:	f7fd f999 	bl	8001978 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464a:	f7fd f995 	bl	8001978 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b64      	cmp	r3, #100	; 0x64
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e120      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800465c:	4b75      	ldr	r3, [pc, #468]	; (8004834 <HAL_RCC_OscConfig+0x4d0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d106      	bne.n	800467e <HAL_RCC_OscConfig+0x31a>
 8004670:	4b6f      	ldr	r3, [pc, #444]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	4a6e      	ldr	r2, [pc, #440]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6713      	str	r3, [r2, #112]	; 0x70
 800467c:	e02d      	b.n	80046da <HAL_RCC_OscConfig+0x376>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x33c>
 8004686:	4b6a      	ldr	r3, [pc, #424]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4a69      	ldr	r2, [pc, #420]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 800468c:	f023 0301 	bic.w	r3, r3, #1
 8004690:	6713      	str	r3, [r2, #112]	; 0x70
 8004692:	4b67      	ldr	r3, [pc, #412]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	4a66      	ldr	r2, [pc, #408]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004698:	f023 0304 	bic.w	r3, r3, #4
 800469c:	6713      	str	r3, [r2, #112]	; 0x70
 800469e:	e01c      	b.n	80046da <HAL_RCC_OscConfig+0x376>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b05      	cmp	r3, #5
 80046a6:	d10c      	bne.n	80046c2 <HAL_RCC_OscConfig+0x35e>
 80046a8:	4b61      	ldr	r3, [pc, #388]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	4a60      	ldr	r2, [pc, #384]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80046ae:	f043 0304 	orr.w	r3, r3, #4
 80046b2:	6713      	str	r3, [r2, #112]	; 0x70
 80046b4:	4b5e      	ldr	r3, [pc, #376]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	4a5d      	ldr	r2, [pc, #372]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	6713      	str	r3, [r2, #112]	; 0x70
 80046c0:	e00b      	b.n	80046da <HAL_RCC_OscConfig+0x376>
 80046c2:	4b5b      	ldr	r3, [pc, #364]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	4a5a      	ldr	r2, [pc, #360]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	6713      	str	r3, [r2, #112]	; 0x70
 80046ce:	4b58      	ldr	r3, [pc, #352]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	4a57      	ldr	r2, [pc, #348]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80046d4:	f023 0304 	bic.w	r3, r3, #4
 80046d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d015      	beq.n	800470e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e2:	f7fd f949 	bl	8001978 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e8:	e00a      	b.n	8004700 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fd f945 	bl	8001978 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e0ce      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004700:	4b4b      	ldr	r3, [pc, #300]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ee      	beq.n	80046ea <HAL_RCC_OscConfig+0x386>
 800470c:	e014      	b.n	8004738 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470e:	f7fd f933 	bl	8001978 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004714:	e00a      	b.n	800472c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004716:	f7fd f92f 	bl	8001978 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f241 3288 	movw	r2, #5000	; 0x1388
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e0b8      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472c:	4b40      	ldr	r3, [pc, #256]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1ee      	bne.n	8004716 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004738:	7dfb      	ldrb	r3, [r7, #23]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d105      	bne.n	800474a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800473e:	4b3c      	ldr	r3, [pc, #240]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	4a3b      	ldr	r2, [pc, #236]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004748:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 80a4 	beq.w	800489c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004754:	4b36      	ldr	r3, [pc, #216]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d06b      	beq.n	8004838 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d149      	bne.n	80047fc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004768:	4b31      	ldr	r3, [pc, #196]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a30      	ldr	r2, [pc, #192]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 800476e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fd f900 	bl	8001978 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477c:	f7fd f8fc 	bl	8001978 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e087      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478e:	4b28      	ldr	r3, [pc, #160]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69da      	ldr	r2, [r3, #28]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	019b      	lsls	r3, r3, #6
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	3b01      	subs	r3, #1
 80047b4:	041b      	lsls	r3, r3, #16
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	061b      	lsls	r3, r3, #24
 80047be:	4313      	orrs	r3, r2
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80047c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047c6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c8:	4b19      	ldr	r3, [pc, #100]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a18      	ldr	r2, [pc, #96]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80047ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fd f8d0 	bl	8001978 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fd f8cc 	bl	8001978 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e057      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ee:	4b10      	ldr	r3, [pc, #64]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0x478>
 80047fa:	e04f      	b.n	800489c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0b      	ldr	r2, [pc, #44]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004802:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fd f8b6 	bl	8001978 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004810:	f7fd f8b2 	bl	8001978 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e03d      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004822:	4b03      	ldr	r3, [pc, #12]	; (8004830 <HAL_RCC_OscConfig+0x4cc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x4ac>
 800482e:	e035      	b.n	800489c <HAL_RCC_OscConfig+0x538>
 8004830:	40023800 	.word	0x40023800
 8004834:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004838:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <HAL_RCC_OscConfig+0x544>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d028      	beq.n	8004898 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004850:	429a      	cmp	r2, r3
 8004852:	d121      	bne.n	8004898 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d11a      	bne.n	8004898 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004868:	4013      	ands	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800486e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004870:	4293      	cmp	r3, r2
 8004872:	d111      	bne.n	8004898 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	085b      	lsrs	r3, r3, #1
 8004880:	3b01      	subs	r3, #1
 8004882:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d107      	bne.n	8004898 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d001      	beq.n	800489c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800

080048ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e0d0      	b.n	8004a66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048c4:	4b6a      	ldr	r3, [pc, #424]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d910      	bls.n	80048f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d2:	4b67      	ldr	r3, [pc, #412]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f023 020f 	bic.w	r2, r3, #15
 80048da:	4965      	ldr	r1, [pc, #404]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	4313      	orrs	r3, r2
 80048e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e2:	4b63      	ldr	r3, [pc, #396]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d001      	beq.n	80048f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0b8      	b.n	8004a66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d020      	beq.n	8004942 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800490c:	4b59      	ldr	r3, [pc, #356]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4a58      	ldr	r2, [pc, #352]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004912:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004916:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b00      	cmp	r3, #0
 8004922:	d005      	beq.n	8004930 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004924:	4b53      	ldr	r3, [pc, #332]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4a52      	ldr	r2, [pc, #328]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 800492a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800492e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004930:	4b50      	ldr	r3, [pc, #320]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	494d      	ldr	r1, [pc, #308]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 800493e:	4313      	orrs	r3, r2
 8004940:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d040      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d107      	bne.n	8004966 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004956:	4b47      	ldr	r3, [pc, #284]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d115      	bne.n	800498e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e07f      	b.n	8004a66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d107      	bne.n	800497e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496e:	4b41      	ldr	r3, [pc, #260]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d109      	bne.n	800498e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e073      	b.n	8004a66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497e:	4b3d      	ldr	r3, [pc, #244]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e06b      	b.n	8004a66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800498e:	4b39      	ldr	r3, [pc, #228]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f023 0203 	bic.w	r2, r3, #3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4936      	ldr	r1, [pc, #216]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 800499c:	4313      	orrs	r3, r2
 800499e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a0:	f7fc ffea 	bl	8001978 <HAL_GetTick>
 80049a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a6:	e00a      	b.n	80049be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a8:	f7fc ffe6 	bl	8001978 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e053      	b.n	8004a66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049be:	4b2d      	ldr	r3, [pc, #180]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 020c 	and.w	r2, r3, #12
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d1eb      	bne.n	80049a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049d0:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d210      	bcs.n	8004a00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049de:	4b24      	ldr	r3, [pc, #144]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 020f 	bic.w	r2, r3, #15
 80049e6:	4922      	ldr	r1, [pc, #136]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e032      	b.n	8004a66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a0c:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4916      	ldr	r1, [pc, #88]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	490e      	ldr	r1, [pc, #56]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a3e:	f000 f821 	bl	8004a84 <HAL_RCC_GetSysClockFreq>
 8004a42:	4602      	mov	r2, r0
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	091b      	lsrs	r3, r3, #4
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	490a      	ldr	r1, [pc, #40]	; (8004a78 <HAL_RCC_ClockConfig+0x1cc>)
 8004a50:	5ccb      	ldrb	r3, [r1, r3]
 8004a52:	fa22 f303 	lsr.w	r3, r2, r3
 8004a56:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <HAL_RCC_ClockConfig+0x1d0>)
 8004a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <HAL_RCC_ClockConfig+0x1d4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fc ff46 	bl	80018f0 <HAL_InitTick>

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40023c00 	.word	0x40023c00
 8004a74:	40023800 	.word	0x40023800
 8004a78:	0800a460 	.word	0x0800a460
 8004a7c:	20000000 	.word	0x20000000
 8004a80:	20000004 	.word	0x20000004

08004a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a88:	b094      	sub	sp, #80	; 0x50
 8004a8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a90:	2300      	movs	r3, #0
 8004a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a94:	2300      	movs	r3, #0
 8004a96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a9c:	4b79      	ldr	r3, [pc, #484]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 030c 	and.w	r3, r3, #12
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x40>
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	f200 80e1 	bhi.w	8004c70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d003      	beq.n	8004abe <HAL_RCC_GetSysClockFreq+0x3a>
 8004ab6:	e0db      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ab8:	4b73      	ldr	r3, [pc, #460]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004aba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004abc:	e0db      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004abe:	4b73      	ldr	r3, [pc, #460]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ac0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ac2:	e0d8      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac4:	4b6f      	ldr	r3, [pc, #444]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004acc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ace:	4b6d      	ldr	r3, [pc, #436]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d063      	beq.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ada:	4b6a      	ldr	r3, [pc, #424]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	099b      	lsrs	r3, r3, #6
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ae4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aec:	633b      	str	r3, [r7, #48]	; 0x30
 8004aee:	2300      	movs	r3, #0
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
 8004af2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004af6:	4622      	mov	r2, r4
 8004af8:	462b      	mov	r3, r5
 8004afa:	f04f 0000 	mov.w	r0, #0
 8004afe:	f04f 0100 	mov.w	r1, #0
 8004b02:	0159      	lsls	r1, r3, #5
 8004b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b08:	0150      	lsls	r0, r2, #5
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4621      	mov	r1, r4
 8004b10:	1a51      	subs	r1, r2, r1
 8004b12:	6139      	str	r1, [r7, #16]
 8004b14:	4629      	mov	r1, r5
 8004b16:	eb63 0301 	sbc.w	r3, r3, r1
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b28:	4659      	mov	r1, fp
 8004b2a:	018b      	lsls	r3, r1, #6
 8004b2c:	4651      	mov	r1, sl
 8004b2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b32:	4651      	mov	r1, sl
 8004b34:	018a      	lsls	r2, r1, #6
 8004b36:	4651      	mov	r1, sl
 8004b38:	ebb2 0801 	subs.w	r8, r2, r1
 8004b3c:	4659      	mov	r1, fp
 8004b3e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b56:	4690      	mov	r8, r2
 8004b58:	4699      	mov	r9, r3
 8004b5a:	4623      	mov	r3, r4
 8004b5c:	eb18 0303 	adds.w	r3, r8, r3
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	462b      	mov	r3, r5
 8004b64:	eb49 0303 	adc.w	r3, r9, r3
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b76:	4629      	mov	r1, r5
 8004b78:	024b      	lsls	r3, r1, #9
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b80:	4621      	mov	r1, r4
 8004b82:	024a      	lsls	r2, r1, #9
 8004b84:	4610      	mov	r0, r2
 8004b86:	4619      	mov	r1, r3
 8004b88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b94:	f7fb fb8c 	bl	80002b0 <__aeabi_uldivmod>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ba0:	e058      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba2:	4b38      	ldr	r3, [pc, #224]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	099b      	lsrs	r3, r3, #6
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	4611      	mov	r1, r2
 8004bae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bb2:	623b      	str	r3, [r7, #32]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	f04f 0000 	mov.w	r0, #0
 8004bc4:	f04f 0100 	mov.w	r1, #0
 8004bc8:	0159      	lsls	r1, r3, #5
 8004bca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bce:	0150      	lsls	r0, r2, #5
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bda:	4649      	mov	r1, r9
 8004bdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bf4:	ebb2 040a 	subs.w	r4, r2, sl
 8004bf8:	eb63 050b 	sbc.w	r5, r3, fp
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	00eb      	lsls	r3, r5, #3
 8004c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c0a:	00e2      	lsls	r2, r4, #3
 8004c0c:	4614      	mov	r4, r2
 8004c0e:	461d      	mov	r5, r3
 8004c10:	4643      	mov	r3, r8
 8004c12:	18e3      	adds	r3, r4, r3
 8004c14:	603b      	str	r3, [r7, #0]
 8004c16:	464b      	mov	r3, r9
 8004c18:	eb45 0303 	adc.w	r3, r5, r3
 8004c1c:	607b      	str	r3, [r7, #4]
 8004c1e:	f04f 0200 	mov.w	r2, #0
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	028b      	lsls	r3, r1, #10
 8004c2e:	4621      	mov	r1, r4
 8004c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c34:	4621      	mov	r1, r4
 8004c36:	028a      	lsls	r2, r1, #10
 8004c38:	4610      	mov	r0, r2
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c3e:	2200      	movs	r2, #0
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	61fa      	str	r2, [r7, #28]
 8004c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c48:	f7fb fb32 	bl	80002b0 <__aeabi_uldivmod>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4613      	mov	r3, r2
 8004c52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	0c1b      	lsrs	r3, r3, #16
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	3301      	adds	r3, #1
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004c64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c6e:	e002      	b.n	8004c76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c70:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3750      	adds	r7, #80	; 0x50
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c82:	bf00      	nop
 8004c84:	40023800 	.word	0x40023800
 8004c88:	00f42400 	.word	0x00f42400
 8004c8c:	007a1200 	.word	0x007a1200

08004c90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c94:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c96:	681b      	ldr	r3, [r3, #0]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000000 	.word	0x20000000

08004ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cac:	f7ff fff0 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	0a9b      	lsrs	r3, r3, #10
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	4903      	ldr	r1, [pc, #12]	; (8004ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cbe:	5ccb      	ldrb	r3, [r1, r3]
 8004cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	0800a470 	.word	0x0800a470

08004cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cd4:	f7ff ffdc 	bl	8004c90 <HAL_RCC_GetHCLKFreq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	0b5b      	lsrs	r3, r3, #13
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	4903      	ldr	r1, [pc, #12]	; (8004cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ce6:	5ccb      	ldrb	r3, [r1, r3]
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	0800a470 	.word	0x0800a470

08004cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d012      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d20:	4b69      	ldr	r3, [pc, #420]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	4a68      	ldr	r2, [pc, #416]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d2a:	6093      	str	r3, [r2, #8]
 8004d2c:	4b66      	ldr	r3, [pc, #408]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	4964      	ldr	r1, [pc, #400]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d42:	2301      	movs	r3, #1
 8004d44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d017      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d52:	4b5d      	ldr	r3, [pc, #372]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d60:	4959      	ldr	r1, [pc, #356]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d70:	d101      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d72:	2301      	movs	r3, #1
 8004d74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d017      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d8e:	4b4e      	ldr	r3, [pc, #312]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	494a      	ldr	r1, [pc, #296]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dac:	d101      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004dae:	2301      	movs	r3, #1
 8004db0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f000 808b 	beq.w	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ddc:	4b3a      	ldr	r3, [pc, #232]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	4a39      	ldr	r2, [pc, #228]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de6:	6413      	str	r3, [r2, #64]	; 0x40
 8004de8:	4b37      	ldr	r3, [pc, #220]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004df4:	4b35      	ldr	r3, [pc, #212]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a34      	ldr	r2, [pc, #208]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e00:	f7fc fdba 	bl	8001978 <HAL_GetTick>
 8004e04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e08:	f7fc fdb6 	bl	8001978 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b64      	cmp	r3, #100	; 0x64
 8004e14:	d901      	bls.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e357      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e1a:	4b2c      	ldr	r3, [pc, #176]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e26:	4b28      	ldr	r3, [pc, #160]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d035      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d02e      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e44:	4b20      	ldr	r3, [pc, #128]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e4e:	4b1e      	ldr	r3, [pc, #120]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e66:	4a18      	ldr	r2, [pc, #96]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e6c:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d114      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e78:	f7fc fd7e 	bl	8001978 <HAL_GetTick>
 8004e7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7e:	e00a      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e80:	f7fc fd7a 	bl	8001978 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e319      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0ee      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eae:	d111      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ebc:	4b04      	ldr	r3, [pc, #16]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	4901      	ldr	r1, [pc, #4]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	40007000 	.word	0x40007000
 8004ed0:	0ffffcff 	.word	0x0ffffcff
 8004ed4:	4baa      	ldr	r3, [pc, #680]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4aa9      	ldr	r2, [pc, #676]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eda:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ede:	6093      	str	r3, [r2, #8]
 8004ee0:	4ba7      	ldr	r3, [pc, #668]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eec:	49a4      	ldr	r1, [pc, #656]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d010      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004efe:	4ba0      	ldr	r3, [pc, #640]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f04:	4a9e      	ldr	r2, [pc, #632]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f0e:	4b9c      	ldr	r3, [pc, #624]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	4999      	ldr	r1, [pc, #612]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f2c:	4b94      	ldr	r3, [pc, #592]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f3a:	4991      	ldr	r1, [pc, #580]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f4e:	4b8c      	ldr	r3, [pc, #560]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f5c:	4988      	ldr	r1, [pc, #544]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f70:	4b83      	ldr	r3, [pc, #524]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7e:	4980      	ldr	r1, [pc, #512]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f92:	4b7b      	ldr	r3, [pc, #492]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa0:	4977      	ldr	r1, [pc, #476]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fb4:	4b72      	ldr	r3, [pc, #456]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fba:	f023 0203 	bic.w	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	496f      	ldr	r1, [pc, #444]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd6:	4b6a      	ldr	r3, [pc, #424]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fdc:	f023 020c 	bic.w	r2, r3, #12
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe4:	4966      	ldr	r1, [pc, #408]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ff8:	4b61      	ldr	r3, [pc, #388]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005006:	495e      	ldr	r1, [pc, #376]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800501a:	4b59      	ldr	r3, [pc, #356]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005020:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005028:	4955      	ldr	r1, [pc, #340]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800503c:	4b50      	ldr	r3, [pc, #320]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504a:	494d      	ldr	r1, [pc, #308]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800505e:	4b48      	ldr	r3, [pc, #288]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005064:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	4944      	ldr	r1, [pc, #272]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00a      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005080:	4b3f      	ldr	r3, [pc, #252]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005086:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508e:	493c      	ldr	r1, [pc, #240]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80050a2:	4b37      	ldr	r3, [pc, #220]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b0:	4933      	ldr	r1, [pc, #204]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050c4:	4b2e      	ldr	r3, [pc, #184]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050d2:	492b      	ldr	r1, [pc, #172]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d011      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050e6:	4b26      	ldr	r3, [pc, #152]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f4:	4922      	ldr	r1, [pc, #136]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005104:	d101      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005106:	2301      	movs	r3, #1
 8005108:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005116:	2301      	movs	r3, #1
 8005118:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005126:	4b16      	ldr	r3, [pc, #88]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005134:	4912      	ldr	r1, [pc, #72]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d00b      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005148:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005158:	4909      	ldr	r1, [pc, #36]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800515a:	4313      	orrs	r3, r2
 800515c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d006      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 80d9 	beq.w	8005326 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005174:	4b02      	ldr	r3, [pc, #8]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a01      	ldr	r2, [pc, #4]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800517a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800517e:	e001      	b.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005180:	40023800 	.word	0x40023800
 8005184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005186:	f7fc fbf7 	bl	8001978 <HAL_GetTick>
 800518a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800518e:	f7fc fbf3 	bl	8001978 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b64      	cmp	r3, #100	; 0x64
 800519a:	d901      	bls.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e194      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051a0:	4b6c      	ldr	r3, [pc, #432]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f0      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d021      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d11d      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051c0:	4b64      	ldr	r3, [pc, #400]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c6:	0c1b      	lsrs	r3, r3, #16
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051ce:	4b61      	ldr	r3, [pc, #388]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d4:	0e1b      	lsrs	r3, r3, #24
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	019a      	lsls	r2, r3, #6
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	041b      	lsls	r3, r3, #16
 80051e6:	431a      	orrs	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	071b      	lsls	r3, r3, #28
 80051f4:	4957      	ldr	r1, [pc, #348]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d004      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005210:	d00a      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800521a:	2b00      	cmp	r3, #0
 800521c:	d02e      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005226:	d129      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005228:	4b4a      	ldr	r3, [pc, #296]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800522a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800522e:	0c1b      	lsrs	r3, r3, #16
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005236:	4b47      	ldr	r3, [pc, #284]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523c:	0f1b      	lsrs	r3, r3, #28
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	019a      	lsls	r2, r3, #6
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	041b      	lsls	r3, r3, #16
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	061b      	lsls	r3, r3, #24
 8005256:	431a      	orrs	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	071b      	lsls	r3, r3, #28
 800525c:	493d      	ldr	r1, [pc, #244]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005264:	4b3b      	ldr	r3, [pc, #236]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526a:	f023 021f 	bic.w	r2, r3, #31
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	3b01      	subs	r3, #1
 8005274:	4937      	ldr	r1, [pc, #220]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01d      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005288:	4b32      	ldr	r3, [pc, #200]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800528a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528e:	0e1b      	lsrs	r3, r3, #24
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005296:	4b2f      	ldr	r3, [pc, #188]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800529c:	0f1b      	lsrs	r3, r3, #28
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	019a      	lsls	r2, r3, #6
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	431a      	orrs	r2, r3
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	061b      	lsls	r3, r3, #24
 80052b6:	431a      	orrs	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	071b      	lsls	r3, r3, #28
 80052bc:	4925      	ldr	r1, [pc, #148]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d011      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	019a      	lsls	r2, r3, #6
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	041b      	lsls	r3, r3, #16
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	061b      	lsls	r3, r3, #24
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	071b      	lsls	r3, r3, #28
 80052ec:	4919      	ldr	r1, [pc, #100]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052f4:	4b17      	ldr	r3, [pc, #92]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a16      	ldr	r2, [pc, #88]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005300:	f7fc fb3a 	bl	8001978 <HAL_GetTick>
 8005304:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005306:	e008      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005308:	f7fc fb36 	bl	8001978 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b64      	cmp	r3, #100	; 0x64
 8005314:	d901      	bls.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0d7      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2b01      	cmp	r3, #1
 800532a:	f040 80cd 	bne.w	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800532e:	4b09      	ldr	r3, [pc, #36]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a08      	ldr	r2, [pc, #32]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800533a:	f7fc fb1d 	bl	8001978 <HAL_GetTick>
 800533e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005340:	e00a      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005342:	f7fc fb19 	bl	8001978 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b64      	cmp	r3, #100	; 0x64
 800534e:	d903      	bls.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e0ba      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005354:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005358:	4b5e      	ldr	r3, [pc, #376]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005364:	d0ed      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d009      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005382:	2b00      	cmp	r3, #0
 8005384:	d02e      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	d12a      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800538e:	4b51      	ldr	r3, [pc, #324]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	0c1b      	lsrs	r3, r3, #16
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800539c:	4b4d      	ldr	r3, [pc, #308]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800539e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a2:	0f1b      	lsrs	r3, r3, #28
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	019a      	lsls	r2, r3, #6
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	041b      	lsls	r3, r3, #16
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	061b      	lsls	r3, r3, #24
 80053bc:	431a      	orrs	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	071b      	lsls	r3, r3, #28
 80053c2:	4944      	ldr	r1, [pc, #272]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053ca:	4b42      	ldr	r3, [pc, #264]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	3b01      	subs	r3, #1
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	493d      	ldr	r1, [pc, #244]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d022      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053f8:	d11d      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053fa:	4b36      	ldr	r3, [pc, #216]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005400:	0e1b      	lsrs	r3, r3, #24
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005408:	4b32      	ldr	r3, [pc, #200]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800540a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540e:	0f1b      	lsrs	r3, r3, #28
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	019a      	lsls	r2, r3, #6
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	041b      	lsls	r3, r3, #16
 8005422:	431a      	orrs	r2, r3
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	061b      	lsls	r3, r3, #24
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	071b      	lsls	r3, r3, #28
 800542e:	4929      	ldr	r1, [pc, #164]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0308 	and.w	r3, r3, #8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d028      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005442:	4b24      	ldr	r3, [pc, #144]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	0e1b      	lsrs	r3, r3, #24
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005450:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	0c1b      	lsrs	r3, r3, #16
 8005458:	f003 0303 	and.w	r3, r3, #3
 800545c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	019a      	lsls	r2, r3, #6
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	431a      	orrs	r2, r3
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	061b      	lsls	r3, r3, #24
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	071b      	lsls	r3, r3, #28
 8005476:	4917      	ldr	r1, [pc, #92]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800547e:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005484:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	4911      	ldr	r1, [pc, #68]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005494:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a0e      	ldr	r2, [pc, #56]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a0:	f7fc fa6a 	bl	8001978 <HAL_GetTick>
 80054a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054a8:	f7fc fa66 	bl	8001978 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	; 0x64
 80054b4:	d901      	bls.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e007      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ba:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c6:	d1ef      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40023800 	.word	0x40023800

080054d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e09d      	b.n	8005626 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d108      	bne.n	8005504 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054fa:	d009      	beq.n	8005510 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	61da      	str	r2, [r3, #28]
 8005502:	e005      	b.n	8005510 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fb fcc8 	bl	8000ec0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005546:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005550:	d902      	bls.n	8005558 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	e002      	b.n	800555e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800555c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005566:	d007      	beq.n	8005578 <HAL_SPI_Init+0xa0>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005570:	d002      	beq.n	8005578 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ba:	ea42 0103 	orr.w	r1, r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	0c1b      	lsrs	r3, r3, #16
 80055d4:	f003 0204 	and.w	r2, r3, #4
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055f4:	ea42 0103 	orr.w	r1, r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005614:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	4613      	mov	r3, r2
 800563c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_SPI_Transmit_DMA+0x20>
 800564c:	2302      	movs	r3, #2
 800564e:	e0d8      	b.n	8005802 <HAL_SPI_Transmit_DMA+0x1d2>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b01      	cmp	r3, #1
 8005662:	d002      	beq.n	800566a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005664:	2302      	movs	r3, #2
 8005666:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005668:	e0c6      	b.n	80057f8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_SPI_Transmit_DMA+0x46>
 8005670:	88fb      	ldrh	r3, [r7, #6]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	75fb      	strb	r3, [r7, #23]
    goto error;
 800567a:	e0bd      	b.n	80057f8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2203      	movs	r2, #3
 8005680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	88fa      	ldrh	r2, [r7, #6]
 8005694:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	88fa      	ldrh	r2, [r7, #6]
 800569a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c6:	d10f      	bne.n	80056e8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ec:	4a47      	ldr	r2, [pc, #284]	; (800580c <HAL_SPI_Transmit_DMA+0x1dc>)
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f4:	4a46      	ldr	r2, [pc, #280]	; (8005810 <HAL_SPI_Transmit_DMA+0x1e0>)
 80056f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fc:	4a45      	ldr	r2, [pc, #276]	; (8005814 <HAL_SPI_Transmit_DMA+0x1e4>)
 80056fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005704:	2200      	movs	r2, #0
 8005706:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005716:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005720:	d82d      	bhi.n	800577e <HAL_SPI_Transmit_DMA+0x14e>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572c:	d127      	bne.n	800577e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005732:	b29b      	uxth	r3, r3
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10f      	bne.n	800575c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800574a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005750:	b29b      	uxth	r3, r3
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	87da      	strh	r2, [r3, #62]	; 0x3e
 800575a:	e010      	b.n	800577e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800576a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005770:	b29b      	uxth	r3, r3
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	b29b      	uxth	r3, r3
 8005776:	3301      	adds	r3, #1
 8005778:	b29a      	uxth	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	4619      	mov	r1, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005794:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005796:	f7fc fadf 	bl	8001d58 <HAL_DMA_Start_IT>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00c      	beq.n	80057ba <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a4:	f043 0210 	orr.w	r2, r3, #16
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80057b8:	e01e      	b.n	80057f8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c4:	2b40      	cmp	r3, #64	; 0x40
 80057c6:	d007      	beq.n	80057d8 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057d6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0220 	orr.w	r2, r2, #32
 80057e6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0202 	orr.w	r2, r2, #2
 80057f6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005800:	7dfb      	ldrb	r3, [r7, #23]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	080061c1 	.word	0x080061c1
 8005810:	08005fdd 	.word	0x08005fdd
 8005814:	08006215 	.word	0x08006215

08005818 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	4613      	mov	r3, r2
 8005824:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005826:	2300      	movs	r3, #0
 8005828:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d110      	bne.n	8005854 <HAL_SPI_Receive_DMA+0x3c>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800583a:	d10b      	bne.n	8005854 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2204      	movs	r2, #4
 8005840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005844:	88fb      	ldrh	r3, [r7, #6]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f908 	bl	8005a60 <HAL_SPI_TransmitReceive_DMA>
 8005850:	4603      	mov	r3, r0
 8005852:	e0fb      	b.n	8005a4c <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800585a:	2b01      	cmp	r3, #1
 800585c:	d101      	bne.n	8005862 <HAL_SPI_Receive_DMA+0x4a>
 800585e:	2302      	movs	r3, #2
 8005860:	e0f4      	b.n	8005a4c <HAL_SPI_Receive_DMA+0x234>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b01      	cmp	r3, #1
 8005874:	d002      	beq.n	800587c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005876:	2302      	movs	r3, #2
 8005878:	75fb      	strb	r3, [r7, #23]
    goto error;
 800587a:	e0e2      	b.n	8005a42 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_SPI_Receive_DMA+0x70>
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800588c:	e0d9      	b.n	8005a42 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2204      	movs	r2, #4
 8005892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	88fa      	ldrh	r2, [r7, #6]
 80058a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d2:	d10f      	bne.n	80058f4 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005902:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800590c:	d908      	bls.n	8005920 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800591c:	605a      	str	r2, [r3, #4]
 800591e:	e042      	b.n	80059a6 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800592e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800593a:	d134      	bne.n	80059a6 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800594a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005952:	b29b      	uxth	r3, r3
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d111      	bne.n	8005980 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800596a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005972:	b29b      	uxth	r3, r3
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800597e:	e012      	b.n	80059a6 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800598e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005996:	b29b      	uxth	r3, r3
 8005998:	085b      	lsrs	r3, r3, #1
 800599a:	b29b      	uxth	r3, r3
 800599c:	3301      	adds	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	4a2a      	ldr	r2, [pc, #168]	; (8005a54 <HAL_SPI_Receive_DMA+0x23c>)
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b2:	4a29      	ldr	r2, [pc, #164]	; (8005a58 <HAL_SPI_Receive_DMA+0x240>)
 80059b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ba:	4a28      	ldr	r2, [pc, #160]	; (8005a5c <HAL_SPI_Receive_DMA+0x244>)
 80059bc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c2:	2200      	movs	r2, #0
 80059c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	330c      	adds	r3, #12
 80059d0:	4619      	mov	r1, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059de:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80059e0:	f7fc f9ba 	bl	8001d58 <HAL_DMA_Start_IT>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00c      	beq.n	8005a04 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ee:	f043 0210 	orr.w	r2, r3, #16
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005a02:	e01e      	b.n	8005a42 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	2b40      	cmp	r3, #64	; 0x40
 8005a10:	d007      	beq.n	8005a22 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a20:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0220 	orr.w	r2, r2, #32
 8005a30:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	080061dd 	.word	0x080061dd
 8005a58:	08006085 	.word	0x08006085
 8005a5c:	08006215 	.word	0x08006215

08005a60 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d101      	bne.n	8005a80 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e16c      	b.n	8005d5a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a8e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005a96:	7dbb      	ldrb	r3, [r7, #22]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d00d      	beq.n	8005ab8 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa2:	d106      	bne.n	8005ab2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <HAL_SPI_TransmitReceive_DMA+0x52>
 8005aac:	7dbb      	ldrb	r3, [r7, #22]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d002      	beq.n	8005ab8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ab6:	e14b      	b.n	8005d50 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005ac4:	887b      	ldrh	r3, [r7, #2]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ace:	e13f      	b.n	8005d50 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d003      	beq.n	8005ae4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2205      	movs	r2, #5
 8005ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	887a      	ldrh	r2, [r7, #2]
 8005af4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	887a      	ldrh	r2, [r7, #2]
 8005afa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	887a      	ldrh	r2, [r7, #2]
 8005b06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	887a      	ldrh	r2, [r7, #2]
 8005b0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8005b2c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b36:	d908      	bls.n	8005b4a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b46:	605a      	str	r2, [r3, #4]
 8005b48:	e06f      	b.n	8005c2a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b58:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b64:	d126      	bne.n	8005bb4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10f      	bne.n	8005b92 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b80:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b90:	e010      	b.n	8005bb4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ba0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3301      	adds	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bbe:	d134      	bne.n	8005c2a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bce:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d111      	bne.n	8005c04 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bee:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005c02:	e012      	b.n	8005c2a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c12:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3301      	adds	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d108      	bne.n	8005c48 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3a:	4a4a      	ldr	r2, [pc, #296]	; (8005d64 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c42:	4a49      	ldr	r2, [pc, #292]	; (8005d68 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8005c44:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c46:	e007      	b.n	8005c58 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c4c:	4a47      	ldr	r2, [pc, #284]	; (8005d6c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8005c4e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	4a46      	ldr	r2, [pc, #280]	; (8005d70 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8005c56:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5c:	4a45      	ldr	r2, [pc, #276]	; (8005d74 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8005c5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c64:	2200      	movs	r2, #0
 8005c66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	4619      	mov	r1, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c80:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005c82:	f7fc f869 	bl	8001d58 <HAL_DMA_Start_IT>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c90:	f043 0210 	orr.w	r2, r3, #16
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005ca4:	e054      	b.n	8005d50 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f042 0201 	orr.w	r2, r2, #1
 8005cb4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cba:	2200      	movs	r2, #0
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cca:	2200      	movs	r2, #0
 8005ccc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	4619      	mov	r1, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	330c      	adds	r3, #12
 8005ce6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005cee:	f7fc f833 	bl	8001d58 <HAL_DMA_Start_IT>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00c      	beq.n	8005d12 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfc:	f043 0210 	orr.w	r2, r3, #16
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005d10:	e01e      	b.n	8005d50 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1c:	2b40      	cmp	r3, #64	; 0x40
 8005d1e:	d007      	beq.n	8005d30 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d2e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0220 	orr.w	r2, r2, #32
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0202 	orr.w	r2, r2, #2
 8005d4e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	080061dd 	.word	0x080061dd
 8005d68:	08006085 	.word	0x08006085
 8005d6c:	080061f9 	.word	0x080061f9
 8005d70:	0800612f 	.word	0x0800612f
 8005d74:	08006215 	.word	0x08006215

08005d78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	099b      	lsrs	r3, r3, #6
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10f      	bne.n	8005dbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	099b      	lsrs	r3, r3, #6
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d004      	beq.n	8005dbc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	4798      	blx	r3
    return;
 8005dba:	e0d7      	b.n	8005f6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <HAL_SPI_IRQHandler+0x66>
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	09db      	lsrs	r3, r3, #7
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d004      	beq.n	8005dde <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
    return;
 8005ddc:	e0c6      	b.n	8005f6c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10c      	bne.n	8005e04 <HAL_SPI_IRQHandler+0x8c>
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	099b      	lsrs	r3, r3, #6
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	0a1b      	lsrs	r3, r3, #8
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80b4 	beq.w	8005f6c <HAL_SPI_IRQHandler+0x1f4>
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 80ad 	beq.w	8005f6c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	099b      	lsrs	r3, r3, #6
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d023      	beq.n	8005e66 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d011      	beq.n	8005e4e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2e:	f043 0204 	orr.w	r2, r3, #4
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	e00b      	b.n	8005e66 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e4e:	2300      	movs	r3, #0
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	693b      	ldr	r3, [r7, #16]
        return;
 8005e64:	e082      	b.n	8005f6c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d014      	beq.n	8005e9c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e76:	f043 0201 	orr.w	r2, r3, #1
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	0a1b      	lsrs	r3, r3, #8
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00c      	beq.n	8005ec2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eac:	f043 0208 	orr.w	r2, r3, #8
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60bb      	str	r3, [r7, #8]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	60bb      	str	r3, [r7, #8]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d04f      	beq.n	8005f6a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ed8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <HAL_SPI_IRQHandler+0x17e>
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d034      	beq.n	8005f60 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0203 	bic.w	r2, r2, #3
 8005f04:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d011      	beq.n	8005f32 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f12:	4a18      	ldr	r2, [pc, #96]	; (8005f74 <HAL_SPI_IRQHandler+0x1fc>)
 8005f14:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fb ffec 	bl	8001ef8 <HAL_DMA_Abort_IT>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d005      	beq.n	8005f32 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d016      	beq.n	8005f68 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3e:	4a0d      	ldr	r2, [pc, #52]	; (8005f74 <HAL_SPI_IRQHandler+0x1fc>)
 8005f40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fb ffd6 	bl	8001ef8 <HAL_DMA_Abort_IT>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005f5e:	e003      	b.n	8005f68 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f831 	bl	8005fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f66:	e000      	b.n	8005f6a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f68:	bf00      	nop
    return;
 8005f6a:	bf00      	nop
  }
}
 8005f6c:	3720      	adds	r7, #32
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	08006255 	.word	0x08006255

08005f78 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fea:	f7fb fcc5 	bl	8001978 <HAL_GetTick>
 8005fee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffe:	d03b      	beq.n	8006078 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0220 	bic.w	r2, r2, #32
 800600e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0202 	bic.w	r2, r2, #2
 800601e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	2164      	movs	r1, #100	; 0x64
 8006024:	6978      	ldr	r0, [r7, #20]
 8006026:	f000 fac5 	bl	80065b4 <SPI_EndRxTxTransaction>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006034:	f043 0220 	orr.w	r2, r3, #32
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2200      	movs	r2, #0
 800605e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006070:	6978      	ldr	r0, [r7, #20]
 8006072:	f7ff ffa9 	bl	8005fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006076:	e002      	b.n	800607e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006078:	6978      	ldr	r0, [r7, #20]
 800607a:	f002 fc6d 	bl	8008958 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006092:	f7fb fc71 	bl	8001978 <HAL_GetTick>
 8006096:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a6:	d03c      	beq.n	8006122 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 0220 	bic.w	r2, r2, #32
 80060b6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10d      	bne.n	80060dc <SPI_DMAReceiveCplt+0x58>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c8:	d108      	bne.n	80060dc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0203 	bic.w	r2, r2, #3
 80060d8:	605a      	str	r2, [r3, #4]
 80060da:	e007      	b.n	80060ec <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0201 	bic.w	r2, r2, #1
 80060ea:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	2164      	movs	r1, #100	; 0x64
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 f9e3 	bl	80064bc <SPI_EndRxTransaction>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff ff54 	bl	8005fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006120:	e002      	b.n	8006128 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f002 fc34 	bl	8008990 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800613c:	f7fb fc1c 	bl	8001978 <HAL_GetTick>
 8006140:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006150:	d030      	beq.n	80061b4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0220 	bic.w	r2, r2, #32
 8006160:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	2164      	movs	r1, #100	; 0x64
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fa24 	bl	80065b4 <SPI_EndRxTxTransaction>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0203 	bic.w	r2, r2, #3
 800618c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f7ff ff0b 	bl	8005fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80061b2:	e002      	b.n	80061ba <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff fedf 	bl	8005f78 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f7ff fedc 	bl	8005f8c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061d4:	bf00      	nop
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f7ff fed8 	bl	8005fa0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f7ff fed4 	bl	8005fb4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006220:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0203 	bic.w	r2, r2, #3
 8006230:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006236:	f043 0210 	orr.w	r2, r3, #16
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7ff febe 	bl	8005fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff fea9 	bl	8005fc8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	4613      	mov	r3, r2
 800628e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006290:	f7fb fb72 	bl	8001978 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	4413      	add	r3, r2
 800629e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062a0:	f7fb fb6a 	bl	8001978 <HAL_GetTick>
 80062a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062a6:	4b39      	ldr	r3, [pc, #228]	; (800638c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	015b      	lsls	r3, r3, #5
 80062ac:	0d1b      	lsrs	r3, r3, #20
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	fb02 f303 	mul.w	r3, r2, r3
 80062b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062b6:	e054      	b.n	8006362 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d050      	beq.n	8006362 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062c0:	f7fb fb5a 	bl	8001978 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d902      	bls.n	80062d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d13d      	bne.n	8006352 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ee:	d111      	bne.n	8006314 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f8:	d004      	beq.n	8006304 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006302:	d107      	bne.n	8006314 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006312:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631c:	d10f      	bne.n	800633e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800633c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e017      	b.n	8006382 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	3b01      	subs	r3, #1
 8006360:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4013      	ands	r3, r2
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	bf0c      	ite	eq
 8006372:	2301      	moveq	r3, #1
 8006374:	2300      	movne	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	79fb      	ldrb	r3, [r7, #7]
 800637c:	429a      	cmp	r2, r3
 800637e:	d19b      	bne.n	80062b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3720      	adds	r7, #32
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20000000 	.word	0x20000000

08006390 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	; 0x28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80063a2:	f7fb fae9 	bl	8001978 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	1a9b      	subs	r3, r3, r2
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	4413      	add	r3, r2
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80063b2:	f7fb fae1 	bl	8001978 <HAL_GetTick>
 80063b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	330c      	adds	r3, #12
 80063be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80063c0:	4b3d      	ldr	r3, [pc, #244]	; (80064b8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	00da      	lsls	r2, r3, #3
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	0d1b      	lsrs	r3, r3, #20
 80063d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d2:	fb02 f303 	mul.w	r3, r2, r3
 80063d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063d8:	e060      	b.n	800649c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063e0:	d107      	bne.n	80063f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d104      	bne.n	80063f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d050      	beq.n	800649c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063fa:	f7fb fabd 	bl	8001978 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006406:	429a      	cmp	r2, r3
 8006408:	d902      	bls.n	8006410 <SPI_WaitFifoStateUntilTimeout+0x80>
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	2b00      	cmp	r3, #0
 800640e:	d13d      	bne.n	800648c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800641e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006428:	d111      	bne.n	800644e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006432:	d004      	beq.n	800643e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643c:	d107      	bne.n	800644e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006456:	d10f      	bne.n	8006478 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006476:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e010      	b.n	80064ae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	3b01      	subs	r3, #1
 800649a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	4013      	ands	r3, r2
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d196      	bne.n	80063da <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3728      	adds	r7, #40	; 0x28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000000 	.word	0x20000000

080064bc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af02      	add	r7, sp, #8
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064d0:	d111      	bne.n	80064f6 <SPI_EndRxTransaction+0x3a>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064da:	d004      	beq.n	80064e6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e4:	d107      	bne.n	80064f6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064fe:	d112      	bne.n	8006526 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2200      	movs	r2, #0
 8006508:	2180      	movs	r1, #128	; 0x80
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f7ff feb8 	bl	8006280 <SPI_WaitFlagStateUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d021      	beq.n	800655a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651a:	f043 0220 	orr.w	r2, r3, #32
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e03d      	b.n	80065a2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006526:	4b21      	ldr	r3, [pc, #132]	; (80065ac <SPI_EndRxTransaction+0xf0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a21      	ldr	r2, [pc, #132]	; (80065b0 <SPI_EndRxTransaction+0xf4>)
 800652c:	fba2 2303 	umull	r2, r3, r2, r3
 8006530:	0d5b      	lsrs	r3, r3, #21
 8006532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006536:	fb02 f303 	mul.w	r3, r2, r3
 800653a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00a      	beq.n	8006558 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	3b01      	subs	r3, #1
 8006546:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d0f2      	beq.n	800653c <SPI_EndRxTransaction+0x80>
 8006556:	e000      	b.n	800655a <SPI_EndRxTransaction+0x9e>
        break;
 8006558:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006562:	d11d      	bne.n	80065a0 <SPI_EndRxTransaction+0xe4>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800656c:	d004      	beq.n	8006578 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006576:	d113      	bne.n	80065a0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2200      	movs	r2, #0
 8006580:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff ff03 	bl	8006390 <SPI_WaitFifoStateUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006594:	f043 0220 	orr.w	r2, r3, #32
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e000      	b.n	80065a2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000000 	.word	0x20000000
 80065b0:	165e9f81 	.word	0x165e9f81

080065b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff fedf 	bl	8006390 <SPI_WaitFifoStateUntilTimeout>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065dc:	f043 0220 	orr.w	r2, r3, #32
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e046      	b.n	8006676 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065e8:	4b25      	ldr	r3, [pc, #148]	; (8006680 <SPI_EndRxTxTransaction+0xcc>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a25      	ldr	r2, [pc, #148]	; (8006684 <SPI_EndRxTxTransaction+0xd0>)
 80065ee:	fba2 2303 	umull	r2, r3, r2, r3
 80065f2:	0d5b      	lsrs	r3, r3, #21
 80065f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065f8:	fb02 f303 	mul.w	r3, r2, r3
 80065fc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006606:	d112      	bne.n	800662e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2200      	movs	r2, #0
 8006610:	2180      	movs	r1, #128	; 0x80
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f7ff fe34 	bl	8006280 <SPI_WaitFlagStateUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d016      	beq.n	800664c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006622:	f043 0220 	orr.w	r2, r3, #32
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e023      	b.n	8006676 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	3b01      	subs	r3, #1
 8006638:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006644:	2b80      	cmp	r3, #128	; 0x80
 8006646:	d0f2      	beq.n	800662e <SPI_EndRxTxTransaction+0x7a>
 8006648:	e000      	b.n	800664c <SPI_EndRxTxTransaction+0x98>
        break;
 800664a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2200      	movs	r2, #0
 8006654:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff fe99 	bl	8006390 <SPI_WaitFifoStateUntilTimeout>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d007      	beq.n	8006674 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006668:	f043 0220 	orr.w	r2, r3, #32
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e000      	b.n	8006676 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000000 	.word	0x20000000
 8006684:	165e9f81 	.word	0x165e9f81

08006688 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e040      	b.n	800671c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fa fd76 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2224      	movs	r2, #36	; 0x24
 80066b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0201 	bic.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fd30 	bl	800712c <UART_SetConfig>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e022      	b.n	800671c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 ff88 	bl	80075f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 f80f 	bl	8007738 <UART_CheckIdleState>
 800671a:	4603      	mov	r3, r0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08a      	sub	sp, #40	; 0x28
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006738:	2b20      	cmp	r3, #32
 800673a:	d171      	bne.n	8006820 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <HAL_UART_Transmit+0x24>
 8006742:	88fb      	ldrh	r3, [r7, #6]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e06a      	b.n	8006822 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2221      	movs	r2, #33	; 0x21
 8006758:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800675a:	f7fb f90d 	bl	8001978 <HAL_GetTick>
 800675e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	88fa      	ldrh	r2, [r7, #6]
 8006764:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	88fa      	ldrh	r2, [r7, #6]
 800676c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006778:	d108      	bne.n	800678c <HAL_UART_Transmit+0x68>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d104      	bne.n	800678c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006782:	2300      	movs	r3, #0
 8006784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	61bb      	str	r3, [r7, #24]
 800678a:	e003      	b.n	8006794 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006790:	2300      	movs	r3, #0
 8006792:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006794:	e02c      	b.n	80067f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2200      	movs	r2, #0
 800679e:	2180      	movs	r1, #128	; 0x80
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f001 f800 	bl	80077a6 <UART_WaitOnFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e038      	b.n	8006822 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10b      	bne.n	80067ce <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	3302      	adds	r3, #2
 80067ca:	61bb      	str	r3, [r7, #24]
 80067cc:	e007      	b.n	80067de <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	781a      	ldrb	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	3301      	adds	r3, #1
 80067dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1cc      	bne.n	8006796 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2200      	movs	r2, #0
 8006804:	2140      	movs	r1, #64	; 0x40
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 ffcd 	bl	80077a6 <UART_WaitOnFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e005      	b.n	8006822 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2220      	movs	r2, #32
 800681a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	e000      	b.n	8006822 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006820:	2302      	movs	r3, #2
  }
}
 8006822:	4618      	mov	r0, r3
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b08a      	sub	sp, #40	; 0x28
 800682e:	af02      	add	r7, sp, #8
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	603b      	str	r3, [r7, #0]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006840:	2b20      	cmp	r3, #32
 8006842:	f040 80b1 	bne.w	80069a8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <HAL_UART_Receive+0x28>
 800684c:	88fb      	ldrh	r3, [r7, #6]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e0a9      	b.n	80069aa <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2222      	movs	r2, #34	; 0x22
 8006862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800686c:	f7fb f884 	bl	8001978 <HAL_GetTick>
 8006870:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	88fa      	ldrh	r2, [r7, #6]
 8006876:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	88fa      	ldrh	r2, [r7, #6]
 800687e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688a:	d10e      	bne.n	80068aa <HAL_UART_Receive+0x80>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d105      	bne.n	80068a0 <HAL_UART_Receive+0x76>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f240 12ff 	movw	r2, #511	; 0x1ff
 800689a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800689e:	e02d      	b.n	80068fc <HAL_UART_Receive+0xd2>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	22ff      	movs	r2, #255	; 0xff
 80068a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068a8:	e028      	b.n	80068fc <HAL_UART_Receive+0xd2>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10d      	bne.n	80068ce <HAL_UART_Receive+0xa4>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d104      	bne.n	80068c4 <HAL_UART_Receive+0x9a>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	22ff      	movs	r2, #255	; 0xff
 80068be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068c2:	e01b      	b.n	80068fc <HAL_UART_Receive+0xd2>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	227f      	movs	r2, #127	; 0x7f
 80068c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068cc:	e016      	b.n	80068fc <HAL_UART_Receive+0xd2>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068d6:	d10d      	bne.n	80068f4 <HAL_UART_Receive+0xca>
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d104      	bne.n	80068ea <HAL_UART_Receive+0xc0>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	227f      	movs	r2, #127	; 0x7f
 80068e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068e8:	e008      	b.n	80068fc <HAL_UART_Receive+0xd2>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	223f      	movs	r2, #63	; 0x3f
 80068ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80068f2:	e003      	b.n	80068fc <HAL_UART_Receive+0xd2>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006902:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690c:	d108      	bne.n	8006920 <HAL_UART_Receive+0xf6>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	61bb      	str	r3, [r7, #24]
 800691e:	e003      	b.n	8006928 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006924:	2300      	movs	r3, #0
 8006926:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006928:	e032      	b.n	8006990 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2200      	movs	r2, #0
 8006932:	2120      	movs	r1, #32
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 ff36 	bl	80077a6 <UART_WaitOnFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e032      	b.n	80069aa <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10c      	bne.n	8006964 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	b29a      	uxth	r2, r3
 8006952:	8a7b      	ldrh	r3, [r7, #18]
 8006954:	4013      	ands	r3, r2
 8006956:	b29a      	uxth	r2, r3
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	3302      	adds	r3, #2
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	e00c      	b.n	800697e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	b2da      	uxtb	r2, r3
 800696c:	8a7b      	ldrh	r3, [r7, #18]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	4013      	ands	r3, r2
 8006972:	b2da      	uxtb	r2, r3
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	3301      	adds	r3, #1
 800697c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1c6      	bne.n	800692a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	e000      	b.n	80069aa <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80069a8:	2302      	movs	r3, #2
  }
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
	...

080069b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08a      	sub	sp, #40	; 0x28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	4613      	mov	r3, r2
 80069c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d165      	bne.n	8006a96 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <HAL_UART_Transmit_DMA+0x22>
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e05e      	b.n	8006a98 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	88fa      	ldrh	r2, [r7, #6]
 80069e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2221      	movs	r2, #33	; 0x21
 80069fc:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d027      	beq.n	8006a56 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	4a25      	ldr	r2, [pc, #148]	; (8006aa0 <HAL_UART_Transmit_DMA+0xec>)
 8006a0c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a12:	4a24      	ldr	r2, [pc, #144]	; (8006aa4 <HAL_UART_Transmit_DMA+0xf0>)
 8006a14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1a:	4a23      	ldr	r2, [pc, #140]	; (8006aa8 <HAL_UART_Transmit_DMA+0xf4>)
 8006a1c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a22:	2200      	movs	r2, #0
 8006a24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2e:	4619      	mov	r1, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3328      	adds	r3, #40	; 0x28
 8006a36:	461a      	mov	r2, r3
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	f7fb f98d 	bl	8001d58 <HAL_DMA_Start_IT>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d008      	beq.n	8006a56 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2210      	movs	r2, #16
 8006a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e020      	b.n	8006a98 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2240      	movs	r2, #64	; 0x40
 8006a5c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7e:	623a      	str	r2, [r7, #32]
 8006a80:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	69f9      	ldr	r1, [r7, #28]
 8006a84:	6a3a      	ldr	r2, [r7, #32]
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e5      	bne.n	8006a5e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e000      	b.n	8006a98 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8006a96:	2302      	movs	r3, #2
  }
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3728      	adds	r7, #40	; 0x28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	08007b89 	.word	0x08007b89
 8006aa4:	08007c1f 	.word	0x08007c1f
 8006aa8:	08007da1 	.word	0x08007da1

08006aac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08a      	sub	sp, #40	; 0x28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	d132      	bne.n	8006b2a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <HAL_UART_Receive_DMA+0x24>
 8006aca:	88fb      	ldrh	r3, [r7, #6]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e02b      	b.n	8006b2c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d018      	beq.n	8006b1a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	e853 3f00 	ldrex	r3, [r3]
 8006af4:	613b      	str	r3, [r7, #16]
   return(result);
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	623b      	str	r3, [r7, #32]
 8006b08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0a:	69f9      	ldr	r1, [r7, #28]
 8006b0c:	6a3a      	ldr	r2, [r7, #32]
 8006b0e:	e841 2300 	strex	r3, r2, [r1]
 8006b12:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1e6      	bne.n	8006ae8 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006b1a:	88fb      	ldrh	r3, [r7, #6]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 ff07 	bl	8007934 <UART_Start_Receive_DMA>
 8006b26:	4603      	mov	r3, r0
 8006b28:	e000      	b.n	8006b2c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006b2a:	2302      	movs	r3, #2
  }
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3728      	adds	r7, #40	; 0x28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b0ba      	sub	sp, #232	; 0xe8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b5e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b62:	4013      	ands	r3, r2
 8006b64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d115      	bne.n	8006b9c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00f      	beq.n	8006b9c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 8297 	beq.w	80070c0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	4798      	blx	r3
      }
      return;
 8006b9a:	e291      	b.n	80070c0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 8117 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d106      	bne.n	8006bc0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006bb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bb6:	4b85      	ldr	r3, [pc, #532]	; (8006dcc <HAL_UART_IRQHandler+0x298>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 810a 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d011      	beq.n	8006bf0 <HAL_UART_IRQHandler+0xbc>
 8006bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00b      	beq.n	8006bf0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006be6:	f043 0201 	orr.w	r2, r3, #1
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d011      	beq.n	8006c20 <HAL_UART_IRQHandler+0xec>
 8006bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c16:	f043 0204 	orr.w	r2, r3, #4
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d011      	beq.n	8006c50 <HAL_UART_IRQHandler+0x11c>
 8006c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2204      	movs	r2, #4
 8006c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c46:	f043 0202 	orr.w	r2, r3, #2
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c54:	f003 0308 	and.w	r3, r3, #8
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d017      	beq.n	8006c8c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d105      	bne.n	8006c74 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c6c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2208      	movs	r2, #8
 8006c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c82:	f043 0208 	orr.w	r2, r3, #8
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d012      	beq.n	8006cbe <HAL_UART_IRQHandler+0x18a>
 8006c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00c      	beq.n	8006cbe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cb4:	f043 0220 	orr.w	r2, r3, #32
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 81fd 	beq.w	80070c4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00d      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d007      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d06:	2b40      	cmp	r3, #64	; 0x40
 8006d08:	d005      	beq.n	8006d16 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d04f      	beq.n	8006db6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fed2 	bl	8007ac0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d26:	2b40      	cmp	r3, #64	; 0x40
 8006d28:	d141      	bne.n	8006dae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	3308      	adds	r3, #8
 8006d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d38:	e853 3f00 	ldrex	r3, [r3]
 8006d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3308      	adds	r3, #8
 8006d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d66:	e841 2300 	strex	r3, r2, [r1]
 8006d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1d9      	bne.n	8006d2a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d013      	beq.n	8006da6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d82:	4a13      	ldr	r2, [pc, #76]	; (8006dd0 <HAL_UART_IRQHandler+0x29c>)
 8006d84:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fb f8b4 	bl	8001ef8 <HAL_DMA_Abort_IT>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d017      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006da0:	4610      	mov	r0, r2
 8006da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da4:	e00f      	b.n	8006dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f9aa 	bl	8007100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dac:	e00b      	b.n	8006dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f9a6 	bl	8007100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db4:	e007      	b.n	8006dc6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f9a2 	bl	8007100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006dc4:	e17e      	b.n	80070c4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc6:	bf00      	nop
    return;
 8006dc8:	e17c      	b.n	80070c4 <HAL_UART_IRQHandler+0x590>
 8006dca:	bf00      	nop
 8006dcc:	04000120 	.word	0x04000120
 8006dd0:	08007e1f 	.word	0x08007e1f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	f040 814c 	bne.w	8007076 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de2:	f003 0310 	and.w	r3, r3, #16
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 8145 	beq.w	8007076 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006df0:	f003 0310 	and.w	r3, r3, #16
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 813e 	beq.w	8007076 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2210      	movs	r2, #16
 8006e00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b40      	cmp	r3, #64	; 0x40
 8006e0e:	f040 80b6 	bne.w	8006f7e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e1e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 8150 	beq.w	80070c8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e32:	429a      	cmp	r2, r3
 8006e34:	f080 8148 	bcs.w	80070c8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4c:	f000 8086 	beq.w	8006f5c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e7e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1da      	bne.n	8006e50 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3308      	adds	r3, #8
 8006eba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ebe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ec2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ec6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e1      	bne.n	8006e9a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3308      	adds	r3, #8
 8006edc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006efa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006efc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f02:	e841 2300 	strex	r3, r2, [r1]
 8006f06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1e3      	bne.n	8006ed6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2c:	f023 0310 	bic.w	r3, r3, #16
 8006f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f40:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f46:	e841 2300 	strex	r3, r2, [r1]
 8006f4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1e4      	bne.n	8006f1c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fa ff5e 	bl	8001e18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f8cc 	bl	8007114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f7c:	e0a4      	b.n	80070c8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 8096 	beq.w	80070cc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 8091 	beq.w	80070cc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	e853 3f00 	ldrex	r3, [r3]
 8006fb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8006fce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fd4:	e841 2300 	strex	r3, r2, [r1]
 8006fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e4      	bne.n	8006faa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007004:	633a      	str	r2, [r7, #48]	; 0x30
 8007006:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800700a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e3      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	60fb      	str	r3, [r7, #12]
   return(result);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f023 0310 	bic.w	r3, r3, #16
 8007040:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800704e:	61fb      	str	r3, [r7, #28]
 8007050:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	69b9      	ldr	r1, [r7, #24]
 8007054:	69fa      	ldr	r2, [r7, #28]
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	617b      	str	r3, [r7, #20]
   return(result);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e4      	bne.n	800702c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007068:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f850 	bl	8007114 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007074:	e02a      	b.n	80070cc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00e      	beq.n	80070a0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708a:	2b00      	cmp	r3, #0
 800708c:	d008      	beq.n	80070a0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d01c      	beq.n	80070d0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	4798      	blx	r3
    }
    return;
 800709e:	e017      	b.n	80070d0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d012      	beq.n	80070d2 <HAL_UART_IRQHandler+0x59e>
 80070ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00c      	beq.n	80070d2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fec6 	bl	8007e4a <UART_EndTransmit_IT>
    return;
 80070be:	e008      	b.n	80070d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80070c0:	bf00      	nop
 80070c2:	e006      	b.n	80070d2 <HAL_UART_IRQHandler+0x59e>
    return;
 80070c4:	bf00      	nop
 80070c6:	e004      	b.n	80070d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80070c8:	bf00      	nop
 80070ca:	e002      	b.n	80070d2 <HAL_UART_IRQHandler+0x59e>
      return;
 80070cc:	bf00      	nop
 80070ce:	e000      	b.n	80070d2 <HAL_UART_IRQHandler+0x59e>
    return;
 80070d0:	bf00      	nop
  }

}
 80070d2:	37e8      	adds	r7, #232	; 0xe8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	460b      	mov	r3, r1
 800711e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	431a      	orrs	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	4313      	orrs	r3, r2
 800714e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4ba6      	ldr	r3, [pc, #664]	; (80073f0 <UART_SetConfig+0x2c4>)
 8007158:	4013      	ands	r3, r2
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	6812      	ldr	r2, [r2, #0]
 800715e:	6979      	ldr	r1, [r7, #20]
 8007160:	430b      	orrs	r3, r1
 8007162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	697a      	ldr	r2, [r7, #20]
 800719a:	430a      	orrs	r2, r1
 800719c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a94      	ldr	r2, [pc, #592]	; (80073f4 <UART_SetConfig+0x2c8>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d120      	bne.n	80071ea <UART_SetConfig+0xbe>
 80071a8:	4b93      	ldr	r3, [pc, #588]	; (80073f8 <UART_SetConfig+0x2cc>)
 80071aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d816      	bhi.n	80071e4 <UART_SetConfig+0xb8>
 80071b6:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <UART_SetConfig+0x90>)
 80071b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071bc:	080071cd 	.word	0x080071cd
 80071c0:	080071d9 	.word	0x080071d9
 80071c4:	080071d3 	.word	0x080071d3
 80071c8:	080071df 	.word	0x080071df
 80071cc:	2301      	movs	r3, #1
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e150      	b.n	8007474 <UART_SetConfig+0x348>
 80071d2:	2302      	movs	r3, #2
 80071d4:	77fb      	strb	r3, [r7, #31]
 80071d6:	e14d      	b.n	8007474 <UART_SetConfig+0x348>
 80071d8:	2304      	movs	r3, #4
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	e14a      	b.n	8007474 <UART_SetConfig+0x348>
 80071de:	2308      	movs	r3, #8
 80071e0:	77fb      	strb	r3, [r7, #31]
 80071e2:	e147      	b.n	8007474 <UART_SetConfig+0x348>
 80071e4:	2310      	movs	r3, #16
 80071e6:	77fb      	strb	r3, [r7, #31]
 80071e8:	e144      	b.n	8007474 <UART_SetConfig+0x348>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a83      	ldr	r2, [pc, #524]	; (80073fc <UART_SetConfig+0x2d0>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d132      	bne.n	800725a <UART_SetConfig+0x12e>
 80071f4:	4b80      	ldr	r3, [pc, #512]	; (80073f8 <UART_SetConfig+0x2cc>)
 80071f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fa:	f003 030c 	and.w	r3, r3, #12
 80071fe:	2b0c      	cmp	r3, #12
 8007200:	d828      	bhi.n	8007254 <UART_SetConfig+0x128>
 8007202:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <UART_SetConfig+0xdc>)
 8007204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007208:	0800723d 	.word	0x0800723d
 800720c:	08007255 	.word	0x08007255
 8007210:	08007255 	.word	0x08007255
 8007214:	08007255 	.word	0x08007255
 8007218:	08007249 	.word	0x08007249
 800721c:	08007255 	.word	0x08007255
 8007220:	08007255 	.word	0x08007255
 8007224:	08007255 	.word	0x08007255
 8007228:	08007243 	.word	0x08007243
 800722c:	08007255 	.word	0x08007255
 8007230:	08007255 	.word	0x08007255
 8007234:	08007255 	.word	0x08007255
 8007238:	0800724f 	.word	0x0800724f
 800723c:	2300      	movs	r3, #0
 800723e:	77fb      	strb	r3, [r7, #31]
 8007240:	e118      	b.n	8007474 <UART_SetConfig+0x348>
 8007242:	2302      	movs	r3, #2
 8007244:	77fb      	strb	r3, [r7, #31]
 8007246:	e115      	b.n	8007474 <UART_SetConfig+0x348>
 8007248:	2304      	movs	r3, #4
 800724a:	77fb      	strb	r3, [r7, #31]
 800724c:	e112      	b.n	8007474 <UART_SetConfig+0x348>
 800724e:	2308      	movs	r3, #8
 8007250:	77fb      	strb	r3, [r7, #31]
 8007252:	e10f      	b.n	8007474 <UART_SetConfig+0x348>
 8007254:	2310      	movs	r3, #16
 8007256:	77fb      	strb	r3, [r7, #31]
 8007258:	e10c      	b.n	8007474 <UART_SetConfig+0x348>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a68      	ldr	r2, [pc, #416]	; (8007400 <UART_SetConfig+0x2d4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d120      	bne.n	80072a6 <UART_SetConfig+0x17a>
 8007264:	4b64      	ldr	r3, [pc, #400]	; (80073f8 <UART_SetConfig+0x2cc>)
 8007266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800726e:	2b30      	cmp	r3, #48	; 0x30
 8007270:	d013      	beq.n	800729a <UART_SetConfig+0x16e>
 8007272:	2b30      	cmp	r3, #48	; 0x30
 8007274:	d814      	bhi.n	80072a0 <UART_SetConfig+0x174>
 8007276:	2b20      	cmp	r3, #32
 8007278:	d009      	beq.n	800728e <UART_SetConfig+0x162>
 800727a:	2b20      	cmp	r3, #32
 800727c:	d810      	bhi.n	80072a0 <UART_SetConfig+0x174>
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <UART_SetConfig+0x15c>
 8007282:	2b10      	cmp	r3, #16
 8007284:	d006      	beq.n	8007294 <UART_SetConfig+0x168>
 8007286:	e00b      	b.n	80072a0 <UART_SetConfig+0x174>
 8007288:	2300      	movs	r3, #0
 800728a:	77fb      	strb	r3, [r7, #31]
 800728c:	e0f2      	b.n	8007474 <UART_SetConfig+0x348>
 800728e:	2302      	movs	r3, #2
 8007290:	77fb      	strb	r3, [r7, #31]
 8007292:	e0ef      	b.n	8007474 <UART_SetConfig+0x348>
 8007294:	2304      	movs	r3, #4
 8007296:	77fb      	strb	r3, [r7, #31]
 8007298:	e0ec      	b.n	8007474 <UART_SetConfig+0x348>
 800729a:	2308      	movs	r3, #8
 800729c:	77fb      	strb	r3, [r7, #31]
 800729e:	e0e9      	b.n	8007474 <UART_SetConfig+0x348>
 80072a0:	2310      	movs	r3, #16
 80072a2:	77fb      	strb	r3, [r7, #31]
 80072a4:	e0e6      	b.n	8007474 <UART_SetConfig+0x348>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a56      	ldr	r2, [pc, #344]	; (8007404 <UART_SetConfig+0x2d8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d120      	bne.n	80072f2 <UART_SetConfig+0x1c6>
 80072b0:	4b51      	ldr	r3, [pc, #324]	; (80073f8 <UART_SetConfig+0x2cc>)
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80072ba:	2bc0      	cmp	r3, #192	; 0xc0
 80072bc:	d013      	beq.n	80072e6 <UART_SetConfig+0x1ba>
 80072be:	2bc0      	cmp	r3, #192	; 0xc0
 80072c0:	d814      	bhi.n	80072ec <UART_SetConfig+0x1c0>
 80072c2:	2b80      	cmp	r3, #128	; 0x80
 80072c4:	d009      	beq.n	80072da <UART_SetConfig+0x1ae>
 80072c6:	2b80      	cmp	r3, #128	; 0x80
 80072c8:	d810      	bhi.n	80072ec <UART_SetConfig+0x1c0>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <UART_SetConfig+0x1a8>
 80072ce:	2b40      	cmp	r3, #64	; 0x40
 80072d0:	d006      	beq.n	80072e0 <UART_SetConfig+0x1b4>
 80072d2:	e00b      	b.n	80072ec <UART_SetConfig+0x1c0>
 80072d4:	2300      	movs	r3, #0
 80072d6:	77fb      	strb	r3, [r7, #31]
 80072d8:	e0cc      	b.n	8007474 <UART_SetConfig+0x348>
 80072da:	2302      	movs	r3, #2
 80072dc:	77fb      	strb	r3, [r7, #31]
 80072de:	e0c9      	b.n	8007474 <UART_SetConfig+0x348>
 80072e0:	2304      	movs	r3, #4
 80072e2:	77fb      	strb	r3, [r7, #31]
 80072e4:	e0c6      	b.n	8007474 <UART_SetConfig+0x348>
 80072e6:	2308      	movs	r3, #8
 80072e8:	77fb      	strb	r3, [r7, #31]
 80072ea:	e0c3      	b.n	8007474 <UART_SetConfig+0x348>
 80072ec:	2310      	movs	r3, #16
 80072ee:	77fb      	strb	r3, [r7, #31]
 80072f0:	e0c0      	b.n	8007474 <UART_SetConfig+0x348>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a44      	ldr	r2, [pc, #272]	; (8007408 <UART_SetConfig+0x2dc>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d125      	bne.n	8007348 <UART_SetConfig+0x21c>
 80072fc:	4b3e      	ldr	r3, [pc, #248]	; (80073f8 <UART_SetConfig+0x2cc>)
 80072fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800730a:	d017      	beq.n	800733c <UART_SetConfig+0x210>
 800730c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007310:	d817      	bhi.n	8007342 <UART_SetConfig+0x216>
 8007312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007316:	d00b      	beq.n	8007330 <UART_SetConfig+0x204>
 8007318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800731c:	d811      	bhi.n	8007342 <UART_SetConfig+0x216>
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <UART_SetConfig+0x1fe>
 8007322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007326:	d006      	beq.n	8007336 <UART_SetConfig+0x20a>
 8007328:	e00b      	b.n	8007342 <UART_SetConfig+0x216>
 800732a:	2300      	movs	r3, #0
 800732c:	77fb      	strb	r3, [r7, #31]
 800732e:	e0a1      	b.n	8007474 <UART_SetConfig+0x348>
 8007330:	2302      	movs	r3, #2
 8007332:	77fb      	strb	r3, [r7, #31]
 8007334:	e09e      	b.n	8007474 <UART_SetConfig+0x348>
 8007336:	2304      	movs	r3, #4
 8007338:	77fb      	strb	r3, [r7, #31]
 800733a:	e09b      	b.n	8007474 <UART_SetConfig+0x348>
 800733c:	2308      	movs	r3, #8
 800733e:	77fb      	strb	r3, [r7, #31]
 8007340:	e098      	b.n	8007474 <UART_SetConfig+0x348>
 8007342:	2310      	movs	r3, #16
 8007344:	77fb      	strb	r3, [r7, #31]
 8007346:	e095      	b.n	8007474 <UART_SetConfig+0x348>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a2f      	ldr	r2, [pc, #188]	; (800740c <UART_SetConfig+0x2e0>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d125      	bne.n	800739e <UART_SetConfig+0x272>
 8007352:	4b29      	ldr	r3, [pc, #164]	; (80073f8 <UART_SetConfig+0x2cc>)
 8007354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007358:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800735c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007360:	d017      	beq.n	8007392 <UART_SetConfig+0x266>
 8007362:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007366:	d817      	bhi.n	8007398 <UART_SetConfig+0x26c>
 8007368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800736c:	d00b      	beq.n	8007386 <UART_SetConfig+0x25a>
 800736e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007372:	d811      	bhi.n	8007398 <UART_SetConfig+0x26c>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <UART_SetConfig+0x254>
 8007378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800737c:	d006      	beq.n	800738c <UART_SetConfig+0x260>
 800737e:	e00b      	b.n	8007398 <UART_SetConfig+0x26c>
 8007380:	2301      	movs	r3, #1
 8007382:	77fb      	strb	r3, [r7, #31]
 8007384:	e076      	b.n	8007474 <UART_SetConfig+0x348>
 8007386:	2302      	movs	r3, #2
 8007388:	77fb      	strb	r3, [r7, #31]
 800738a:	e073      	b.n	8007474 <UART_SetConfig+0x348>
 800738c:	2304      	movs	r3, #4
 800738e:	77fb      	strb	r3, [r7, #31]
 8007390:	e070      	b.n	8007474 <UART_SetConfig+0x348>
 8007392:	2308      	movs	r3, #8
 8007394:	77fb      	strb	r3, [r7, #31]
 8007396:	e06d      	b.n	8007474 <UART_SetConfig+0x348>
 8007398:	2310      	movs	r3, #16
 800739a:	77fb      	strb	r3, [r7, #31]
 800739c:	e06a      	b.n	8007474 <UART_SetConfig+0x348>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a1b      	ldr	r2, [pc, #108]	; (8007410 <UART_SetConfig+0x2e4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d138      	bne.n	800741a <UART_SetConfig+0x2ee>
 80073a8:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <UART_SetConfig+0x2cc>)
 80073aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80073b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073b6:	d017      	beq.n	80073e8 <UART_SetConfig+0x2bc>
 80073b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073bc:	d82a      	bhi.n	8007414 <UART_SetConfig+0x2e8>
 80073be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c2:	d00b      	beq.n	80073dc <UART_SetConfig+0x2b0>
 80073c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073c8:	d824      	bhi.n	8007414 <UART_SetConfig+0x2e8>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <UART_SetConfig+0x2aa>
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d2:	d006      	beq.n	80073e2 <UART_SetConfig+0x2b6>
 80073d4:	e01e      	b.n	8007414 <UART_SetConfig+0x2e8>
 80073d6:	2300      	movs	r3, #0
 80073d8:	77fb      	strb	r3, [r7, #31]
 80073da:	e04b      	b.n	8007474 <UART_SetConfig+0x348>
 80073dc:	2302      	movs	r3, #2
 80073de:	77fb      	strb	r3, [r7, #31]
 80073e0:	e048      	b.n	8007474 <UART_SetConfig+0x348>
 80073e2:	2304      	movs	r3, #4
 80073e4:	77fb      	strb	r3, [r7, #31]
 80073e6:	e045      	b.n	8007474 <UART_SetConfig+0x348>
 80073e8:	2308      	movs	r3, #8
 80073ea:	77fb      	strb	r3, [r7, #31]
 80073ec:	e042      	b.n	8007474 <UART_SetConfig+0x348>
 80073ee:	bf00      	nop
 80073f0:	efff69f3 	.word	0xefff69f3
 80073f4:	40011000 	.word	0x40011000
 80073f8:	40023800 	.word	0x40023800
 80073fc:	40004400 	.word	0x40004400
 8007400:	40004800 	.word	0x40004800
 8007404:	40004c00 	.word	0x40004c00
 8007408:	40005000 	.word	0x40005000
 800740c:	40011400 	.word	0x40011400
 8007410:	40007800 	.word	0x40007800
 8007414:	2310      	movs	r3, #16
 8007416:	77fb      	strb	r3, [r7, #31]
 8007418:	e02c      	b.n	8007474 <UART_SetConfig+0x348>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a72      	ldr	r2, [pc, #456]	; (80075e8 <UART_SetConfig+0x4bc>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d125      	bne.n	8007470 <UART_SetConfig+0x344>
 8007424:	4b71      	ldr	r3, [pc, #452]	; (80075ec <UART_SetConfig+0x4c0>)
 8007426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800742e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007432:	d017      	beq.n	8007464 <UART_SetConfig+0x338>
 8007434:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007438:	d817      	bhi.n	800746a <UART_SetConfig+0x33e>
 800743a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800743e:	d00b      	beq.n	8007458 <UART_SetConfig+0x32c>
 8007440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007444:	d811      	bhi.n	800746a <UART_SetConfig+0x33e>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <UART_SetConfig+0x326>
 800744a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800744e:	d006      	beq.n	800745e <UART_SetConfig+0x332>
 8007450:	e00b      	b.n	800746a <UART_SetConfig+0x33e>
 8007452:	2300      	movs	r3, #0
 8007454:	77fb      	strb	r3, [r7, #31]
 8007456:	e00d      	b.n	8007474 <UART_SetConfig+0x348>
 8007458:	2302      	movs	r3, #2
 800745a:	77fb      	strb	r3, [r7, #31]
 800745c:	e00a      	b.n	8007474 <UART_SetConfig+0x348>
 800745e:	2304      	movs	r3, #4
 8007460:	77fb      	strb	r3, [r7, #31]
 8007462:	e007      	b.n	8007474 <UART_SetConfig+0x348>
 8007464:	2308      	movs	r3, #8
 8007466:	77fb      	strb	r3, [r7, #31]
 8007468:	e004      	b.n	8007474 <UART_SetConfig+0x348>
 800746a:	2310      	movs	r3, #16
 800746c:	77fb      	strb	r3, [r7, #31]
 800746e:	e001      	b.n	8007474 <UART_SetConfig+0x348>
 8007470:	2310      	movs	r3, #16
 8007472:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800747c:	d15b      	bne.n	8007536 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800747e:	7ffb      	ldrb	r3, [r7, #31]
 8007480:	2b08      	cmp	r3, #8
 8007482:	d828      	bhi.n	80074d6 <UART_SetConfig+0x3aa>
 8007484:	a201      	add	r2, pc, #4	; (adr r2, 800748c <UART_SetConfig+0x360>)
 8007486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748a:	bf00      	nop
 800748c:	080074b1 	.word	0x080074b1
 8007490:	080074b9 	.word	0x080074b9
 8007494:	080074c1 	.word	0x080074c1
 8007498:	080074d7 	.word	0x080074d7
 800749c:	080074c7 	.word	0x080074c7
 80074a0:	080074d7 	.word	0x080074d7
 80074a4:	080074d7 	.word	0x080074d7
 80074a8:	080074d7 	.word	0x080074d7
 80074ac:	080074cf 	.word	0x080074cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074b0:	f7fd fbfa 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 80074b4:	61b8      	str	r0, [r7, #24]
        break;
 80074b6:	e013      	b.n	80074e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b8:	f7fd fc0a 	bl	8004cd0 <HAL_RCC_GetPCLK2Freq>
 80074bc:	61b8      	str	r0, [r7, #24]
        break;
 80074be:	e00f      	b.n	80074e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074c0:	4b4b      	ldr	r3, [pc, #300]	; (80075f0 <UART_SetConfig+0x4c4>)
 80074c2:	61bb      	str	r3, [r7, #24]
        break;
 80074c4:	e00c      	b.n	80074e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074c6:	f7fd fadd 	bl	8004a84 <HAL_RCC_GetSysClockFreq>
 80074ca:	61b8      	str	r0, [r7, #24]
        break;
 80074cc:	e008      	b.n	80074e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074d2:	61bb      	str	r3, [r7, #24]
        break;
 80074d4:	e004      	b.n	80074e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	77bb      	strb	r3, [r7, #30]
        break;
 80074de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d074      	beq.n	80075d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	005a      	lsls	r2, r3, #1
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	441a      	add	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2b0f      	cmp	r3, #15
 8007500:	d916      	bls.n	8007530 <UART_SetConfig+0x404>
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007508:	d212      	bcs.n	8007530 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f023 030f 	bic.w	r3, r3, #15
 8007512:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	085b      	lsrs	r3, r3, #1
 8007518:	b29b      	uxth	r3, r3
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	b29a      	uxth	r2, r3
 8007520:	89fb      	ldrh	r3, [r7, #14]
 8007522:	4313      	orrs	r3, r2
 8007524:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	89fa      	ldrh	r2, [r7, #14]
 800752c:	60da      	str	r2, [r3, #12]
 800752e:	e04f      	b.n	80075d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	77bb      	strb	r3, [r7, #30]
 8007534:	e04c      	b.n	80075d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007536:	7ffb      	ldrb	r3, [r7, #31]
 8007538:	2b08      	cmp	r3, #8
 800753a:	d828      	bhi.n	800758e <UART_SetConfig+0x462>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <UART_SetConfig+0x418>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007569 	.word	0x08007569
 8007548:	08007571 	.word	0x08007571
 800754c:	08007579 	.word	0x08007579
 8007550:	0800758f 	.word	0x0800758f
 8007554:	0800757f 	.word	0x0800757f
 8007558:	0800758f 	.word	0x0800758f
 800755c:	0800758f 	.word	0x0800758f
 8007560:	0800758f 	.word	0x0800758f
 8007564:	08007587 	.word	0x08007587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007568:	f7fd fb9e 	bl	8004ca8 <HAL_RCC_GetPCLK1Freq>
 800756c:	61b8      	str	r0, [r7, #24]
        break;
 800756e:	e013      	b.n	8007598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007570:	f7fd fbae 	bl	8004cd0 <HAL_RCC_GetPCLK2Freq>
 8007574:	61b8      	str	r0, [r7, #24]
        break;
 8007576:	e00f      	b.n	8007598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007578:	4b1d      	ldr	r3, [pc, #116]	; (80075f0 <UART_SetConfig+0x4c4>)
 800757a:	61bb      	str	r3, [r7, #24]
        break;
 800757c:	e00c      	b.n	8007598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800757e:	f7fd fa81 	bl	8004a84 <HAL_RCC_GetSysClockFreq>
 8007582:	61b8      	str	r0, [r7, #24]
        break;
 8007584:	e008      	b.n	8007598 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800758a:	61bb      	str	r3, [r7, #24]
        break;
 800758c:	e004      	b.n	8007598 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	77bb      	strb	r3, [r7, #30]
        break;
 8007596:	bf00      	nop
    }

    if (pclk != 0U)
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d018      	beq.n	80075d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	085a      	lsrs	r2, r3, #1
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	441a      	add	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80075b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	2b0f      	cmp	r3, #15
 80075b6:	d909      	bls.n	80075cc <UART_SetConfig+0x4a0>
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075be:	d205      	bcs.n	80075cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	60da      	str	r2, [r3, #12]
 80075ca:	e001      	b.n	80075d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80075dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3720      	adds	r7, #32
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	40007c00 	.word	0x40007c00
 80075ec:	40023800 	.word	0x40023800
 80075f0:	00f42400 	.word	0x00f42400

080075f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	430a      	orrs	r2, r1
 800763e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	f003 0308 	and.w	r3, r3, #8
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	f003 0320 	and.w	r3, r3, #32
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01a      	beq.n	800770a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076f2:	d10a      	bne.n	800770a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	430a      	orrs	r2, r1
 800772a:	605a      	str	r2, [r3, #4]
  }
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af02      	add	r7, sp, #8
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007748:	f7fa f916 	bl	8001978 <HAL_GetTick>
 800774c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b08      	cmp	r3, #8
 800775a:	d10e      	bne.n	800777a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800775c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f81b 	bl	80077a6 <UART_WaitOnFlagUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e011      	b.n	800779e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2220      	movs	r2, #32
 800777e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b09c      	sub	sp, #112	; 0x70
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	60f8      	str	r0, [r7, #12]
 80077ae:	60b9      	str	r1, [r7, #8]
 80077b0:	603b      	str	r3, [r7, #0]
 80077b2:	4613      	mov	r3, r2
 80077b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b6:	e0a7      	b.n	8007908 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077be:	f000 80a3 	beq.w	8007908 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077c2:	f7fa f8d9 	bl	8001978 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d302      	bcc.n	80077d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80077d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d13f      	bne.n	8007858 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e0:	e853 3f00 	ldrex	r3, [r3]
 80077e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80077e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80077ec:	667b      	str	r3, [r7, #100]	; 0x64
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077fe:	e841 2300 	strex	r3, r2, [r1]
 8007802:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e6      	bne.n	80077d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3308      	adds	r3, #8
 8007810:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	f023 0301 	bic.w	r3, r3, #1
 8007820:	663b      	str	r3, [r7, #96]	; 0x60
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3308      	adds	r3, #8
 8007828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800782a:	64ba      	str	r2, [r7, #72]	; 0x48
 800782c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e5      	bne.n	800780a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2220      	movs	r2, #32
 8007842:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2220      	movs	r2, #32
 8007848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e068      	b.n	800792a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	2b00      	cmp	r3, #0
 8007864:	d050      	beq.n	8007908 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007874:	d148      	bne.n	8007908 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800787e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007894:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789e:	637b      	str	r3, [r7, #52]	; 0x34
 80078a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a6:	e841 2300 	strex	r3, r2, [r1]
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e6      	bne.n	8007880 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3308      	adds	r3, #8
 80078b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	613b      	str	r3, [r7, #16]
   return(result);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f023 0301 	bic.w	r3, r3, #1
 80078c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078d2:	623a      	str	r2, [r7, #32]
 80078d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	69f9      	ldr	r1, [r7, #28]
 80078d8:	6a3a      	ldr	r2, [r7, #32]
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	61bb      	str	r3, [r7, #24]
   return(result);
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e5      	bne.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e010      	b.n	800792a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	69da      	ldr	r2, [r3, #28]
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	4013      	ands	r3, r2
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	429a      	cmp	r2, r3
 8007916:	bf0c      	ite	eq
 8007918:	2301      	moveq	r3, #1
 800791a:	2300      	movne	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	79fb      	ldrb	r3, [r7, #7]
 8007922:	429a      	cmp	r2, r3
 8007924:	f43f af48 	beq.w	80077b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3770      	adds	r7, #112	; 0x70
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b096      	sub	sp, #88	; 0x58
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	4613      	mov	r3, r2
 8007940:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2222      	movs	r2, #34	; 0x22
 800795c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007964:	2b00      	cmp	r3, #0
 8007966:	d028      	beq.n	80079ba <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800796c:	4a3e      	ldr	r2, [pc, #248]	; (8007a68 <UART_Start_Receive_DMA+0x134>)
 800796e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007974:	4a3d      	ldr	r2, [pc, #244]	; (8007a6c <UART_Start_Receive_DMA+0x138>)
 8007976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800797c:	4a3c      	ldr	r2, [pc, #240]	; (8007a70 <UART_Start_Receive_DMA+0x13c>)
 800797e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007984:	2200      	movs	r2, #0
 8007986:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3324      	adds	r3, #36	; 0x24
 8007992:	4619      	mov	r1, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007998:	461a      	mov	r2, r3
 800799a:	88fb      	ldrh	r3, [r7, #6]
 800799c:	f7fa f9dc 	bl	8001d58 <HAL_DMA_Start_IT>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d009      	beq.n	80079ba <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2210      	movs	r2, #16
 80079aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2220      	movs	r2, #32
 80079b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e051      	b.n	8007a5e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d018      	beq.n	80079f4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ca:	e853 3f00 	ldrex	r3, [r3]
 80079ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079d6:	657b      	str	r3, [r7, #84]	; 0x54
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80079e2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079e8:	e841 2300 	strex	r3, r2, [r1]
 80079ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1e6      	bne.n	80079c2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3308      	adds	r3, #8
 80079fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	f043 0301 	orr.w	r3, r3, #1
 8007a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3308      	adds	r3, #8
 8007a12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a14:	637a      	str	r2, [r7, #52]	; 0x34
 8007a16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e5      	bne.n	80079f4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	613b      	str	r3, [r7, #16]
   return(result);
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3308      	adds	r3, #8
 8007a46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a48:	623a      	str	r2, [r7, #32]
 8007a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	69f9      	ldr	r1, [r7, #28]
 8007a4e:	6a3a      	ldr	r2, [r7, #32]
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e5      	bne.n	8007a28 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3758      	adds	r7, #88	; 0x58
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	08007c3b 	.word	0x08007c3b
 8007a6c:	08007d63 	.word	0x08007d63
 8007a70:	08007da1 	.word	0x08007da1

08007a74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b089      	sub	sp, #36	; 0x24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a90:	61fb      	str	r3, [r7, #28]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	61bb      	str	r3, [r7, #24]
 8007a9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6979      	ldr	r1, [r7, #20]
 8007aa0:	69ba      	ldr	r2, [r7, #24]
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e6      	bne.n	8007a7c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007ab4:	bf00      	nop
 8007ab6:	3724      	adds	r7, #36	; 0x24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b095      	sub	sp, #84	; 0x54
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad0:	e853 3f00 	ldrex	r3, [r3]
 8007ad4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007adc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ae8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007aec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aee:	e841 2300 	strex	r3, r2, [r1]
 8007af2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1e6      	bne.n	8007ac8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3308      	adds	r3, #8
 8007b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b02:	6a3b      	ldr	r3, [r7, #32]
 8007b04:	e853 3f00 	ldrex	r3, [r3]
 8007b08:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	f023 0301 	bic.w	r3, r3, #1
 8007b10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3308      	adds	r3, #8
 8007b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e5      	bne.n	8007afa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d118      	bne.n	8007b68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	e853 3f00 	ldrex	r3, [r3]
 8007b42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f023 0310 	bic.w	r3, r3, #16
 8007b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	461a      	mov	r2, r3
 8007b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b54:	61bb      	str	r3, [r7, #24]
 8007b56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	6979      	ldr	r1, [r7, #20]
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	e841 2300 	strex	r3, r2, [r1]
 8007b60:	613b      	str	r3, [r7, #16]
   return(result);
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1e6      	bne.n	8007b36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b7c:	bf00      	nop
 8007b7e:	3754      	adds	r7, #84	; 0x54
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b090      	sub	sp, #64	; 0x40
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b94:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b9e:	d037      	beq.n	8007c10 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8007ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3308      	adds	r3, #8
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bc8:	633a      	str	r2, [r7, #48]	; 0x30
 8007bca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e5      	bne.n	8007ba8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfa:	61fb      	str	r3, [r7, #28]
 8007bfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	69b9      	ldr	r1, [r7, #24]
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	e841 2300 	strex	r3, r2, [r1]
 8007c06:	617b      	str	r3, [r7, #20]
   return(result);
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1e6      	bne.n	8007bdc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c0e:	e002      	b.n	8007c16 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8007c10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c12:	f001 f81d 	bl	8008c50 <HAL_UART_TxCpltCallback>
}
 8007c16:	bf00      	nop
 8007c18:	3740      	adds	r7, #64	; 0x40
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff fa53 	bl	80070d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b09c      	sub	sp, #112	; 0x70
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c46:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c50:	d071      	beq.n	8007d36 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8007c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c54:	2200      	movs	r2, #0
 8007c56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c78:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c7a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e6      	bne.n	8007c5a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9e:	f023 0301 	bic.w	r3, r3, #1
 8007ca2:	667b      	str	r3, [r7, #100]	; 0x64
 8007ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cac:	647a      	str	r2, [r7, #68]	; 0x44
 8007cae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e5      	bne.n	8007c8c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	e853 3f00 	ldrex	r3, [r3]
 8007cce:	623b      	str	r3, [r7, #32]
   return(result);
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8007cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3308      	adds	r3, #8
 8007cde:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ce0:	633a      	str	r2, [r7, #48]	; 0x30
 8007ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ce6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e5      	bne.n	8007cc0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d118      	bne.n	8007d36 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f023 0310 	bic.w	r3, r3, #16
 8007d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d22:	61fb      	str	r3, [r7, #28]
 8007d24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	69b9      	ldr	r1, [r7, #24]
 8007d28:	69fa      	ldr	r2, [r7, #28]
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	617b      	str	r3, [r7, #20]
   return(result);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e6      	bne.n	8007d04 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d38:	2200      	movs	r2, #0
 8007d3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d107      	bne.n	8007d54 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d4e:	f7ff f9e1 	bl	8007114 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d52:	e002      	b.n	8007d5a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8007d54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d56:	f000 ff5f 	bl	8008c18 <HAL_UART_RxCpltCallback>
}
 8007d5a:	bf00      	nop
 8007d5c:	3770      	adds	r7, #112	; 0x70
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b084      	sub	sp, #16
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2201      	movs	r2, #1
 8007d74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d109      	bne.n	8007d92 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	4619      	mov	r1, r3
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7ff f9c2 	bl	8007114 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d90:	e002      	b.n	8007d98 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff f9aa 	bl	80070ec <HAL_UART_RxHalfCpltCallback>
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc6:	2b80      	cmp	r3, #128	; 0x80
 8007dc8:	d109      	bne.n	8007dde <UART_DMAError+0x3e>
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	2b21      	cmp	r3, #33	; 0x21
 8007dce:	d106      	bne.n	8007dde <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007dd8:	6978      	ldr	r0, [r7, #20]
 8007dda:	f7ff fe4b 	bl	8007a74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de8:	2b40      	cmp	r3, #64	; 0x40
 8007dea:	d109      	bne.n	8007e00 <UART_DMAError+0x60>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2b22      	cmp	r3, #34	; 0x22
 8007df0:	d106      	bne.n	8007e00 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007dfa:	6978      	ldr	r0, [r7, #20]
 8007dfc:	f7ff fe60 	bl	8007ac0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e06:	f043 0210 	orr.w	r2, r3, #16
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e10:	6978      	ldr	r0, [r7, #20]
 8007e12:	f7ff f975 	bl	8007100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e16:	bf00      	nop
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f7ff f95f 	bl	8007100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e42:	bf00      	nop
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b088      	sub	sp, #32
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	e853 3f00 	ldrex	r3, [r3]
 8007e5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e66:	61fb      	str	r3, [r7, #28]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	61bb      	str	r3, [r7, #24]
 8007e72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e74:	6979      	ldr	r1, [r7, #20]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	e841 2300 	strex	r3, r2, [r1]
 8007e7c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1e6      	bne.n	8007e52 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2220      	movs	r2, #32
 8007e88:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 fedd 	bl	8008c50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e96:	bf00      	nop
 8007e98:	3720      	adds	r7, #32
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	f107 001c 	add.w	r0, r7, #28
 8007eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d120      	bne.n	8007efa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68da      	ldr	r2, [r3, #12]
 8007ec8:	4b20      	ldr	r3, [pc, #128]	; (8007f4c <USB_CoreInit+0xac>)
 8007eca:	4013      	ands	r3, r2
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d105      	bne.n	8007eee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fa96 	bl	8008420 <USB_CoreReset>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73fb      	strb	r3, [r7, #15]
 8007ef8:	e010      	b.n	8007f1c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fa8a 	bl	8008420 <USB_CoreReset>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d10b      	bne.n	8007f3a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	f043 0206 	orr.w	r2, r3, #6
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f043 0220 	orr.w	r2, r3, #32
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f46:	b004      	add	sp, #16
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	ffbdffbf 	.word	0xffbdffbf

08007f50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f023 0201 	bic.w	r2, r3, #1
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d115      	bne.n	8007fc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	f7f9 fcf5 	bl	8001990 <HAL_Delay>
      ms++;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fa29 	bl	8008404 <USB_GetMode>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d01e      	beq.n	8007ff6 <USB_SetCurrentMode+0x84>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2b31      	cmp	r3, #49	; 0x31
 8007fbc:	d9f0      	bls.n	8007fa0 <USB_SetCurrentMode+0x2e>
 8007fbe:	e01a      	b.n	8007ff6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d115      	bne.n	8007ff2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fd2:	2001      	movs	r0, #1
 8007fd4:	f7f9 fcdc 	bl	8001990 <HAL_Delay>
      ms++;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa10 	bl	8008404 <USB_GetMode>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d005      	beq.n	8007ff6 <USB_SetCurrentMode+0x84>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b31      	cmp	r3, #49	; 0x31
 8007fee:	d9f0      	bls.n	8007fd2 <USB_SetCurrentMode+0x60>
 8007ff0:	e001      	b.n	8007ff6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e005      	b.n	8008002 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b32      	cmp	r3, #50	; 0x32
 8007ffa:	d101      	bne.n	8008000 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e000      	b.n	8008002 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
	...

0800800c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800800c:	b084      	sub	sp, #16
 800800e:	b580      	push	{r7, lr}
 8008010:	b086      	sub	sp, #24
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800801a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008026:	2300      	movs	r3, #0
 8008028:	613b      	str	r3, [r7, #16]
 800802a:	e009      	b.n	8008040 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	3340      	adds	r3, #64	; 0x40
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	2200      	movs	r2, #0
 8008038:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	3301      	adds	r3, #1
 800803e:	613b      	str	r3, [r7, #16]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	2b0e      	cmp	r3, #14
 8008044:	d9f2      	bls.n	800802c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d11c      	bne.n	8008086 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800805a:	f043 0302 	orr.w	r3, r3, #2
 800805e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008064:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	e005      	b.n	8008092 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008098:	461a      	mov	r2, r3
 800809a:	2300      	movs	r3, #0
 800809c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a4:	4619      	mov	r1, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ac:	461a      	mov	r2, r3
 80080ae:	680b      	ldr	r3, [r1, #0]
 80080b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d10c      	bne.n	80080d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d104      	bne.n	80080c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080be:	2100      	movs	r1, #0
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f965 	bl	8008390 <USB_SetDevSpeed>
 80080c6:	e008      	b.n	80080da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080c8:	2101      	movs	r1, #1
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f960 	bl	8008390 <USB_SetDevSpeed>
 80080d0:	e003      	b.n	80080da <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080d2:	2103      	movs	r1, #3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f95b 	bl	8008390 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080da:	2110      	movs	r1, #16
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f8f3 	bl	80082c8 <USB_FlushTxFifo>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f91f 	bl	8008330 <USB_FlushRxFifo>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008102:	461a      	mov	r2, r3
 8008104:	2300      	movs	r3, #0
 8008106:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800810e:	461a      	mov	r2, r3
 8008110:	2300      	movs	r3, #0
 8008112:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800811a:	461a      	mov	r2, r3
 800811c:	2300      	movs	r3, #0
 800811e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008120:	2300      	movs	r3, #0
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	e043      	b.n	80081ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800813c:	d118      	bne.n	8008170 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10a      	bne.n	800815a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008150:	461a      	mov	r2, r3
 8008152:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008156:	6013      	str	r3, [r2, #0]
 8008158:	e013      	b.n	8008182 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4413      	add	r3, r2
 8008162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008166:	461a      	mov	r2, r3
 8008168:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	e008      	b.n	8008182 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817c:	461a      	mov	r2, r3
 800817e:	2300      	movs	r3, #0
 8008180:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800818e:	461a      	mov	r2, r3
 8008190:	2300      	movs	r3, #0
 8008192:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a0:	461a      	mov	r2, r3
 80081a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	3301      	adds	r3, #1
 80081ac:	613b      	str	r3, [r7, #16]
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d3b7      	bcc.n	8008126 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081b6:	2300      	movs	r3, #0
 80081b8:	613b      	str	r3, [r7, #16]
 80081ba:	e043      	b.n	8008244 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081d2:	d118      	bne.n	8008206 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10a      	bne.n	80081f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e6:	461a      	mov	r2, r3
 80081e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	e013      	b.n	8008218 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081fc:	461a      	mov	r2, r3
 80081fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	e008      	b.n	8008218 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008212:	461a      	mov	r2, r3
 8008214:	2300      	movs	r3, #0
 8008216:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008224:	461a      	mov	r2, r3
 8008226:	2300      	movs	r3, #0
 8008228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008236:	461a      	mov	r2, r3
 8008238:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800823c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	3301      	adds	r3, #1
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	429a      	cmp	r2, r3
 800824a:	d3b7      	bcc.n	80081bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800825a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800825e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800826c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	2b00      	cmp	r3, #0
 8008272:	d105      	bne.n	8008280 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	f043 0210 	orr.w	r2, r3, #16
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	699a      	ldr	r2, [r3, #24]
 8008284:	4b0e      	ldr	r3, [pc, #56]	; (80082c0 <USB_DevInit+0x2b4>)
 8008286:	4313      	orrs	r3, r2
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800828c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828e:	2b00      	cmp	r3, #0
 8008290:	d005      	beq.n	800829e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	f043 0208 	orr.w	r2, r3, #8
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800829e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d105      	bne.n	80082b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <USB_DevInit+0x2b8>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082bc:	b004      	add	sp, #16
 80082be:	4770      	bx	lr
 80082c0:	803c3800 	.word	0x803c3800
 80082c4:	40000004 	.word	0x40000004

080082c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082d2:	2300      	movs	r3, #0
 80082d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3301      	adds	r3, #1
 80082da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4a13      	ldr	r2, [pc, #76]	; (800832c <USB_FlushTxFifo+0x64>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d901      	bls.n	80082e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e01b      	b.n	8008320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	daf2      	bge.n	80082d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	019b      	lsls	r3, r3, #6
 80082f8:	f043 0220 	orr.w	r2, r3, #32
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3301      	adds	r3, #1
 8008304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4a08      	ldr	r2, [pc, #32]	; (800832c <USB_FlushTxFifo+0x64>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d901      	bls.n	8008312 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e006      	b.n	8008320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	f003 0320 	and.w	r3, r3, #32
 800831a:	2b20      	cmp	r3, #32
 800831c:	d0f0      	beq.n	8008300 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr
 800832c:	00030d40 	.word	0x00030d40

08008330 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	4a11      	ldr	r2, [pc, #68]	; (800838c <USB_FlushRxFifo+0x5c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d901      	bls.n	800834e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	e018      	b.n	8008380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	daf2      	bge.n	800833c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2210      	movs	r2, #16
 800835e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	3301      	adds	r3, #1
 8008364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	4a08      	ldr	r2, [pc, #32]	; (800838c <USB_FlushRxFifo+0x5c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d901      	bls.n	8008372 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e006      	b.n	8008380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f003 0310 	and.w	r3, r3, #16
 800837a:	2b10      	cmp	r3, #16
 800837c:	d0f0      	beq.n	8008360 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	00030d40 	.word	0x00030d40

08008390 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	78fb      	ldrb	r3, [r7, #3]
 80083aa:	68f9      	ldr	r1, [r7, #12]
 80083ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083b0:	4313      	orrs	r3, r2
 80083b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b085      	sub	sp, #20
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80083dc:	f023 0303 	bic.w	r3, r3, #3
 80083e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083f0:	f043 0302 	orr.w	r3, r3, #2
 80083f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	f003 0301 	and.w	r3, r3, #1
}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3301      	adds	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4a13      	ldr	r2, [pc, #76]	; (8008484 <USB_CoreReset+0x64>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d901      	bls.n	800843e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e01b      	b.n	8008476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	daf2      	bge.n	800842c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	f043 0201 	orr.w	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3301      	adds	r3, #1
 800845a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4a09      	ldr	r2, [pc, #36]	; (8008484 <USB_CoreReset+0x64>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d901      	bls.n	8008468 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e006      	b.n	8008476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b01      	cmp	r3, #1
 8008472:	d0f0      	beq.n	8008456 <USB_CoreReset+0x36>

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	00030d40 	.word	0x00030d40

08008488 <i2c_test>:
 * This is the main function for the I2C testing.
 * The data received from server will be received initially by I2C2, transmit
 * to I2C4, and then transmit back to I2C2 to check if the data is the same.
 */
uint8_t i2c_test(uint8_t iter, uint8_t data_length, uint8_t *data)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800848e:	af02      	add	r7, sp, #8
 8008490:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008494:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800849e:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 80084a2:	4602      	mov	r2, r0
 80084a4:	701a      	strb	r2, [r3, #0]
 80084a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084aa:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80084ae:	460a      	mov	r2, r1
 80084b0:	701a      	strb	r2, [r3, #0]
	uint8_t i2c2_buff[DATA_SIZE] = { 0 }; // init the buffer to be full '\0'
 80084b2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084ba:	2200      	movs	r2, #0
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	3304      	adds	r3, #4
 80084c0:	22fb      	movs	r2, #251	; 0xfb
 80084c2:	2100      	movs	r1, #0
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 fc09 	bl	8008cdc <memset>
	uint8_t i2c4_buff[DATA_SIZE] = { 0 }; // init the buffer to be full '\0'
 80084ca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80084d2:	2200      	movs	r2, #0
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	3304      	adds	r3, #4
 80084d8:	22fb      	movs	r2, #251	; 0xfb
 80084da:	2100      	movs	r1, #0
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 fbfd 	bl	8008cdc <memset>
	uint8_t result = RETURN_SUCCESS;
 80084e2:	2301      	movs	r3, #1
 80084e4:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e

	for(uint8_t i = 0; i < iter ; i++)
 80084e8:	2300      	movs	r3, #0
 80084ea:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80084ee:	e040      	b.n	8008572 <i2c_test+0xea>
	{
		i2c_transmit_to_slave(I2C_2, I2C_4, data_length, data, i2c4_buff);
 80084f0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084f4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80084f8:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80084fc:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 8008500:	7811      	ldrb	r1, [r2, #0]
 8008502:	f107 020c 	add.w	r2, r7, #12
 8008506:	9200      	str	r2, [sp, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	460a      	mov	r2, r1
 800850c:	4921      	ldr	r1, [pc, #132]	; (8008594 <i2c_test+0x10c>)
 800850e:	4822      	ldr	r0, [pc, #136]	; (8008598 <i2c_test+0x110>)
 8008510:	f000 f844 	bl	800859c <i2c_transmit_to_slave>
		i2c_delay_till_received();
 8008514:	f000 f88c 	bl	8008630 <i2c_delay_till_received>
		i2c_transmit_to_master(I2C_4, I2C_2, data_length, i2c4_buff, i2c2_buff);
 8008518:	f107 010c 	add.w	r1, r7, #12
 800851c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008520:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8008524:	781a      	ldrb	r2, [r3, #0]
 8008526:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	460b      	mov	r3, r1
 800852e:	491a      	ldr	r1, [pc, #104]	; (8008598 <i2c_test+0x110>)
 8008530:	4818      	ldr	r0, [pc, #96]	; (8008594 <i2c_test+0x10c>)
 8008532:	f000 f84f 	bl	80085d4 <i2c_transmit_to_master>
		i2c_delay_till_received();
 8008536:	f000 f87b 	bl	8008630 <i2c_delay_till_received>

		if(strncmp((char *)i2c2_buff, (char *)data, data_length) != 0)
 800853a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800853e:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8008542:	781a      	ldrb	r2, [r3, #0]
 8008544:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008548:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800854c:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8008550:	6819      	ldr	r1, [r3, #0]
 8008552:	f000 fc59 	bl	8008e08 <strncmp>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d005      	beq.n	8008568 <i2c_test+0xe0>
		{
			result = RETURN_FAILURE;
 800855c:	23ff      	movs	r3, #255	; 0xff
 800855e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
			return result;
 8008562:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008566:	e00f      	b.n	8008588 <i2c_test+0x100>
	for(uint8_t i = 0; i < iter ; i++)
 8008568:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800856c:	3301      	adds	r3, #1
 800856e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008572:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008576:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 800857a:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	429a      	cmp	r2, r3
 8008582:	d3b5      	bcc.n	80084f0 <i2c_test+0x68>
		}
	}
	return result;
 8008584:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
}
 8008588:	4618      	mov	r0, r3
 800858a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	200000e0 	.word	0x200000e0
 8008598:	2000008c 	.word	0x2000008c

0800859c <i2c_transmit_to_slave>:
void i2c_transmit_to_slave(	I2C_HandleTypeDef *i2c_transmit,
						I2C_HandleTypeDef *i2c_receive,
						uint8_t data_length,
						uint8_t *transmit_buff,
						uint8_t *receive_buff )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	603b      	str	r3, [r7, #0]
 80085a8:	4613      	mov	r3, r2
 80085aa:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Slave_Receive_IT(i2c_receive, receive_buff, data_length);
 80085ac:	79fb      	ldrb	r3, [r7, #7]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	461a      	mov	r2, r3
 80085b2:	69b9      	ldr	r1, [r7, #24]
 80085b4:	68b8      	ldr	r0, [r7, #8]
 80085b6:	f7fa fabf 	bl	8002b38 <HAL_I2C_Slave_Receive_IT>
	HAL_I2C_Master_Transmit_IT(i2c_transmit, SLAVE_ADDR, transmit_buff, data_length);
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	b29b      	uxth	r3, r3
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	212c      	movs	r1, #44	; 0x2c
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f7fa f988 	bl	80028d8 <HAL_I2C_Master_Transmit_IT>
	i2c_delay_till_transmited();
 80085c8:	f000 f820 	bl	800860c <i2c_delay_till_transmited>
}
 80085cc:	bf00      	nop
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <i2c_transmit_to_master>:
void i2c_transmit_to_master(	I2C_HandleTypeDef *i2c_transmit,
							I2C_HandleTypeDef *i2c_receive,
							uint8_t data_length,
							uint8_t *transmit_buff,
							uint8_t *receive_buff )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	4613      	mov	r3, r2
 80085e2:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Receive_IT(i2c_receive, SLAVE_ADDR, receive_buff, data_length);
 80085e4:	79fb      	ldrb	r3, [r7, #7]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	212c      	movs	r1, #44	; 0x2c
 80085ec:	68b8      	ldr	r0, [r7, #8]
 80085ee:	f7fa f9e3 	bl	80029b8 <HAL_I2C_Master_Receive_IT>
	HAL_I2C_Slave_Transmit_IT(i2c_transmit, transmit_buff, data_length);
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	461a      	mov	r2, r3
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f7fa fa4c 	bl	8002a98 <HAL_I2C_Slave_Transmit_IT>
	i2c_delay_till_transmited();
 8008600:	f000 f804 	bl	800860c <i2c_delay_till_transmited>
}
 8008604:	bf00      	nop
 8008606:	3710      	adds	r7, #16
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <i2c_delay_till_transmited>:

/// Delay until enters HAL_I2C_TxCpltCallback changes flag to true
void i2c_delay_till_transmited()
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
	while(i2c_tx_done_flag != TRUE);	// TODO: add timeout to loop (for hardware problem cases)
 8008610:	bf00      	nop
 8008612:	4b06      	ldr	r3, [pc, #24]	; (800862c <i2c_delay_till_transmited+0x20>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d1fb      	bne.n	8008612 <i2c_delay_till_transmited+0x6>
	i2c_tx_done_flag = FALSE;
 800861a:	4b04      	ldr	r3, [pc, #16]	; (800862c <i2c_delay_till_transmited+0x20>)
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]
}
 8008620:	bf00      	nop
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	20000ba4 	.word	0x20000ba4

08008630 <i2c_delay_till_received>:

/// Delay until enters HAL_I2C_Rx_CpltCallback changes flag to true
void i2c_delay_till_received()
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
	while(i2c_rx_done_flag != TRUE);	// TODO: add timeout to loop (for hardware problem cases)
 8008634:	bf00      	nop
 8008636:	4b06      	ldr	r3, [pc, #24]	; (8008650 <i2c_delay_till_received+0x20>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b01      	cmp	r3, #1
 800863c:	d1fb      	bne.n	8008636 <i2c_delay_till_received+0x6>
	i2c_rx_done_flag = FALSE;
 800863e:	4b04      	ldr	r3, [pc, #16]	; (8008650 <i2c_delay_till_received+0x20>)
 8008640:	2200      	movs	r2, #0
 8008642:	701a      	strb	r2, [r3, #0]
}
 8008644:	bf00      	nop
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	20000ba5 	.word	0x20000ba5

08008654 <HAL_I2C_MasterTxCpltCallback>:

/// Enters here upon completed I2C master transmit
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
	if(hi2c == I2C_2)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a06      	ldr	r2, [pc, #24]	; (8008678 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d102      	bne.n	800866a <HAL_I2C_MasterTxCpltCallback+0x16>
		i2c_tx_done_flag = TRUE;
 8008664:	4b05      	ldr	r3, [pc, #20]	; (800867c <HAL_I2C_MasterTxCpltCallback+0x28>)
 8008666:	2201      	movs	r2, #1
 8008668:	701a      	strb	r2, [r3, #0]
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	2000008c 	.word	0x2000008c
 800867c:	20000ba4 	.word	0x20000ba4

08008680 <HAL_I2C_MasterRxCpltCallback>:

/// Enters here upon completed I2C master receive
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
	if (hi2c == I2C_2)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a06      	ldr	r2, [pc, #24]	; (80086a4 <HAL_I2C_MasterRxCpltCallback+0x24>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d102      	bne.n	8008696 <HAL_I2C_MasterRxCpltCallback+0x16>
		i2c_rx_done_flag = TRUE;
 8008690:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8008692:	2201      	movs	r2, #1
 8008694:	701a      	strb	r2, [r3, #0]
}
 8008696:	bf00      	nop
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	2000008c 	.word	0x2000008c
 80086a8:	20000ba5 	.word	0x20000ba5

080086ac <HAL_I2C_SlaveTxCpltCallback>:

/// Enters here upon completed I2C slave transmit
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
	if (hi2c == I2C_4)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a06      	ldr	r2, [pc, #24]	; (80086d0 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d102      	bne.n	80086c2 <HAL_I2C_SlaveTxCpltCallback+0x16>
		i2c_tx_done_flag = TRUE;
 80086bc:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 80086be:	2201      	movs	r2, #1
 80086c0:	701a      	strb	r2, [r3, #0]
}
 80086c2:	bf00      	nop
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	200000e0 	.word	0x200000e0
 80086d4:	20000ba4 	.word	0x20000ba4

080086d8 <HAL_I2C_SlaveRxCpltCallback>:

/// Enters here upon completed I2C slave receive
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
	if (hi2c == I2C_4)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a06      	ldr	r2, [pc, #24]	; (80086fc <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d102      	bne.n	80086ee <HAL_I2C_SlaveRxCpltCallback+0x16>
		i2c_rx_done_flag = TRUE;
 80086e8:	4b05      	ldr	r3, [pc, #20]	; (8008700 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 80086ea:	2201      	movs	r2, #1
 80086ec:	701a      	strb	r2, [r3, #0]
}
 80086ee:	bf00      	nop
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	200000e0 	.word	0x200000e0
 8008700:	20000ba5 	.word	0x20000ba5

08008704 <rtg_main>:
#include "UART.h"
#include "I2C.h"
#include "SPI.h"

void rtg_main()
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
	char choice;
	uint8_t result;
	while(TRUE)
	{
		print_separator();
 800870a:	f000 f9b1 	bl	8008a70 <print_separator>
		printf("Please enter a communication protocol name:(U/I/S)\r\n");
 800870e:	4826      	ldr	r0, [pc, #152]	; (80087a8 <rtg_main+0xa4>)
 8008710:	f000 fb5a 	bl	8008dc8 <puts>
		scanf("%c", &choice);
 8008714:	1d7b      	adds	r3, r7, #5
 8008716:	4619      	mov	r1, r3
 8008718:	4824      	ldr	r0, [pc, #144]	; (80087ac <rtg_main+0xa8>)
 800871a:	f000 fb5d 	bl	8008dd8 <iscanf>
		choice = tolower(choice);
 800871e:	797b      	ldrb	r3, [r7, #5]
 8008720:	71bb      	strb	r3, [r7, #6]
 8008722:	79bb      	ldrb	r3, [r7, #6]
 8008724:	3301      	adds	r3, #1
 8008726:	4a22      	ldr	r2, [pc, #136]	; (80087b0 <rtg_main+0xac>)
 8008728:	4413      	add	r3, r2
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	f003 0303 	and.w	r3, r3, #3
 8008730:	2b01      	cmp	r3, #1
 8008732:	d102      	bne.n	800873a <rtg_main+0x36>
 8008734:	79bb      	ldrb	r3, [r7, #6]
 8008736:	3320      	adds	r3, #32
 8008738:	e000      	b.n	800873c <rtg_main+0x38>
 800873a:	79bb      	ldrb	r3, [r7, #6]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	717b      	strb	r3, [r7, #5]

		switch(choice)
 8008740:	797b      	ldrb	r3, [r7, #5]
 8008742:	2b75      	cmp	r3, #117	; 0x75
 8008744:	d006      	beq.n	8008754 <rtg_main+0x50>
 8008746:	2b75      	cmp	r3, #117	; 0x75
 8008748:	dc1c      	bgt.n	8008784 <rtg_main+0x80>
 800874a:	2b69      	cmp	r3, #105	; 0x69
 800874c:	d00a      	beq.n	8008764 <rtg_main+0x60>
 800874e:	2b73      	cmp	r3, #115	; 0x73
 8008750:	d010      	beq.n	8008774 <rtg_main+0x70>
 8008752:	e017      	b.n	8008784 <rtg_main+0x80>
		{
		case 'u':
			result = uart_test(5,3,(uint8_t*)"abc");
 8008754:	4a17      	ldr	r2, [pc, #92]	; (80087b4 <rtg_main+0xb0>)
 8008756:	2103      	movs	r1, #3
 8008758:	2005      	movs	r0, #5
 800875a:	f000 f993 	bl	8008a84 <uart_test>
 800875e:	4603      	mov	r3, r0
 8008760:	71fb      	strb	r3, [r7, #7]
			break;
 8008762:	e013      	b.n	800878c <rtg_main+0x88>
		case 'i':
			result = i2c_test(5,3,(uint8_t*)"abc");
 8008764:	4a13      	ldr	r2, [pc, #76]	; (80087b4 <rtg_main+0xb0>)
 8008766:	2103      	movs	r1, #3
 8008768:	2005      	movs	r0, #5
 800876a:	f7ff fe8d 	bl	8008488 <i2c_test>
 800876e:	4603      	mov	r3, r0
 8008770:	71fb      	strb	r3, [r7, #7]
			break;
 8008772:	e00b      	b.n	800878c <rtg_main+0x88>
		case 's':
			result = spi_test(5,3,(uint8_t*)"abc");
 8008774:	4a0f      	ldr	r2, [pc, #60]	; (80087b4 <rtg_main+0xb0>)
 8008776:	2103      	movs	r1, #3
 8008778:	2005      	movs	r0, #5
 800877a:	f000 f823 	bl	80087c4 <spi_test>
 800877e:	4603      	mov	r3, r0
 8008780:	71fb      	strb	r3, [r7, #7]
			break;
 8008782:	e003      	b.n	800878c <rtg_main+0x88>
		default:
			printf("\r\nPlease input a valid option (U/I/S).\r\n");
 8008784:	480c      	ldr	r0, [pc, #48]	; (80087b8 <rtg_main+0xb4>)
 8008786:	f000 fb1f 	bl	8008dc8 <puts>
			continue;
 800878a:	e00b      	b.n	80087a4 <rtg_main+0xa0>
		}
		if (result == RETURN_SUCCESS)
 800878c:	79fb      	ldrb	r3, [r7, #7]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d103      	bne.n	800879a <rtg_main+0x96>
			printf("Test Succeded!\r\n");
 8008792:	480a      	ldr	r0, [pc, #40]	; (80087bc <rtg_main+0xb8>)
 8008794:	f000 fb18 	bl	8008dc8 <puts>
 8008798:	e002      	b.n	80087a0 <rtg_main+0x9c>
		else
			printf("Test Failed!\r\n");
 800879a:	4809      	ldr	r0, [pc, #36]	; (80087c0 <rtg_main+0xbc>)
 800879c:	f000 fb14 	bl	8008dc8 <puts>

		print_separator();
 80087a0:	f000 f966 	bl	8008a70 <print_separator>
		print_separator();
 80087a4:	e7b1      	b.n	800870a <rtg_main+0x6>
 80087a6:	bf00      	nop
 80087a8:	0800a3ac 	.word	0x0800a3ac
 80087ac:	0800a3e0 	.word	0x0800a3e0
 80087b0:	0800a480 	.word	0x0800a480
 80087b4:	0800a3e4 	.word	0x0800a3e4
 80087b8:	0800a3e8 	.word	0x0800a3e8
 80087bc:	0800a410 	.word	0x0800a410
 80087c0:	0800a420 	.word	0x0800a420

080087c4 <spi_test>:
 * @param data_length - the length of string to transmit and receive
 * @param data - the string data to transmit and receive
 * @return 0x01 if the tests passed successfully, or 0xff if tests failed.
 */
uint8_t spi_test(uint8_t iter, uint8_t data_length, uint8_t *data)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 80087ca:	af02      	add	r7, sp, #8
 80087cc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80087d0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80087da:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 80087de:	4602      	mov	r2, r0
 80087e0:	701a      	strb	r2, [r3, #0]
 80087e2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80087e6:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80087ea:	460a      	mov	r2, r1
 80087ec:	701a      	strb	r2, [r3, #0]
	uint8_t spi1_buff[DATA_SIZE] = { 0 }; // init the buffer to be full '\0'
 80087ee:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80087f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087f6:	2200      	movs	r2, #0
 80087f8:	601a      	str	r2, [r3, #0]
 80087fa:	3304      	adds	r3, #4
 80087fc:	22fb      	movs	r2, #251	; 0xfb
 80087fe:	2100      	movs	r1, #0
 8008800:	4618      	mov	r0, r3
 8008802:	f000 fa6b 	bl	8008cdc <memset>
	uint8_t spi4_buff[DATA_SIZE] = { 0 }; // init the buffer to be full '\0'
 8008806:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800880a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	3304      	adds	r3, #4
 8008814:	22fb      	movs	r2, #251	; 0xfb
 8008816:	2100      	movs	r1, #0
 8008818:	4618      	mov	r0, r3
 800881a:	f000 fa5f 	bl	8008cdc <memset>
	uint8_t result = RETURN_SUCCESS;
 800881e:	2301      	movs	r3, #1
 8008820:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e

	for(uint8_t i = 0; i < iter ; i++)
 8008824:	2300      	movs	r3, #0
 8008826:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800882a:	e040      	b.n	80088ae <spi_test+0xea>
	{
		spi_transmit_receive(SPI_1, SPI_4, data_length, data, spi4_buff);
 800882c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008830:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008834:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008838:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 800883c:	7811      	ldrb	r1, [r2, #0]
 800883e:	f107 020c 	add.w	r2, r7, #12
 8008842:	9200      	str	r2, [sp, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	460a      	mov	r2, r1
 8008848:	4921      	ldr	r1, [pc, #132]	; (80088d0 <spi_test+0x10c>)
 800884a:	4822      	ldr	r0, [pc, #136]	; (80088d4 <spi_test+0x110>)
 800884c:	f000 f844 	bl	80088d8 <spi_transmit_receive>
		spi_delay_till_received(); // delay until receive complete
 8008850:	f000 f870 	bl	8008934 <spi_delay_till_received>

		spi_transmit_receive(SPI_4, SPI_1, data_length, spi4_buff, spi1_buff);
 8008854:	f107 010c 	add.w	r1, r7, #12
 8008858:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800885c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8008860:	781a      	ldrb	r2, [r3, #0]
 8008862:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	460b      	mov	r3, r1
 800886a:	491a      	ldr	r1, [pc, #104]	; (80088d4 <spi_test+0x110>)
 800886c:	4818      	ldr	r0, [pc, #96]	; (80088d0 <spi_test+0x10c>)
 800886e:	f000 f833 	bl	80088d8 <spi_transmit_receive>
		spi_delay_till_received(); // delay until receive complete
 8008872:	f000 f85f 	bl	8008934 <spi_delay_till_received>

		if(strncmp((char *)spi1_buff, (char *)data, data_length) != 0)
 8008876:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800887a:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 800887e:	781a      	ldrb	r2, [r3, #0]
 8008880:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008884:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008888:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 800888c:	6819      	ldr	r1, [r3, #0]
 800888e:	f000 fabb 	bl	8008e08 <strncmp>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d005      	beq.n	80088a4 <spi_test+0xe0>
		{
			result = RETURN_FAILURE;
 8008898:	23ff      	movs	r3, #255	; 0xff
 800889a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
			return result;
 800889e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 80088a2:	e00f      	b.n	80088c4 <spi_test+0x100>
	for(uint8_t i = 0; i < iter ; i++)
 80088a4:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80088a8:	3301      	adds	r3, #1
 80088aa:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80088ae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80088b2:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 80088b6:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d3b5      	bcc.n	800882c <spi_test+0x68>
		}
	}
	return result;
 80088c0:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000198 	.word	0x20000198
 80088d4:	20000134 	.word	0x20000134

080088d8 <spi_transmit_receive>:
void spi_transmit_receive(	SPI_HandleTypeDef *spi_transmit,
							SPI_HandleTypeDef *spi_receive,
							uint8_t data_length,
							uint8_t *transmit_buff,
							uint8_t *receive_buff )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	603b      	str	r3, [r7, #0]
 80088e4:	4613      	mov	r3, r2
 80088e6:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive_DMA(spi_receive, receive_buff, data_length);
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	461a      	mov	r2, r3
 80088ee:	69b9      	ldr	r1, [r7, #24]
 80088f0:	68b8      	ldr	r0, [r7, #8]
 80088f2:	f7fc ff91 	bl	8005818 <HAL_SPI_Receive_DMA>
	HAL_SPI_Transmit_DMA(spi_transmit, transmit_buff, data_length);
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	461a      	mov	r2, r3
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7fc fe96 	bl	8005630 <HAL_SPI_Transmit_DMA>
	spi_delay_till_transmited(); // delay until completed the transmit
 8008904:	f000 f804 	bl	8008910 <spi_delay_till_transmited>
}
 8008908:	bf00      	nop
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <spi_delay_till_transmited>:

/// Delay until enters HAL_SPI_TxCpltCallback changes flag to true
void spi_delay_till_transmited()
{
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0
	while(spi_tx_done_flag != TRUE);	// TODO: add timeout to loop (for hardware problem cases)
 8008914:	bf00      	nop
 8008916:	4b06      	ldr	r3, [pc, #24]	; (8008930 <spi_delay_till_transmited+0x20>)
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d1fb      	bne.n	8008916 <spi_delay_till_transmited+0x6>
	spi_tx_done_flag = FALSE;
 800891e:	4b04      	ldr	r3, [pc, #16]	; (8008930 <spi_delay_till_transmited+0x20>)
 8008920:	2200      	movs	r2, #0
 8008922:	701a      	strb	r2, [r3, #0]
}
 8008924:	bf00      	nop
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	20000ba6 	.word	0x20000ba6

08008934 <spi_delay_till_received>:

/// Delay until enters HAL_SPI_Rx_CpltCallback changes flag to true
void spi_delay_till_received()
{
 8008934:	b480      	push	{r7}
 8008936:	af00      	add	r7, sp, #0
	while(spi_rx_done_flag != TRUE);	// TODO: add timeout to loop (for hardware problem cases)
 8008938:	bf00      	nop
 800893a:	4b06      	ldr	r3, [pc, #24]	; (8008954 <spi_delay_till_received+0x20>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d1fb      	bne.n	800893a <spi_delay_till_received+0x6>
	spi_rx_done_flag = FALSE;
 8008942:	4b04      	ldr	r3, [pc, #16]	; (8008954 <spi_delay_till_received+0x20>)
 8008944:	2200      	movs	r2, #0
 8008946:	701a      	strb	r2, [r3, #0]
}
 8008948:	bf00      	nop
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20000ba7 	.word	0x20000ba7

08008958 <HAL_SPI_TxCpltCallback>:

/// Enters here upon complete SPI transmit
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
	if (hspi == SPI_1 || hspi == SPI_4)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a08      	ldr	r2, [pc, #32]	; (8008984 <HAL_SPI_TxCpltCallback+0x2c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d003      	beq.n	8008970 <HAL_SPI_TxCpltCallback+0x18>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a07      	ldr	r2, [pc, #28]	; (8008988 <HAL_SPI_TxCpltCallback+0x30>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d102      	bne.n	8008976 <HAL_SPI_TxCpltCallback+0x1e>
		spi_tx_done_flag = TRUE;
 8008970:	4b06      	ldr	r3, [pc, #24]	; (800898c <HAL_SPI_TxCpltCallback+0x34>)
 8008972:	2201      	movs	r2, #1
 8008974:	701a      	strb	r2, [r3, #0]
}
 8008976:	bf00      	nop
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	20000134 	.word	0x20000134
 8008988:	20000198 	.word	0x20000198
 800898c:	20000ba6 	.word	0x20000ba6

08008990 <HAL_SPI_RxCpltCallback>:

/// Enters here upon complete SPI receive
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
	if (hspi == SPI_1 || hspi == SPI_4)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a08      	ldr	r2, [pc, #32]	; (80089bc <HAL_SPI_RxCpltCallback+0x2c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d003      	beq.n	80089a8 <HAL_SPI_RxCpltCallback+0x18>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a07      	ldr	r2, [pc, #28]	; (80089c0 <HAL_SPI_RxCpltCallback+0x30>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d102      	bne.n	80089ae <HAL_SPI_RxCpltCallback+0x1e>
			spi_rx_done_flag = TRUE;
 80089a8:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <HAL_SPI_RxCpltCallback+0x34>)
 80089aa:	2201      	movs	r2, #1
 80089ac:	701a      	strb	r2, [r3, #0]
}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	20000134 	.word	0x20000134
 80089c0:	20000198 	.word	0x20000198
 80089c4:	20000ba7 	.word	0x20000ba7

080089c8 <_write>:
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, len, 0xFFFF);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089dc:	68b9      	ldr	r1, [r7, #8]
 80089de:	4804      	ldr	r0, [pc, #16]	; (80089f0 <_write+0x28>)
 80089e0:	f7fd fea0 	bl	8006724 <HAL_UART_Transmit>
	return len;
 80089e4:	687b      	ldr	r3, [r7, #4]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	2000048c 	.word	0x2000048c

080089f4 <_read>:

// scanf
int _read(int file, char *ptr, int len)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
	int ch=0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUG, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8008a04:	f107 0114 	add.w	r1, r7, #20
 8008a08:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	4817      	ldr	r0, [pc, #92]	; (8008a6c <_read+0x78>)
 8008a10:	f7fd ff0b 	bl	800682a <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8008a14:	f107 0114 	add.w	r1, r7, #20
 8008a18:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	4813      	ldr	r0, [pc, #76]	; (8008a6c <_read+0x78>)
 8008a20:	f7fd fe80 	bl	8006724 <HAL_UART_Transmit>
	if(ch==13)
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2b0d      	cmp	r3, #13
 8008a28:	d10a      	bne.n	8008a40 <_read+0x4c>
	{
		ch=10;
 8008a2a:	230a      	movs	r3, #10
 8008a2c:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8008a2e:	f107 0114 	add.w	r1, r7, #20
 8008a32:	f04f 33ff 	mov.w	r3, #4294967295
 8008a36:	2201      	movs	r2, #1
 8008a38:	480c      	ldr	r0, [pc, #48]	; (8008a6c <_read+0x78>)
 8008a3a:	f7fd fe73 	bl	8006724 <HAL_UART_Transmit>
 8008a3e:	e00c      	b.n	8008a5a <_read+0x66>
	}
	else if(ch==8)
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2b08      	cmp	r3, #8
 8008a44:	d109      	bne.n	8008a5a <_read+0x66>
	{
		ch=0x30;
 8008a46:	2330      	movs	r3, #48	; 0x30
 8008a48:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8008a4a:	f107 0114 	add.w	r1, r7, #20
 8008a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a52:	2201      	movs	r2, #1
 8008a54:	4805      	ldr	r0, [pc, #20]	; (8008a6c <_read+0x78>)
 8008a56:	f7fd fe65 	bl	8006724 <HAL_UART_Transmit>
	}

	*ptr=ch;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	701a      	strb	r2, [r3, #0]

	return 1;
 8008a62:	2301      	movs	r3, #1
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	2000048c 	.word	0x2000048c

08008a70 <print_separator>:
//		printf("%d) %s", spi_cnt ,rx_spi_data);
//	}
//}

void print_separator()
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
	printf("---------------------------------\r\n");
 8008a74:	4802      	ldr	r0, [pc, #8]	; (8008a80 <print_separator+0x10>)
 8008a76:	f000 f9a7 	bl	8008dc8 <puts>
}
 8008a7a:	bf00      	nop
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	0800a430 	.word	0x0800a430

08008a84 <uart_test>:
 * This is the main function for the UART testing.
 * The data received from server will be received initially by UART4, transmit
 * to UART2, and then transmit back to UART4 to check if the data is the same.
 */
uint8_t uart_test(uint8_t iter, uint8_t data_length, uint8_t *data)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008a8a:	af02      	add	r7, sp, #8
 8008a8c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008a90:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008a9a:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	701a      	strb	r2, [r3, #0]
 8008aa2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008aa6:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8008aaa:	460a      	mov	r2, r1
 8008aac:	701a      	strb	r2, [r3, #0]
	uint8_t uart2_buff[DATA_SIZE] = { 0 };		// UART2 Buffer
 8008aae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	601a      	str	r2, [r3, #0]
 8008aba:	3304      	adds	r3, #4
 8008abc:	22fb      	movs	r2, #251	; 0xfb
 8008abe:	2100      	movs	r1, #0
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 f90b 	bl	8008cdc <memset>
	uint8_t uart4_buff[DATA_SIZE] = { 0 };		// UART4 BUFFER
 8008ac6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008aca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	22fb      	movs	r2, #251	; 0xfb
 8008ad6:	2100      	movs	r1, #0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 f8ff 	bl	8008cdc <memset>
	uint8_t result = RETURN_SUCCESS;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e

	for(uint8_t i = 0; i < iter; i++)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008aea:	e040      	b.n	8008b6e <uart_test+0xea>
	{
		uart_transmit_receive(UART_4, UART_2, data_length, data, uart2_buff);
 8008aec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008af0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008af4:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008af8:	f2a2 220a 	subw	r2, r2, #522	; 0x20a
 8008afc:	7811      	ldrb	r1, [r2, #0]
 8008afe:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8008b02:	9200      	str	r2, [sp, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	460a      	mov	r2, r1
 8008b08:	4921      	ldr	r1, [pc, #132]	; (8008b90 <uart_test+0x10c>)
 8008b0a:	4822      	ldr	r0, [pc, #136]	; (8008b94 <uart_test+0x110>)
 8008b0c:	f000 f844 	bl	8008b98 <uart_transmit_receive>
		uart_delay_till_received();
 8008b10:	f000 f870 	bl	8008bf4 <uart_delay_till_received>
		uart_transmit_receive(UART_2, UART_4, data_length, uart2_buff, uart4_buff);
 8008b14:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8008b18:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008b1c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8008b20:	781a      	ldrb	r2, [r3, #0]
 8008b22:	f107 030c 	add.w	r3, r7, #12
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	491a      	ldr	r1, [pc, #104]	; (8008b94 <uart_test+0x110>)
 8008b2c:	4818      	ldr	r0, [pc, #96]	; (8008b90 <uart_test+0x10c>)
 8008b2e:	f000 f833 	bl	8008b98 <uart_transmit_receive>
		uart_delay_till_received();
 8008b32:	f000 f85f 	bl	8008bf4 <uart_delay_till_received>

		if(strncmp((char *)uart4_buff, (char *)data, data_length) != 0)
 8008b36:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008b3a:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8008b3e:	781a      	ldrb	r2, [r3, #0]
 8008b40:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008b44:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8008b48:	f107 000c 	add.w	r0, r7, #12
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	f000 f95b 	bl	8008e08 <strncmp>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <uart_test+0xe0>
		{
			result = RETURN_FAILURE;
 8008b58:	23ff      	movs	r3, #255	; 0xff
 8008b5a:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
			return result;
 8008b5e:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008b62:	e00f      	b.n	8008b84 <uart_test+0x100>
	for(uint8_t i = 0; i < iter; i++)
 8008b64:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008b68:	3301      	adds	r3, #1
 8008b6a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008b6e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008b72:	f2a3 2309 	subw	r3, r3, #521	; 0x209
 8008b76:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d3b5      	bcc.n	8008aec <uart_test+0x68>
		}
	}
	return result;
 8008b80:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000404 	.word	0x20000404
 8008b94:	2000037c 	.word	0x2000037c

08008b98 <uart_transmit_receive>:
void uart_transmit_receive(	UART_HandleTypeDef *uart_transmit,
							UART_HandleTypeDef *uart_receive,
							uint8_t data_length,
							uint8_t *transmit_buff,
							uint8_t *receive_buff )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive_DMA(uart_receive, receive_buff, data_length);
 8008ba8:	79fb      	ldrb	r3, [r7, #7]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	461a      	mov	r2, r3
 8008bae:	69b9      	ldr	r1, [r7, #24]
 8008bb0:	68b8      	ldr	r0, [r7, #8]
 8008bb2:	f7fd ff7b 	bl	8006aac <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(uart_transmit, transmit_buff, data_length);
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	461a      	mov	r2, r3
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7fd fef8 	bl	80069b4 <HAL_UART_Transmit_DMA>
	uart_delay_till_transmited();
 8008bc4:	f000 f804 	bl	8008bd0 <uart_delay_till_transmited>
}
 8008bc8:	bf00      	nop
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <uart_delay_till_transmited>:

/// Delay until enters HAL_UART_TxCpltCallback changes flag to true
void uart_delay_till_transmited()
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	af00      	add	r7, sp, #0
	while(uart_tx_done_flag != TRUE);	// TODO: add timeout to loop (for hardware problem cases)
 8008bd4:	bf00      	nop
 8008bd6:	4b06      	ldr	r3, [pc, #24]	; (8008bf0 <uart_delay_till_transmited+0x20>)
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d1fb      	bne.n	8008bd6 <uart_delay_till_transmited+0x6>
	uart_tx_done_flag = FALSE;
 8008bde:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <uart_delay_till_transmited+0x20>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	701a      	strb	r2, [r3, #0]
}
 8008be4:	bf00      	nop
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	20000ba8 	.word	0x20000ba8

08008bf4 <uart_delay_till_received>:

/// Delay until enters HAL_UART_Rx_CpltCallback changes flag to true
void uart_delay_till_received()
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
	while(uart_rx_done_flag != TRUE);	// TODO: add timeout to loop (for hardware problem cases)
 8008bf8:	bf00      	nop
 8008bfa:	4b06      	ldr	r3, [pc, #24]	; (8008c14 <uart_delay_till_received+0x20>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d1fb      	bne.n	8008bfa <uart_delay_till_received+0x6>
	uart_rx_done_flag = FALSE;
 8008c02:	4b04      	ldr	r3, [pc, #16]	; (8008c14 <uart_delay_till_received+0x20>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	701a      	strb	r2, [r3, #0]
}
 8008c08:	bf00      	nop
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	20000ba9 	.word	0x20000ba9

08008c18 <HAL_UART_RxCpltCallback>:

/// Enters here upon completed UART receive.
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
	if (huart == UART_2 || huart == UART_4)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a08      	ldr	r2, [pc, #32]	; (8008c44 <HAL_UART_RxCpltCallback+0x2c>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d003      	beq.n	8008c30 <HAL_UART_RxCpltCallback+0x18>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a07      	ldr	r2, [pc, #28]	; (8008c48 <HAL_UART_RxCpltCallback+0x30>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d102      	bne.n	8008c36 <HAL_UART_RxCpltCallback+0x1e>
		uart_rx_done_flag = TRUE;
 8008c30:	4b06      	ldr	r3, [pc, #24]	; (8008c4c <HAL_UART_RxCpltCallback+0x34>)
 8008c32:	2201      	movs	r2, #1
 8008c34:	701a      	strb	r2, [r3, #0]
}
 8008c36:	bf00      	nop
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	20000404 	.word	0x20000404
 8008c48:	2000037c 	.word	0x2000037c
 8008c4c:	20000ba9 	.word	0x20000ba9

08008c50 <HAL_UART_TxCpltCallback>:

/// Enters here upon complete UART transmit.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
	if (huart == UART_2 || huart == UART_4)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a08      	ldr	r2, [pc, #32]	; (8008c7c <HAL_UART_TxCpltCallback+0x2c>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d003      	beq.n	8008c68 <HAL_UART_TxCpltCallback+0x18>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a07      	ldr	r2, [pc, #28]	; (8008c80 <HAL_UART_TxCpltCallback+0x30>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d102      	bne.n	8008c6e <HAL_UART_TxCpltCallback+0x1e>
		uart_tx_done_flag = TRUE;
 8008c68:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <HAL_UART_TxCpltCallback+0x34>)
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	701a      	strb	r2, [r3, #0]
}
 8008c6e:	bf00      	nop
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	20000404 	.word	0x20000404
 8008c80:	2000037c 	.word	0x2000037c
 8008c84:	20000ba8 	.word	0x20000ba8

08008c88 <__errno>:
 8008c88:	4b01      	ldr	r3, [pc, #4]	; (8008c90 <__errno+0x8>)
 8008c8a:	6818      	ldr	r0, [r3, #0]
 8008c8c:	4770      	bx	lr
 8008c8e:	bf00      	nop
 8008c90:	2000000c 	.word	0x2000000c

08008c94 <__libc_init_array>:
 8008c94:	b570      	push	{r4, r5, r6, lr}
 8008c96:	4d0d      	ldr	r5, [pc, #52]	; (8008ccc <__libc_init_array+0x38>)
 8008c98:	4c0d      	ldr	r4, [pc, #52]	; (8008cd0 <__libc_init_array+0x3c>)
 8008c9a:	1b64      	subs	r4, r4, r5
 8008c9c:	10a4      	asrs	r4, r4, #2
 8008c9e:	2600      	movs	r6, #0
 8008ca0:	42a6      	cmp	r6, r4
 8008ca2:	d109      	bne.n	8008cb8 <__libc_init_array+0x24>
 8008ca4:	4d0b      	ldr	r5, [pc, #44]	; (8008cd4 <__libc_init_array+0x40>)
 8008ca6:	4c0c      	ldr	r4, [pc, #48]	; (8008cd8 <__libc_init_array+0x44>)
 8008ca8:	f001 fb74 	bl	800a394 <_init>
 8008cac:	1b64      	subs	r4, r4, r5
 8008cae:	10a4      	asrs	r4, r4, #2
 8008cb0:	2600      	movs	r6, #0
 8008cb2:	42a6      	cmp	r6, r4
 8008cb4:	d105      	bne.n	8008cc2 <__libc_init_array+0x2e>
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}
 8008cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cbc:	4798      	blx	r3
 8008cbe:	3601      	adds	r6, #1
 8008cc0:	e7ee      	b.n	8008ca0 <__libc_init_array+0xc>
 8008cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cc6:	4798      	blx	r3
 8008cc8:	3601      	adds	r6, #1
 8008cca:	e7f2      	b.n	8008cb2 <__libc_init_array+0x1e>
 8008ccc:	0800a610 	.word	0x0800a610
 8008cd0:	0800a610 	.word	0x0800a610
 8008cd4:	0800a610 	.word	0x0800a610
 8008cd8:	0800a614 	.word	0x0800a614

08008cdc <memset>:
 8008cdc:	4402      	add	r2, r0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d100      	bne.n	8008ce6 <memset+0xa>
 8008ce4:	4770      	bx	lr
 8008ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8008cea:	e7f9      	b.n	8008ce0 <memset+0x4>

08008cec <_puts_r>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	460e      	mov	r6, r1
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	b118      	cbz	r0, 8008cfc <_puts_r+0x10>
 8008cf4:	6983      	ldr	r3, [r0, #24]
 8008cf6:	b90b      	cbnz	r3, 8008cfc <_puts_r+0x10>
 8008cf8:	f000 fa86 	bl	8009208 <__sinit>
 8008cfc:	69ab      	ldr	r3, [r5, #24]
 8008cfe:	68ac      	ldr	r4, [r5, #8]
 8008d00:	b913      	cbnz	r3, 8008d08 <_puts_r+0x1c>
 8008d02:	4628      	mov	r0, r5
 8008d04:	f000 fa80 	bl	8009208 <__sinit>
 8008d08:	4b2c      	ldr	r3, [pc, #176]	; (8008dbc <_puts_r+0xd0>)
 8008d0a:	429c      	cmp	r4, r3
 8008d0c:	d120      	bne.n	8008d50 <_puts_r+0x64>
 8008d0e:	686c      	ldr	r4, [r5, #4]
 8008d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d12:	07db      	lsls	r3, r3, #31
 8008d14:	d405      	bmi.n	8008d22 <_puts_r+0x36>
 8008d16:	89a3      	ldrh	r3, [r4, #12]
 8008d18:	0598      	lsls	r0, r3, #22
 8008d1a:	d402      	bmi.n	8008d22 <_puts_r+0x36>
 8008d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d1e:	f000 fb2e 	bl	800937e <__retarget_lock_acquire_recursive>
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	0719      	lsls	r1, r3, #28
 8008d26:	d51d      	bpl.n	8008d64 <_puts_r+0x78>
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	b1db      	cbz	r3, 8008d64 <_puts_r+0x78>
 8008d2c:	3e01      	subs	r6, #1
 8008d2e:	68a3      	ldr	r3, [r4, #8]
 8008d30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d34:	3b01      	subs	r3, #1
 8008d36:	60a3      	str	r3, [r4, #8]
 8008d38:	bb39      	cbnz	r1, 8008d8a <_puts_r+0x9e>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	da38      	bge.n	8008db0 <_puts_r+0xc4>
 8008d3e:	4622      	mov	r2, r4
 8008d40:	210a      	movs	r1, #10
 8008d42:	4628      	mov	r0, r5
 8008d44:	f000 f874 	bl	8008e30 <__swbuf_r>
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d011      	beq.n	8008d70 <_puts_r+0x84>
 8008d4c:	250a      	movs	r5, #10
 8008d4e:	e011      	b.n	8008d74 <_puts_r+0x88>
 8008d50:	4b1b      	ldr	r3, [pc, #108]	; (8008dc0 <_puts_r+0xd4>)
 8008d52:	429c      	cmp	r4, r3
 8008d54:	d101      	bne.n	8008d5a <_puts_r+0x6e>
 8008d56:	68ac      	ldr	r4, [r5, #8]
 8008d58:	e7da      	b.n	8008d10 <_puts_r+0x24>
 8008d5a:	4b1a      	ldr	r3, [pc, #104]	; (8008dc4 <_puts_r+0xd8>)
 8008d5c:	429c      	cmp	r4, r3
 8008d5e:	bf08      	it	eq
 8008d60:	68ec      	ldreq	r4, [r5, #12]
 8008d62:	e7d5      	b.n	8008d10 <_puts_r+0x24>
 8008d64:	4621      	mov	r1, r4
 8008d66:	4628      	mov	r0, r5
 8008d68:	f000 f8b4 	bl	8008ed4 <__swsetup_r>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d0dd      	beq.n	8008d2c <_puts_r+0x40>
 8008d70:	f04f 35ff 	mov.w	r5, #4294967295
 8008d74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d76:	07da      	lsls	r2, r3, #31
 8008d78:	d405      	bmi.n	8008d86 <_puts_r+0x9a>
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	059b      	lsls	r3, r3, #22
 8008d7e:	d402      	bmi.n	8008d86 <_puts_r+0x9a>
 8008d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d82:	f000 fafd 	bl	8009380 <__retarget_lock_release_recursive>
 8008d86:	4628      	mov	r0, r5
 8008d88:	bd70      	pop	{r4, r5, r6, pc}
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	da04      	bge.n	8008d98 <_puts_r+0xac>
 8008d8e:	69a2      	ldr	r2, [r4, #24]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	dc06      	bgt.n	8008da2 <_puts_r+0xb6>
 8008d94:	290a      	cmp	r1, #10
 8008d96:	d004      	beq.n	8008da2 <_puts_r+0xb6>
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	1c5a      	adds	r2, r3, #1
 8008d9c:	6022      	str	r2, [r4, #0]
 8008d9e:	7019      	strb	r1, [r3, #0]
 8008da0:	e7c5      	b.n	8008d2e <_puts_r+0x42>
 8008da2:	4622      	mov	r2, r4
 8008da4:	4628      	mov	r0, r5
 8008da6:	f000 f843 	bl	8008e30 <__swbuf_r>
 8008daa:	3001      	adds	r0, #1
 8008dac:	d1bf      	bne.n	8008d2e <_puts_r+0x42>
 8008dae:	e7df      	b.n	8008d70 <_puts_r+0x84>
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	250a      	movs	r5, #10
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	6022      	str	r2, [r4, #0]
 8008db8:	701d      	strb	r5, [r3, #0]
 8008dba:	e7db      	b.n	8008d74 <_puts_r+0x88>
 8008dbc:	0800a5a8 	.word	0x0800a5a8
 8008dc0:	0800a5c8 	.word	0x0800a5c8
 8008dc4:	0800a588 	.word	0x0800a588

08008dc8 <puts>:
 8008dc8:	4b02      	ldr	r3, [pc, #8]	; (8008dd4 <puts+0xc>)
 8008dca:	4601      	mov	r1, r0
 8008dcc:	6818      	ldr	r0, [r3, #0]
 8008dce:	f7ff bf8d 	b.w	8008cec <_puts_r>
 8008dd2:	bf00      	nop
 8008dd4:	2000000c 	.word	0x2000000c

08008dd8 <iscanf>:
 8008dd8:	b40f      	push	{r0, r1, r2, r3}
 8008dda:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <iscanf+0x2c>)
 8008ddc:	b513      	push	{r0, r1, r4, lr}
 8008dde:	681c      	ldr	r4, [r3, #0]
 8008de0:	b124      	cbz	r4, 8008dec <iscanf+0x14>
 8008de2:	69a3      	ldr	r3, [r4, #24]
 8008de4:	b913      	cbnz	r3, 8008dec <iscanf+0x14>
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 fa0e 	bl	8009208 <__sinit>
 8008dec:	ab05      	add	r3, sp, #20
 8008dee:	9a04      	ldr	r2, [sp, #16]
 8008df0:	6861      	ldr	r1, [r4, #4]
 8008df2:	9301      	str	r3, [sp, #4]
 8008df4:	4620      	mov	r0, r4
 8008df6:	f000 fdaf 	bl	8009958 <_vfiscanf_r>
 8008dfa:	b002      	add	sp, #8
 8008dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e00:	b004      	add	sp, #16
 8008e02:	4770      	bx	lr
 8008e04:	2000000c 	.word	0x2000000c

08008e08 <strncmp>:
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	b17a      	cbz	r2, 8008e2c <strncmp+0x24>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	3901      	subs	r1, #1
 8008e10:	1884      	adds	r4, r0, r2
 8008e12:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e16:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e1a:	4290      	cmp	r0, r2
 8008e1c:	d101      	bne.n	8008e22 <strncmp+0x1a>
 8008e1e:	42a3      	cmp	r3, r4
 8008e20:	d101      	bne.n	8008e26 <strncmp+0x1e>
 8008e22:	1a80      	subs	r0, r0, r2
 8008e24:	bd10      	pop	{r4, pc}
 8008e26:	2800      	cmp	r0, #0
 8008e28:	d1f3      	bne.n	8008e12 <strncmp+0xa>
 8008e2a:	e7fa      	b.n	8008e22 <strncmp+0x1a>
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	e7f9      	b.n	8008e24 <strncmp+0x1c>

08008e30 <__swbuf_r>:
 8008e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e32:	460e      	mov	r6, r1
 8008e34:	4614      	mov	r4, r2
 8008e36:	4605      	mov	r5, r0
 8008e38:	b118      	cbz	r0, 8008e42 <__swbuf_r+0x12>
 8008e3a:	6983      	ldr	r3, [r0, #24]
 8008e3c:	b90b      	cbnz	r3, 8008e42 <__swbuf_r+0x12>
 8008e3e:	f000 f9e3 	bl	8009208 <__sinit>
 8008e42:	4b21      	ldr	r3, [pc, #132]	; (8008ec8 <__swbuf_r+0x98>)
 8008e44:	429c      	cmp	r4, r3
 8008e46:	d12b      	bne.n	8008ea0 <__swbuf_r+0x70>
 8008e48:	686c      	ldr	r4, [r5, #4]
 8008e4a:	69a3      	ldr	r3, [r4, #24]
 8008e4c:	60a3      	str	r3, [r4, #8]
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	071a      	lsls	r2, r3, #28
 8008e52:	d52f      	bpl.n	8008eb4 <__swbuf_r+0x84>
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	b36b      	cbz	r3, 8008eb4 <__swbuf_r+0x84>
 8008e58:	6923      	ldr	r3, [r4, #16]
 8008e5a:	6820      	ldr	r0, [r4, #0]
 8008e5c:	1ac0      	subs	r0, r0, r3
 8008e5e:	6963      	ldr	r3, [r4, #20]
 8008e60:	b2f6      	uxtb	r6, r6
 8008e62:	4283      	cmp	r3, r0
 8008e64:	4637      	mov	r7, r6
 8008e66:	dc04      	bgt.n	8008e72 <__swbuf_r+0x42>
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f000 f926 	bl	80090bc <_fflush_r>
 8008e70:	bb30      	cbnz	r0, 8008ec0 <__swbuf_r+0x90>
 8008e72:	68a3      	ldr	r3, [r4, #8]
 8008e74:	3b01      	subs	r3, #1
 8008e76:	60a3      	str	r3, [r4, #8]
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	6022      	str	r2, [r4, #0]
 8008e7e:	701e      	strb	r6, [r3, #0]
 8008e80:	6963      	ldr	r3, [r4, #20]
 8008e82:	3001      	adds	r0, #1
 8008e84:	4283      	cmp	r3, r0
 8008e86:	d004      	beq.n	8008e92 <__swbuf_r+0x62>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	07db      	lsls	r3, r3, #31
 8008e8c:	d506      	bpl.n	8008e9c <__swbuf_r+0x6c>
 8008e8e:	2e0a      	cmp	r6, #10
 8008e90:	d104      	bne.n	8008e9c <__swbuf_r+0x6c>
 8008e92:	4621      	mov	r1, r4
 8008e94:	4628      	mov	r0, r5
 8008e96:	f000 f911 	bl	80090bc <_fflush_r>
 8008e9a:	b988      	cbnz	r0, 8008ec0 <__swbuf_r+0x90>
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <__swbuf_r+0x9c>)
 8008ea2:	429c      	cmp	r4, r3
 8008ea4:	d101      	bne.n	8008eaa <__swbuf_r+0x7a>
 8008ea6:	68ac      	ldr	r4, [r5, #8]
 8008ea8:	e7cf      	b.n	8008e4a <__swbuf_r+0x1a>
 8008eaa:	4b09      	ldr	r3, [pc, #36]	; (8008ed0 <__swbuf_r+0xa0>)
 8008eac:	429c      	cmp	r4, r3
 8008eae:	bf08      	it	eq
 8008eb0:	68ec      	ldreq	r4, [r5, #12]
 8008eb2:	e7ca      	b.n	8008e4a <__swbuf_r+0x1a>
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f000 f80c 	bl	8008ed4 <__swsetup_r>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d0cb      	beq.n	8008e58 <__swbuf_r+0x28>
 8008ec0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ec4:	e7ea      	b.n	8008e9c <__swbuf_r+0x6c>
 8008ec6:	bf00      	nop
 8008ec8:	0800a5a8 	.word	0x0800a5a8
 8008ecc:	0800a5c8 	.word	0x0800a5c8
 8008ed0:	0800a588 	.word	0x0800a588

08008ed4 <__swsetup_r>:
 8008ed4:	4b32      	ldr	r3, [pc, #200]	; (8008fa0 <__swsetup_r+0xcc>)
 8008ed6:	b570      	push	{r4, r5, r6, lr}
 8008ed8:	681d      	ldr	r5, [r3, #0]
 8008eda:	4606      	mov	r6, r0
 8008edc:	460c      	mov	r4, r1
 8008ede:	b125      	cbz	r5, 8008eea <__swsetup_r+0x16>
 8008ee0:	69ab      	ldr	r3, [r5, #24]
 8008ee2:	b913      	cbnz	r3, 8008eea <__swsetup_r+0x16>
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f000 f98f 	bl	8009208 <__sinit>
 8008eea:	4b2e      	ldr	r3, [pc, #184]	; (8008fa4 <__swsetup_r+0xd0>)
 8008eec:	429c      	cmp	r4, r3
 8008eee:	d10f      	bne.n	8008f10 <__swsetup_r+0x3c>
 8008ef0:	686c      	ldr	r4, [r5, #4]
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ef8:	0719      	lsls	r1, r3, #28
 8008efa:	d42c      	bmi.n	8008f56 <__swsetup_r+0x82>
 8008efc:	06dd      	lsls	r5, r3, #27
 8008efe:	d411      	bmi.n	8008f24 <__swsetup_r+0x50>
 8008f00:	2309      	movs	r3, #9
 8008f02:	6033      	str	r3, [r6, #0]
 8008f04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f08:	81a3      	strh	r3, [r4, #12]
 8008f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f0e:	e03e      	b.n	8008f8e <__swsetup_r+0xba>
 8008f10:	4b25      	ldr	r3, [pc, #148]	; (8008fa8 <__swsetup_r+0xd4>)
 8008f12:	429c      	cmp	r4, r3
 8008f14:	d101      	bne.n	8008f1a <__swsetup_r+0x46>
 8008f16:	68ac      	ldr	r4, [r5, #8]
 8008f18:	e7eb      	b.n	8008ef2 <__swsetup_r+0x1e>
 8008f1a:	4b24      	ldr	r3, [pc, #144]	; (8008fac <__swsetup_r+0xd8>)
 8008f1c:	429c      	cmp	r4, r3
 8008f1e:	bf08      	it	eq
 8008f20:	68ec      	ldreq	r4, [r5, #12]
 8008f22:	e7e6      	b.n	8008ef2 <__swsetup_r+0x1e>
 8008f24:	0758      	lsls	r0, r3, #29
 8008f26:	d512      	bpl.n	8008f4e <__swsetup_r+0x7a>
 8008f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f2a:	b141      	cbz	r1, 8008f3e <__swsetup_r+0x6a>
 8008f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f30:	4299      	cmp	r1, r3
 8008f32:	d002      	beq.n	8008f3a <__swsetup_r+0x66>
 8008f34:	4630      	mov	r0, r6
 8008f36:	f000 fa89 	bl	800944c <_free_r>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f44:	81a3      	strh	r3, [r4, #12]
 8008f46:	2300      	movs	r3, #0
 8008f48:	6063      	str	r3, [r4, #4]
 8008f4a:	6923      	ldr	r3, [r4, #16]
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	f043 0308 	orr.w	r3, r3, #8
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	6923      	ldr	r3, [r4, #16]
 8008f58:	b94b      	cbnz	r3, 8008f6e <__swsetup_r+0x9a>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f64:	d003      	beq.n	8008f6e <__swsetup_r+0x9a>
 8008f66:	4621      	mov	r1, r4
 8008f68:	4630      	mov	r0, r6
 8008f6a:	f000 fa2f 	bl	80093cc <__smakebuf_r>
 8008f6e:	89a0      	ldrh	r0, [r4, #12]
 8008f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f74:	f010 0301 	ands.w	r3, r0, #1
 8008f78:	d00a      	beq.n	8008f90 <__swsetup_r+0xbc>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60a3      	str	r3, [r4, #8]
 8008f7e:	6963      	ldr	r3, [r4, #20]
 8008f80:	425b      	negs	r3, r3
 8008f82:	61a3      	str	r3, [r4, #24]
 8008f84:	6923      	ldr	r3, [r4, #16]
 8008f86:	b943      	cbnz	r3, 8008f9a <__swsetup_r+0xc6>
 8008f88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f8c:	d1ba      	bne.n	8008f04 <__swsetup_r+0x30>
 8008f8e:	bd70      	pop	{r4, r5, r6, pc}
 8008f90:	0781      	lsls	r1, r0, #30
 8008f92:	bf58      	it	pl
 8008f94:	6963      	ldrpl	r3, [r4, #20]
 8008f96:	60a3      	str	r3, [r4, #8]
 8008f98:	e7f4      	b.n	8008f84 <__swsetup_r+0xb0>
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	e7f7      	b.n	8008f8e <__swsetup_r+0xba>
 8008f9e:	bf00      	nop
 8008fa0:	2000000c 	.word	0x2000000c
 8008fa4:	0800a5a8 	.word	0x0800a5a8
 8008fa8:	0800a5c8 	.word	0x0800a5c8
 8008fac:	0800a588 	.word	0x0800a588

08008fb0 <__sflush_r>:
 8008fb0:	898a      	ldrh	r2, [r1, #12]
 8008fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb6:	4605      	mov	r5, r0
 8008fb8:	0710      	lsls	r0, r2, #28
 8008fba:	460c      	mov	r4, r1
 8008fbc:	d458      	bmi.n	8009070 <__sflush_r+0xc0>
 8008fbe:	684b      	ldr	r3, [r1, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	dc05      	bgt.n	8008fd0 <__sflush_r+0x20>
 8008fc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	dc02      	bgt.n	8008fd0 <__sflush_r+0x20>
 8008fca:	2000      	movs	r0, #0
 8008fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fd2:	2e00      	cmp	r6, #0
 8008fd4:	d0f9      	beq.n	8008fca <__sflush_r+0x1a>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fdc:	682f      	ldr	r7, [r5, #0]
 8008fde:	602b      	str	r3, [r5, #0]
 8008fe0:	d032      	beq.n	8009048 <__sflush_r+0x98>
 8008fe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	075a      	lsls	r2, r3, #29
 8008fe8:	d505      	bpl.n	8008ff6 <__sflush_r+0x46>
 8008fea:	6863      	ldr	r3, [r4, #4]
 8008fec:	1ac0      	subs	r0, r0, r3
 8008fee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ff0:	b10b      	cbz	r3, 8008ff6 <__sflush_r+0x46>
 8008ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ff4:	1ac0      	subs	r0, r0, r3
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ffc:	6a21      	ldr	r1, [r4, #32]
 8008ffe:	4628      	mov	r0, r5
 8009000:	47b0      	blx	r6
 8009002:	1c43      	adds	r3, r0, #1
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	d106      	bne.n	8009016 <__sflush_r+0x66>
 8009008:	6829      	ldr	r1, [r5, #0]
 800900a:	291d      	cmp	r1, #29
 800900c:	d82c      	bhi.n	8009068 <__sflush_r+0xb8>
 800900e:	4a2a      	ldr	r2, [pc, #168]	; (80090b8 <__sflush_r+0x108>)
 8009010:	40ca      	lsrs	r2, r1
 8009012:	07d6      	lsls	r6, r2, #31
 8009014:	d528      	bpl.n	8009068 <__sflush_r+0xb8>
 8009016:	2200      	movs	r2, #0
 8009018:	6062      	str	r2, [r4, #4]
 800901a:	04d9      	lsls	r1, r3, #19
 800901c:	6922      	ldr	r2, [r4, #16]
 800901e:	6022      	str	r2, [r4, #0]
 8009020:	d504      	bpl.n	800902c <__sflush_r+0x7c>
 8009022:	1c42      	adds	r2, r0, #1
 8009024:	d101      	bne.n	800902a <__sflush_r+0x7a>
 8009026:	682b      	ldr	r3, [r5, #0]
 8009028:	b903      	cbnz	r3, 800902c <__sflush_r+0x7c>
 800902a:	6560      	str	r0, [r4, #84]	; 0x54
 800902c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800902e:	602f      	str	r7, [r5, #0]
 8009030:	2900      	cmp	r1, #0
 8009032:	d0ca      	beq.n	8008fca <__sflush_r+0x1a>
 8009034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009038:	4299      	cmp	r1, r3
 800903a:	d002      	beq.n	8009042 <__sflush_r+0x92>
 800903c:	4628      	mov	r0, r5
 800903e:	f000 fa05 	bl	800944c <_free_r>
 8009042:	2000      	movs	r0, #0
 8009044:	6360      	str	r0, [r4, #52]	; 0x34
 8009046:	e7c1      	b.n	8008fcc <__sflush_r+0x1c>
 8009048:	6a21      	ldr	r1, [r4, #32]
 800904a:	2301      	movs	r3, #1
 800904c:	4628      	mov	r0, r5
 800904e:	47b0      	blx	r6
 8009050:	1c41      	adds	r1, r0, #1
 8009052:	d1c7      	bne.n	8008fe4 <__sflush_r+0x34>
 8009054:	682b      	ldr	r3, [r5, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0c4      	beq.n	8008fe4 <__sflush_r+0x34>
 800905a:	2b1d      	cmp	r3, #29
 800905c:	d001      	beq.n	8009062 <__sflush_r+0xb2>
 800905e:	2b16      	cmp	r3, #22
 8009060:	d101      	bne.n	8009066 <__sflush_r+0xb6>
 8009062:	602f      	str	r7, [r5, #0]
 8009064:	e7b1      	b.n	8008fca <__sflush_r+0x1a>
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800906c:	81a3      	strh	r3, [r4, #12]
 800906e:	e7ad      	b.n	8008fcc <__sflush_r+0x1c>
 8009070:	690f      	ldr	r7, [r1, #16]
 8009072:	2f00      	cmp	r7, #0
 8009074:	d0a9      	beq.n	8008fca <__sflush_r+0x1a>
 8009076:	0793      	lsls	r3, r2, #30
 8009078:	680e      	ldr	r6, [r1, #0]
 800907a:	bf08      	it	eq
 800907c:	694b      	ldreq	r3, [r1, #20]
 800907e:	600f      	str	r7, [r1, #0]
 8009080:	bf18      	it	ne
 8009082:	2300      	movne	r3, #0
 8009084:	eba6 0807 	sub.w	r8, r6, r7
 8009088:	608b      	str	r3, [r1, #8]
 800908a:	f1b8 0f00 	cmp.w	r8, #0
 800908e:	dd9c      	ble.n	8008fca <__sflush_r+0x1a>
 8009090:	6a21      	ldr	r1, [r4, #32]
 8009092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009094:	4643      	mov	r3, r8
 8009096:	463a      	mov	r2, r7
 8009098:	4628      	mov	r0, r5
 800909a:	47b0      	blx	r6
 800909c:	2800      	cmp	r0, #0
 800909e:	dc06      	bgt.n	80090ae <__sflush_r+0xfe>
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090a6:	81a3      	strh	r3, [r4, #12]
 80090a8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ac:	e78e      	b.n	8008fcc <__sflush_r+0x1c>
 80090ae:	4407      	add	r7, r0
 80090b0:	eba8 0800 	sub.w	r8, r8, r0
 80090b4:	e7e9      	b.n	800908a <__sflush_r+0xda>
 80090b6:	bf00      	nop
 80090b8:	20400001 	.word	0x20400001

080090bc <_fflush_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	690b      	ldr	r3, [r1, #16]
 80090c0:	4605      	mov	r5, r0
 80090c2:	460c      	mov	r4, r1
 80090c4:	b913      	cbnz	r3, 80090cc <_fflush_r+0x10>
 80090c6:	2500      	movs	r5, #0
 80090c8:	4628      	mov	r0, r5
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	b118      	cbz	r0, 80090d6 <_fflush_r+0x1a>
 80090ce:	6983      	ldr	r3, [r0, #24]
 80090d0:	b90b      	cbnz	r3, 80090d6 <_fflush_r+0x1a>
 80090d2:	f000 f899 	bl	8009208 <__sinit>
 80090d6:	4b14      	ldr	r3, [pc, #80]	; (8009128 <_fflush_r+0x6c>)
 80090d8:	429c      	cmp	r4, r3
 80090da:	d11b      	bne.n	8009114 <_fflush_r+0x58>
 80090dc:	686c      	ldr	r4, [r5, #4]
 80090de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0ef      	beq.n	80090c6 <_fflush_r+0xa>
 80090e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090e8:	07d0      	lsls	r0, r2, #31
 80090ea:	d404      	bmi.n	80090f6 <_fflush_r+0x3a>
 80090ec:	0599      	lsls	r1, r3, #22
 80090ee:	d402      	bmi.n	80090f6 <_fflush_r+0x3a>
 80090f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090f2:	f000 f944 	bl	800937e <__retarget_lock_acquire_recursive>
 80090f6:	4628      	mov	r0, r5
 80090f8:	4621      	mov	r1, r4
 80090fa:	f7ff ff59 	bl	8008fb0 <__sflush_r>
 80090fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009100:	07da      	lsls	r2, r3, #31
 8009102:	4605      	mov	r5, r0
 8009104:	d4e0      	bmi.n	80090c8 <_fflush_r+0xc>
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	059b      	lsls	r3, r3, #22
 800910a:	d4dd      	bmi.n	80090c8 <_fflush_r+0xc>
 800910c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800910e:	f000 f937 	bl	8009380 <__retarget_lock_release_recursive>
 8009112:	e7d9      	b.n	80090c8 <_fflush_r+0xc>
 8009114:	4b05      	ldr	r3, [pc, #20]	; (800912c <_fflush_r+0x70>)
 8009116:	429c      	cmp	r4, r3
 8009118:	d101      	bne.n	800911e <_fflush_r+0x62>
 800911a:	68ac      	ldr	r4, [r5, #8]
 800911c:	e7df      	b.n	80090de <_fflush_r+0x22>
 800911e:	4b04      	ldr	r3, [pc, #16]	; (8009130 <_fflush_r+0x74>)
 8009120:	429c      	cmp	r4, r3
 8009122:	bf08      	it	eq
 8009124:	68ec      	ldreq	r4, [r5, #12]
 8009126:	e7da      	b.n	80090de <_fflush_r+0x22>
 8009128:	0800a5a8 	.word	0x0800a5a8
 800912c:	0800a5c8 	.word	0x0800a5c8
 8009130:	0800a588 	.word	0x0800a588

08009134 <fflush>:
 8009134:	4601      	mov	r1, r0
 8009136:	b920      	cbnz	r0, 8009142 <fflush+0xe>
 8009138:	4b04      	ldr	r3, [pc, #16]	; (800914c <fflush+0x18>)
 800913a:	4905      	ldr	r1, [pc, #20]	; (8009150 <fflush+0x1c>)
 800913c:	6818      	ldr	r0, [r3, #0]
 800913e:	f000 b8fe 	b.w	800933e <_fwalk_reent>
 8009142:	4b04      	ldr	r3, [pc, #16]	; (8009154 <fflush+0x20>)
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	f7ff bfb9 	b.w	80090bc <_fflush_r>
 800914a:	bf00      	nop
 800914c:	0800a584 	.word	0x0800a584
 8009150:	080090bd 	.word	0x080090bd
 8009154:	2000000c 	.word	0x2000000c

08009158 <std>:
 8009158:	2300      	movs	r3, #0
 800915a:	b510      	push	{r4, lr}
 800915c:	4604      	mov	r4, r0
 800915e:	e9c0 3300 	strd	r3, r3, [r0]
 8009162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009166:	6083      	str	r3, [r0, #8]
 8009168:	8181      	strh	r1, [r0, #12]
 800916a:	6643      	str	r3, [r0, #100]	; 0x64
 800916c:	81c2      	strh	r2, [r0, #14]
 800916e:	6183      	str	r3, [r0, #24]
 8009170:	4619      	mov	r1, r3
 8009172:	2208      	movs	r2, #8
 8009174:	305c      	adds	r0, #92	; 0x5c
 8009176:	f7ff fdb1 	bl	8008cdc <memset>
 800917a:	4b05      	ldr	r3, [pc, #20]	; (8009190 <std+0x38>)
 800917c:	6263      	str	r3, [r4, #36]	; 0x24
 800917e:	4b05      	ldr	r3, [pc, #20]	; (8009194 <std+0x3c>)
 8009180:	62a3      	str	r3, [r4, #40]	; 0x28
 8009182:	4b05      	ldr	r3, [pc, #20]	; (8009198 <std+0x40>)
 8009184:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009186:	4b05      	ldr	r3, [pc, #20]	; (800919c <std+0x44>)
 8009188:	6224      	str	r4, [r4, #32]
 800918a:	6323      	str	r3, [r4, #48]	; 0x30
 800918c:	bd10      	pop	{r4, pc}
 800918e:	bf00      	nop
 8009190:	08009e05 	.word	0x08009e05
 8009194:	08009e27 	.word	0x08009e27
 8009198:	08009e5f 	.word	0x08009e5f
 800919c:	08009e83 	.word	0x08009e83

080091a0 <_cleanup_r>:
 80091a0:	4901      	ldr	r1, [pc, #4]	; (80091a8 <_cleanup_r+0x8>)
 80091a2:	f000 b8cc 	b.w	800933e <_fwalk_reent>
 80091a6:	bf00      	nop
 80091a8:	080090bd 	.word	0x080090bd

080091ac <__sfmoreglue>:
 80091ac:	b570      	push	{r4, r5, r6, lr}
 80091ae:	2268      	movs	r2, #104	; 0x68
 80091b0:	1e4d      	subs	r5, r1, #1
 80091b2:	4355      	muls	r5, r2
 80091b4:	460e      	mov	r6, r1
 80091b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091ba:	f000 f9b3 	bl	8009524 <_malloc_r>
 80091be:	4604      	mov	r4, r0
 80091c0:	b140      	cbz	r0, 80091d4 <__sfmoreglue+0x28>
 80091c2:	2100      	movs	r1, #0
 80091c4:	e9c0 1600 	strd	r1, r6, [r0]
 80091c8:	300c      	adds	r0, #12
 80091ca:	60a0      	str	r0, [r4, #8]
 80091cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091d0:	f7ff fd84 	bl	8008cdc <memset>
 80091d4:	4620      	mov	r0, r4
 80091d6:	bd70      	pop	{r4, r5, r6, pc}

080091d8 <__sfp_lock_acquire>:
 80091d8:	4801      	ldr	r0, [pc, #4]	; (80091e0 <__sfp_lock_acquire+0x8>)
 80091da:	f000 b8d0 	b.w	800937e <__retarget_lock_acquire_recursive>
 80091de:	bf00      	nop
 80091e0:	20000bab 	.word	0x20000bab

080091e4 <__sfp_lock_release>:
 80091e4:	4801      	ldr	r0, [pc, #4]	; (80091ec <__sfp_lock_release+0x8>)
 80091e6:	f000 b8cb 	b.w	8009380 <__retarget_lock_release_recursive>
 80091ea:	bf00      	nop
 80091ec:	20000bab 	.word	0x20000bab

080091f0 <__sinit_lock_acquire>:
 80091f0:	4801      	ldr	r0, [pc, #4]	; (80091f8 <__sinit_lock_acquire+0x8>)
 80091f2:	f000 b8c4 	b.w	800937e <__retarget_lock_acquire_recursive>
 80091f6:	bf00      	nop
 80091f8:	20000bac 	.word	0x20000bac

080091fc <__sinit_lock_release>:
 80091fc:	4801      	ldr	r0, [pc, #4]	; (8009204 <__sinit_lock_release+0x8>)
 80091fe:	f000 b8bf 	b.w	8009380 <__retarget_lock_release_recursive>
 8009202:	bf00      	nop
 8009204:	20000bac 	.word	0x20000bac

08009208 <__sinit>:
 8009208:	b510      	push	{r4, lr}
 800920a:	4604      	mov	r4, r0
 800920c:	f7ff fff0 	bl	80091f0 <__sinit_lock_acquire>
 8009210:	69a3      	ldr	r3, [r4, #24]
 8009212:	b11b      	cbz	r3, 800921c <__sinit+0x14>
 8009214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009218:	f7ff bff0 	b.w	80091fc <__sinit_lock_release>
 800921c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009220:	6523      	str	r3, [r4, #80]	; 0x50
 8009222:	4b13      	ldr	r3, [pc, #76]	; (8009270 <__sinit+0x68>)
 8009224:	4a13      	ldr	r2, [pc, #76]	; (8009274 <__sinit+0x6c>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	62a2      	str	r2, [r4, #40]	; 0x28
 800922a:	42a3      	cmp	r3, r4
 800922c:	bf04      	itt	eq
 800922e:	2301      	moveq	r3, #1
 8009230:	61a3      	streq	r3, [r4, #24]
 8009232:	4620      	mov	r0, r4
 8009234:	f000 f820 	bl	8009278 <__sfp>
 8009238:	6060      	str	r0, [r4, #4]
 800923a:	4620      	mov	r0, r4
 800923c:	f000 f81c 	bl	8009278 <__sfp>
 8009240:	60a0      	str	r0, [r4, #8]
 8009242:	4620      	mov	r0, r4
 8009244:	f000 f818 	bl	8009278 <__sfp>
 8009248:	2200      	movs	r2, #0
 800924a:	60e0      	str	r0, [r4, #12]
 800924c:	2104      	movs	r1, #4
 800924e:	6860      	ldr	r0, [r4, #4]
 8009250:	f7ff ff82 	bl	8009158 <std>
 8009254:	68a0      	ldr	r0, [r4, #8]
 8009256:	2201      	movs	r2, #1
 8009258:	2109      	movs	r1, #9
 800925a:	f7ff ff7d 	bl	8009158 <std>
 800925e:	68e0      	ldr	r0, [r4, #12]
 8009260:	2202      	movs	r2, #2
 8009262:	2112      	movs	r1, #18
 8009264:	f7ff ff78 	bl	8009158 <std>
 8009268:	2301      	movs	r3, #1
 800926a:	61a3      	str	r3, [r4, #24]
 800926c:	e7d2      	b.n	8009214 <__sinit+0xc>
 800926e:	bf00      	nop
 8009270:	0800a584 	.word	0x0800a584
 8009274:	080091a1 	.word	0x080091a1

08009278 <__sfp>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	4607      	mov	r7, r0
 800927c:	f7ff ffac 	bl	80091d8 <__sfp_lock_acquire>
 8009280:	4b1e      	ldr	r3, [pc, #120]	; (80092fc <__sfp+0x84>)
 8009282:	681e      	ldr	r6, [r3, #0]
 8009284:	69b3      	ldr	r3, [r6, #24]
 8009286:	b913      	cbnz	r3, 800928e <__sfp+0x16>
 8009288:	4630      	mov	r0, r6
 800928a:	f7ff ffbd 	bl	8009208 <__sinit>
 800928e:	3648      	adds	r6, #72	; 0x48
 8009290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009294:	3b01      	subs	r3, #1
 8009296:	d503      	bpl.n	80092a0 <__sfp+0x28>
 8009298:	6833      	ldr	r3, [r6, #0]
 800929a:	b30b      	cbz	r3, 80092e0 <__sfp+0x68>
 800929c:	6836      	ldr	r6, [r6, #0]
 800929e:	e7f7      	b.n	8009290 <__sfp+0x18>
 80092a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092a4:	b9d5      	cbnz	r5, 80092dc <__sfp+0x64>
 80092a6:	4b16      	ldr	r3, [pc, #88]	; (8009300 <__sfp+0x88>)
 80092a8:	60e3      	str	r3, [r4, #12]
 80092aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092ae:	6665      	str	r5, [r4, #100]	; 0x64
 80092b0:	f000 f864 	bl	800937c <__retarget_lock_init_recursive>
 80092b4:	f7ff ff96 	bl	80091e4 <__sfp_lock_release>
 80092b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092c0:	6025      	str	r5, [r4, #0]
 80092c2:	61a5      	str	r5, [r4, #24]
 80092c4:	2208      	movs	r2, #8
 80092c6:	4629      	mov	r1, r5
 80092c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092cc:	f7ff fd06 	bl	8008cdc <memset>
 80092d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092d8:	4620      	mov	r0, r4
 80092da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092dc:	3468      	adds	r4, #104	; 0x68
 80092de:	e7d9      	b.n	8009294 <__sfp+0x1c>
 80092e0:	2104      	movs	r1, #4
 80092e2:	4638      	mov	r0, r7
 80092e4:	f7ff ff62 	bl	80091ac <__sfmoreglue>
 80092e8:	4604      	mov	r4, r0
 80092ea:	6030      	str	r0, [r6, #0]
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d1d5      	bne.n	800929c <__sfp+0x24>
 80092f0:	f7ff ff78 	bl	80091e4 <__sfp_lock_release>
 80092f4:	230c      	movs	r3, #12
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	e7ee      	b.n	80092d8 <__sfp+0x60>
 80092fa:	bf00      	nop
 80092fc:	0800a584 	.word	0x0800a584
 8009300:	ffff0001 	.word	0xffff0001

08009304 <_fwalk>:
 8009304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009308:	460f      	mov	r7, r1
 800930a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800930e:	2600      	movs	r6, #0
 8009310:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8009314:	f1b8 0801 	subs.w	r8, r8, #1
 8009318:	d505      	bpl.n	8009326 <_fwalk+0x22>
 800931a:	6824      	ldr	r4, [r4, #0]
 800931c:	2c00      	cmp	r4, #0
 800931e:	d1f7      	bne.n	8009310 <_fwalk+0xc>
 8009320:	4630      	mov	r0, r6
 8009322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009326:	89ab      	ldrh	r3, [r5, #12]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d906      	bls.n	800933a <_fwalk+0x36>
 800932c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009330:	3301      	adds	r3, #1
 8009332:	d002      	beq.n	800933a <_fwalk+0x36>
 8009334:	4628      	mov	r0, r5
 8009336:	47b8      	blx	r7
 8009338:	4306      	orrs	r6, r0
 800933a:	3568      	adds	r5, #104	; 0x68
 800933c:	e7ea      	b.n	8009314 <_fwalk+0x10>

0800933e <_fwalk_reent>:
 800933e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009342:	4606      	mov	r6, r0
 8009344:	4688      	mov	r8, r1
 8009346:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800934a:	2700      	movs	r7, #0
 800934c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009350:	f1b9 0901 	subs.w	r9, r9, #1
 8009354:	d505      	bpl.n	8009362 <_fwalk_reent+0x24>
 8009356:	6824      	ldr	r4, [r4, #0]
 8009358:	2c00      	cmp	r4, #0
 800935a:	d1f7      	bne.n	800934c <_fwalk_reent+0xe>
 800935c:	4638      	mov	r0, r7
 800935e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009362:	89ab      	ldrh	r3, [r5, #12]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d907      	bls.n	8009378 <_fwalk_reent+0x3a>
 8009368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800936c:	3301      	adds	r3, #1
 800936e:	d003      	beq.n	8009378 <_fwalk_reent+0x3a>
 8009370:	4629      	mov	r1, r5
 8009372:	4630      	mov	r0, r6
 8009374:	47c0      	blx	r8
 8009376:	4307      	orrs	r7, r0
 8009378:	3568      	adds	r5, #104	; 0x68
 800937a:	e7e9      	b.n	8009350 <_fwalk_reent+0x12>

0800937c <__retarget_lock_init_recursive>:
 800937c:	4770      	bx	lr

0800937e <__retarget_lock_acquire_recursive>:
 800937e:	4770      	bx	lr

08009380 <__retarget_lock_release_recursive>:
 8009380:	4770      	bx	lr

08009382 <__swhatbuf_r>:
 8009382:	b570      	push	{r4, r5, r6, lr}
 8009384:	460e      	mov	r6, r1
 8009386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938a:	2900      	cmp	r1, #0
 800938c:	b096      	sub	sp, #88	; 0x58
 800938e:	4614      	mov	r4, r2
 8009390:	461d      	mov	r5, r3
 8009392:	da08      	bge.n	80093a6 <__swhatbuf_r+0x24>
 8009394:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009398:	2200      	movs	r2, #0
 800939a:	602a      	str	r2, [r5, #0]
 800939c:	061a      	lsls	r2, r3, #24
 800939e:	d410      	bmi.n	80093c2 <__swhatbuf_r+0x40>
 80093a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093a4:	e00e      	b.n	80093c4 <__swhatbuf_r+0x42>
 80093a6:	466a      	mov	r2, sp
 80093a8:	f000 ff5c 	bl	800a264 <_fstat_r>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	dbf1      	blt.n	8009394 <__swhatbuf_r+0x12>
 80093b0:	9a01      	ldr	r2, [sp, #4]
 80093b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093ba:	425a      	negs	r2, r3
 80093bc:	415a      	adcs	r2, r3
 80093be:	602a      	str	r2, [r5, #0]
 80093c0:	e7ee      	b.n	80093a0 <__swhatbuf_r+0x1e>
 80093c2:	2340      	movs	r3, #64	; 0x40
 80093c4:	2000      	movs	r0, #0
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	b016      	add	sp, #88	; 0x58
 80093ca:	bd70      	pop	{r4, r5, r6, pc}

080093cc <__smakebuf_r>:
 80093cc:	898b      	ldrh	r3, [r1, #12]
 80093ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80093d0:	079d      	lsls	r5, r3, #30
 80093d2:	4606      	mov	r6, r0
 80093d4:	460c      	mov	r4, r1
 80093d6:	d507      	bpl.n	80093e8 <__smakebuf_r+0x1c>
 80093d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	6123      	str	r3, [r4, #16]
 80093e0:	2301      	movs	r3, #1
 80093e2:	6163      	str	r3, [r4, #20]
 80093e4:	b002      	add	sp, #8
 80093e6:	bd70      	pop	{r4, r5, r6, pc}
 80093e8:	ab01      	add	r3, sp, #4
 80093ea:	466a      	mov	r2, sp
 80093ec:	f7ff ffc9 	bl	8009382 <__swhatbuf_r>
 80093f0:	9900      	ldr	r1, [sp, #0]
 80093f2:	4605      	mov	r5, r0
 80093f4:	4630      	mov	r0, r6
 80093f6:	f000 f895 	bl	8009524 <_malloc_r>
 80093fa:	b948      	cbnz	r0, 8009410 <__smakebuf_r+0x44>
 80093fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009400:	059a      	lsls	r2, r3, #22
 8009402:	d4ef      	bmi.n	80093e4 <__smakebuf_r+0x18>
 8009404:	f023 0303 	bic.w	r3, r3, #3
 8009408:	f043 0302 	orr.w	r3, r3, #2
 800940c:	81a3      	strh	r3, [r4, #12]
 800940e:	e7e3      	b.n	80093d8 <__smakebuf_r+0xc>
 8009410:	4b0d      	ldr	r3, [pc, #52]	; (8009448 <__smakebuf_r+0x7c>)
 8009412:	62b3      	str	r3, [r6, #40]	; 0x28
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	6020      	str	r0, [r4, #0]
 8009418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800941c:	81a3      	strh	r3, [r4, #12]
 800941e:	9b00      	ldr	r3, [sp, #0]
 8009420:	6163      	str	r3, [r4, #20]
 8009422:	9b01      	ldr	r3, [sp, #4]
 8009424:	6120      	str	r0, [r4, #16]
 8009426:	b15b      	cbz	r3, 8009440 <__smakebuf_r+0x74>
 8009428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800942c:	4630      	mov	r0, r6
 800942e:	f000 ff2b 	bl	800a288 <_isatty_r>
 8009432:	b128      	cbz	r0, 8009440 <__smakebuf_r+0x74>
 8009434:	89a3      	ldrh	r3, [r4, #12]
 8009436:	f023 0303 	bic.w	r3, r3, #3
 800943a:	f043 0301 	orr.w	r3, r3, #1
 800943e:	81a3      	strh	r3, [r4, #12]
 8009440:	89a0      	ldrh	r0, [r4, #12]
 8009442:	4305      	orrs	r5, r0
 8009444:	81a5      	strh	r5, [r4, #12]
 8009446:	e7cd      	b.n	80093e4 <__smakebuf_r+0x18>
 8009448:	080091a1 	.word	0x080091a1

0800944c <_free_r>:
 800944c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800944e:	2900      	cmp	r1, #0
 8009450:	d044      	beq.n	80094dc <_free_r+0x90>
 8009452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009456:	9001      	str	r0, [sp, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	f1a1 0404 	sub.w	r4, r1, #4
 800945e:	bfb8      	it	lt
 8009460:	18e4      	addlt	r4, r4, r3
 8009462:	f000 ff41 	bl	800a2e8 <__malloc_lock>
 8009466:	4a1e      	ldr	r2, [pc, #120]	; (80094e0 <_free_r+0x94>)
 8009468:	9801      	ldr	r0, [sp, #4]
 800946a:	6813      	ldr	r3, [r2, #0]
 800946c:	b933      	cbnz	r3, 800947c <_free_r+0x30>
 800946e:	6063      	str	r3, [r4, #4]
 8009470:	6014      	str	r4, [r2, #0]
 8009472:	b003      	add	sp, #12
 8009474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009478:	f000 bf3c 	b.w	800a2f4 <__malloc_unlock>
 800947c:	42a3      	cmp	r3, r4
 800947e:	d908      	bls.n	8009492 <_free_r+0x46>
 8009480:	6825      	ldr	r5, [r4, #0]
 8009482:	1961      	adds	r1, r4, r5
 8009484:	428b      	cmp	r3, r1
 8009486:	bf01      	itttt	eq
 8009488:	6819      	ldreq	r1, [r3, #0]
 800948a:	685b      	ldreq	r3, [r3, #4]
 800948c:	1949      	addeq	r1, r1, r5
 800948e:	6021      	streq	r1, [r4, #0]
 8009490:	e7ed      	b.n	800946e <_free_r+0x22>
 8009492:	461a      	mov	r2, r3
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	b10b      	cbz	r3, 800949c <_free_r+0x50>
 8009498:	42a3      	cmp	r3, r4
 800949a:	d9fa      	bls.n	8009492 <_free_r+0x46>
 800949c:	6811      	ldr	r1, [r2, #0]
 800949e:	1855      	adds	r5, r2, r1
 80094a0:	42a5      	cmp	r5, r4
 80094a2:	d10b      	bne.n	80094bc <_free_r+0x70>
 80094a4:	6824      	ldr	r4, [r4, #0]
 80094a6:	4421      	add	r1, r4
 80094a8:	1854      	adds	r4, r2, r1
 80094aa:	42a3      	cmp	r3, r4
 80094ac:	6011      	str	r1, [r2, #0]
 80094ae:	d1e0      	bne.n	8009472 <_free_r+0x26>
 80094b0:	681c      	ldr	r4, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	6053      	str	r3, [r2, #4]
 80094b6:	4421      	add	r1, r4
 80094b8:	6011      	str	r1, [r2, #0]
 80094ba:	e7da      	b.n	8009472 <_free_r+0x26>
 80094bc:	d902      	bls.n	80094c4 <_free_r+0x78>
 80094be:	230c      	movs	r3, #12
 80094c0:	6003      	str	r3, [r0, #0]
 80094c2:	e7d6      	b.n	8009472 <_free_r+0x26>
 80094c4:	6825      	ldr	r5, [r4, #0]
 80094c6:	1961      	adds	r1, r4, r5
 80094c8:	428b      	cmp	r3, r1
 80094ca:	bf04      	itt	eq
 80094cc:	6819      	ldreq	r1, [r3, #0]
 80094ce:	685b      	ldreq	r3, [r3, #4]
 80094d0:	6063      	str	r3, [r4, #4]
 80094d2:	bf04      	itt	eq
 80094d4:	1949      	addeq	r1, r1, r5
 80094d6:	6021      	streq	r1, [r4, #0]
 80094d8:	6054      	str	r4, [r2, #4]
 80094da:	e7ca      	b.n	8009472 <_free_r+0x26>
 80094dc:	b003      	add	sp, #12
 80094de:	bd30      	pop	{r4, r5, pc}
 80094e0:	20000bb0 	.word	0x20000bb0

080094e4 <sbrk_aligned>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	4e0e      	ldr	r6, [pc, #56]	; (8009520 <sbrk_aligned+0x3c>)
 80094e8:	460c      	mov	r4, r1
 80094ea:	6831      	ldr	r1, [r6, #0]
 80094ec:	4605      	mov	r5, r0
 80094ee:	b911      	cbnz	r1, 80094f6 <sbrk_aligned+0x12>
 80094f0:	f000 fc40 	bl	8009d74 <_sbrk_r>
 80094f4:	6030      	str	r0, [r6, #0]
 80094f6:	4621      	mov	r1, r4
 80094f8:	4628      	mov	r0, r5
 80094fa:	f000 fc3b 	bl	8009d74 <_sbrk_r>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d00a      	beq.n	8009518 <sbrk_aligned+0x34>
 8009502:	1cc4      	adds	r4, r0, #3
 8009504:	f024 0403 	bic.w	r4, r4, #3
 8009508:	42a0      	cmp	r0, r4
 800950a:	d007      	beq.n	800951c <sbrk_aligned+0x38>
 800950c:	1a21      	subs	r1, r4, r0
 800950e:	4628      	mov	r0, r5
 8009510:	f000 fc30 	bl	8009d74 <_sbrk_r>
 8009514:	3001      	adds	r0, #1
 8009516:	d101      	bne.n	800951c <sbrk_aligned+0x38>
 8009518:	f04f 34ff 	mov.w	r4, #4294967295
 800951c:	4620      	mov	r0, r4
 800951e:	bd70      	pop	{r4, r5, r6, pc}
 8009520:	20000bb4 	.word	0x20000bb4

08009524 <_malloc_r>:
 8009524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009528:	1ccd      	adds	r5, r1, #3
 800952a:	f025 0503 	bic.w	r5, r5, #3
 800952e:	3508      	adds	r5, #8
 8009530:	2d0c      	cmp	r5, #12
 8009532:	bf38      	it	cc
 8009534:	250c      	movcc	r5, #12
 8009536:	2d00      	cmp	r5, #0
 8009538:	4607      	mov	r7, r0
 800953a:	db01      	blt.n	8009540 <_malloc_r+0x1c>
 800953c:	42a9      	cmp	r1, r5
 800953e:	d905      	bls.n	800954c <_malloc_r+0x28>
 8009540:	230c      	movs	r3, #12
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	2600      	movs	r6, #0
 8009546:	4630      	mov	r0, r6
 8009548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800954c:	4e2e      	ldr	r6, [pc, #184]	; (8009608 <_malloc_r+0xe4>)
 800954e:	f000 fecb 	bl	800a2e8 <__malloc_lock>
 8009552:	6833      	ldr	r3, [r6, #0]
 8009554:	461c      	mov	r4, r3
 8009556:	bb34      	cbnz	r4, 80095a6 <_malloc_r+0x82>
 8009558:	4629      	mov	r1, r5
 800955a:	4638      	mov	r0, r7
 800955c:	f7ff ffc2 	bl	80094e4 <sbrk_aligned>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	4604      	mov	r4, r0
 8009564:	d14d      	bne.n	8009602 <_malloc_r+0xde>
 8009566:	6834      	ldr	r4, [r6, #0]
 8009568:	4626      	mov	r6, r4
 800956a:	2e00      	cmp	r6, #0
 800956c:	d140      	bne.n	80095f0 <_malloc_r+0xcc>
 800956e:	6823      	ldr	r3, [r4, #0]
 8009570:	4631      	mov	r1, r6
 8009572:	4638      	mov	r0, r7
 8009574:	eb04 0803 	add.w	r8, r4, r3
 8009578:	f000 fbfc 	bl	8009d74 <_sbrk_r>
 800957c:	4580      	cmp	r8, r0
 800957e:	d13a      	bne.n	80095f6 <_malloc_r+0xd2>
 8009580:	6821      	ldr	r1, [r4, #0]
 8009582:	3503      	adds	r5, #3
 8009584:	1a6d      	subs	r5, r5, r1
 8009586:	f025 0503 	bic.w	r5, r5, #3
 800958a:	3508      	adds	r5, #8
 800958c:	2d0c      	cmp	r5, #12
 800958e:	bf38      	it	cc
 8009590:	250c      	movcc	r5, #12
 8009592:	4629      	mov	r1, r5
 8009594:	4638      	mov	r0, r7
 8009596:	f7ff ffa5 	bl	80094e4 <sbrk_aligned>
 800959a:	3001      	adds	r0, #1
 800959c:	d02b      	beq.n	80095f6 <_malloc_r+0xd2>
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	442b      	add	r3, r5
 80095a2:	6023      	str	r3, [r4, #0]
 80095a4:	e00e      	b.n	80095c4 <_malloc_r+0xa0>
 80095a6:	6822      	ldr	r2, [r4, #0]
 80095a8:	1b52      	subs	r2, r2, r5
 80095aa:	d41e      	bmi.n	80095ea <_malloc_r+0xc6>
 80095ac:	2a0b      	cmp	r2, #11
 80095ae:	d916      	bls.n	80095de <_malloc_r+0xba>
 80095b0:	1961      	adds	r1, r4, r5
 80095b2:	42a3      	cmp	r3, r4
 80095b4:	6025      	str	r5, [r4, #0]
 80095b6:	bf18      	it	ne
 80095b8:	6059      	strne	r1, [r3, #4]
 80095ba:	6863      	ldr	r3, [r4, #4]
 80095bc:	bf08      	it	eq
 80095be:	6031      	streq	r1, [r6, #0]
 80095c0:	5162      	str	r2, [r4, r5]
 80095c2:	604b      	str	r3, [r1, #4]
 80095c4:	4638      	mov	r0, r7
 80095c6:	f104 060b 	add.w	r6, r4, #11
 80095ca:	f000 fe93 	bl	800a2f4 <__malloc_unlock>
 80095ce:	f026 0607 	bic.w	r6, r6, #7
 80095d2:	1d23      	adds	r3, r4, #4
 80095d4:	1af2      	subs	r2, r6, r3
 80095d6:	d0b6      	beq.n	8009546 <_malloc_r+0x22>
 80095d8:	1b9b      	subs	r3, r3, r6
 80095da:	50a3      	str	r3, [r4, r2]
 80095dc:	e7b3      	b.n	8009546 <_malloc_r+0x22>
 80095de:	6862      	ldr	r2, [r4, #4]
 80095e0:	42a3      	cmp	r3, r4
 80095e2:	bf0c      	ite	eq
 80095e4:	6032      	streq	r2, [r6, #0]
 80095e6:	605a      	strne	r2, [r3, #4]
 80095e8:	e7ec      	b.n	80095c4 <_malloc_r+0xa0>
 80095ea:	4623      	mov	r3, r4
 80095ec:	6864      	ldr	r4, [r4, #4]
 80095ee:	e7b2      	b.n	8009556 <_malloc_r+0x32>
 80095f0:	4634      	mov	r4, r6
 80095f2:	6876      	ldr	r6, [r6, #4]
 80095f4:	e7b9      	b.n	800956a <_malloc_r+0x46>
 80095f6:	230c      	movs	r3, #12
 80095f8:	603b      	str	r3, [r7, #0]
 80095fa:	4638      	mov	r0, r7
 80095fc:	f000 fe7a 	bl	800a2f4 <__malloc_unlock>
 8009600:	e7a1      	b.n	8009546 <_malloc_r+0x22>
 8009602:	6025      	str	r5, [r4, #0]
 8009604:	e7de      	b.n	80095c4 <_malloc_r+0xa0>
 8009606:	bf00      	nop
 8009608:	20000bb0 	.word	0x20000bb0

0800960c <__svfiscanf_r>:
 800960c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009610:	461d      	mov	r5, r3
 8009612:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009614:	07df      	lsls	r7, r3, #31
 8009616:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800961a:	4606      	mov	r6, r0
 800961c:	460c      	mov	r4, r1
 800961e:	4692      	mov	sl, r2
 8009620:	d405      	bmi.n	800962e <__svfiscanf_r+0x22>
 8009622:	898b      	ldrh	r3, [r1, #12]
 8009624:	0598      	lsls	r0, r3, #22
 8009626:	d402      	bmi.n	800962e <__svfiscanf_r+0x22>
 8009628:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800962a:	f7ff fea8 	bl	800937e <__retarget_lock_acquire_recursive>
 800962e:	2300      	movs	r3, #0
 8009630:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8009634:	4ba6      	ldr	r3, [pc, #664]	; (80098d0 <__svfiscanf_r+0x2c4>)
 8009636:	93a0      	str	r3, [sp, #640]	; 0x280
 8009638:	f10d 0804 	add.w	r8, sp, #4
 800963c:	4ba5      	ldr	r3, [pc, #660]	; (80098d4 <__svfiscanf_r+0x2c8>)
 800963e:	4fa6      	ldr	r7, [pc, #664]	; (80098d8 <__svfiscanf_r+0x2cc>)
 8009640:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80098dc <__svfiscanf_r+0x2d0>
 8009644:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009648:	93a1      	str	r3, [sp, #644]	; 0x284
 800964a:	9500      	str	r5, [sp, #0]
 800964c:	f89a 3000 	ldrb.w	r3, [sl]
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 8173 	beq.w	800993c <__svfiscanf_r+0x330>
 8009656:	5dd9      	ldrb	r1, [r3, r7]
 8009658:	f011 0108 	ands.w	r1, r1, #8
 800965c:	f10a 0501 	add.w	r5, sl, #1
 8009660:	d019      	beq.n	8009696 <__svfiscanf_r+0x8a>
 8009662:	6863      	ldr	r3, [r4, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	dd0f      	ble.n	8009688 <__svfiscanf_r+0x7c>
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	781a      	ldrb	r2, [r3, #0]
 800966c:	5cba      	ldrb	r2, [r7, r2]
 800966e:	0711      	lsls	r1, r2, #28
 8009670:	d401      	bmi.n	8009676 <__svfiscanf_r+0x6a>
 8009672:	46aa      	mov	sl, r5
 8009674:	e7ea      	b.n	800964c <__svfiscanf_r+0x40>
 8009676:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009678:	3201      	adds	r2, #1
 800967a:	9245      	str	r2, [sp, #276]	; 0x114
 800967c:	6862      	ldr	r2, [r4, #4]
 800967e:	3301      	adds	r3, #1
 8009680:	3a01      	subs	r2, #1
 8009682:	6062      	str	r2, [r4, #4]
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	e7ec      	b.n	8009662 <__svfiscanf_r+0x56>
 8009688:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800968a:	4621      	mov	r1, r4
 800968c:	4630      	mov	r0, r6
 800968e:	4798      	blx	r3
 8009690:	2800      	cmp	r0, #0
 8009692:	d0e9      	beq.n	8009668 <__svfiscanf_r+0x5c>
 8009694:	e7ed      	b.n	8009672 <__svfiscanf_r+0x66>
 8009696:	2b25      	cmp	r3, #37	; 0x25
 8009698:	d012      	beq.n	80096c0 <__svfiscanf_r+0xb4>
 800969a:	469a      	mov	sl, r3
 800969c:	6863      	ldr	r3, [r4, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f340 8095 	ble.w	80097ce <__svfiscanf_r+0x1c2>
 80096a4:	6822      	ldr	r2, [r4, #0]
 80096a6:	7813      	ldrb	r3, [r2, #0]
 80096a8:	4553      	cmp	r3, sl
 80096aa:	f040 8147 	bne.w	800993c <__svfiscanf_r+0x330>
 80096ae:	6863      	ldr	r3, [r4, #4]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	6063      	str	r3, [r4, #4]
 80096b4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80096b6:	3201      	adds	r2, #1
 80096b8:	3301      	adds	r3, #1
 80096ba:	6022      	str	r2, [r4, #0]
 80096bc:	9345      	str	r3, [sp, #276]	; 0x114
 80096be:	e7d8      	b.n	8009672 <__svfiscanf_r+0x66>
 80096c0:	9141      	str	r1, [sp, #260]	; 0x104
 80096c2:	9143      	str	r1, [sp, #268]	; 0x10c
 80096c4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80096c8:	2b2a      	cmp	r3, #42	; 0x2a
 80096ca:	bf02      	ittt	eq
 80096cc:	2310      	moveq	r3, #16
 80096ce:	9341      	streq	r3, [sp, #260]	; 0x104
 80096d0:	f10a 0502 	addeq.w	r5, sl, #2
 80096d4:	220a      	movs	r2, #10
 80096d6:	46aa      	mov	sl, r5
 80096d8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80096dc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80096e0:	2b09      	cmp	r3, #9
 80096e2:	d91e      	bls.n	8009722 <__svfiscanf_r+0x116>
 80096e4:	487d      	ldr	r0, [pc, #500]	; (80098dc <__svfiscanf_r+0x2d0>)
 80096e6:	2203      	movs	r2, #3
 80096e8:	f7f6 fd92 	bl	8000210 <memchr>
 80096ec:	b140      	cbz	r0, 8009700 <__svfiscanf_r+0xf4>
 80096ee:	2301      	movs	r3, #1
 80096f0:	eba0 0009 	sub.w	r0, r0, r9
 80096f4:	fa03 f000 	lsl.w	r0, r3, r0
 80096f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80096fa:	4318      	orrs	r0, r3
 80096fc:	9041      	str	r0, [sp, #260]	; 0x104
 80096fe:	4655      	mov	r5, sl
 8009700:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009704:	2b78      	cmp	r3, #120	; 0x78
 8009706:	d807      	bhi.n	8009718 <__svfiscanf_r+0x10c>
 8009708:	2b57      	cmp	r3, #87	; 0x57
 800970a:	d811      	bhi.n	8009730 <__svfiscanf_r+0x124>
 800970c:	2b25      	cmp	r3, #37	; 0x25
 800970e:	d0c4      	beq.n	800969a <__svfiscanf_r+0x8e>
 8009710:	d858      	bhi.n	80097c4 <__svfiscanf_r+0x1b8>
 8009712:	2b00      	cmp	r3, #0
 8009714:	f000 80c8 	beq.w	80098a8 <__svfiscanf_r+0x29c>
 8009718:	2303      	movs	r3, #3
 800971a:	9347      	str	r3, [sp, #284]	; 0x11c
 800971c:	230a      	movs	r3, #10
 800971e:	9342      	str	r3, [sp, #264]	; 0x108
 8009720:	e07c      	b.n	800981c <__svfiscanf_r+0x210>
 8009722:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009724:	fb02 1103 	mla	r1, r2, r3, r1
 8009728:	3930      	subs	r1, #48	; 0x30
 800972a:	9143      	str	r1, [sp, #268]	; 0x10c
 800972c:	4655      	mov	r5, sl
 800972e:	e7d2      	b.n	80096d6 <__svfiscanf_r+0xca>
 8009730:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009734:	2a20      	cmp	r2, #32
 8009736:	d8ef      	bhi.n	8009718 <__svfiscanf_r+0x10c>
 8009738:	a101      	add	r1, pc, #4	; (adr r1, 8009740 <__svfiscanf_r+0x134>)
 800973a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800973e:	bf00      	nop
 8009740:	08009807 	.word	0x08009807
 8009744:	08009719 	.word	0x08009719
 8009748:	08009719 	.word	0x08009719
 800974c:	08009865 	.word	0x08009865
 8009750:	08009719 	.word	0x08009719
 8009754:	08009719 	.word	0x08009719
 8009758:	08009719 	.word	0x08009719
 800975c:	08009719 	.word	0x08009719
 8009760:	08009719 	.word	0x08009719
 8009764:	08009719 	.word	0x08009719
 8009768:	08009719 	.word	0x08009719
 800976c:	0800987b 	.word	0x0800987b
 8009770:	08009851 	.word	0x08009851
 8009774:	080097cb 	.word	0x080097cb
 8009778:	080097cb 	.word	0x080097cb
 800977c:	080097cb 	.word	0x080097cb
 8009780:	08009719 	.word	0x08009719
 8009784:	08009855 	.word	0x08009855
 8009788:	08009719 	.word	0x08009719
 800978c:	08009719 	.word	0x08009719
 8009790:	08009719 	.word	0x08009719
 8009794:	08009719 	.word	0x08009719
 8009798:	0800988b 	.word	0x0800988b
 800979c:	0800985d 	.word	0x0800985d
 80097a0:	080097ff 	.word	0x080097ff
 80097a4:	08009719 	.word	0x08009719
 80097a8:	08009719 	.word	0x08009719
 80097ac:	08009887 	.word	0x08009887
 80097b0:	08009719 	.word	0x08009719
 80097b4:	08009851 	.word	0x08009851
 80097b8:	08009719 	.word	0x08009719
 80097bc:	08009719 	.word	0x08009719
 80097c0:	08009807 	.word	0x08009807
 80097c4:	3b45      	subs	r3, #69	; 0x45
 80097c6:	2b02      	cmp	r3, #2
 80097c8:	d8a6      	bhi.n	8009718 <__svfiscanf_r+0x10c>
 80097ca:	2305      	movs	r3, #5
 80097cc:	e025      	b.n	800981a <__svfiscanf_r+0x20e>
 80097ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80097d0:	4621      	mov	r1, r4
 80097d2:	4630      	mov	r0, r6
 80097d4:	4798      	blx	r3
 80097d6:	2800      	cmp	r0, #0
 80097d8:	f43f af64 	beq.w	80096a4 <__svfiscanf_r+0x98>
 80097dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097de:	07da      	lsls	r2, r3, #31
 80097e0:	f140 80a4 	bpl.w	800992c <__svfiscanf_r+0x320>
 80097e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d067      	beq.n	80098ba <__svfiscanf_r+0x2ae>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80097f0:	bf18      	it	ne
 80097f2:	f04f 30ff 	movne.w	r0, #4294967295
 80097f6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80097fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009800:	f042 0220 	orr.w	r2, r2, #32
 8009804:	9241      	str	r2, [sp, #260]	; 0x104
 8009806:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800980c:	9241      	str	r2, [sp, #260]	; 0x104
 800980e:	2210      	movs	r2, #16
 8009810:	2b6f      	cmp	r3, #111	; 0x6f
 8009812:	9242      	str	r2, [sp, #264]	; 0x108
 8009814:	bf34      	ite	cc
 8009816:	2303      	movcc	r3, #3
 8009818:	2304      	movcs	r3, #4
 800981a:	9347      	str	r3, [sp, #284]	; 0x11c
 800981c:	6863      	ldr	r3, [r4, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	dd4e      	ble.n	80098c0 <__svfiscanf_r+0x2b4>
 8009822:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009824:	065b      	lsls	r3, r3, #25
 8009826:	d404      	bmi.n	8009832 <__svfiscanf_r+0x226>
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	781a      	ldrb	r2, [r3, #0]
 800982c:	5cba      	ldrb	r2, [r7, r2]
 800982e:	0710      	lsls	r0, r2, #28
 8009830:	d456      	bmi.n	80098e0 <__svfiscanf_r+0x2d4>
 8009832:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009834:	2b02      	cmp	r3, #2
 8009836:	dc65      	bgt.n	8009904 <__svfiscanf_r+0x2f8>
 8009838:	466b      	mov	r3, sp
 800983a:	4622      	mov	r2, r4
 800983c:	a941      	add	r1, sp, #260	; 0x104
 800983e:	4630      	mov	r0, r6
 8009840:	f000 f8b2 	bl	80099a8 <_scanf_chars>
 8009844:	2801      	cmp	r0, #1
 8009846:	d079      	beq.n	800993c <__svfiscanf_r+0x330>
 8009848:	2802      	cmp	r0, #2
 800984a:	f47f af12 	bne.w	8009672 <__svfiscanf_r+0x66>
 800984e:	e7c5      	b.n	80097dc <__svfiscanf_r+0x1d0>
 8009850:	220a      	movs	r2, #10
 8009852:	e7dd      	b.n	8009810 <__svfiscanf_r+0x204>
 8009854:	2300      	movs	r3, #0
 8009856:	9342      	str	r3, [sp, #264]	; 0x108
 8009858:	2303      	movs	r3, #3
 800985a:	e7de      	b.n	800981a <__svfiscanf_r+0x20e>
 800985c:	2308      	movs	r3, #8
 800985e:	9342      	str	r3, [sp, #264]	; 0x108
 8009860:	2304      	movs	r3, #4
 8009862:	e7da      	b.n	800981a <__svfiscanf_r+0x20e>
 8009864:	4629      	mov	r1, r5
 8009866:	4640      	mov	r0, r8
 8009868:	f000 fa94 	bl	8009d94 <__sccl>
 800986c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800986e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009872:	9341      	str	r3, [sp, #260]	; 0x104
 8009874:	4605      	mov	r5, r0
 8009876:	2301      	movs	r3, #1
 8009878:	e7cf      	b.n	800981a <__svfiscanf_r+0x20e>
 800987a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800987c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009880:	9341      	str	r3, [sp, #260]	; 0x104
 8009882:	2300      	movs	r3, #0
 8009884:	e7c9      	b.n	800981a <__svfiscanf_r+0x20e>
 8009886:	2302      	movs	r3, #2
 8009888:	e7c7      	b.n	800981a <__svfiscanf_r+0x20e>
 800988a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800988c:	06c3      	lsls	r3, r0, #27
 800988e:	f53f aef0 	bmi.w	8009672 <__svfiscanf_r+0x66>
 8009892:	9b00      	ldr	r3, [sp, #0]
 8009894:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009896:	1d19      	adds	r1, r3, #4
 8009898:	9100      	str	r1, [sp, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f010 0f01 	tst.w	r0, #1
 80098a0:	bf14      	ite	ne
 80098a2:	801a      	strhne	r2, [r3, #0]
 80098a4:	601a      	streq	r2, [r3, #0]
 80098a6:	e6e4      	b.n	8009672 <__svfiscanf_r+0x66>
 80098a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098aa:	07d8      	lsls	r0, r3, #31
 80098ac:	d405      	bmi.n	80098ba <__svfiscanf_r+0x2ae>
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	0599      	lsls	r1, r3, #22
 80098b2:	d402      	bmi.n	80098ba <__svfiscanf_r+0x2ae>
 80098b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098b6:	f7ff fd63 	bl	8009380 <__retarget_lock_release_recursive>
 80098ba:	f04f 30ff 	mov.w	r0, #4294967295
 80098be:	e79a      	b.n	80097f6 <__svfiscanf_r+0x1ea>
 80098c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80098c2:	4621      	mov	r1, r4
 80098c4:	4630      	mov	r0, r6
 80098c6:	4798      	blx	r3
 80098c8:	2800      	cmp	r0, #0
 80098ca:	d0aa      	beq.n	8009822 <__svfiscanf_r+0x216>
 80098cc:	e786      	b.n	80097dc <__svfiscanf_r+0x1d0>
 80098ce:	bf00      	nop
 80098d0:	0800a0f1 	.word	0x0800a0f1
 80098d4:	08009c61 	.word	0x08009c61
 80098d8:	0800a481 	.word	0x0800a481
 80098dc:	0800a5e8 	.word	0x0800a5e8
 80098e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80098e2:	3201      	adds	r2, #1
 80098e4:	9245      	str	r2, [sp, #276]	; 0x114
 80098e6:	6862      	ldr	r2, [r4, #4]
 80098e8:	3a01      	subs	r2, #1
 80098ea:	2a00      	cmp	r2, #0
 80098ec:	6062      	str	r2, [r4, #4]
 80098ee:	dd02      	ble.n	80098f6 <__svfiscanf_r+0x2ea>
 80098f0:	3301      	adds	r3, #1
 80098f2:	6023      	str	r3, [r4, #0]
 80098f4:	e798      	b.n	8009828 <__svfiscanf_r+0x21c>
 80098f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80098f8:	4621      	mov	r1, r4
 80098fa:	4630      	mov	r0, r6
 80098fc:	4798      	blx	r3
 80098fe:	2800      	cmp	r0, #0
 8009900:	d092      	beq.n	8009828 <__svfiscanf_r+0x21c>
 8009902:	e76b      	b.n	80097dc <__svfiscanf_r+0x1d0>
 8009904:	2b04      	cmp	r3, #4
 8009906:	dc06      	bgt.n	8009916 <__svfiscanf_r+0x30a>
 8009908:	466b      	mov	r3, sp
 800990a:	4622      	mov	r2, r4
 800990c:	a941      	add	r1, sp, #260	; 0x104
 800990e:	4630      	mov	r0, r6
 8009910:	f000 f8a4 	bl	8009a5c <_scanf_i>
 8009914:	e796      	b.n	8009844 <__svfiscanf_r+0x238>
 8009916:	4b0f      	ldr	r3, [pc, #60]	; (8009954 <__svfiscanf_r+0x348>)
 8009918:	2b00      	cmp	r3, #0
 800991a:	f43f aeaa 	beq.w	8009672 <__svfiscanf_r+0x66>
 800991e:	466b      	mov	r3, sp
 8009920:	4622      	mov	r2, r4
 8009922:	a941      	add	r1, sp, #260	; 0x104
 8009924:	4630      	mov	r0, r6
 8009926:	f3af 8000 	nop.w
 800992a:	e78b      	b.n	8009844 <__svfiscanf_r+0x238>
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	0599      	lsls	r1, r3, #22
 8009930:	f53f af58 	bmi.w	80097e4 <__svfiscanf_r+0x1d8>
 8009934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009936:	f7ff fd23 	bl	8009380 <__retarget_lock_release_recursive>
 800993a:	e753      	b.n	80097e4 <__svfiscanf_r+0x1d8>
 800993c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800993e:	07da      	lsls	r2, r3, #31
 8009940:	d405      	bmi.n	800994e <__svfiscanf_r+0x342>
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	059b      	lsls	r3, r3, #22
 8009946:	d402      	bmi.n	800994e <__svfiscanf_r+0x342>
 8009948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800994a:	f7ff fd19 	bl	8009380 <__retarget_lock_release_recursive>
 800994e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009950:	e751      	b.n	80097f6 <__svfiscanf_r+0x1ea>
 8009952:	bf00      	nop
 8009954:	00000000 	.word	0x00000000

08009958 <_vfiscanf_r>:
 8009958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800995a:	460c      	mov	r4, r1
 800995c:	4605      	mov	r5, r0
 800995e:	b138      	cbz	r0, 8009970 <_vfiscanf_r+0x18>
 8009960:	6981      	ldr	r1, [r0, #24]
 8009962:	b929      	cbnz	r1, 8009970 <_vfiscanf_r+0x18>
 8009964:	e9cd 2300 	strd	r2, r3, [sp]
 8009968:	f7ff fc4e 	bl	8009208 <__sinit>
 800996c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009970:	490a      	ldr	r1, [pc, #40]	; (800999c <_vfiscanf_r+0x44>)
 8009972:	428c      	cmp	r4, r1
 8009974:	d107      	bne.n	8009986 <_vfiscanf_r+0x2e>
 8009976:	686c      	ldr	r4, [r5, #4]
 8009978:	4621      	mov	r1, r4
 800997a:	4628      	mov	r0, r5
 800997c:	b003      	add	sp, #12
 800997e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009982:	f7ff be43 	b.w	800960c <__svfiscanf_r>
 8009986:	4906      	ldr	r1, [pc, #24]	; (80099a0 <_vfiscanf_r+0x48>)
 8009988:	428c      	cmp	r4, r1
 800998a:	d101      	bne.n	8009990 <_vfiscanf_r+0x38>
 800998c:	68ac      	ldr	r4, [r5, #8]
 800998e:	e7f3      	b.n	8009978 <_vfiscanf_r+0x20>
 8009990:	4904      	ldr	r1, [pc, #16]	; (80099a4 <_vfiscanf_r+0x4c>)
 8009992:	428c      	cmp	r4, r1
 8009994:	bf08      	it	eq
 8009996:	68ec      	ldreq	r4, [r5, #12]
 8009998:	e7ee      	b.n	8009978 <_vfiscanf_r+0x20>
 800999a:	bf00      	nop
 800999c:	0800a5a8 	.word	0x0800a5a8
 80099a0:	0800a5c8 	.word	0x0800a5c8
 80099a4:	0800a588 	.word	0x0800a588

080099a8 <_scanf_chars>:
 80099a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099ac:	4615      	mov	r5, r2
 80099ae:	688a      	ldr	r2, [r1, #8]
 80099b0:	4680      	mov	r8, r0
 80099b2:	460c      	mov	r4, r1
 80099b4:	b932      	cbnz	r2, 80099c4 <_scanf_chars+0x1c>
 80099b6:	698a      	ldr	r2, [r1, #24]
 80099b8:	2a00      	cmp	r2, #0
 80099ba:	bf0c      	ite	eq
 80099bc:	2201      	moveq	r2, #1
 80099be:	f04f 32ff 	movne.w	r2, #4294967295
 80099c2:	608a      	str	r2, [r1, #8]
 80099c4:	6822      	ldr	r2, [r4, #0]
 80099c6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009a58 <_scanf_chars+0xb0>
 80099ca:	06d1      	lsls	r1, r2, #27
 80099cc:	bf5f      	itttt	pl
 80099ce:	681a      	ldrpl	r2, [r3, #0]
 80099d0:	1d11      	addpl	r1, r2, #4
 80099d2:	6019      	strpl	r1, [r3, #0]
 80099d4:	6816      	ldrpl	r6, [r2, #0]
 80099d6:	2700      	movs	r7, #0
 80099d8:	69a0      	ldr	r0, [r4, #24]
 80099da:	b188      	cbz	r0, 8009a00 <_scanf_chars+0x58>
 80099dc:	2801      	cmp	r0, #1
 80099de:	d107      	bne.n	80099f0 <_scanf_chars+0x48>
 80099e0:	682a      	ldr	r2, [r5, #0]
 80099e2:	7811      	ldrb	r1, [r2, #0]
 80099e4:	6962      	ldr	r2, [r4, #20]
 80099e6:	5c52      	ldrb	r2, [r2, r1]
 80099e8:	b952      	cbnz	r2, 8009a00 <_scanf_chars+0x58>
 80099ea:	2f00      	cmp	r7, #0
 80099ec:	d031      	beq.n	8009a52 <_scanf_chars+0xaa>
 80099ee:	e022      	b.n	8009a36 <_scanf_chars+0x8e>
 80099f0:	2802      	cmp	r0, #2
 80099f2:	d120      	bne.n	8009a36 <_scanf_chars+0x8e>
 80099f4:	682b      	ldr	r3, [r5, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80099fc:	071b      	lsls	r3, r3, #28
 80099fe:	d41a      	bmi.n	8009a36 <_scanf_chars+0x8e>
 8009a00:	6823      	ldr	r3, [r4, #0]
 8009a02:	06da      	lsls	r2, r3, #27
 8009a04:	bf5e      	ittt	pl
 8009a06:	682b      	ldrpl	r3, [r5, #0]
 8009a08:	781b      	ldrbpl	r3, [r3, #0]
 8009a0a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009a0e:	682a      	ldr	r2, [r5, #0]
 8009a10:	686b      	ldr	r3, [r5, #4]
 8009a12:	3201      	adds	r2, #1
 8009a14:	602a      	str	r2, [r5, #0]
 8009a16:	68a2      	ldr	r2, [r4, #8]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	3a01      	subs	r2, #1
 8009a1c:	606b      	str	r3, [r5, #4]
 8009a1e:	3701      	adds	r7, #1
 8009a20:	60a2      	str	r2, [r4, #8]
 8009a22:	b142      	cbz	r2, 8009a36 <_scanf_chars+0x8e>
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	dcd7      	bgt.n	80099d8 <_scanf_chars+0x30>
 8009a28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	4640      	mov	r0, r8
 8009a30:	4798      	blx	r3
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d0d0      	beq.n	80099d8 <_scanf_chars+0x30>
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	f013 0310 	ands.w	r3, r3, #16
 8009a3c:	d105      	bne.n	8009a4a <_scanf_chars+0xa2>
 8009a3e:	68e2      	ldr	r2, [r4, #12]
 8009a40:	3201      	adds	r2, #1
 8009a42:	60e2      	str	r2, [r4, #12]
 8009a44:	69a2      	ldr	r2, [r4, #24]
 8009a46:	b102      	cbz	r2, 8009a4a <_scanf_chars+0xa2>
 8009a48:	7033      	strb	r3, [r6, #0]
 8009a4a:	6923      	ldr	r3, [r4, #16]
 8009a4c:	443b      	add	r3, r7
 8009a4e:	6123      	str	r3, [r4, #16]
 8009a50:	2000      	movs	r0, #0
 8009a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a56:	bf00      	nop
 8009a58:	0800a481 	.word	0x0800a481

08009a5c <_scanf_i>:
 8009a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	4698      	mov	r8, r3
 8009a62:	4b76      	ldr	r3, [pc, #472]	; (8009c3c <_scanf_i+0x1e0>)
 8009a64:	460c      	mov	r4, r1
 8009a66:	4682      	mov	sl, r0
 8009a68:	4616      	mov	r6, r2
 8009a6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009a6e:	b087      	sub	sp, #28
 8009a70:	ab03      	add	r3, sp, #12
 8009a72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009a76:	4b72      	ldr	r3, [pc, #456]	; (8009c40 <_scanf_i+0x1e4>)
 8009a78:	69a1      	ldr	r1, [r4, #24]
 8009a7a:	4a72      	ldr	r2, [pc, #456]	; (8009c44 <_scanf_i+0x1e8>)
 8009a7c:	2903      	cmp	r1, #3
 8009a7e:	bf18      	it	ne
 8009a80:	461a      	movne	r2, r3
 8009a82:	68a3      	ldr	r3, [r4, #8]
 8009a84:	9201      	str	r2, [sp, #4]
 8009a86:	1e5a      	subs	r2, r3, #1
 8009a88:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009a8c:	bf88      	it	hi
 8009a8e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009a92:	4627      	mov	r7, r4
 8009a94:	bf82      	ittt	hi
 8009a96:	eb03 0905 	addhi.w	r9, r3, r5
 8009a9a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009a9e:	60a3      	strhi	r3, [r4, #8]
 8009aa0:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009aa4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009aa8:	bf98      	it	ls
 8009aaa:	f04f 0900 	movls.w	r9, #0
 8009aae:	6023      	str	r3, [r4, #0]
 8009ab0:	463d      	mov	r5, r7
 8009ab2:	f04f 0b00 	mov.w	fp, #0
 8009ab6:	6831      	ldr	r1, [r6, #0]
 8009ab8:	ab03      	add	r3, sp, #12
 8009aba:	7809      	ldrb	r1, [r1, #0]
 8009abc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	f7f6 fba5 	bl	8000210 <memchr>
 8009ac6:	b328      	cbz	r0, 8009b14 <_scanf_i+0xb8>
 8009ac8:	f1bb 0f01 	cmp.w	fp, #1
 8009acc:	d159      	bne.n	8009b82 <_scanf_i+0x126>
 8009ace:	6862      	ldr	r2, [r4, #4]
 8009ad0:	b92a      	cbnz	r2, 8009ade <_scanf_i+0x82>
 8009ad2:	6822      	ldr	r2, [r4, #0]
 8009ad4:	2308      	movs	r3, #8
 8009ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ada:	6063      	str	r3, [r4, #4]
 8009adc:	6022      	str	r2, [r4, #0]
 8009ade:	6822      	ldr	r2, [r4, #0]
 8009ae0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009ae4:	6022      	str	r2, [r4, #0]
 8009ae6:	68a2      	ldr	r2, [r4, #8]
 8009ae8:	1e51      	subs	r1, r2, #1
 8009aea:	60a1      	str	r1, [r4, #8]
 8009aec:	b192      	cbz	r2, 8009b14 <_scanf_i+0xb8>
 8009aee:	6832      	ldr	r2, [r6, #0]
 8009af0:	1c51      	adds	r1, r2, #1
 8009af2:	6031      	str	r1, [r6, #0]
 8009af4:	7812      	ldrb	r2, [r2, #0]
 8009af6:	f805 2b01 	strb.w	r2, [r5], #1
 8009afa:	6872      	ldr	r2, [r6, #4]
 8009afc:	3a01      	subs	r2, #1
 8009afe:	2a00      	cmp	r2, #0
 8009b00:	6072      	str	r2, [r6, #4]
 8009b02:	dc07      	bgt.n	8009b14 <_scanf_i+0xb8>
 8009b04:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009b08:	4631      	mov	r1, r6
 8009b0a:	4650      	mov	r0, sl
 8009b0c:	4790      	blx	r2
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	f040 8085 	bne.w	8009c1e <_scanf_i+0x1c2>
 8009b14:	f10b 0b01 	add.w	fp, fp, #1
 8009b18:	f1bb 0f03 	cmp.w	fp, #3
 8009b1c:	d1cb      	bne.n	8009ab6 <_scanf_i+0x5a>
 8009b1e:	6863      	ldr	r3, [r4, #4]
 8009b20:	b90b      	cbnz	r3, 8009b26 <_scanf_i+0xca>
 8009b22:	230a      	movs	r3, #10
 8009b24:	6063      	str	r3, [r4, #4]
 8009b26:	6863      	ldr	r3, [r4, #4]
 8009b28:	4947      	ldr	r1, [pc, #284]	; (8009c48 <_scanf_i+0x1ec>)
 8009b2a:	6960      	ldr	r0, [r4, #20]
 8009b2c:	1ac9      	subs	r1, r1, r3
 8009b2e:	f000 f931 	bl	8009d94 <__sccl>
 8009b32:	f04f 0b00 	mov.w	fp, #0
 8009b36:	68a3      	ldr	r3, [r4, #8]
 8009b38:	6822      	ldr	r2, [r4, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d03d      	beq.n	8009bba <_scanf_i+0x15e>
 8009b3e:	6831      	ldr	r1, [r6, #0]
 8009b40:	6960      	ldr	r0, [r4, #20]
 8009b42:	f891 c000 	ldrb.w	ip, [r1]
 8009b46:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d035      	beq.n	8009bba <_scanf_i+0x15e>
 8009b4e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009b52:	d124      	bne.n	8009b9e <_scanf_i+0x142>
 8009b54:	0510      	lsls	r0, r2, #20
 8009b56:	d522      	bpl.n	8009b9e <_scanf_i+0x142>
 8009b58:	f10b 0b01 	add.w	fp, fp, #1
 8009b5c:	f1b9 0f00 	cmp.w	r9, #0
 8009b60:	d003      	beq.n	8009b6a <_scanf_i+0x10e>
 8009b62:	3301      	adds	r3, #1
 8009b64:	f109 39ff 	add.w	r9, r9, #4294967295
 8009b68:	60a3      	str	r3, [r4, #8]
 8009b6a:	6873      	ldr	r3, [r6, #4]
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	6073      	str	r3, [r6, #4]
 8009b72:	dd1b      	ble.n	8009bac <_scanf_i+0x150>
 8009b74:	6833      	ldr	r3, [r6, #0]
 8009b76:	3301      	adds	r3, #1
 8009b78:	6033      	str	r3, [r6, #0]
 8009b7a:	68a3      	ldr	r3, [r4, #8]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	60a3      	str	r3, [r4, #8]
 8009b80:	e7d9      	b.n	8009b36 <_scanf_i+0xda>
 8009b82:	f1bb 0f02 	cmp.w	fp, #2
 8009b86:	d1ae      	bne.n	8009ae6 <_scanf_i+0x8a>
 8009b88:	6822      	ldr	r2, [r4, #0]
 8009b8a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009b8e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009b92:	d1bf      	bne.n	8009b14 <_scanf_i+0xb8>
 8009b94:	2310      	movs	r3, #16
 8009b96:	6063      	str	r3, [r4, #4]
 8009b98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b9c:	e7a2      	b.n	8009ae4 <_scanf_i+0x88>
 8009b9e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009ba2:	6022      	str	r2, [r4, #0]
 8009ba4:	780b      	ldrb	r3, [r1, #0]
 8009ba6:	f805 3b01 	strb.w	r3, [r5], #1
 8009baa:	e7de      	b.n	8009b6a <_scanf_i+0x10e>
 8009bac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4650      	mov	r0, sl
 8009bb4:	4798      	blx	r3
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d0df      	beq.n	8009b7a <_scanf_i+0x11e>
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	05db      	lsls	r3, r3, #23
 8009bbe:	d50d      	bpl.n	8009bdc <_scanf_i+0x180>
 8009bc0:	42bd      	cmp	r5, r7
 8009bc2:	d909      	bls.n	8009bd8 <_scanf_i+0x17c>
 8009bc4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009bc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bcc:	4632      	mov	r2, r6
 8009bce:	4650      	mov	r0, sl
 8009bd0:	4798      	blx	r3
 8009bd2:	f105 39ff 	add.w	r9, r5, #4294967295
 8009bd6:	464d      	mov	r5, r9
 8009bd8:	42bd      	cmp	r5, r7
 8009bda:	d02d      	beq.n	8009c38 <_scanf_i+0x1dc>
 8009bdc:	6822      	ldr	r2, [r4, #0]
 8009bde:	f012 0210 	ands.w	r2, r2, #16
 8009be2:	d113      	bne.n	8009c0c <_scanf_i+0x1b0>
 8009be4:	702a      	strb	r2, [r5, #0]
 8009be6:	6863      	ldr	r3, [r4, #4]
 8009be8:	9e01      	ldr	r6, [sp, #4]
 8009bea:	4639      	mov	r1, r7
 8009bec:	4650      	mov	r0, sl
 8009bee:	47b0      	blx	r6
 8009bf0:	6821      	ldr	r1, [r4, #0]
 8009bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8009bf6:	f011 0f20 	tst.w	r1, #32
 8009bfa:	d013      	beq.n	8009c24 <_scanf_i+0x1c8>
 8009bfc:	1d1a      	adds	r2, r3, #4
 8009bfe:	f8c8 2000 	str.w	r2, [r8]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6018      	str	r0, [r3, #0]
 8009c06:	68e3      	ldr	r3, [r4, #12]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	60e3      	str	r3, [r4, #12]
 8009c0c:	1bed      	subs	r5, r5, r7
 8009c0e:	44ab      	add	fp, r5
 8009c10:	6925      	ldr	r5, [r4, #16]
 8009c12:	445d      	add	r5, fp
 8009c14:	6125      	str	r5, [r4, #16]
 8009c16:	2000      	movs	r0, #0
 8009c18:	b007      	add	sp, #28
 8009c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1e:	f04f 0b00 	mov.w	fp, #0
 8009c22:	e7ca      	b.n	8009bba <_scanf_i+0x15e>
 8009c24:	1d1a      	adds	r2, r3, #4
 8009c26:	f8c8 2000 	str.w	r2, [r8]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f011 0f01 	tst.w	r1, #1
 8009c30:	bf14      	ite	ne
 8009c32:	8018      	strhne	r0, [r3, #0]
 8009c34:	6018      	streq	r0, [r3, #0]
 8009c36:	e7e6      	b.n	8009c06 <_scanf_i+0x1aa>
 8009c38:	2001      	movs	r0, #1
 8009c3a:	e7ed      	b.n	8009c18 <_scanf_i+0x1bc>
 8009c3c:	0800a454 	.word	0x0800a454
 8009c40:	0800a079 	.word	0x0800a079
 8009c44:	08009f91 	.word	0x08009f91
 8009c48:	0800a605 	.word	0x0800a605

08009c4c <lflush>:
 8009c4c:	8983      	ldrh	r3, [r0, #12]
 8009c4e:	f003 0309 	and.w	r3, r3, #9
 8009c52:	2b09      	cmp	r3, #9
 8009c54:	d101      	bne.n	8009c5a <lflush+0xe>
 8009c56:	f7ff ba6d 	b.w	8009134 <fflush>
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	4770      	bx	lr
	...

08009c60 <__srefill_r>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	460c      	mov	r4, r1
 8009c64:	4605      	mov	r5, r0
 8009c66:	b118      	cbz	r0, 8009c70 <__srefill_r+0x10>
 8009c68:	6983      	ldr	r3, [r0, #24]
 8009c6a:	b90b      	cbnz	r3, 8009c70 <__srefill_r+0x10>
 8009c6c:	f7ff facc 	bl	8009208 <__sinit>
 8009c70:	4b3b      	ldr	r3, [pc, #236]	; (8009d60 <__srefill_r+0x100>)
 8009c72:	429c      	cmp	r4, r3
 8009c74:	d10a      	bne.n	8009c8c <__srefill_r+0x2c>
 8009c76:	686c      	ldr	r4, [r5, #4]
 8009c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	6063      	str	r3, [r4, #4]
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	069e      	lsls	r6, r3, #26
 8009c84:	d50c      	bpl.n	8009ca0 <__srefill_r+0x40>
 8009c86:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8a:	e066      	b.n	8009d5a <__srefill_r+0xfa>
 8009c8c:	4b35      	ldr	r3, [pc, #212]	; (8009d64 <__srefill_r+0x104>)
 8009c8e:	429c      	cmp	r4, r3
 8009c90:	d101      	bne.n	8009c96 <__srefill_r+0x36>
 8009c92:	68ac      	ldr	r4, [r5, #8]
 8009c94:	e7f0      	b.n	8009c78 <__srefill_r+0x18>
 8009c96:	4b34      	ldr	r3, [pc, #208]	; (8009d68 <__srefill_r+0x108>)
 8009c98:	429c      	cmp	r4, r3
 8009c9a:	bf08      	it	eq
 8009c9c:	68ec      	ldreq	r4, [r5, #12]
 8009c9e:	e7eb      	b.n	8009c78 <__srefill_r+0x18>
 8009ca0:	0758      	lsls	r0, r3, #29
 8009ca2:	d448      	bmi.n	8009d36 <__srefill_r+0xd6>
 8009ca4:	06d9      	lsls	r1, r3, #27
 8009ca6:	d405      	bmi.n	8009cb4 <__srefill_r+0x54>
 8009ca8:	2309      	movs	r3, #9
 8009caa:	602b      	str	r3, [r5, #0]
 8009cac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cb0:	81a3      	strh	r3, [r4, #12]
 8009cb2:	e7e8      	b.n	8009c86 <__srefill_r+0x26>
 8009cb4:	071a      	lsls	r2, r3, #28
 8009cb6:	d50b      	bpl.n	8009cd0 <__srefill_r+0x70>
 8009cb8:	4621      	mov	r1, r4
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f7ff f9fe 	bl	80090bc <_fflush_r>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d1e0      	bne.n	8009c86 <__srefill_r+0x26>
 8009cc4:	89a3      	ldrh	r3, [r4, #12]
 8009cc6:	60a0      	str	r0, [r4, #8]
 8009cc8:	f023 0308 	bic.w	r3, r3, #8
 8009ccc:	81a3      	strh	r3, [r4, #12]
 8009cce:	61a0      	str	r0, [r4, #24]
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	f043 0304 	orr.w	r3, r3, #4
 8009cd6:	81a3      	strh	r3, [r4, #12]
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	b91b      	cbnz	r3, 8009ce4 <__srefill_r+0x84>
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f7ff fb74 	bl	80093cc <__smakebuf_r>
 8009ce4:	89a6      	ldrh	r6, [r4, #12]
 8009ce6:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8009cea:	07b3      	lsls	r3, r6, #30
 8009cec:	d00f      	beq.n	8009d0e <__srefill_r+0xae>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	4b1e      	ldr	r3, [pc, #120]	; (8009d6c <__srefill_r+0x10c>)
 8009cf4:	491e      	ldr	r1, [pc, #120]	; (8009d70 <__srefill_r+0x110>)
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	f006 0609 	and.w	r6, r6, #9
 8009cfc:	f7ff fb02 	bl	8009304 <_fwalk>
 8009d00:	2e09      	cmp	r6, #9
 8009d02:	81a7      	strh	r7, [r4, #12]
 8009d04:	d103      	bne.n	8009d0e <__srefill_r+0xae>
 8009d06:	4621      	mov	r1, r4
 8009d08:	4628      	mov	r0, r5
 8009d0a:	f7ff f951 	bl	8008fb0 <__sflush_r>
 8009d0e:	6922      	ldr	r2, [r4, #16]
 8009d10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d12:	6963      	ldr	r3, [r4, #20]
 8009d14:	6a21      	ldr	r1, [r4, #32]
 8009d16:	6022      	str	r2, [r4, #0]
 8009d18:	4628      	mov	r0, r5
 8009d1a:	47b0      	blx	r6
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	6060      	str	r0, [r4, #4]
 8009d20:	dc1c      	bgt.n	8009d5c <__srefill_r+0xfc>
 8009d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d26:	bf17      	itett	ne
 8009d28:	2200      	movne	r2, #0
 8009d2a:	f043 0320 	orreq.w	r3, r3, #32
 8009d2e:	6062      	strne	r2, [r4, #4]
 8009d30:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8009d34:	e7bc      	b.n	8009cb0 <__srefill_r+0x50>
 8009d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d38:	2900      	cmp	r1, #0
 8009d3a:	d0cd      	beq.n	8009cd8 <__srefill_r+0x78>
 8009d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d40:	4299      	cmp	r1, r3
 8009d42:	d002      	beq.n	8009d4a <__srefill_r+0xea>
 8009d44:	4628      	mov	r0, r5
 8009d46:	f7ff fb81 	bl	800944c <_free_r>
 8009d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d4c:	6063      	str	r3, [r4, #4]
 8009d4e:	2000      	movs	r0, #0
 8009d50:	6360      	str	r0, [r4, #52]	; 0x34
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0c0      	beq.n	8009cd8 <__srefill_r+0x78>
 8009d56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009d58:	6023      	str	r3, [r4, #0]
 8009d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	e7fc      	b.n	8009d5a <__srefill_r+0xfa>
 8009d60:	0800a5a8 	.word	0x0800a5a8
 8009d64:	0800a5c8 	.word	0x0800a5c8
 8009d68:	0800a588 	.word	0x0800a588
 8009d6c:	0800a584 	.word	0x0800a584
 8009d70:	08009c4d 	.word	0x08009c4d

08009d74 <_sbrk_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4d06      	ldr	r5, [pc, #24]	; (8009d90 <_sbrk_r+0x1c>)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	602b      	str	r3, [r5, #0]
 8009d80:	f7f7 fd38 	bl	80017f4 <_sbrk>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d102      	bne.n	8009d8e <_sbrk_r+0x1a>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	b103      	cbz	r3, 8009d8e <_sbrk_r+0x1a>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	20000bb8 	.word	0x20000bb8

08009d94 <__sccl>:
 8009d94:	b570      	push	{r4, r5, r6, lr}
 8009d96:	780b      	ldrb	r3, [r1, #0]
 8009d98:	4604      	mov	r4, r0
 8009d9a:	2b5e      	cmp	r3, #94	; 0x5e
 8009d9c:	bf0b      	itete	eq
 8009d9e:	784b      	ldrbeq	r3, [r1, #1]
 8009da0:	1c48      	addne	r0, r1, #1
 8009da2:	1c88      	addeq	r0, r1, #2
 8009da4:	2200      	movne	r2, #0
 8009da6:	bf08      	it	eq
 8009da8:	2201      	moveq	r2, #1
 8009daa:	1e61      	subs	r1, r4, #1
 8009dac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009db0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009db4:	42a9      	cmp	r1, r5
 8009db6:	d1fb      	bne.n	8009db0 <__sccl+0x1c>
 8009db8:	b90b      	cbnz	r3, 8009dbe <__sccl+0x2a>
 8009dba:	3801      	subs	r0, #1
 8009dbc:	bd70      	pop	{r4, r5, r6, pc}
 8009dbe:	f082 0201 	eor.w	r2, r2, #1
 8009dc2:	54e2      	strb	r2, [r4, r3]
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009dcc:	292d      	cmp	r1, #45	; 0x2d
 8009dce:	d006      	beq.n	8009dde <__sccl+0x4a>
 8009dd0:	295d      	cmp	r1, #93	; 0x5d
 8009dd2:	d0f3      	beq.n	8009dbc <__sccl+0x28>
 8009dd4:	b909      	cbnz	r1, 8009dda <__sccl+0x46>
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	e7f0      	b.n	8009dbc <__sccl+0x28>
 8009dda:	460b      	mov	r3, r1
 8009ddc:	e7f1      	b.n	8009dc2 <__sccl+0x2e>
 8009dde:	786e      	ldrb	r6, [r5, #1]
 8009de0:	2e5d      	cmp	r6, #93	; 0x5d
 8009de2:	d0fa      	beq.n	8009dda <__sccl+0x46>
 8009de4:	42b3      	cmp	r3, r6
 8009de6:	dcf8      	bgt.n	8009dda <__sccl+0x46>
 8009de8:	3502      	adds	r5, #2
 8009dea:	4619      	mov	r1, r3
 8009dec:	3101      	adds	r1, #1
 8009dee:	428e      	cmp	r6, r1
 8009df0:	5462      	strb	r2, [r4, r1]
 8009df2:	dcfb      	bgt.n	8009dec <__sccl+0x58>
 8009df4:	1af1      	subs	r1, r6, r3
 8009df6:	3901      	subs	r1, #1
 8009df8:	1c58      	adds	r0, r3, #1
 8009dfa:	42b3      	cmp	r3, r6
 8009dfc:	bfa8      	it	ge
 8009dfe:	2100      	movge	r1, #0
 8009e00:	1843      	adds	r3, r0, r1
 8009e02:	e7e0      	b.n	8009dc6 <__sccl+0x32>

08009e04 <__sread>:
 8009e04:	b510      	push	{r4, lr}
 8009e06:	460c      	mov	r4, r1
 8009e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e0c:	f000 faa8 	bl	800a360 <_read_r>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	bfab      	itete	ge
 8009e14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e16:	89a3      	ldrhlt	r3, [r4, #12]
 8009e18:	181b      	addge	r3, r3, r0
 8009e1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e1e:	bfac      	ite	ge
 8009e20:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e22:	81a3      	strhlt	r3, [r4, #12]
 8009e24:	bd10      	pop	{r4, pc}

08009e26 <__swrite>:
 8009e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2a:	461f      	mov	r7, r3
 8009e2c:	898b      	ldrh	r3, [r1, #12]
 8009e2e:	05db      	lsls	r3, r3, #23
 8009e30:	4605      	mov	r5, r0
 8009e32:	460c      	mov	r4, r1
 8009e34:	4616      	mov	r6, r2
 8009e36:	d505      	bpl.n	8009e44 <__swrite+0x1e>
 8009e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e3c:	2302      	movs	r3, #2
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f000 fa32 	bl	800a2a8 <_lseek_r>
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	4632      	mov	r2, r6
 8009e52:	463b      	mov	r3, r7
 8009e54:	4628      	mov	r0, r5
 8009e56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5a:	f000 b9e1 	b.w	800a220 <_write_r>

08009e5e <__sseek>:
 8009e5e:	b510      	push	{r4, lr}
 8009e60:	460c      	mov	r4, r1
 8009e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e66:	f000 fa1f 	bl	800a2a8 <_lseek_r>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	bf15      	itete	ne
 8009e70:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e7a:	81a3      	strheq	r3, [r4, #12]
 8009e7c:	bf18      	it	ne
 8009e7e:	81a3      	strhne	r3, [r4, #12]
 8009e80:	bd10      	pop	{r4, pc}

08009e82 <__sclose>:
 8009e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e86:	f000 b9dd 	b.w	800a244 <_close_r>
	...

08009e8c <_strtol_l.constprop.0>:
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e92:	d001      	beq.n	8009e98 <_strtol_l.constprop.0+0xc>
 8009e94:	2b24      	cmp	r3, #36	; 0x24
 8009e96:	d906      	bls.n	8009ea6 <_strtol_l.constprop.0+0x1a>
 8009e98:	f7fe fef6 	bl	8008c88 <__errno>
 8009e9c:	2316      	movs	r3, #22
 8009e9e:	6003      	str	r3, [r0, #0]
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009f8c <_strtol_l.constprop.0+0x100>
 8009eaa:	460d      	mov	r5, r1
 8009eac:	462e      	mov	r6, r5
 8009eae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009eb2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009eb6:	f017 0708 	ands.w	r7, r7, #8
 8009eba:	d1f7      	bne.n	8009eac <_strtol_l.constprop.0+0x20>
 8009ebc:	2c2d      	cmp	r4, #45	; 0x2d
 8009ebe:	d132      	bne.n	8009f26 <_strtol_l.constprop.0+0x9a>
 8009ec0:	782c      	ldrb	r4, [r5, #0]
 8009ec2:	2701      	movs	r7, #1
 8009ec4:	1cb5      	adds	r5, r6, #2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d05b      	beq.n	8009f82 <_strtol_l.constprop.0+0xf6>
 8009eca:	2b10      	cmp	r3, #16
 8009ecc:	d109      	bne.n	8009ee2 <_strtol_l.constprop.0+0x56>
 8009ece:	2c30      	cmp	r4, #48	; 0x30
 8009ed0:	d107      	bne.n	8009ee2 <_strtol_l.constprop.0+0x56>
 8009ed2:	782c      	ldrb	r4, [r5, #0]
 8009ed4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ed8:	2c58      	cmp	r4, #88	; 0x58
 8009eda:	d14d      	bne.n	8009f78 <_strtol_l.constprop.0+0xec>
 8009edc:	786c      	ldrb	r4, [r5, #1]
 8009ede:	2310      	movs	r3, #16
 8009ee0:	3502      	adds	r5, #2
 8009ee2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009ee6:	f108 38ff 	add.w	r8, r8, #4294967295
 8009eea:	f04f 0c00 	mov.w	ip, #0
 8009eee:	fbb8 f9f3 	udiv	r9, r8, r3
 8009ef2:	4666      	mov	r6, ip
 8009ef4:	fb03 8a19 	mls	sl, r3, r9, r8
 8009ef8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009efc:	f1be 0f09 	cmp.w	lr, #9
 8009f00:	d816      	bhi.n	8009f30 <_strtol_l.constprop.0+0xa4>
 8009f02:	4674      	mov	r4, lr
 8009f04:	42a3      	cmp	r3, r4
 8009f06:	dd24      	ble.n	8009f52 <_strtol_l.constprop.0+0xc6>
 8009f08:	f1bc 0f00 	cmp.w	ip, #0
 8009f0c:	db1e      	blt.n	8009f4c <_strtol_l.constprop.0+0xc0>
 8009f0e:	45b1      	cmp	r9, r6
 8009f10:	d31c      	bcc.n	8009f4c <_strtol_l.constprop.0+0xc0>
 8009f12:	d101      	bne.n	8009f18 <_strtol_l.constprop.0+0x8c>
 8009f14:	45a2      	cmp	sl, r4
 8009f16:	db19      	blt.n	8009f4c <_strtol_l.constprop.0+0xc0>
 8009f18:	fb06 4603 	mla	r6, r6, r3, r4
 8009f1c:	f04f 0c01 	mov.w	ip, #1
 8009f20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f24:	e7e8      	b.n	8009ef8 <_strtol_l.constprop.0+0x6c>
 8009f26:	2c2b      	cmp	r4, #43	; 0x2b
 8009f28:	bf04      	itt	eq
 8009f2a:	782c      	ldrbeq	r4, [r5, #0]
 8009f2c:	1cb5      	addeq	r5, r6, #2
 8009f2e:	e7ca      	b.n	8009ec6 <_strtol_l.constprop.0+0x3a>
 8009f30:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009f34:	f1be 0f19 	cmp.w	lr, #25
 8009f38:	d801      	bhi.n	8009f3e <_strtol_l.constprop.0+0xb2>
 8009f3a:	3c37      	subs	r4, #55	; 0x37
 8009f3c:	e7e2      	b.n	8009f04 <_strtol_l.constprop.0+0x78>
 8009f3e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009f42:	f1be 0f19 	cmp.w	lr, #25
 8009f46:	d804      	bhi.n	8009f52 <_strtol_l.constprop.0+0xc6>
 8009f48:	3c57      	subs	r4, #87	; 0x57
 8009f4a:	e7db      	b.n	8009f04 <_strtol_l.constprop.0+0x78>
 8009f4c:	f04f 3cff 	mov.w	ip, #4294967295
 8009f50:	e7e6      	b.n	8009f20 <_strtol_l.constprop.0+0x94>
 8009f52:	f1bc 0f00 	cmp.w	ip, #0
 8009f56:	da05      	bge.n	8009f64 <_strtol_l.constprop.0+0xd8>
 8009f58:	2322      	movs	r3, #34	; 0x22
 8009f5a:	6003      	str	r3, [r0, #0]
 8009f5c:	4646      	mov	r6, r8
 8009f5e:	b942      	cbnz	r2, 8009f72 <_strtol_l.constprop.0+0xe6>
 8009f60:	4630      	mov	r0, r6
 8009f62:	e79e      	b.n	8009ea2 <_strtol_l.constprop.0+0x16>
 8009f64:	b107      	cbz	r7, 8009f68 <_strtol_l.constprop.0+0xdc>
 8009f66:	4276      	negs	r6, r6
 8009f68:	2a00      	cmp	r2, #0
 8009f6a:	d0f9      	beq.n	8009f60 <_strtol_l.constprop.0+0xd4>
 8009f6c:	f1bc 0f00 	cmp.w	ip, #0
 8009f70:	d000      	beq.n	8009f74 <_strtol_l.constprop.0+0xe8>
 8009f72:	1e69      	subs	r1, r5, #1
 8009f74:	6011      	str	r1, [r2, #0]
 8009f76:	e7f3      	b.n	8009f60 <_strtol_l.constprop.0+0xd4>
 8009f78:	2430      	movs	r4, #48	; 0x30
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1b1      	bne.n	8009ee2 <_strtol_l.constprop.0+0x56>
 8009f7e:	2308      	movs	r3, #8
 8009f80:	e7af      	b.n	8009ee2 <_strtol_l.constprop.0+0x56>
 8009f82:	2c30      	cmp	r4, #48	; 0x30
 8009f84:	d0a5      	beq.n	8009ed2 <_strtol_l.constprop.0+0x46>
 8009f86:	230a      	movs	r3, #10
 8009f88:	e7ab      	b.n	8009ee2 <_strtol_l.constprop.0+0x56>
 8009f8a:	bf00      	nop
 8009f8c:	0800a481 	.word	0x0800a481

08009f90 <_strtol_r>:
 8009f90:	f7ff bf7c 	b.w	8009e8c <_strtol_l.constprop.0>

08009f94 <_strtoul_l.constprop.0>:
 8009f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f98:	4f36      	ldr	r7, [pc, #216]	; (800a074 <_strtoul_l.constprop.0+0xe0>)
 8009f9a:	4686      	mov	lr, r0
 8009f9c:	460d      	mov	r5, r1
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fa4:	5de6      	ldrb	r6, [r4, r7]
 8009fa6:	f016 0608 	ands.w	r6, r6, #8
 8009faa:	d1f8      	bne.n	8009f9e <_strtoul_l.constprop.0+0xa>
 8009fac:	2c2d      	cmp	r4, #45	; 0x2d
 8009fae:	d12f      	bne.n	800a010 <_strtoul_l.constprop.0+0x7c>
 8009fb0:	782c      	ldrb	r4, [r5, #0]
 8009fb2:	2601      	movs	r6, #1
 8009fb4:	1c85      	adds	r5, r0, #2
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d057      	beq.n	800a06a <_strtoul_l.constprop.0+0xd6>
 8009fba:	2b10      	cmp	r3, #16
 8009fbc:	d109      	bne.n	8009fd2 <_strtoul_l.constprop.0+0x3e>
 8009fbe:	2c30      	cmp	r4, #48	; 0x30
 8009fc0:	d107      	bne.n	8009fd2 <_strtoul_l.constprop.0+0x3e>
 8009fc2:	7828      	ldrb	r0, [r5, #0]
 8009fc4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009fc8:	2858      	cmp	r0, #88	; 0x58
 8009fca:	d149      	bne.n	800a060 <_strtoul_l.constprop.0+0xcc>
 8009fcc:	786c      	ldrb	r4, [r5, #1]
 8009fce:	2310      	movs	r3, #16
 8009fd0:	3502      	adds	r5, #2
 8009fd2:	f04f 38ff 	mov.w	r8, #4294967295
 8009fd6:	2700      	movs	r7, #0
 8009fd8:	fbb8 f8f3 	udiv	r8, r8, r3
 8009fdc:	fb03 f908 	mul.w	r9, r3, r8
 8009fe0:	ea6f 0909 	mvn.w	r9, r9
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009fea:	f1bc 0f09 	cmp.w	ip, #9
 8009fee:	d814      	bhi.n	800a01a <_strtoul_l.constprop.0+0x86>
 8009ff0:	4664      	mov	r4, ip
 8009ff2:	42a3      	cmp	r3, r4
 8009ff4:	dd22      	ble.n	800a03c <_strtoul_l.constprop.0+0xa8>
 8009ff6:	2f00      	cmp	r7, #0
 8009ff8:	db1d      	blt.n	800a036 <_strtoul_l.constprop.0+0xa2>
 8009ffa:	4580      	cmp	r8, r0
 8009ffc:	d31b      	bcc.n	800a036 <_strtoul_l.constprop.0+0xa2>
 8009ffe:	d101      	bne.n	800a004 <_strtoul_l.constprop.0+0x70>
 800a000:	45a1      	cmp	r9, r4
 800a002:	db18      	blt.n	800a036 <_strtoul_l.constprop.0+0xa2>
 800a004:	fb00 4003 	mla	r0, r0, r3, r4
 800a008:	2701      	movs	r7, #1
 800a00a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a00e:	e7ea      	b.n	8009fe6 <_strtoul_l.constprop.0+0x52>
 800a010:	2c2b      	cmp	r4, #43	; 0x2b
 800a012:	bf04      	itt	eq
 800a014:	782c      	ldrbeq	r4, [r5, #0]
 800a016:	1c85      	addeq	r5, r0, #2
 800a018:	e7cd      	b.n	8009fb6 <_strtoul_l.constprop.0+0x22>
 800a01a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a01e:	f1bc 0f19 	cmp.w	ip, #25
 800a022:	d801      	bhi.n	800a028 <_strtoul_l.constprop.0+0x94>
 800a024:	3c37      	subs	r4, #55	; 0x37
 800a026:	e7e4      	b.n	8009ff2 <_strtoul_l.constprop.0+0x5e>
 800a028:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a02c:	f1bc 0f19 	cmp.w	ip, #25
 800a030:	d804      	bhi.n	800a03c <_strtoul_l.constprop.0+0xa8>
 800a032:	3c57      	subs	r4, #87	; 0x57
 800a034:	e7dd      	b.n	8009ff2 <_strtoul_l.constprop.0+0x5e>
 800a036:	f04f 37ff 	mov.w	r7, #4294967295
 800a03a:	e7e6      	b.n	800a00a <_strtoul_l.constprop.0+0x76>
 800a03c:	2f00      	cmp	r7, #0
 800a03e:	da07      	bge.n	800a050 <_strtoul_l.constprop.0+0xbc>
 800a040:	2322      	movs	r3, #34	; 0x22
 800a042:	f8ce 3000 	str.w	r3, [lr]
 800a046:	f04f 30ff 	mov.w	r0, #4294967295
 800a04a:	b932      	cbnz	r2, 800a05a <_strtoul_l.constprop.0+0xc6>
 800a04c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a050:	b106      	cbz	r6, 800a054 <_strtoul_l.constprop.0+0xc0>
 800a052:	4240      	negs	r0, r0
 800a054:	2a00      	cmp	r2, #0
 800a056:	d0f9      	beq.n	800a04c <_strtoul_l.constprop.0+0xb8>
 800a058:	b107      	cbz	r7, 800a05c <_strtoul_l.constprop.0+0xc8>
 800a05a:	1e69      	subs	r1, r5, #1
 800a05c:	6011      	str	r1, [r2, #0]
 800a05e:	e7f5      	b.n	800a04c <_strtoul_l.constprop.0+0xb8>
 800a060:	2430      	movs	r4, #48	; 0x30
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1b5      	bne.n	8009fd2 <_strtoul_l.constprop.0+0x3e>
 800a066:	2308      	movs	r3, #8
 800a068:	e7b3      	b.n	8009fd2 <_strtoul_l.constprop.0+0x3e>
 800a06a:	2c30      	cmp	r4, #48	; 0x30
 800a06c:	d0a9      	beq.n	8009fc2 <_strtoul_l.constprop.0+0x2e>
 800a06e:	230a      	movs	r3, #10
 800a070:	e7af      	b.n	8009fd2 <_strtoul_l.constprop.0+0x3e>
 800a072:	bf00      	nop
 800a074:	0800a481 	.word	0x0800a481

0800a078 <_strtoul_r>:
 800a078:	f7ff bf8c 	b.w	8009f94 <_strtoul_l.constprop.0>

0800a07c <__submore>:
 800a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a080:	460c      	mov	r4, r1
 800a082:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a088:	4299      	cmp	r1, r3
 800a08a:	d11d      	bne.n	800a0c8 <__submore+0x4c>
 800a08c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a090:	f7ff fa48 	bl	8009524 <_malloc_r>
 800a094:	b918      	cbnz	r0, 800a09e <__submore+0x22>
 800a096:	f04f 30ff 	mov.w	r0, #4294967295
 800a09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0a2:	63a3      	str	r3, [r4, #56]	; 0x38
 800a0a4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a0a8:	6360      	str	r0, [r4, #52]	; 0x34
 800a0aa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a0ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a0b2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a0b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a0ba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a0be:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a0c2:	6020      	str	r0, [r4, #0]
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	e7e8      	b.n	800a09a <__submore+0x1e>
 800a0c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a0ca:	0077      	lsls	r7, r6, #1
 800a0cc:	463a      	mov	r2, r7
 800a0ce:	f000 f917 	bl	800a300 <_realloc_r>
 800a0d2:	4605      	mov	r5, r0
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d0de      	beq.n	800a096 <__submore+0x1a>
 800a0d8:	eb00 0806 	add.w	r8, r0, r6
 800a0dc:	4601      	mov	r1, r0
 800a0de:	4632      	mov	r2, r6
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	f000 f8f3 	bl	800a2cc <memcpy>
 800a0e6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a0ea:	f8c4 8000 	str.w	r8, [r4]
 800a0ee:	e7e9      	b.n	800a0c4 <__submore+0x48>

0800a0f0 <_ungetc_r>:
 800a0f0:	b570      	push	{r4, r5, r6, lr}
 800a0f2:	4614      	mov	r4, r2
 800a0f4:	1c4a      	adds	r2, r1, #1
 800a0f6:	4606      	mov	r6, r0
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	d103      	bne.n	800a104 <_ungetc_r+0x14>
 800a0fc:	f04f 35ff 	mov.w	r5, #4294967295
 800a100:	4628      	mov	r0, r5
 800a102:	bd70      	pop	{r4, r5, r6, pc}
 800a104:	b118      	cbz	r0, 800a10e <_ungetc_r+0x1e>
 800a106:	6983      	ldr	r3, [r0, #24]
 800a108:	b90b      	cbnz	r3, 800a10e <_ungetc_r+0x1e>
 800a10a:	f7ff f87d 	bl	8009208 <__sinit>
 800a10e:	4b41      	ldr	r3, [pc, #260]	; (800a214 <_ungetc_r+0x124>)
 800a110:	429c      	cmp	r4, r3
 800a112:	d11d      	bne.n	800a150 <_ungetc_r+0x60>
 800a114:	6874      	ldr	r4, [r6, #4]
 800a116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a118:	07db      	lsls	r3, r3, #31
 800a11a:	d405      	bmi.n	800a128 <_ungetc_r+0x38>
 800a11c:	89a3      	ldrh	r3, [r4, #12]
 800a11e:	0598      	lsls	r0, r3, #22
 800a120:	d402      	bmi.n	800a128 <_ungetc_r+0x38>
 800a122:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a124:	f7ff f92b 	bl	800937e <__retarget_lock_acquire_recursive>
 800a128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a12c:	f023 0320 	bic.w	r3, r3, #32
 800a130:	0759      	lsls	r1, r3, #29
 800a132:	81a3      	strh	r3, [r4, #12]
 800a134:	b29a      	uxth	r2, r3
 800a136:	d42d      	bmi.n	800a194 <_ungetc_r+0xa4>
 800a138:	06d3      	lsls	r3, r2, #27
 800a13a:	d413      	bmi.n	800a164 <_ungetc_r+0x74>
 800a13c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a13e:	07dd      	lsls	r5, r3, #31
 800a140:	d4dc      	bmi.n	800a0fc <_ungetc_r+0xc>
 800a142:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a146:	d1d9      	bne.n	800a0fc <_ungetc_r+0xc>
 800a148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a14a:	f7ff f919 	bl	8009380 <__retarget_lock_release_recursive>
 800a14e:	e7d5      	b.n	800a0fc <_ungetc_r+0xc>
 800a150:	4b31      	ldr	r3, [pc, #196]	; (800a218 <_ungetc_r+0x128>)
 800a152:	429c      	cmp	r4, r3
 800a154:	d101      	bne.n	800a15a <_ungetc_r+0x6a>
 800a156:	68b4      	ldr	r4, [r6, #8]
 800a158:	e7dd      	b.n	800a116 <_ungetc_r+0x26>
 800a15a:	4b30      	ldr	r3, [pc, #192]	; (800a21c <_ungetc_r+0x12c>)
 800a15c:	429c      	cmp	r4, r3
 800a15e:	bf08      	it	eq
 800a160:	68f4      	ldreq	r4, [r6, #12]
 800a162:	e7d8      	b.n	800a116 <_ungetc_r+0x26>
 800a164:	0710      	lsls	r0, r2, #28
 800a166:	d511      	bpl.n	800a18c <_ungetc_r+0x9c>
 800a168:	4621      	mov	r1, r4
 800a16a:	4630      	mov	r0, r6
 800a16c:	f7fe ffa6 	bl	80090bc <_fflush_r>
 800a170:	b130      	cbz	r0, 800a180 <_ungetc_r+0x90>
 800a172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a174:	07d9      	lsls	r1, r3, #31
 800a176:	d4c1      	bmi.n	800a0fc <_ungetc_r+0xc>
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a17e:	e7e2      	b.n	800a146 <_ungetc_r+0x56>
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	60a0      	str	r0, [r4, #8]
 800a184:	f023 0308 	bic.w	r3, r3, #8
 800a188:	81a3      	strh	r3, [r4, #12]
 800a18a:	61a0      	str	r0, [r4, #24]
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	f043 0304 	orr.w	r3, r3, #4
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a196:	6862      	ldr	r2, [r4, #4]
 800a198:	b2ed      	uxtb	r5, r5
 800a19a:	b1d3      	cbz	r3, 800a1d2 <_ungetc_r+0xe2>
 800a19c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	dc05      	bgt.n	800a1ae <_ungetc_r+0xbe>
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7ff ff69 	bl	800a07c <__submore>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	d1e1      	bne.n	800a172 <_ungetc_r+0x82>
 800a1ae:	6823      	ldr	r3, [r4, #0]
 800a1b0:	1e5a      	subs	r2, r3, #1
 800a1b2:	6022      	str	r2, [r4, #0]
 800a1b4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a1b8:	6863      	ldr	r3, [r4, #4]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	6063      	str	r3, [r4, #4]
 800a1be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1c0:	07da      	lsls	r2, r3, #31
 800a1c2:	d49d      	bmi.n	800a100 <_ungetc_r+0x10>
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	059b      	lsls	r3, r3, #22
 800a1c8:	d49a      	bmi.n	800a100 <_ungetc_r+0x10>
 800a1ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1cc:	f7ff f8d8 	bl	8009380 <__retarget_lock_release_recursive>
 800a1d0:	e796      	b.n	800a100 <_ungetc_r+0x10>
 800a1d2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a1d4:	6920      	ldr	r0, [r4, #16]
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	f001 0101 	and.w	r1, r1, #1
 800a1dc:	b160      	cbz	r0, 800a1f8 <_ungetc_r+0x108>
 800a1de:	4298      	cmp	r0, r3
 800a1e0:	d20a      	bcs.n	800a1f8 <_ungetc_r+0x108>
 800a1e2:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800a1e6:	42a8      	cmp	r0, r5
 800a1e8:	d106      	bne.n	800a1f8 <_ungetc_r+0x108>
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	3201      	adds	r2, #1
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	6062      	str	r2, [r4, #4]
 800a1f2:	2900      	cmp	r1, #0
 800a1f4:	d184      	bne.n	800a100 <_ungetc_r+0x10>
 800a1f6:	e7e5      	b.n	800a1c4 <_ungetc_r+0xd4>
 800a1f8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a1fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a200:	6363      	str	r3, [r4, #52]	; 0x34
 800a202:	2303      	movs	r3, #3
 800a204:	63a3      	str	r3, [r4, #56]	; 0x38
 800a206:	4623      	mov	r3, r4
 800a208:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	2301      	movs	r3, #1
 800a210:	6063      	str	r3, [r4, #4]
 800a212:	e7ee      	b.n	800a1f2 <_ungetc_r+0x102>
 800a214:	0800a5a8 	.word	0x0800a5a8
 800a218:	0800a5c8 	.word	0x0800a5c8
 800a21c:	0800a588 	.word	0x0800a588

0800a220 <_write_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4d07      	ldr	r5, [pc, #28]	; (800a240 <_write_r+0x20>)
 800a224:	4604      	mov	r4, r0
 800a226:	4608      	mov	r0, r1
 800a228:	4611      	mov	r1, r2
 800a22a:	2200      	movs	r2, #0
 800a22c:	602a      	str	r2, [r5, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	f7fe fbca 	bl	80089c8 <_write>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	d102      	bne.n	800a23e <_write_r+0x1e>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	b103      	cbz	r3, 800a23e <_write_r+0x1e>
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	20000bb8 	.word	0x20000bb8

0800a244 <_close_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	4d06      	ldr	r5, [pc, #24]	; (800a260 <_close_r+0x1c>)
 800a248:	2300      	movs	r3, #0
 800a24a:	4604      	mov	r4, r0
 800a24c:	4608      	mov	r0, r1
 800a24e:	602b      	str	r3, [r5, #0]
 800a250:	f7f7 fa9c 	bl	800178c <_close>
 800a254:	1c43      	adds	r3, r0, #1
 800a256:	d102      	bne.n	800a25e <_close_r+0x1a>
 800a258:	682b      	ldr	r3, [r5, #0]
 800a25a:	b103      	cbz	r3, 800a25e <_close_r+0x1a>
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	bd38      	pop	{r3, r4, r5, pc}
 800a260:	20000bb8 	.word	0x20000bb8

0800a264 <_fstat_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	4d07      	ldr	r5, [pc, #28]	; (800a284 <_fstat_r+0x20>)
 800a268:	2300      	movs	r3, #0
 800a26a:	4604      	mov	r4, r0
 800a26c:	4608      	mov	r0, r1
 800a26e:	4611      	mov	r1, r2
 800a270:	602b      	str	r3, [r5, #0]
 800a272:	f7f7 fa97 	bl	80017a4 <_fstat>
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	d102      	bne.n	800a280 <_fstat_r+0x1c>
 800a27a:	682b      	ldr	r3, [r5, #0]
 800a27c:	b103      	cbz	r3, 800a280 <_fstat_r+0x1c>
 800a27e:	6023      	str	r3, [r4, #0]
 800a280:	bd38      	pop	{r3, r4, r5, pc}
 800a282:	bf00      	nop
 800a284:	20000bb8 	.word	0x20000bb8

0800a288 <_isatty_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4d06      	ldr	r5, [pc, #24]	; (800a2a4 <_isatty_r+0x1c>)
 800a28c:	2300      	movs	r3, #0
 800a28e:	4604      	mov	r4, r0
 800a290:	4608      	mov	r0, r1
 800a292:	602b      	str	r3, [r5, #0]
 800a294:	f7f7 fa96 	bl	80017c4 <_isatty>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d102      	bne.n	800a2a2 <_isatty_r+0x1a>
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	b103      	cbz	r3, 800a2a2 <_isatty_r+0x1a>
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	20000bb8 	.word	0x20000bb8

0800a2a8 <_lseek_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4d07      	ldr	r5, [pc, #28]	; (800a2c8 <_lseek_r+0x20>)
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	4608      	mov	r0, r1
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	602a      	str	r2, [r5, #0]
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f7f7 fa8f 	bl	80017da <_lseek>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_lseek_r+0x1e>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_lseek_r+0x1e>
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	20000bb8 	.word	0x20000bb8

0800a2cc <memcpy>:
 800a2cc:	440a      	add	r2, r1
 800a2ce:	4291      	cmp	r1, r2
 800a2d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2d4:	d100      	bne.n	800a2d8 <memcpy+0xc>
 800a2d6:	4770      	bx	lr
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2e2:	4291      	cmp	r1, r2
 800a2e4:	d1f9      	bne.n	800a2da <memcpy+0xe>
 800a2e6:	bd10      	pop	{r4, pc}

0800a2e8 <__malloc_lock>:
 800a2e8:	4801      	ldr	r0, [pc, #4]	; (800a2f0 <__malloc_lock+0x8>)
 800a2ea:	f7ff b848 	b.w	800937e <__retarget_lock_acquire_recursive>
 800a2ee:	bf00      	nop
 800a2f0:	20000baa 	.word	0x20000baa

0800a2f4 <__malloc_unlock>:
 800a2f4:	4801      	ldr	r0, [pc, #4]	; (800a2fc <__malloc_unlock+0x8>)
 800a2f6:	f7ff b843 	b.w	8009380 <__retarget_lock_release_recursive>
 800a2fa:	bf00      	nop
 800a2fc:	20000baa 	.word	0x20000baa

0800a300 <_realloc_r>:
 800a300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a304:	4680      	mov	r8, r0
 800a306:	4614      	mov	r4, r2
 800a308:	460e      	mov	r6, r1
 800a30a:	b921      	cbnz	r1, 800a316 <_realloc_r+0x16>
 800a30c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a310:	4611      	mov	r1, r2
 800a312:	f7ff b907 	b.w	8009524 <_malloc_r>
 800a316:	b92a      	cbnz	r2, 800a324 <_realloc_r+0x24>
 800a318:	f7ff f898 	bl	800944c <_free_r>
 800a31c:	4625      	mov	r5, r4
 800a31e:	4628      	mov	r0, r5
 800a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a324:	f000 f82e 	bl	800a384 <_malloc_usable_size_r>
 800a328:	4284      	cmp	r4, r0
 800a32a:	4607      	mov	r7, r0
 800a32c:	d802      	bhi.n	800a334 <_realloc_r+0x34>
 800a32e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a332:	d812      	bhi.n	800a35a <_realloc_r+0x5a>
 800a334:	4621      	mov	r1, r4
 800a336:	4640      	mov	r0, r8
 800a338:	f7ff f8f4 	bl	8009524 <_malloc_r>
 800a33c:	4605      	mov	r5, r0
 800a33e:	2800      	cmp	r0, #0
 800a340:	d0ed      	beq.n	800a31e <_realloc_r+0x1e>
 800a342:	42bc      	cmp	r4, r7
 800a344:	4622      	mov	r2, r4
 800a346:	4631      	mov	r1, r6
 800a348:	bf28      	it	cs
 800a34a:	463a      	movcs	r2, r7
 800a34c:	f7ff ffbe 	bl	800a2cc <memcpy>
 800a350:	4631      	mov	r1, r6
 800a352:	4640      	mov	r0, r8
 800a354:	f7ff f87a 	bl	800944c <_free_r>
 800a358:	e7e1      	b.n	800a31e <_realloc_r+0x1e>
 800a35a:	4635      	mov	r5, r6
 800a35c:	e7df      	b.n	800a31e <_realloc_r+0x1e>
	...

0800a360 <_read_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4d07      	ldr	r5, [pc, #28]	; (800a380 <_read_r+0x20>)
 800a364:	4604      	mov	r4, r0
 800a366:	4608      	mov	r0, r1
 800a368:	4611      	mov	r1, r2
 800a36a:	2200      	movs	r2, #0
 800a36c:	602a      	str	r2, [r5, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	f7fe fb40 	bl	80089f4 <_read>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_read_r+0x1e>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_read_r+0x1e>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	20000bb8 	.word	0x20000bb8

0800a384 <_malloc_usable_size_r>:
 800a384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a388:	1f18      	subs	r0, r3, #4
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	bfbc      	itt	lt
 800a38e:	580b      	ldrlt	r3, [r1, r0]
 800a390:	18c0      	addlt	r0, r0, r3
 800a392:	4770      	bx	lr

0800a394 <_init>:
 800a394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a396:	bf00      	nop
 800a398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a39a:	bc08      	pop	{r3}
 800a39c:	469e      	mov	lr, r3
 800a39e:	4770      	bx	lr

0800a3a0 <_fini>:
 800a3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a2:	bf00      	nop
 800a3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3a6:	bc08      	pop	{r3}
 800a3a8:	469e      	mov	lr, r3
 800a3aa:	4770      	bx	lr
